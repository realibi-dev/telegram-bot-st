// Copyright (c) 2001-2024 Aspose Pty Ltd. All Rights Reserved.
// Powered by Aspose.Cells.
/**
 * Monitor for interruption requests in all time-consuming operations.
 */
export abstract class AbstractInterruptMonitor {
    /**
     * Indicates whether interruption is requested for current operation.
     * If true then current operation will be interrupted.
     * Implementation should perform fast and efficient check here, otherwise it may become another bottleneck for the procedure.
     */
    abstract isInterruptionRequested() : boolean;
    /**
     * When procedure is interrupted, whether terminate the procedure quietly or throw an Exception.
     * Default is false, that is, when <see cref="IsInterruptionRequested"/> is true,
     * a <see cref="CellsException"/> with code <see cref="ExceptionType.Interrupted"/> will be thrown.
     */
    abstract getTerminateWithoutException() : boolean;
}

/**
 * Represents the auto fill type.
 */
export enum AutoFillType {
    /**
     * Copies the value and format of the source area to the target area
     */
    Copy = 1,
    /**
     * Automatically fills the target area with the value and format.
     */
    Default = 0,
    /**
     * Copies only the format of the source area to the target area,
     */
    Formats = 3,
    /**
     * Extend the value in the source area to the target area in the form of a series and copy format to the target area.
     */
    Series = 2,
    /**
     * Copies only the value of the source area to the target area,
     */
    Values = 4,
}

/**
 * Represents the settings of advanced filter.
 */
export class AdvancedFilter {
    /**
     * Gets the list range of this advanced filter.
     */
    getListRange() : string;
    /**
     * Gets the criteria range of this advanced filter.
     */
    getCriteriaRange() : string;
    /**
     * Gets the range where copying the resut of this advanced filter to.
     */
    getCopyToRange() : string;
}

/**
 * Represents autofiltering for the specified worksheet.
 */
export class AutoFilter {
    /**
     * Gets the data sorter.
     */
    getSorter() : DataSorter;
    /**
     * Represents the range to which the specified AutoFilter applies.
     */
    getRange() : string;
    /**
     * Indicates whether the AutoFilter button for this column is visible.
     */
    getShowFilterButton() : boolean;
    /**
     * Indicates whether the AutoFilter button for this column is visible.
     * @param value - The value to set.
     */
    setShowFilterButton(value: boolean) : void;
    /**
     * Gets the collection of the filter columns.
     */
    getFilterColumns() : FilterColumnCollection;
    /**
     * Sets the range to which the specified AutoFilter applies.
     * @param row - Row index.
     * @param startColumn - Start column index.
     * @param endColumn - End column Index.
     */
    setRange(row: number, startColumn: number, endColumn: number) : void;
    /**
     * Gets the <see cref="CellArea"/> where the specified AutoFilter applies to.
     */
    getCellArea() : CellArea;
    /**
     * Adds a filter for a filter column.
     * @param fieldIndex - The integer offset of the field on which you want to base the filter          /// (from the left of the list; the leftmost field is field 0).
     * @param criteria - The specified criteria (a string; for example, "101").          /// It only can be null or be one of the cells' value in this column.
     * 
     * @remarks
     * MS Excel 2007 supports multiple selection in a filter column.
     */
    addFilter(fieldIndex: number, criteria: string) : void;
    /**
     * Adds a date filter.
     * @param fieldIndex - The integer offset of the field on which you want to base the filter          /// (from the left of the list; the leftmost field is field 0).
     * @param dateTimeGroupingType - The grouping type
     * @param year - The year.
     * @param month - The month.
     * @param day - The day.
     * @param hour - The hour.
     * @param minute - The minute.
     * @param second - The second.
     * 
     * @remarks
     * If DateTimeGroupingType is Year, only the param year effects.
     * If DateTiemGroupingType is Month, only the param year and month effect.
     */
    addDateFilter(fieldIndex: number, dateTimeGroupingType: DateTimeGroupingType, year: number, month: number, day: number, hour: number, minute: number, second: number) : void;
    /**
     * Removes a date filter.
     * @param fieldIndex - The integer offset of the field on which you want to base the filter          /// (from the left of the list; the leftmost field is field 0).
     * @param dateTimeGroupingType - The grouping type
     * @param year - The year.
     * @param month - The month.
     * @param day - The day.
     * @param hour - The hour.
     * @param minute - The minute.
     * @param second - The second.
     * 
     * @remarks
     * If DateTimeGroupingType is Year, only the param year effects.
     * If DateTiemGroupingType is Month, only the param year and month effect.
     */
    removeDateFilter(fieldIndex: number, dateTimeGroupingType: DateTimeGroupingType, year: number, month: number, day: number, hour: number, minute: number, second: number) : void;
    /**
     * Removes a filter for a filter column.
     * @param fieldIndex - The integer offset of the field on which you want to base the filter          /// (from the left of the list; the leftmost field is field 0).
     * @param criteria - The specified criteria (a string; for example, "101").          /// It only can be null or be one of the cells' value in this column.
     */
    removeFilter(fieldIndex: number, criteria: string) : void;
    /**
     * Remove the specific filter.
     * @param fieldIndex - The specific filter index
     */
    removeFilter(fieldIndex: number) : void;
    /**
     * Filters a list with specified criteria.
     * @param fieldIndex - The integer offset of the field on which you want to base the filter  		/// (from the left of the list; the leftmost field is field 0). 		
     * @param criteria - The specified criteria (a string; for example, "101").
     * 
     * @remarks
     * Aspose.Cells will remove all other filter setting on this field as Ms Excel 97-2003.
     */
    filter(fieldIndex: number, criteria: string) : void;
    /**
     * Filter the top 10 item in the list
     * @param fieldIndex - The integer offset of the field on which you want to base the filter          /// (from the left of the list; the leftmost field is field 0).
     * @param isTop - Indicates whether filter from top or bottom
     * @param isPercent - Indicates whether the items is percent or count
     * @param itemCount - The item count
     */
    filterTop10(fieldIndex: number, isTop: boolean, isPercent: boolean, itemCount: number) : void;
    /**
     * Adds a dynamic filter.
     * @param fieldIndex - The integer offset of the field on which you want to base the filter          /// (from the left of the list; the leftmost field is field 0).
     * @param dynamicFilterType - Dynamic filter type.
     */
    dynamic_Filter(fieldIndex: number, dynamicFilterType: DynamicFilterType) : void;
    /**
     * Adds a font color filter.
     * @param fieldIndex - The integer offset of the field on which you want to base the filter          /// (from the left of the list; the leftmost field is field 0).
     * @param color - The <see cref="CellsColor"/> object.
     */
    addFontColorFilter(fieldIndex: number, color: CellsColor) : void;
    /**
     * Adds a fill color filter.
     * @param fieldIndex - The integer offset of the field on which you want to base the filter          /// (from the left of the list; the leftmost field is field 0).
     * @param pattern - The background pattern type.
     * @param foregroundColor - The foreground color.
     * @param backgroundColor - The background color.
     */
    addFillColorFilter(fieldIndex: number, pattern: BackgroundType, foregroundColor: CellsColor, backgroundColor: CellsColor) : void;
    /**
     * Adds an icon filter.
     * @param fieldIndex - The integer offset of the field on which you want to base the filter          /// (from the left of the list; the leftmost field is field 0).
     * @param iconSetType - The icon set type.
     * @param iconId - The icon id.
     * 
     * @remarks
     * Only supports to add the icon filter.
     * Not supports checking which row is visible if the filter is icon filter.
     */
    addIconFilter(fieldIndex: number, iconSetType: IconSetType, iconId: number) : void;
    /**
     * Match all blank cell in the list.
     * @param fieldIndex - The integer offset of the field on which you want to base the filter          /// (from the left of the list; the leftmost field is field 0).
     */
    matchBlanks(fieldIndex: number) : void;
    /**
     * Match all not blank cell in the list.
     * @param fieldIndex - The integer offset of the field on which you want to base the filter          /// (from the left of the list; the leftmost field is field 0).
     */
    matchNonBlanks(fieldIndex: number) : void;
    /**
     * Unhide all rows.
     */
    showAll() : void;
    /**
     * Refresh auto filters to hide or unhide the rows.
     * @returns
     * Returns all hidden rows' indexes.
     */
    refresh() : number[];
    /**
     * Gets all hidden rows' indexes.
     * @param hideRows - If true, hide the filtered rows.
     * @returns
     * Returns all hidden rows indexes.
     */
    refresh(hideRows: boolean) : number[];
}

/**
 * Represents the type of auto fitting merged cells.
 */
export enum AutoFitMergedCellsType {
    /**
     * Ignore merged cells.
     * 
     * @remarks
     * Default.
     */
    None = 0,
    /**
     * Only expands the height of the first row.
     */
    FirstLine = 1,
    /**
     * Only expands the height of the last row.
     */
    LastLine = 2,
    /**
     * Only expands the height of each row.
     */
    EachLine = 3,
}

/**
 * Represents the type of auto fitting wrapped text.
 */
export enum AutoFitWrappedTextType {
    /**
     * Works as MS Excel.
     */
    Default = 0,
    /**
     * Auto fit width with the longest paragraph.
     */
    Paragraph = 1,
}

/**
 * Utility for instantiating classes of Cells model.
 */
export class CellsFactory {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Creates a new style.
     * @returns
     * Returns a style object.
     */
    createStyle() : Style;
}

/**
 * Represents the cell value and corresponding type.
 */
export class CellValue {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets/sets the type of cell value.
     */
    getType() : CellValueType;
    /**
     * Gets/sets the type of cell value.
     * @param value - The value to set.
     */
    setType(value: CellValueType) : void;
}

/**
 * Represents axis bins
 */
export class AxisBins {
    /**
     * Indicates whether grouping data by category
     */
    isByCategory() : boolean;
    /**
     * Indicates whether grouping data by category
     * @param value - The value to set.
     */
    setIsByCategory(value: boolean) : void;
    /**
     * Indicates whether the axis bins are automatic.
     */
    isAutomatic() : boolean;
    /**
     * Indicates whether the axis bins are automatic.
     * @param value - The value to set.
     */
    setIsAutomatic(value: boolean) : void;
    /**
     * Gets or sets the width of axis bin
     */
    getWidth() : number;
    /**
     * Gets or sets the width of axis bin
     * @param value - The value to set.
     */
    setWidth(value: number) : void;
    /**
     * Gets or set the count of axis bins
     */
    getCount() : number;
    /**
     * Gets or set the count of axis bins
     * @param value - The value to set.
     */
    setCount(value: number) : void;
    /**
     * Gets or set the overflow of axis bins
     */
    getOverflow() : number;
    /**
     * Gets or set the overflow of axis bins
     * @param value - The value to set.
     */
    setOverflow(value: number) : void;
    /**
     * Gets or set the underflow of axis bins
     */
    getUnderflow() : number;
    /**
     * Gets or set the underflow of axis bins
     * @param value - The value to set.
     */
    setUnderflow(value: number) : void;
    /**
     * Reset the overflow
     * 
     * @remarks
     * NOTE: This method is now obsolete.
     * This is an internal method that does not need to be called externally to avoid causing problems.
     * This property will be removed 12 months later since July 2024.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * This is an internal method.
     */
    resetOverflow() : void;
    /**
     * Reset the underflow
     * 
     * @remarks
     * NOTE: This method is now obsolete.
     * This is an internal method that does not need to be called externally to avoid causing problems.
     * This property will be removed 12 months later since July 2024.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * This is an internal method.
     */
    resetUnderflow() : void;
}

/**
 * Represents the options for calculating chart.
 */
export class ChartCalculateOptions {
    /**
     * Creates the options for calculating chart.
     */
    constructor();
    /**
     * Whether update all data points when performing the chart calculation. Default: False.
     * When you want to get the value for each data point in the chart specifically, set it to true.
     * If this parameter is set to True, the new data points may be generated when chart is calculated. This could make the Excel file larger.
     */
    getUpdateAllPoints() : boolean;
    /**
     * Whether update all data points when performing the chart calculation. Default: False.
     * When you want to get the value for each data point in the chart specifically, set it to true.
     * If this parameter is set to True, the new data points may be generated when chart is calculated. This could make the Excel file larger.
     * @param value - The value to set.
     */
    setUpdateAllPoints(value: boolean) : void;
}

/**
 * Represents the globalization settings for chart.
 */
export abstract class ChartGlobalizationSettings {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets the name of Series in the Chart.
     */
    abstract getSeriesName() : string;
    /**
     * Gets the name of Chart Title.
     */
    abstract getChartTitleName() : string;
    /**
     * Gets the name of increase for Legend.
     */
    abstract getLegendIncreaseName() : string;
    /**
     * Gets the name of Decrease for Legend.
     */
    abstract getLegendDecreaseName() : string;
    /**
     * Gets the name of Total for Legend.
     */
    abstract getLegendTotalName() : string;
    /**
     * Gets the name of Title for Axis.
     */
    abstract getAxisTitleName() : string;
    /**
     * Gets the name of "Other" labels for Chart.
     */
    abstract getOtherName() : string;
    /**
     * Gets the Name of Axis Unit.
     */
    abstract getAxisUnitName(type: DisplayUnitType) : string;
}

/**
 * Represents the text direction type of the chart.
 */
export enum ChartTextDirectionType {
    /**
     * Horizontal direction type.
     */
    Horizontal = 0,
    /**
     * Vertical direction type.
     */
    Vertical = 1,
    /**
     * Rotate 90 angle.
     */
    Rotate90 = 2,
    /**
     * Rotate 270 angle.
     */
    Rotate270 = 3,
    /**
     * Stacked text.
     */
    Stacked = 4,
}

/**
 * Represents the type of data plot by row or column.
 */
export enum PlotDataByType {
    /**
     * By row.
     */
    Row = 0,
    /**
     * By column.
     */
    Column = 1,
}

/**
 * Represents the text alignment type for the tick labels on the axis
 */
export enum TickLabelAlignmentType {
    /**
     * Represents the text shall be centered.
     */
    Center = 0,
    /**
     * Represents the text shall be left justified.
     */
    Left = 1,
    /**
     * Represents the text shall be right justified.
     */
    Right = 2,
}

/**
 * Represents a tick label in the chart.
 */
export class TickLabelItem {
    /**
     * X coordinates of Ticklabel item in ratio of chart width.
     */
    getX() : number;
    /**
     * Y coordinates of Ticklabel item in ratio of chart height.
     */
    getY() : number;
    /**
     * Width of Ticklabel item in ratio of chart width.
     */
    getWidth() : number;
    /**
     * Height of Ticklabel item in ratio of chart height.
     */
    getHeight() : number;
}

/**
 * Specifies the method used to binarize image.
 */
export enum ImageBinarizationMethod {
    /**
     * Specifies threshold method.
     */
    Threshold = 0,
    /**
     * Specifies dithering using Floyd-Steinberg error diffusion method.
     */
    FloydSteinbergDithering = 1,
}

/**
 * Represents comment title type while rendering when comment is set to display at end of sheet.
 */
export enum CommentTitleType {
    /**
     * Represents comment title cell.
     */
    Cell = 0,
    /**
     * Represents comment title comment.
     */
    Comment = 1,
    /**
     * Represents comment title note.
     */
    Note = 2,
    /**
     * Represents comment title reply.
     */
    Reply = 3,
}

/**
 * Font for rendering.
 */
export class RenderingFont {
    /**
     * Initializes a new instance of the <see cref="RenderingFont"/>
     * @param fontName - font name
     * @param fontSize - font size in points
     */
    constructor(fontName: string, fontSize: number);
    /**
     * Gets name of the font.
     */
    getName() : string;
    /**
     * Gets size of the font in points.
     */
    getSize() : number;
    /**
     * Gets or sets bold for the font.
     */
    getBold() : boolean;
    /**
     * Gets or sets bold for the font.
     * @param value - The value to set.
     */
    setBold(value: boolean) : void;
    /**
     * Gets or sets italic for the font.
     */
    getItalic() : boolean;
    /**
     * Gets or sets italic for the font.
     * @param value - The value to set.
     */
    setItalic(value: boolean) : void;
    /**
     * Gets or sets color for the font.
     */
    getColor() : Color;
    /**
     * Gets or sets color for the font.
     * @param value - The value to set.
     */
    setColor(value: Color) : void;
}

/**
 * Watermark for rendering.
 */
export class RenderingWatermark {
    /**
     * Creates instance of image watermark.
     * @param imageData - 
     */
    constructor(imageData: number[]);
    /**
     * Creates instance of text watermark.
     * @param text - watermark text
     * @param renderingFont - watermark font
     */
    constructor(text: string, renderingFont: RenderingFont);
    /**
     * Gets or sets roation of the watermark in degrees.
     */
    getRotation() : number;
    /**
     * Gets or sets roation of the watermark in degrees.
     * @param value - The value to set.
     */
    setRotation(value: number) : void;
    /**
     * Gets or sets scale relative to target page in percent.
     */
    getScaleToPagePercent() : number;
    /**
     * Gets or sets scale relative to target page in percent.
     * @param value - The value to set.
     */
    setScaleToPagePercent(value: number) : void;
    /**
     * Gets or sets opacity of the watermark in range [0, 1].
     */
    getOpacity() : number;
    /**
     * Gets or sets opacity of the watermark in range [0, 1].
     * @param value - The value to set.
     */
    setOpacity(value: number) : void;
    /**
     * Indicates whether the watermark is placed behind page contents.
     */
    isBackground() : boolean;
    /**
     * Indicates whether the watermark is placed behind page contents.
     * @param value - The value to set.
     */
    setIsBackground(value: boolean) : void;
    /**
     * Gets text of the watermark.
     */
    getText() : string;
    /**
     * Gets font of the watermark.
     */
    getFont() : RenderingFont;
    /**
     * Gets image of the watermark.
     */
    getImage() : number[];
    /**
     * Gets or sets horizontal alignment of the watermark to the page.
     * 
     * @remarks
     * Only Left, Center, Right is valid. Default is Left.
     */
    getHAlignment() : TextAlignmentType;
    /**
     * Gets or sets horizontal alignment of the watermark to the page.
     * @param value - The value to set.
     * 
     * @remarks
     * Only Left, Center, Right is valid. Default is Left.
     */
    setHAlignment(value: TextAlignmentType) : void;
    /**
     * Gets or sets vertical alignment of the watermark to the page.
     * 
     * @remarks
     * Only Top, Center, Bottom is valid. Default is Top.
     */
    getVAlignment() : TextAlignmentType;
    /**
     * Gets or sets vertical alignment of the watermark to the page.
     * @param value - The value to set.
     * 
     * @remarks
     * Only Top, Center, Bottom is valid. Default is Top.
     */
    setVAlignment(value: TextAlignmentType) : void;
    /**
     * Gets or sets offset value to <see cref="HAlignment"/>
     */
    getOffsetX() : number;
    /**
     * Gets or sets offset value to <see cref="HAlignment"/>
     * @param value - The value to set.
     */
    setOffsetX(value: number) : void;
    /**
     * Gets or sets offset value to <see cref="VAlignment"/>
     */
    getOffsetY() : number;
    /**
     * Gets or sets offset value to <see cref="VAlignment"/>
     * @param value - The value to set.
     */
    setOffsetY(value: number) : void;
}

/**
 * Describes a set of sheets.
 */
export class SheetSet {
    /**
     * Creates a sheet set based on exact sheet indexes.
     * @param sheets - zero based sheet indexes.
     * 
     * @remarks
     * If a sheet is encountered that is not in the workbook, an exception will be thrown during rendering.
     */
    constructor(sheets: number[]);
    /**
     * Gets a set with active sheet of the workbook.
     */
    static getActive() : SheetSet;
    /**
     * Gets a set with visible sheets of the workbook in their original order.
     */
    static getVisible() : SheetSet;
    /**
     * Gets a set with all sheets of the workbook in their original order.
     */
    static getAll() : SheetSet;
}

/**
 * Represents which kind of rows should be ajusted.
 * 
 * @remarks
 */
export enum AdjustFontSizeForRowType {
    /**
     * No adjsut.
     */
    None = 0,
    /**
     * If the row is empty, change font size to fit row height.
     */
    EmptyRows = 1,
}

/**
 * Represents the type when exporting to slides.
 */
export enum SlideViewType {
    /**
     * Exporting as view in MS Excel.
     */
    View = 0,
    /**
     * Exporting as printing.
     */
    Print = 1,
}

/**
 * Represents the setting of deleting blank cells/rows/columns.
 */
export class DeleteBlankOptions extends DeleteOptions {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: DeleteOptions);
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Whether one cell will be taken as blank when its value is empty string. Default value is true.
     */
    getEmptyStringAsBlank() : boolean;
    /**
     * Whether one cell will be taken as blank when its value is empty string. Default value is true.
     * @param value - The value to set.
     */
    setEmptyStringAsBlank(value: boolean) : void;
    /**
     * Whether one cell will be taken as blank when it is formula and the calculated result is null or empty string. Default value is false.
     * 
     * @remarks
     * Generally user should make sure the formulas have been calculated before deleting operation with this property as true.
     * Otherwise all newly cretaed formulas by normal apis such as <see cref="Cell.Formula"/> will be taken as blank and may be deleted
     * because before calculation their calculated results are all null.
     */
    getEmptyFormulaValueAsBlank() : boolean;
    /**
     * Whether one cell will be taken as blank when it is formula and the calculated result is null or empty string. Default value is false.
     * @param value - The value to set.
     * 
     * @remarks
     * Generally user should make sure the formulas have been calculated before deleting operation with this property as true.
     * Otherwise all newly cretaed formulas by normal apis such as <see cref="Cell.Formula"/> will be taken as blank and may be deleted
     * because before calculation their calculated results are all null.
     */
    setEmptyFormulaValueAsBlank(value: boolean) : void;
}

/**
 * Represents the preset theme gradient type.
 */
export enum PresetThemeGradientType {
    /**
     * Light gradient
     */
    LightGradient = 0,
    /**
     * Top spotlight
     */
    TopSpotlight = 1,
    /**
     * Medium gradient
     */
    MediumGradient = 2,
    /**
     * Bottom spotlight
     */
    BottomSpotlight = 3,
    /**
     * Radial gradient
     */
    RadialGradient = 4,
}

/**
 * Represents the shape guide.
 */
export class BaseShapeGuide {
}

/**
 * just for vml
 * Encapsulates a shape guide specifies the presence of a shape
 * guide that will be used to govern the geometry of the specified shape
 */
export class VmlShapeGuide extends BaseShapeGuide {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: BaseShapeGuide);
}

/**
 * Type of combining characters.
 */
export enum EquationCombiningCharacterType {
    /**
     * Use unknown type when not found in existing type.
     */
    Unknown = -1,
    /**
     * "̇" Unicode: u0307
     * Combining Dot Above
     */
    DotAbove = 0,
    /**
     * "̈" Unicode: u0308
     * Combining Diaeresis
     */
    Diaeresis = 1,
    /**
     * "⃛" Unicode: u20db
     * Combining Three Dots Above
     */
    ThreeDotsAbove = 2,
    /**
     * "̂" Unicode: u0302
     * Combining Circumflex Accent
     */
    CircumflexAccent = 3,
    /**
     * "̌" Unicode: u030c
     * Combining Caron
     */
    Caron = 4,
    /**
     * "́" Unicode: u0301
     * Combining Acute Accent
     */
    AcuteAccent = 5,
    /**
     * "̀" Unicode: u0300
     * Combining Grave Accent
     */
    GraveAccent = 6,
    /**
     * "̆" Unicode: u0306
     * Combining Combining Breve
     */
    Breve = 7,
    /**
     * "̃" Unicode: u0303
     * Combining Tilde
     */
    Tilde = 8,
    /**
     * "̅" Unicode: u0305
     * Combining Overline
     */
    Overline = 9,
    /**
     * "̿" Unicode: u033f
     * Combining Double Overline
     */
    DoubleOverline = 10,
    /**
     * "⏞" Unicode: u23de
     * Combining Top Curly Bracket
     */
    TopCurlyBracket = 11,
    /**
     * "⏟" Unicode: u23df
     * Combining Bottom Curly Bracket
     */
    BottomCurlyBracket = 12,
    /**
     * "⃖" Unicode: u20d6
     * Combining Left Arrow Above
     */
    LeftArrowAbove = 13,
    /**
     * "⃗" Unicode: u20d7
     * Combining Right Arrow Above
     */
    RightArrowAbove = 14,
    /**
     * "⃡" Unicode: u20e1
     * Combining Left Right Arrow Above
     */
    LeftRightArrowAbove = 15,
    /**
     * "⃐" Unicode: u20d0
     * Combining Left Harpoon Above
     */
    LeftHarpoonAbove = 16,
    /**
     * "⃑" Unicode: u20d1
     * Combining Right Harpoon Above
     */
    RightHarpoonAbove = 17,
    /**
     * "←" Unicode: u2190
     * Leftwards Arrow
     */
    LeftwardsArrow = 18,
    /**
     * "→" Unicode: u2192
     * Rightwards Arrow
     */
    RightwardsArrow = 19,
    /**
     * "↔" Unicode: u2194
     * Left Right Arrow
     */
    LeftRightArrow = 20,
    /**
     * "⇐" Unicode: u21d0
     * Leftwards Double Arrow
     */
    LeftwardsDoubleArrow = 21,
    /**
     * "⇒" Unicode: u21d2
     * Rightwards Double Arrow
     */
    RightwardsDoubleArrow = 22,
    /**
     * "⇔" Unicode: u21d4
     * Left Right Double Arrow
     */
    LeftRightDoubleArrow = 23,
}

/**
 * Mathematical Operators Type
 */
export enum EquationMathematicalOperatorType {
    /**
     * Use unknown type when not found in existing type.
     */
    Unknown = -1,
    /**
     * "∀" Unicode:\u2200
     */
    ForAll = 0,
    /**
     * "∁" Unicode:\u2201
     */
    Complement = 1,
    /**
     * "∂" Unicode:\u2202
     */
    PartialDifferential = 2,
    /**
     * "∃" Unicode:\u2203
     */
    Exists = 3,
    /**
     * "∄" Unicode:\u2204
     */
    NotExists = 4,
    /**
     * "∅" Unicode:\u2205
     */
    EmptySet = 5,
    /**
     * "∆" Unicode:\u2206
     */
    Increment = 6,
    /**
     * "∇" Unicode:\u2207
     */
    Nabla = 7,
    /**
     * "∈" Unicode:\u2208
     */
    ElementOf = 8,
    /**
     * "∉" Unicode:\u2209
     */
    NotAnElementOf = 9,
    /**
     * "∊" Unicode:\u220a
     */
    SmallElementOf = 10,
    /**
     * "∋" Unicode:\u220b
     */
    Contain = 11,
    /**
     * "∌" Unicode:\u220c
     */
    NotContain = 12,
    /**
     * "∍" Unicode:\u220d
     */
    SmallContain = 13,
    /**
     * "∎" Unicode:\u220e
     */
    EndOfProof = 14,
    /**
     * "∏" Unicode:\u220f
     */
    NaryProduct = 15,
    /**
     * "∐" Unicode:\u2210
     */
    NaryCoproduct = 16,
    /**
     * "∑" Unicode:\u2211
     */
    NarySummation = 17,
    /**
     * "∧" Unicode:\u2227
     */
    LogicalAnd = 18,
    /**
     * "∨" Unicode:\u2228
     */
    LogicalOr = 19,
    /**
     * "∩" Unicode:\u2229
     */
    Intersection = 20,
    /**
     * "∪" Unicode:\u222a
     */
    Union = 21,
    /**
     * "∫" Unicode:\u222b
     */
    Integral = 22,
    /**
     * "∬" Unicode:\u222c
     */
    DoubleIntegral = 23,
    /**
     * "∭" Unicode:\u222d
     */
    TripleIntegral = 24,
    /**
     * "∮" Unicode:\u222e
     */
    ContourIntegral = 25,
    /**
     * "∯" Unicode:\u222f
     */
    SurfaceIntegral = 26,
    /**
     * "∰" Unicode:\u2230
     */
    VolumeIntegral = 27,
    /**
     * "∱" Unicode:\u2231
     */
    Clockwise = 28,
    /**
     * "∲" Unicode:\u2232
     */
    ClockwiseContourIntegral = 29,
    /**
     * "∳" Unicode:\u2233
     */
    AnticlockwiseContourIntegral = 30,
    /**
     * "⋀" Unicode:\u22c0
     */
    NaryLogicalAnd = 31,
    /**
     * "⋁" Unicode:\u22c1
     */
    NaryLogicalOr = 32,
    /**
     * "⋂" Unicode:\u22c2
     */
    NaryIntersection = 33,
    /**
     * "⋃" Unicode:\u22c3
     */
    NaryUnion = 34,
}

/**
 * This specifies the default vertical justification of equations in the document.
 */
export enum EquationVerticalJustificationType {
    /**
     * top
     */
    Top = 0,
    /**
     * center
     */
    Center = 1,
    /**
     * bottom
     */
    Bottom = 2,
}

/**
 * This class specifies the Function-Apply equation, which consists of a function name and an argument acted upon.
 * The types of the name and argument components are 'EquationNodeType.FunctionName' and 'EquationNodeType.Base' respectively.
 */
export class FunctionEquationNode extends EquationNode {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: EquationNode);
}

/**
 * This class specifies the Group-Character function, consisting of a character drawn above or below text, often with the purpose of visually grouping items.
 */
export class GroupCharacterEquationNode extends EquationNode {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: EquationNode);
    /**
     * Specifies a symbol(default U+23DF).
     * It is strongly recommended to use attribute ChrType to set accent character.
     * Use this property setting if you cannot find the character you need in a known type.
     * 
     * @remarks
     * It should be noted that this property only accepts one character, and if multiple characters are passed in, only the first character is accepted.
     */
    getGroupChr() : string;
    /**
     * Specifies a symbol(default U+23DF).
     * It is strongly recommended to use attribute ChrType to set accent character.
     * Use this property setting if you cannot find the character you need in a known type.
     * @param value - The value to set.
     * 
     * @remarks
     * It should be noted that this property only accepts one character, and if multiple characters are passed in, only the first character is accepted.
     */
    setGroupChr(value: string) : void;
    /**
     * Specify combining characters by type value.
     */
    getChrType() : EquationCombiningCharacterType;
    /**
     * Specify combining characters by type value.
     * @param value - The value to set.
     */
    setChrType(value: EquationCombiningCharacterType) : void;
    /**
     * This attribute specifies the position of the character in the object
     */
    getPosition() : EquationCharacterPositionType;
    /**
     * This attribute specifies the position of the character in the object
     * @param value - The value to set.
     */
    setPosition(value: EquationCharacterPositionType) : void;
    /**
     * This attribute, combined with pos of groupChrPr, specifies the vertical layout of the groupChr object. Where pos specifies the position of the grouping character, vertJc specifies the alignment of the object with respect to the baseline.
     */
    getVertJc() : EquationCharacterPositionType;
    /**
     * This attribute, combined with pos of groupChrPr, specifies the vertical layout of the groupChr object. Where pos specifies the position of the grouping character, vertJc specifies the alignment of the object with respect to the baseline.
     * @param value - The value to set.
     */
    setVertJc(value: EquationCharacterPositionType) : void;
}

/**
 * This class specifies an equation or mathematical expression. All mathematical text of equations or mathematical expressions are contained by this class.
 */
export class MathematicalEquationNode extends EquationNode {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: EquationNode);
}

/**
 * This class specifies the Matrix equation, consisting of one or more elements laid out in one or more rows and one or more columns.
 */
export class MatrixEquationNode extends EquationNode {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: EquationNode);
    /**
     * This attribute specifies the justification of the matrix. Text outside of the matrix can be aligned with the bottom, top, or center of a matrix function. Default, the matrix assumes center justification.
     */
    getBaseJc() : EquationVerticalJustificationType;
    /**
     * This attribute specifies the justification of the matrix. Text outside of the matrix can be aligned with the bottom, top, or center of a matrix function. Default, the matrix assumes center justification.
     * @param value - The value to set.
     */
    setBaseJc(value: EquationVerticalJustificationType) : void;
    /**
     * This attribute specifies the Hide Placeholders property on a matrix. When this property is on, placeholders do not appear in the matrix.Default, placeholders do appear such that the locations where text can be inserted are made visible.
     */
    isHidePlaceholder() : boolean;
    /**
     * This attribute specifies the Hide Placeholders property on a matrix. When this property is on, placeholders do not appear in the matrix.Default, placeholders do appear such that the locations where text can be inserted are made visible.
     * @param value - The value to set.
     */
    setIsHidePlaceholder(value: boolean) : void;
}

/**
 * Definition of custom function for calculating with user's custom engine.
 */
export abstract class CustomFunctionDefinition {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets the indices of given custom function's parameters that need to be calculated in array mode.
     * @param functionName - Name of the custom function.
     * @returns
     * Indices of the parameters that need to be calculated in array mode for given custom function.
     * Default is null, there is no parameter which needs to be calculated in array mode for the custom function.
     * 
     * @remarks
     * For an expression that needs to be calculated, taking A:A+B:B as an example:
     * Generally in value mode it will be calculated to a single value according to current cell base.
     * But in array mode, all values of A1+B1,A2+B2,A3+B3,... will be calculated and used for the calculation.
     */
    abstract getArrayModeParameters(functionName: string) : number[];
}

/**
 * Represents options when importing an ebook file.
 */
export class EbookLoadOptions extends HtmlLoadOptions {
    /**
     * Creates an options of loading the ebook file.
     */
    constructor();
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: HtmlLoadOptions);
    /**
     * Creates an options of loading the ebook file.
     * @param loadFormat - The loading format
     */
    constructor(loadFormat: LoadFormat);
}

/**
 * Represents the option when import table from html.
 */
export class HtmlTableLoadOption {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Get or set the index of table to import from html.
     */
    getTableIndex() : number;
    /**
     * Get or set the index of table to import from html.
     * @param value - The value to set.
     */
    setTableIndex(value: number) : void;
    /**
     * Get or set the id of table to import from html
     */
    getId() : string;
    /**
     * Get or set the id of table to import from html
     * @param value - The value to set.
     */
    setId(value: string) : void;
    /**
     * Get or set the name of table to import from html
     * @deprecated
     * Please use HtmlTableLoadOption.Id instead
     */
    getName() : string;
    /**
     * Get or set the name of table to import from html
     * @param value - The value to set.
     * @deprecated
     * Please use HtmlTableLoadOption.Id instead
     */
    setName(value: string) : void;
    /**
     * Get or set the original index of worksheet in the html.
     */
    getOriginalSheetIndex() : number;
    /**
     * Get or set the original index of worksheet in the html.
     * @param value - The value to set.
     */
    setOriginalSheetIndex(value: number) : void;
    /**
     * Get or set the target index of worksheet where the table is to be located.
     */
    getTargetSheetIndex() : number;
    /**
     * Get or set the target index of worksheet where the table is to be located.
     * @param value - The value to set.
     */
    setTargetSheetIndex(value: number) : void;
    /**
     * Indicates whether generate list objects from imported table.
     * The default value is false.
     */
    getTableToListObject() : boolean;
    /**
     * Indicates whether generate list objects from imported table.
     * The default value is false.
     * @param value - The value to set.
     */
    setTableToListObject(value: boolean) : void;
}

/**
 * Represents the table options when importing html.
 */
export class HtmlTableLoadOptionCollection {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets the <see cref="HtmlTableLoadOption"/> element at the specified index.
     * @param index - The zero based index of the element.
     * @returns
     * The element at the specified index.
     */
    get(index: number) : HtmlTableLoadOption;
    /**
     * Indicates whether generate list objects from imported tables.
     * The default value is false.
     */
    getTableToListObject() : boolean;
    /**
     * Indicates whether generate list objects from imported tables.
     * The default value is false.
     * @param value - The value to set.
     */
    setTableToListObject(value: boolean) : void;
    /**
     * Adds one HtmlTableLoadOption into this collection.
     * @param item - one HtmlTableLoadOption
     * @returns
     * the index of the added item
     */
    add(item: HtmlTableLoadOption) : number;
    /**
     * Add a HtmlTableLoadOption to the list.
     * @param tableIndex - Table index
     */
    add(tableIndex: number) : number;
    /**
     * Add a HtmlTableLoadOption to the list.
     * @param tableId - Table ID
     */
    add(tableId: string) : number;
    /**
     * Add a HtmlTableLoadOption to the list.
     * @param tableIndex - Table index
     * @param targetSheetIndex - The target index of worksheet in Excel
     */
    add(tableIndex: number, targetSheetIndex: number) : number;
    /**
     * Add a HtmlTableLoadOption to the list.
     * @param tableId - Table ID
     * @param targetSheetIndex - The target index of worksheet in Excel
     */
    add(tableId: string, targetSheetIndex: number) : number;
    /**
     * Add a HtmlTableLoadOption to the list.
     * @param tableIndex - Table index
     * @param targetSheetIndex - The target index of worksheet in Excel
     * @param originalSheetIndex - The original index of worksheet in the html
     */
    add(tableIndex: number, targetSheetIndex: number, originalSheetIndex: number) : number;
    /**
     * Add a HtmlTableLoadOption to the list.
     * @param tableId - Table ID
     * @param targetSheetIndex - The target index of worksheet in Excel
     * @param originalSheetIndex - The original index of worksheet in the html
     */
    add(tableId: string, targetSheetIndex: number, originalSheetIndex: number) : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Rerepsents the options of calcuating the pivot table.
 */
export class PivotTableCalculateOption {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Indicates whether refreshing data source of the pivottable.
     */
    getRefreshData() : boolean;
    /**
     * Indicates whether refreshing data source of the pivottable.
     * @param value - The value to set.
     */
    setRefreshData(value: boolean) : void;
    /**
     * Indicates whether refreshing charts are based on this pivot table.
     */
    getRefreshCharts() : boolean;
    /**
     * Indicates whether refreshing charts are based on this pivot table.
     * @param value - The value to set.
     */
    setRefreshCharts(value: boolean) : void;
    /**
     * Represents how to reserve missing pivot items.
     * 
     * @remarks
     * Only works when <see cref="RefreshData"/> is true.
     */
    getReserveMissingPivotItemType() : ReserveMissingPivotItemType;
    /**
     * Represents how to reserve missing pivot items.
     * @param value - The value to set.
     * 
     * @remarks
     * Only works when <see cref="RefreshData"/> is true.
     */
    setReserveMissingPivotItemType(value: ReserveMissingPivotItemType) : void;
}

/**
 * Indicates type of loading tables when some tables are in a sheet.
 */
export enum LoadNumbersTableType {
    /**
     */
    OneTablePerSheet = 1,
    /**
     */
    OverrideOtherTables = 2,
    /**
     */
    TileTables = 4,
}

/**
 * Represents the options of loading Apple Numbers files.
 */
export class NumbersLoadOptions extends LoadOptions {
    /**
     * Constructor.
     */
    constructor();
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: LoadOptions);
    /**
     * Gets and sets the type of loading multiple tables in one worksheet.
     */
    getLoadTableType() : LoadNumbersTableType;
    /**
     * Gets and sets the type of loading multiple tables in one worksheet.
     * @param value - The value to set.
     */
    setLoadTableType(value: LoadNumbersTableType) : void;
}

/**
 * Open Document Format version type.
 */
export enum OpenDocumentFormatVersionType {
    /**
     * None strict.
     * 
     * @remarks
     * There are some difference between Excel and ODF.
     * In order to keep the data of Excel file, we can not follow the strict of ODF.
     */
    None = 0,
    /**
     * ODF Version 1.1
     */
    Odf11 = 1,
    /**
     * ODF Version 1.2
     */
    Odf12 = 2,
    /**
     * ODF Version 1.3
     */
    Odf13 = 3,
}

/**
 * Represents an item of custom grouped field.
 */
export class CustomPiovtFieldGroupItem {
    /**
     * The constructor of custom group item of pivot field.
     * @param name - The name of group item
     * @param itemIndexes - All indexes to the items of base pivot field.
     */
    constructor(name: string, itemIndexes: number[]);
}

/**
 * Rrepsents the discrete group of pivot field
 */
export class PivotDiscreteGroupSettings extends PivotFieldGroupSettings {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: PivotFieldGroupSettings);
    /**
     * Gets the group type.
     */
    getType() : PivotFieldGroupType;
    /**
     * Gets the discrete items.
     */
    getItems() : CustomPiovtFieldGroupItem[];
}

/**
 * Represents the list of filters for <see cref="PivotArea"/>
 */
export class PivotAreaFilterCollection {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets filter from the list by the index.
     * @param index - The Index
     */
    get(index: number) : PivotAreaFilter;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Indicates the type of rule being used to describe an area or aspect of the PivotTable.
 */
export enum PivotAreaType {
    /**
     * No Pivot area.
     */
    None = 0,
    /**
     * Represents a header or item.
     */
    Normal = 1,
    /**
     * Represents something in the data area.
     */
    Data = 2,
    /**
     * Represents the whole PivotTable.
     */
    All = 3,
    /**
     * Represents the blank cells at the top-left of the PivotTable (top-right for RTL sheets).
     */
    Origin = 4,
    /**
     * Represents a field button.
     */
    Button = 5,
    /**
     * Represents the blank cells at the top-right of the PivotTable (top-left for RTL sheets).
     */
    TopRight = 6,
}

/**
 * Specifies what can be selected in a PivotTable during a structured selection.
 * These constants can be combined to select multiple types.
 */
export enum PivotTableSelectionType {
    /**
     * Data and labels
     */
    DataAndLabel = 0,
    /**
     * Only selects data
     */
    DataOnly = 2,
    /**
     * Only selects labels
     */
    LabelOnly = 1,
}

/**
 * Represents the field grouped by date time range.
 */
export class PivotDateTimeRangeGroupSettings extends PivotFieldGroupSettings {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: PivotFieldGroupSettings);
    /**
     * Gets the data time group type.
     */
    getType() : PivotFieldGroupType;
    /**
     * Gets the start date time of the group.
     */
    getStart() : Date;
    /**
     * Gets the end date time of the group.
     */
    getEnd() : Date;
    /**
     * Gets the internal of the group.
     */
    getInterval() : number;
    /**
     * Gets the types of grouping by date time.
     */
    getGroupByTypes() : PivotGroupByType[];
    /**
     * Check whether the field is grouped by the type.
     * @param type - The group type
     */
    isGroupedBy(type: PivotGroupByType) : boolean;
}

/**
 * Represents the group setting of pivot field.
 */
export class PivotFieldGroupSettings {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets the group type of pivot field.
     */
    getType() : PivotFieldGroupType;
}

/**
 * Represents the group type of pivot field.
 */
export enum PivotFieldGroupType {
    /**
     * No group
     */
    None = 0,
    /**
     * Grouped by DateTime range.
     */
    DateTimeRange = 1,
    /**
     * Grouped by numberic range.
     */
    NumbericRange = 2,
    /**
     * Grouped by discrete points.
     */
    Discrete = 3,
}

/**
 * Represents the position type of the pivot base item in the base field when the ShowDataAs calculation is in use.
 */
export enum PivotItemPositionType {
    /**
     * Represents the previous pivot item in the PivotField.
     */
    Previous = 0,
    /**
     * Represents the next pivot item in the PivotField.
     */
    Next = 1,
    /**
     * Shows values as the different format based the index of pivot item in the PivotField.
     * 
     * @remarks
     * Only for getting.
     */
    Custom = 2,
}

/**
 * Represents the numberic range group of the pivot field.
 */
export class PivotNumbericRangeGroupSettings extends PivotFieldGroupSettings {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: PivotFieldGroupSettings);
    /**
     * Gets the group type.
     */
    getType() : PivotFieldGroupType;
    /**
     * Gets the start number of the group.
     */
    getStart() : number;
    /**
     * Gets the end number of the group.
     */
    getEnd() : number;
    /**
     * Gets the interval of the group.
     */
    getInterval() : number;
}

/**
 * Represents the settings about showing values as when the ShowDataAs calculation is in use.
 */
export class PivotShowValuesSetting {
    /**
     * Represents how to show values of a data field in the pivot report.
     */
    getCalculationType() : PivotFieldDataDisplayFormat;
    /**
     * Represents how to show values of a data field in the pivot report.
     * @param value - The value to set.
     */
    setCalculationType(value: PivotFieldDataDisplayFormat) : void;
    /**
     * Represents the base field for a ShowDataAs calculation when the ShowDataAs calculation is in use.
     */
    getBaseFieldIndex() : number;
    /**
     * Represents the base field for a ShowDataAs calculation when the ShowDataAs calculation is in use.
     * @param value - The value to set.
     */
    setBaseFieldIndex(value: number) : void;
    /**
     * Represents type of the base pivot item in the base field when the ShowDataAs calculation is in use.
     * Valid only for data fields.
     * Because PivotItemPosition.Custom is only for read,if you need to set PivotItemPosition.Custom,
     * please set PivotField.BaseItemIndex attribute.
     */
    getBaseItemPositionType() : PivotItemPositionType;
    /**
     * Represents type of the base pivot item in the base field when the ShowDataAs calculation is in use.
     * Valid only for data fields.
     * Because PivotItemPosition.Custom is only for read,if you need to set PivotItemPosition.Custom,
     * please set PivotField.BaseItemIndex attribute.
     * @param value - The value to set.
     */
    setBaseItemPositionType(value: PivotItemPositionType) : void;
    /**
     * Represents the custom index of the pivot item in the base field when the ShowDataAs calculation is in use.
     * Valid only for data fields.
     */
    getBaseItemIndex() : number;
    /**
     * Represents the custom index of the pivot item in the base field when the ShowDataAs calculation is in use.
     * Valid only for data fields.
     * @param value - The value to set.
     */
    setBaseItemIndex(value: number) : void;
}

/**
 * Represents the options of refreshing data source of the pivot table.
 */
export class PivotTableRefreshOption {
    /**
     * Represents the options of refreshing data source of the pivot table.
     */
    constructor();
    /**
     * Represents how to reserve missing pivot items.
     */
    getReserveMissingPivotItemType() : ReserveMissingPivotItemType;
    /**
     * Represents how to reserve missing pivot items.
     * @param value - The value to set.
     */
    setReserveMissingPivotItemType(value: ReserveMissingPivotItemType) : void;
}

/**
 * Represents how to keep the missing pivot items.
 */
export enum ReserveMissingPivotItemType {
    /**
     * Removes old missint pivot items and reserves visible items which the current data source does not contain as missing items.
     */
    Default = 0,
    /**
     * Reserves all missing items.
     */
    All = 1,
    /**
     * Removes all missing pivot items.
     */
    None = 2,
}

/**
 * Represents options of highlighting revsions or changes of shared Excel files.
 */
export class HighlightChangesOptions {
    /**
     * Represents options of highlighting revsions or changes of shared Excel files.
     * @param highlightOnScreen - Indicates whether highlighting changes on screen.
     * @param listOnNewSheet - Indicates whether listing changes on a new worksheet.
     */
    constructor(highlightOnScreen: boolean, listOnNewSheet: boolean);
}

/**
 * Represents the options for saving ebook file.
 */
export class EbookSaveOptions extends HtmlSaveOptions {
    /**
     * Creates options for saving ebook file.
     */
    constructor();
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: HtmlSaveOptions);
    /**
     * Creates options for saving ebook file.
     * @param saveFormat - The file format.         /// It should be <see cref="SaveFormat.Epub"/> or <see cref="SaveFormat.Azw3"/>.
     */
    constructor(saveFormat: SaveFormat);
}

/**
 * Represents the merge type for empty TD element when exporting file to html.
 */
export enum MergeEmptyTdType {
    /**
     * Display like MS Excel.
     */
    Default = 0,
    /**
     * Empty TD elements will not be merged when exporting file to html.
     * This will generate a significantly larger html file.
     */
    None = 1,
    /**
     * Merging empty TD element forcedly when exporting file to html.
     * The size of html file will be reduced significantly after setting value to true.
     * If you want to import the html file to excel or export perfect grid lines when saving file to html,
     * please keep the default value.
     */
    MergeForcely = 2,
}

/**
 * Represents the options for pagination.
 */
export class PaginatedSaveOptions extends SaveOptions {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: SaveOptions);
    /**
     * When characters in the Excel are Unicode and not be set with correct font in cell style,
     * They may appear as block in pdf,image.
     * Set the DefaultFont such as MingLiu or MS Gothic to show these characters.
     * If this property is not set, Aspose.Cells will use system default font to show these unicode characters.
     */
    getDefaultFont() : string;
    /**
     * When characters in the Excel are Unicode and not be set with correct font in cell style,
     * They may appear as block in pdf,image.
     * Set the DefaultFont such as MingLiu or MS Gothic to show these characters.
     * If this property is not set, Aspose.Cells will use system default font to show these unicode characters.
     * @param value - The value to set.
     */
    setDefaultFont(value: string) : void;
    /**
     * When characters in the Excel are Unicode and not be set with correct font in cell style,
     * They may appear as block in pdf,image.
     * Set this to true to try to use workbook's default font to show these characters first.
     * 
     * @remarks
     * Default is true.
     */
    getCheckWorkbookDefaultFont() : boolean;
    /**
     * When characters in the Excel are Unicode and not be set with correct font in cell style,
     * They may appear as block in pdf,image.
     * Set this to true to try to use workbook's default font to show these characters first.
     * @param value - The value to set.
     * 
     * @remarks
     * Default is true.
     */
    setCheckWorkbookDefaultFont(value: boolean) : void;
    /**
     * Indicates whether to check font compatibility for every character in text.
     * @param value - The value to set.
     * 
     * @remarks
     * The default value is true.
     * Disable this property may give better performance.
     * But when the default or specified font of text/character cannot be used to render it,
     * unreadable characters(such as block) maybe occur in the generated pdf.
     * For such situation user should keep this property as true so that
     * alternative font can be searched and used to render the text instead;
     */
    setCheckFontCompatibility(value: boolean) : void;
    /**
     * Indicates whether to check font compatibility for every character in text.
     * 
     * @remarks
     * The default value is true.
     * Disable this property may give better performance.
     * But when the default or specified font of text/character cannot be used to render it,
     * unreadable characters(such as block) maybe occur in the generated pdf.
     * For such situation user should keep this property as true so that
     * alternative font can be searched and used to render the text instead;
     */
    getCheckFontCompatibility() : boolean;
    /**
     * Indicates whether to only substitute the font of character when the cell font is not compatibility for it.
     * @param value - The value to set.
     * 
     * @remarks
     * Default is false. We will try default font of Workbook and PdfSaveOption/system for cell font first.
     */
    setIsFontSubstitutionCharGranularity(value: boolean) : void;
    /**
     * Indicates whether to only substitute the font of character when the cell font is not compatibility for it.
     * 
     * @remarks
     * Default is false. We will try default font of Workbook and PdfSaveOption/system for cell font first.
     */
    isFontSubstitutionCharGranularity() : boolean;
    /**
     * If OnePagePerSheet is true , all content of one sheet will output to only one page in result.
     * The paper size of pagesetup will be invalid, and the other settings of pagesetup
     * will still take effect.
     */
    getOnePagePerSheet() : boolean;
    /**
     * If OnePagePerSheet is true , all content of one sheet will output to only one page in result.
     * The paper size of pagesetup will be invalid, and the other settings of pagesetup
     * will still take effect.
     * @param value - The value to set.
     */
    setOnePagePerSheet(value: boolean) : void;
    /**
     * If AllColumnsInOnePagePerSheet is true , all column content of one sheet will output to only one page in result.
     * The width of paper size of pagesetup will be ignored, and the other settings of pagesetup
     * will still take effect.
     */
    getAllColumnsInOnePagePerSheet() : boolean;
    /**
     * If AllColumnsInOnePagePerSheet is true , all column content of one sheet will output to only one page in result.
     * The width of paper size of pagesetup will be ignored, and the other settings of pagesetup
     * will still take effect.
     * @param value - The value to set.
     */
    setAllColumnsInOnePagePerSheet(value: boolean) : void;
    /**
     * Indicates if you need to hide the error while rendering.
     * The error can be error in shape, image, chart rendering, etc.
     */
    getIgnoreError() : boolean;
    /**
     * Indicates if you need to hide the error while rendering.
     * The error can be error in shape, image, chart rendering, etc.
     * @param value - The value to set.
     */
    setIgnoreError(value: boolean) : void;
    /**
     * Indicates whether to output a blank page when there is nothing to print.
     * 
     * @remarks
     * Default is true.
     */
    getOutputBlankPageWhenNothingToPrint() : boolean;
    /**
     * Indicates whether to output a blank page when there is nothing to print.
     * @param value - The value to set.
     * 
     * @remarks
     * Default is true.
     */
    setOutputBlankPageWhenNothingToPrint(value: boolean) : void;
    /**
     * Gets or sets the 0-based index of the first page to save.
     * @param value - The value to set.
     * 
     * @remarks
     * Default is 0.
     */
    setPageIndex(value: number) : void;
    /**
     * Gets or sets the 0-based index of the first page to save.
     * 
     * @remarks
     * Default is 0.
     */
    getPageIndex() : number;
    /**
     * Gets or sets the number of pages to save.
     * @param value - The value to set.
     * 
     * @remarks
     * Default is System.Int32.MaxValue which means all pages will be rendered..
     */
    setPageCount(value: number) : void;
    /**
     * Gets or sets the number of pages to save.
     * 
     * @remarks
     * Default is System.Int32.MaxValue which means all pages will be rendered..
     */
    getPageCount() : number;
    /**
     * Indicates which pages will not be printed.
     * 
     * @remarks
     * If content in the sheet is sparse, there will be some pages are totally blank in the output pdf file.
     * If you don't want these blank pages, you can use this option to omit them.
     */
    getPrintingPageType() : PrintingPageType;
    /**
     * Indicates which pages will not be printed.
     * @param value - The value to set.
     * 
     * @remarks
     * If content in the sheet is sparse, there will be some pages are totally blank in the output pdf file.
     * If you don't want these blank pages, you can use this option to omit them.
     */
    setPrintingPageType(value: PrintingPageType) : void;
    /**
     * Gets or sets gridline type.
     * 
     * @remarks
     * Default is Dotted type.
     */
    getGridlineType() : GridlineType;
    /**
     * Gets or sets gridline type.
     * @param value - The value to set.
     * 
     * @remarks
     * Default is Dotted type.
     */
    setGridlineType(value: GridlineType) : void;
    /**
     * Gets or sets displaying text type when the text width is larger than cell width.
     */
    getTextCrossType() : TextCrossType;
    /**
     * Gets or sets displaying text type when the text width is larger than cell width.
     * @param value - The value to set.
     */
    setTextCrossType(value: TextCrossType) : void;
    /**
     * Gets or sets default edit language.
     * 
     * @remarks
     * It may display/render different layouts for text paragraph when different edit languages is set.
     * Default is <see cref="Aspose.Cells.DefaultEditLanguage.Auto"/>.
     */
    getDefaultEditLanguage() : DefaultEditLanguage;
    /**
     * Gets or sets default edit language.
     * @param value - The value to set.
     * 
     * @remarks
     * It may display/render different layouts for text paragraph when different edit languages is set.
     * Default is <see cref="Aspose.Cells.DefaultEditLanguage.Auto"/>.
     */
    setDefaultEditLanguage(value: DefaultEditLanguage) : void;
    /**
     * Gets or sets the sheets to render. Default is all visible sheets in the workbook: <see cref="Aspose.Cells.Rendering.SheetSet.Visible"/>.
     */
    getSheetSet() : SheetSet;
    /**
     * Gets or sets the sheets to render. Default is all visible sheets in the workbook: <see cref="Aspose.Cells.Rendering.SheetSet.Visible"/>.
     * @param value - The value to set.
     */
    setSheetSet(value: SheetSet) : void;
    /**
     * Implements this interface to get DrawObject and Bound when rendering.
     */
    getDrawObjectEventHandler() : DrawObjectEventHandler;
    /**
     * Implements this interface to get DrawObject and Bound when rendering.
     * @param value - The value to set.
     */
    setDrawObjectEventHandler(value: DrawObjectEventHandler) : void;
    /**
     * Control/Indicate progress of page saving process.
     */
    getPageSavingCallback() : IPageSavingCallback;
    /**
     * Control/Indicate progress of page saving process.
     * @param value - The value to set.
     */
    setPageSavingCallback(value: IPageSavingCallback) : void;
    /**
     * Setting for rendering Emf metafile.
     * 
     * @remarks
     * EMF metafiles identified as "EMF+ Dual" can contain both EMF+ records and EMF records.
     * Either type of record can be used to render the image, only EMF+ records, or only EMF records.
     * When <see cref="Aspose.Cells.EmfRenderSetting.EmfPlusPrefer"/> is set, then EMF+ records will be parsed while rendering to page, otherwise only EMF records will be parsed.
     * Default value is <see cref="Aspose.Cells.EmfRenderSetting.EmfOnly"/>.
     */
    getEmfRenderSetting() : EmfRenderSetting;
    /**
     * Setting for rendering Emf metafile.
     * @param value - The value to set.
     * 
     * @remarks
     * EMF metafiles identified as "EMF+ Dual" can contain both EMF+ records and EMF records.
     * Either type of record can be used to render the image, only EMF+ records, or only EMF records.
     * When <see cref="Aspose.Cells.EmfRenderSetting.EmfPlusPrefer"/> is set, then EMF+ records will be parsed while rendering to page, otherwise only EMF records will be parsed.
     * Default value is <see cref="Aspose.Cells.EmfRenderSetting.EmfOnly"/>.
     */
    setEmfRenderSetting(value: EmfRenderSetting) : void;
}

/**
 * Settings for the default values of workbook's style properties.
 */
export class DefaultStyleSettings {
    /**
     * Indicates whether property for number format is preferrable when the style defines both built-in number and custom pattern.
     * Default value is false, that means by default custom pattern will be used to format values as long as it is not empty for one style.
     * 
     * @remarks
     * When loading workbook from existing template file, maybe both built-in number and custom pattern are defined for one style.
     * This property determine whether we should use the built-in number or the custom pattern when formatting values with the style.
     */
    getBuiltInPreference() : boolean;
    /**
     * Indicates whether property for number format is preferrable when the style defines both built-in number and custom pattern.
     * Default value is false, that means by default custom pattern will be used to format values as long as it is not empty for one style.
     * @param value - The value to set.
     * 
     * @remarks
     * When loading workbook from existing template file, maybe both built-in number and custom pattern are defined for one style.
     * This property determine whether we should use the built-in number or the custom pattern when formatting values with the style.
     */
    setBuiltInPreference(value: boolean) : void;
    /**
     * Gets/Sets the default font name for the workbook
     */
    getFontName() : string;
    /**
     * Gets/Sets the default font name for the workbook
     * @param value - The value to set.
     */
    setFontName(value: string) : void;
    /**
     * Gets/Sets the default standard font size for the workbook.
     */
    getFontSize() : number;
    /**
     * Gets/Sets the default standard font size for the workbook.
     * @param value - The value to set.
     */
    setFontSize(value: number) : void;
    /**
     * Gets/Sets the default value for horizontal alignment
     */
    getHorizontalAlignment() : TextAlignmentType;
    /**
     * Gets/Sets the default value for horizontal alignment
     * @param value - The value to set.
     */
    setHorizontalAlignment(value: TextAlignmentType) : void;
    /**
     * Gets/Sets the default value for vertical alignment
     */
    getVerticalAlignment() : TextAlignmentType;
    /**
     * Gets/Sets the default value for vertical alignment
     * @param value - The value to set.
     */
    setVerticalAlignment(value: TextAlignmentType) : void;
}

/**
 * Settings of formulas and calculation.
 */
export class FormulaSettings {
    /**
     * Indicates whether the application is required to perform a full calculation when the workbook is opened.
     * 
     * @remarks
     * This property is only for saving the settings to resultant spreadsheet file
     * so that other applications(such as ms excel) may act accordingly when loading the resultant file.
     * For performance consideration for most users' applications, we do not calculate any formula in the workbook automatically,
     * no matter what value has been set for this property.
     */
    getCalculateOnOpen() : boolean;
    /**
     * Indicates whether the application is required to perform a full calculation when the workbook is opened.
     * @param value - The value to set.
     * 
     * @remarks
     * This property is only for saving the settings to resultant spreadsheet file
     * so that other applications(such as ms excel) may act accordingly when loading the resultant file.
     * For performance consideration for most users' applications, we do not calculate any formula in the workbook automatically,
     * no matter what value has been set for this property.
     */
    setCalculateOnOpen(value: boolean) : void;
    /**
     * Indicates whether recalculate the workbook before saving the document, when in manual calculation mode.
     * 
     * @remarks
     * This property is only for saving the settings to resultant spreadsheet file
     * so that other applications(such as ms excel) may act accordingly when loading and manipulating the resultant file.
     * For performance consideration for most users' applications, we do not calculate any formula in the workbook automatically,
     * no matter what value has been set for this property.
     */
    getCalculateOnSave() : boolean;
    /**
     * Indicates whether recalculate the workbook before saving the document, when in manual calculation mode.
     * @param value - The value to set.
     * 
     * @remarks
     * This property is only for saving the settings to resultant spreadsheet file
     * so that other applications(such as ms excel) may act accordingly when loading and manipulating the resultant file.
     * For performance consideration for most users' applications, we do not calculate any formula in the workbook automatically,
     * no matter what value has been set for this property.
     */
    setCalculateOnSave(value: boolean) : void;
    /**
     * Indicates whether calculates all formulas every time when a calculation is triggered.
     * 
     * @remarks
     * This property is only for saving the settings to resultant spreadsheet file
     * so that other applications(such as ms excel) may act accordingly when loading and manipulating the resultant file.
     * For performance consideration for most users' applications, we do not calculate any formula in the workbook automatically,
     * no matter what value has been set for this property.
     */
    getForceFullCalculation() : boolean;
    /**
     * Indicates whether calculates all formulas every time when a calculation is triggered.
     * @param value - The value to set.
     * 
     * @remarks
     * This property is only for saving the settings to resultant spreadsheet file
     * so that other applications(such as ms excel) may act accordingly when loading and manipulating the resultant file.
     * For performance consideration for most users' applications, we do not calculate any formula in the workbook automatically,
     * no matter what value has been set for this property.
     */
    setForceFullCalculation(value: boolean) : void;
    /**
     * Gets or sets the mode for workbook calculation in ms excel.
     * 
     * @remarks
     * This property is only for saving the settings to resultant spreadsheet file
     * so that other applications(such as ms excel) may act accordingly when loading and manipulating the resultant file.
     * For performance consideration for most user's application, we do not calculate any formula in the workbook automatically,
     * no matter what mode has been set for this property.
     * If user needs to calculate formulas, please always call methods on different objects according to requirement:
     * <see cref="Workbook.CalculateFormula()"/>, <see cref="Worksheet.CalculateFormula(CalculationOptions, bool)"/>,
     * <see cref="Cell.Calculate(CalculationOptions)"/>, ...etc.
     */
    getCalculationMode() : CalcModeType;
    /**
     * Gets or sets the mode for workbook calculation in ms excel.
     * @param value - The value to set.
     * 
     * @remarks
     * This property is only for saving the settings to resultant spreadsheet file
     * so that other applications(such as ms excel) may act accordingly when loading and manipulating the resultant file.
     * For performance consideration for most user's application, we do not calculate any formula in the workbook automatically,
     * no matter what mode has been set for this property.
     * If user needs to calculate formulas, please always call methods on different objects according to requirement:
     * <see cref="Workbook.CalculateFormula()"/>, <see cref="Worksheet.CalculateFormula(CalculationOptions, bool)"/>,
     * <see cref="Cell.Calculate(CalculationOptions)"/>, ...etc.
     */
    setCalculationMode(value: CalcModeType) : void;
    /**
     * Specifies the version of the calculation engine used to calculate values in the workbook.
     * 
     * @remarks
     * This property is only for saving the settings to resultant spreadsheet file
     * so that other applications(such as ms excel) may act accordingly when loading and manipulating the resultant file.
     * In the case of ms excel, if the value of this property is less than the recalculation engine identifier associated
     * with the application that opens the resultant file, the application will recalculate the results of all formulas
     * on this workbook immediately after loading the file.
     * For performance consideration for most users' applications, we do not calculate any formula on the workbook automatically,
     * no matter what value has been set for this property.
     */
    getCalculationId() : string;
    /**
     * Specifies the version of the calculation engine used to calculate values in the workbook.
     * @param value - The value to set.
     * 
     * @remarks
     * This property is only for saving the settings to resultant spreadsheet file
     * so that other applications(such as ms excel) may act accordingly when loading and manipulating the resultant file.
     * In the case of ms excel, if the value of this property is less than the recalculation engine identifier associated
     * with the application that opens the resultant file, the application will recalculate the results of all formulas
     * on this workbook immediately after loading the file.
     * For performance consideration for most users' applications, we do not calculate any formula on the workbook automatically,
     * no matter what value has been set for this property.
     */
    setCalculationId(value: string) : void;
    /**
     * Indicates whether enable iterative calculation to resolve circular references.
     */
    getEnableIterativeCalculation() : boolean;
    /**
     * Indicates whether enable iterative calculation to resolve circular references.
     * @param value - The value to set.
     */
    setEnableIterativeCalculation(value: boolean) : void;
    /**
     * The maximum iterations to resolve a circular reference.
     */
    getMaxIteration() : number;
    /**
     * The maximum iterations to resolve a circular reference.
     * @param value - The value to set.
     */
    setMaxIteration(value: number) : void;
    /**
     * The maximum change to resolve a circular reference.
     */
    getMaxChange() : number;
    /**
     * The maximum change to resolve a circular reference.
     * @param value - The value to set.
     */
    setMaxChange(value: number) : void;
    /**
     * Whether the precision of calculated result be set as they are displayed while calculating formulas
     */
    getPrecisionAsDisplayed() : boolean;
    /**
     * Whether the precision of calculated result be set as they are displayed while calculating formulas
     * @param value - The value to set.
     */
    setPrecisionAsDisplayed(value: boolean) : void;
    /**
     * Whether enable calculation chain for formulas. Default is false.
     * 
     * @remarks
     * When there are lots of formulas in the workbook and user needs to calculate them repeatedly
     * with modifying only a small part of them, it may be helpful for performance to enable the calculation chain.
     * On the other hand, if the chain is enabled, maintaining the model of chain requires extra memory,
     * and it also requires a bit more cpu time for some other operations such as changing cell's value or formulas.
     * After changing this property from false to true, the calculation chain will be analyzed and built
     * at the time of first calculation for the workbook, so the required time for the first calculation
     * may be more than normal calculation without chain.
     */
    getEnableCalculationChain() : boolean;
    /**
     * Whether enable calculation chain for formulas. Default is false.
     * @param value - The value to set.
     * 
     * @remarks
     * When there are lots of formulas in the workbook and user needs to calculate them repeatedly
     * with modifying only a small part of them, it may be helpful for performance to enable the calculation chain.
     * On the other hand, if the chain is enabled, maintaining the model of chain requires extra memory,
     * and it also requires a bit more cpu time for some other operations such as changing cell's value or formulas.
     * After changing this property from false to true, the calculation chain will be analyzed and built
     * at the time of first calculation for the workbook, so the required time for the first calculation
     * may be more than normal calculation without chain.
     */
    setEnableCalculationChain(value: boolean) : void;
    /**
     * Indicates whether preserve those spaces and line breaks that are padded between formula tokens
     * while getting and setting formulas.
     * Default value is false.
     * 
     * @remarks
     * Generally those spaces and line breaks are jsut for visual purpose,
     * Preserving them or not does not affect the calculated result.
     * For performance consideration, if there is no special requirement,
     * it is better not to preserve them while processing formulas.
     */
    getPreservePaddingSpaces() : boolean;
    /**
     * Indicates whether preserve those spaces and line breaks that are padded between formula tokens
     * while getting and setting formulas.
     * Default value is false.
     * @param value - The value to set.
     * 
     * @remarks
     * Generally those spaces and line breaks are jsut for visual purpose,
     * Preserving them or not does not affect the calculated result.
     * For performance consideration, if there is no special requirement,
     * it is better not to preserve them while processing formulas.
     */
    setPreservePaddingSpaces(value: boolean) : void;
}

/**
 * Represents pdf embedded font encoding.
 */
export enum PdfFontEncoding {
    /**
     * Represents use Identity-H encoding for all embedded fonts in pdf.
     */
    Identity = 0,
    /**
     * Represents prefer to use WinAnsiEncoding for TrueType fonts with characters 32-127,
     * otherwise, Identity-H encoding will be used for embedded fonts in pdf.
     */
    AnsiPrefer = 1,
}

/**
 * Represents the default edit language.
 */
export enum DefaultEditLanguage {
    /**
     * Represents auto detecting edit language according to the text itself.
     */
    Auto = 0,
    /**
     * Represents English language.
     */
    English = 1,
    /**
     * Represents Chinese, Japanese, Korean language.
     */
    CJK = 2,
}

/**
 * Setting for rendering Emf metafile.
 */
export enum EmfRenderSetting {
    /**
     * Only rendering Emf records.
     */
    EmfOnly = 0,
    /**
     * Prefer rendering EmfPlus records.
     */
    EmfPlusPrefer = 1,
}

/**
 * Type of XML Advanced Electronic Signature (XAdES).
 */
export enum XAdESType {
    /**
     * XAdES is off.
     */
    None = 0,
    /**
     * Basic XAdES.
     */
    XAdES = 1,
}

/**
 * Represents the anchor type.
 */
export enum ShapeAnchorType {
    /**
     * Represents a two cell anchor placeholder
     */
    TwoCellAnchor = 0,
    /**
     * Represents a one cell anchor placeholder
     */
    OneCellAnchor = 1,
}

/**
 * Specifies the position of a particular subobject within its parent
 */
export enum EquationCharacterPositionType {
    /**
     * At the top of the parent object
     */
    Top = 0,
    /**
     * At the bottom of the parent object
     */
    Bottom = 1,
}

/**
 * Represents options when parsing formula.
 */
export class FormulaParseOptions {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Whether the formula is locale formatted. Default is false.
     */
    getLocaleDependent() : boolean;
    /**
     * Whether the formula is locale formatted. Default is false.
     * @param value - The value to set.
     */
    setLocaleDependent(value: boolean) : void;
    /**
     * Whether the formula is R1C1 reference style. Default is false.
     */
    getR1C1Style() : boolean;
    /**
     * Whether the formula is R1C1 reference style. Default is false.
     * @param value - The value to set.
     */
    setR1C1Style(value: boolean) : void;
    /**
     * Whether check addins in existing external links of current workbook for user defined function without external link.
     * Default is true(if user defined function matches one addin in existing external links, then take it as the addin).
     */
    getCheckAddIn() : boolean;
    /**
     * Whether check addins in existing external links of current workbook for user defined function without external link.
     * Default is true(if user defined function matches one addin in existing external links, then take it as the addin).
     * @param value - The value to set.
     */
    setCheckAddIn(value: boolean) : void;
    /**
     * Whether parse given formula. Default is true.
     * If it is false, then given formula string will be kept as it is for the cell until user call other methods to parse them
     * or parsed formula data is required by other operations such as calculating formulas.
     */
    getParse() : boolean;
    /**
     * Whether parse given formula. Default is true.
     * If it is false, then given formula string will be kept as it is for the cell until user call other methods to parse them
     * or parsed formula data is required by other operations such as calculating formulas.
     * @param value - The value to set.
     */
    setParse(value: boolean) : void;
    /**
     * Definition for parsing custom functions.
     * 
     * @remarks
     * For some special requirements, such as when calculating custom function in user's custom engine,
     * some parameters of it need to be caculated in array mode, using this property can mark those parameters
     * as array mode when parsing the formula. Otherwise user needs to update those custom functions later by
     * <see cref="Workbook.UpdateCustomFunctionDefinition(CustomFunctionDefinition)"/> to get the same result.
     */
    getCustomFunctionDefinition() : CustomFunctionDefinition;
    /**
     * Definition for parsing custom functions.
     * @param value - The value to set.
     * 
     * @remarks
     * For some special requirements, such as when calculating custom function in user's custom engine,
     * some parameters of it need to be caculated in array mode, using this property can mark those parameters
     * as array mode when parsing the formula. Otherwise user needs to update those custom functions later by
     * <see cref="Workbook.UpdateCustomFunctionDefinition(CustomFunctionDefinition)"/> to get the same result.
     */
    setCustomFunctionDefinition(value: CustomFunctionDefinition) : void;
}

/**
 * Represents options when importing a html file.
 */
export class HtmlLoadOptions extends AbstractTextLoadOptions {
    /**
     * Creates an options of loading the file.
     */
    constructor();
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: AbstractTextLoadOptions);
    /**
     * Creates an options of loading the file.
     * @param loadFormat - The loading format.
     */
    constructor(loadFormat: LoadFormat);
    /**
     * Indicates whether importing formulas if the original html file contains formulas
     */
    getLoadFormulas() : boolean;
    /**
     * Indicates whether importing formulas if the original html file contains formulas
     * @param value - The value to set.
     */
    setLoadFormulas(value: boolean) : void;
    /**
     * Indicates whether support the layout of <c>&lt;div&gt;</c> tag when the html file contains it.
     * The default value is false.
     */
    getSupportDivTag() : boolean;
    /**
     * Indicates whether support the layout of <c>&lt;div&gt;</c> tag when the html file contains it.
     * The default value is false.
     * @param value - The value to set.
     */
    setSupportDivTag(value: boolean) : void;
    /**
     * Indicates whether delete redundant spaces when the text wraps lines using <c>&lt;br&gt;</c> tag.
     * The default value is false.
     */
    getDeleteRedundantSpaces() : boolean;
    /**
     * Indicates whether delete redundant spaces when the text wraps lines using <c>&lt;br&gt;</c> tag.
     * The default value is false.
     * @param value - The value to set.
     */
    setDeleteRedundantSpaces(value: boolean) : void;
    /**
     * Indicates whether auto-fit columns and rows. The default value is false.
     */
    getAutoFitColsAndRows() : boolean;
    /**
     * Indicates whether auto-fit columns and rows. The default value is false.
     * @param value - The value to set.
     */
    setAutoFitColsAndRows(value: boolean) : void;
    /**
     * Indicates whether the text is formula if it starts with "=".
     */
    getHasFormula() : boolean;
    /**
     * Indicates whether the text is formula if it starts with "=".
     * @param value - The value to set.
     */
    setHasFormula(value: boolean) : void;
    /**
     * Gets the program id of creating the file.
     * Only for MHT files.
     */
    getProgId() : string;
    /**
     * Get the HtmlTableLoadOptionCollection instance
     */
    getTableLoadOptions() : HtmlTableLoadOptionCollection;
}

/**
 * Specifies the way <see cref="CustomDocumentPropertyCollection"/> are exported to PDF file.
 */
export enum PdfCustomPropertiesExport {
    /**
     * No custom properties are exported.
     */
    None = 0,
    /**
     * Custom properties are exported as entries in Info dictionary.
     * 
     * @remarks
     * Custom properties with the following names are not exported:
     * "Title", "Author", "Subject", "Keywords", "Creator", "Producer", "CreationDate", "ModDate", "Trapped".
     */
    Standard = 1,
}

/**
 * Represents type of copying format when inserting rows.
 */
export enum CopyFormatType {
    /**
     * Formats same as above row.
     */
    SameAsAbove = 0,
    /**
     * Formats same as below row.
     */
    SameAsBelow = 1,
    /**
     * Clears formatting.
     */
    Clear = 2,
}

/**
 * Represents the person who creates the threaded comments;
 */
export class ThreadedCommentAuthor {
    /**
     * Gets and sets the name.
     */
    getName() : string;
    /**
     * Gets and sets the name.
     * @param value - The value to set.
     */
    setName(value: string) : void;
    /**
     * Gets and sets the id of the user.
     */
    getUserId() : string;
    /**
     * Gets and sets the id of the user.
     * @param value - The value to set.
     */
    setUserId(value: string) : void;
    /**
     * Gets the id of the provider.
     */
    getProviderId() : string;
    /**
     * Gets the id of the provider.
     * @param value - The value to set.
     */
    setProviderId(value: string) : void;
}

/**
 * Represents all persons who .
 */
export class ThreadedCommentAuthorCollection {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets the person who create threaded comments.
     * @param index - The index
     */
    get(index: number) : ThreadedCommentAuthor;
    /**
     * Gets the person who create threaded comments.
     * @param name - The name of the author.
     */
    get(name: string) : ThreadedCommentAuthor;
    /**
     * Gets and sets the current user.
     */
    getCurrentPerson() : ThreadedCommentAuthor;
    /**
     * Gets and sets the current user.
     * @param value - The value to set.
     */
    setCurrentPerson(value: ThreadedCommentAuthor) : void;
    /**
     * Gets the index of ThreadedCommentAuthor object
     * @param author - The ThreadedCommentAuthor object
     * @returns
     * The index in the ThreadedCommentAuthor collection
     */
    indexOf(author: ThreadedCommentAuthor) : number;
    /**
     * Adds one thread comment person.
     * @param name - The name of the person.
     * @param userId - 
     * @param providerId - The id of the provider
     */
    add(name: string, userId: string, providerId: string) : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents Custom xml shape ,such as Ink.
 */
export class CustomXmlShape extends Shape {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Shape);
}

/**
 * Represents the threaded comment.
 */
export class ThreadedComment {
    /**
     * Gets the row index of the comment.
     */
    getRow() : number;
    /**
     * Gets the column index of the comment.
     */
    getColumn() : number;
    /**
     * Gets and sets the text of the comment.
     */
    getNotes() : string;
    /**
     * Gets and sets the text of the comment.
     * @param value - The value to set.
     */
    setNotes(value: string) : void;
    /**
     * Gets the author of the comment.
     */
    getAuthor() : ThreadedCommentAuthor;
    /**
     * Gets the author of the comment.
     * @param value - The value to set.
     */
    setAuthor(value: ThreadedCommentAuthor) : void;
    /**
     * Gets and sets the created time of this threaded comment.
     */
    getCreatedTime() : Date;
    /**
     * Gets and sets the created time of this threaded comment.
     * @param value - The value to set.
     */
    setCreatedTime(value: Date) : void;
}

/**
 * Represents the list of threaded comments.
 */
export class ThreadedCommentCollection {
    /**
     * Gets the threaded comment by the specific index.
     * @param index - The index
     */
    get(index: number) : ThreadedComment;
    /**
     * Adds a threaded comment;
     * @param text - The text of the threaded comment.
     * @param author - The author of the threaded comment
     */
    add(text: string, author: ThreadedCommentAuthor) : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the calculation relevant data about one cell which is being calculated.
 * 
 * @remarks
 * All objects provided by this class are for "read" purpose only.
 * User should not change any data in the Workbook during the formula calculation process,
 * Otherwise unexpected result or Exception may be caused.
 */
export class CalculationCell {
    /**
     * Gets the Workbook object.
     */
    getWorkbook() : Workbook;
    /**
     * Gets the Worksheet object where the cell is in.
     */
    getWorksheet() : Worksheet;
    /**
     * Gets the row index of the cell.
     */
    getCellRow() : number;
    /**
     * Gets the column index of the cell.
     */
    getCellColumn() : number;
    /**
     * Gets the Cell object which is being calculated.
     */
    getCell() : Cell;
}

/**
 * Represents Cell Watch Item in the 'watch window'.
 */
export class CellWatch {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets and sets the row of the cell.
     */
    getRow() : number;
    /**
     * Gets and sets the row of the cell.
     * @param value - The value to set.
     */
    setRow(value: number) : void;
    /**
     * Gets and sets the column of the cell.
     */
    getColumn() : number;
    /**
     * Gets and sets the column of the cell.
     * @param value - The value to set.
     */
    setColumn(value: number) : void;
    /**
     * Gets and sets the name of the cell.
     */
    getCellName() : string;
    /**
     * Gets and sets the name of the cell.
     * @param value - The value to set.
     */
    setCellName(value: string) : void;
}

/**
 * Represents the collection of cells on this worksheet being watched in the 'watch window'.
 */
export class CellWatchCollection {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets and sets <see cref="CellWatch"/> by index.
     * @param index - The index.
     */
    get(index: number) : CellWatch;
    /**
     * Gets and sets <see cref="CellWatch"/> by the name of the cell.
     * @param cellName - The name of the cell.
     */
    get(cellName: string) : CellWatch;
    /**
     * Adds <see cref="CellWatch"/> with row and column.
     * @param row - The row index.
     * @param column - The column index.
     * @returns
     * Returns the position of this item in the collection.
     */
    add(row: number, column: number) : number;
    /**
     * Adds <see cref="CellWatch"/> with the name the of cell.
     * @param cellName - The name of the cell.
     */
    add(cellName: string) : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Cache options for data access. Can be combined with | operator for multiple options together.
 * 
 * @remarks
 * For some features, accessing large dataset requires a lot of repeated and complicated operations
 * such as search, calculation, ...etc and those operations will take a lot of extra time.
 * For common situations, all dependent data remains unchanged during the access, so some caches can be built and used to
 * improve the access performance.
 * For this purpose, we provide this API so that user can specify which kind of data access needs
 * to be optimized by possible caching mechanism.
 * <br></br>
 * Please note, for different options, different data set may be required to be "read-only".
 * And performance of accessing data depends on many aspects, the use of caching mechanism
 * does not guarantee that performance will be improved. For some situations,
 * such as the dataset to be accessed is small, using cache may cause even more time because
 * caching itself also needs certain extra time.
 */
export enum AccessCacheOptions {
    /**
     * No cache for any data access.
     */
    None = 0,
    /**
     * Apply all possible optimizations for all kinds of data access in the workbook.
     * All settings and data should not be changed during the optimized access.
     */
    All = -1,
    /**
     * Apply possible optimization for getting object(such as Shape)'s position and size.
     * Row height and column width settings should not be changed during the optimized access.
     */
    PositionAndSize = 3,
    /**
     * Apply possible optimization for getting cells' values.
     * Cells data(data and settings of Cell, Row) should not be changed during
     * the optimized access, no new Cell/Row objects should be created either(such as
     * by <see cref="Cells.this[int, int]"/>).
     */
    CellsData = 9,
    /**
     * Apply possible optimization for getting display-related results of
     * cells(<see cref="Cell.DisplayStringValue"/>, <see cref="Cell.GetStyle()"/>, <see cref="Cell.GetDisplayStyle()"/>, etc.).
     * Cells data and style-related objects(Cell/Row/Column styles, column width, etc.) should not be changed
     * during the optimized access.
     */
    CellDisplay = 1048710,
    /**
     * Apply possible optimization for getting formulas.
     * All data and settings which may affect the formula expression(Worksheet's name, Name's text,
     * table's column, etc.) should not be changed during the optimized access.
     */
    GetFormula = 2097152,
    /**
     * Apply possible optimization for setting formulas.
     * All data and settings which may affect the formula expression(Worksheet's name, Name's text,
     * table's column, etc.) should not be changed during the optimized access.
     */
    SetFormula = 4194304,
    /**
     * Apply possible optimization for calculating formulas.
     * Cells data should not be changed during the optimized access, none new objects(Cell, Row, etc.)
     * should be created either(such as by <see cref="Cells.this[int, int]"/>).
     */
    CalculateFormula = 8388617,
    /**
     * Apply possible optimization for getting formatting result of conditional formattings.
     * All data and settings which may affect the result of conditional formattings(settings of
     * conditional formattings, dependent cell values, etc.) should not be changed during the optimized access.
     */
    ConditionalFormatting = 16777225,
    /**
     * Apply possible optimization for getting validation result.
     * All data and settings which may affect the result of validation(settings of the validation,
     * dependent cell values, etc.) should not be changed during the optimized access.
     */
    Validation = 33554441,
}

/**
 * Encapsulates the object that represents the frame object which contains text.
 */
export class ChartTextFrame extends ChartFrame {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: ChartFrame);
    /**
     * Indicates the text is auto generated.
     */
    isAutoText() : boolean;
    /**
     * Indicates the text is auto generated.
     * @param value - The value to set.
     */
    setIsAutoText(value: boolean) : void;
    /**
     * Indicates whether this data labels is deleted.
     */
    isDeleted() : boolean;
    /**
     * Indicates whether this data labels is deleted.
     * @param value - The value to set.
     */
    setIsDeleted(value: boolean) : void;
    /**
     * Gets and sets the text horizontal alignment.
     */
    getTextHorizontalAlignment() : TextAlignmentType;
    /**
     * Gets and sets the text horizontal alignment.
     * @param value - The value to set.
     */
    setTextHorizontalAlignment(value: TextAlignmentType) : void;
    /**
     * Gets or sets the text vertical alignment of text.
     */
    getTextVerticalAlignment() : TextAlignmentType;
    /**
     * Gets or sets the text vertical alignment of text.
     * @param value - The value to set.
     */
    setTextVerticalAlignment(value: TextAlignmentType) : void;
    /**
     * Represents text rotation angle.
     * 
     * @remarks
     * <br>0: Not rotated.</br>
     * <br>255: Top to Bottom.</br>
     * <br>-90: Downward.</br>
     * <br>90: Upward.</br>
     */
    getRotationAngle() : number;
    /**
     * Represents text rotation angle.
     * @param value - The value to set.
     * 
     * @remarks
     * <br>0: Not rotated.</br>
     * <br>255: Top to Bottom.</br>
     * <br>-90: Downward.</br>
     * <br>90: Upward.</br>
     */
    setRotationAngle(value: number) : void;
    /**
     * Indicates whether the text of the chart is automatically rotated.
     */
    isAutomaticRotation() : boolean;
    /**
     * Gets or sets the text of a frame's title.
     */
    getText() : string;
    /**
     * Gets or sets the text of a frame's title.
     * @param value - The value to set.
     */
    setText(value: string) : void;
    /**
     * Gets and sets a reference to the worksheet.
     */
    getLinkedSource() : string;
    /**
     * Gets and sets a reference to the worksheet.
     * @param value - The value to set.
     */
    setLinkedSource(value: string) : void;
    /**
     * Represents text reading order.
     */
    getReadingOrder() : TextDirectionType;
    /**
     * Represents text reading order.
     * @param value - The value to set.
     */
    setReadingOrder(value: TextDirectionType) : void;
    /**
     * Gets and sets the direction of text.
     */
    getDirectionType() : ChartTextDirectionType;
    /**
     * Gets and sets the direction of text.
     * @param value - The value to set.
     */
    setDirectionType(value: ChartTextDirectionType) : void;
    /**
     * Gets or sets a value indicating whether the text is wrapped.
     */
    isTextWrapped() : boolean;
    /**
     * Gets or sets a value indicating whether the text is wrapped.
     * @param value - The value to set.
     */
    setIsTextWrapped(value: boolean) : void;
    /**
     * Gets or sets whether a shape should be auto-fit to fully contain the text described within it. Auto-fitting is
     * when text within a shape is scaled in order to contain all the text inside.
     */
    isResizeShapeToFitText() : boolean;
    /**
     * Gets or sets whether a shape should be auto-fit to fully contain the text described within it. Auto-fitting is
     * when text within a shape is scaled in order to contain all the text inside.
     * @param value - The value to set.
     */
    setIsResizeShapeToFitText(value: boolean) : void;
    /**
     * Returns a Characters object that represents a range of characters within the text.
     * @param startIndex - The index of the start of the character.
     * @param length - The number of characters.
     * @returns
     * Characters object.
     */
    characters(startIndex: number, length: number) : FontSetting;
}

/**
 * Memory usage options.
 */
export enum MemorySetting {
    /**
     * Default option for cells model.
     * 
     * @remarks
     * This option is applied for all versions.
     */
    Normal = 0,
    /**
     * Memory performance preferrable.
     * With this option the data will be held in compact format so for common scenarios it may give lower memory cost.
     * However, this option also may degrade R/W performance a bit in some special cases.
     * 
     * @remarks
     * This option is available since v 8.0.0.
     */
    MemoryPreference = 1,
}

/**
 * Specifies the preset shape geometry that is to be used for a chart.
 */
export enum DataLabelShapeType {
    /**
     * Represents the rectangle shape.
     */
    Rect = 0,
    /**
     * Represents the round rectangle shape.
     */
    RoundRect = 1,
    /**
     * Represents the ellipse shape.
     */
    Ellipse = 2,
    /**
     * Represents the right arrow callout shape.
     */
    RightArrowCallout = 3,
    /**
     * Represents the down arrow callout shape.
     */
    DownArrowCallout = 4,
    /**
     * Represents the left arrow callout shape.
     */
    LeftArrowCallout = 5,
    /**
     * Represents the up arrow callout shape.
     */
    UpArrowCallout = 6,
    /**
     * Represents the wedge rectangle callout shape.
     */
    WedgeRectCallout = 7,
    /**
     * Represents the wedge round rectangle callout shape.
     */
    WedgeRoundRectCallout = 8,
    /**
     * Represents the wedge ellipse callout shape.
     */
    WedgeEllipseCallout = 9,
    /**
     * Represents the line callout shape.
     */
    LineCallout = 10,
    /**
     * Represents the bent line callout  shape.
     */
    BentLineCallout = 11,
    /**
     * Represents the line with accent bar callout shape.
     */
    LineWithAccentBarCallout = 12,
    /**
     * Represents the bent line with accent bar callout shape.
     */
    BentLineWithAccentBarCallout = 13,
    /**
     * This type is only used for special file processing
     */
    Line = 14,
}

/**
 * Represents the region type of the map chart.
 */
export enum MapChartRegionType {
    /**
     * Automatic
     */
    Automatic = 0,
    /**
     * Only Data.
     */
    DataOnly = 1,
    /**
     * Country region list.
     */
    CountryRegionList = 2,
    /**
     * World.
     */
    World = 3,
}

/**
 * Represents projection type of the map chart.
 */
export enum MapChartProjectionType {
    /**
     * Automatic
     */
    Automatic = 0,
    /**
     * Mercator
     */
    Mercator = 1,
    /**
     * Miller
     */
    Miller = 2,
    /**
     * Albers
     */
    Albers = 3,
}

/**
 * Represents the layout of map chart's labels.
 */
export enum MapChartLabelLayout {
    /**
     * Only best fit.
     */
    BestFitOnly = 0,
    /**
     * Shows all labels.
     */
    ShowAll = 1,
    /**
     * No labels.
     */
    None = 2,
}

/**
 * Represents quartile calculation methods.
 */
export enum QuartileCalculationType {
    /**
     * The quartile calculation includes the median when splitting the dataset into quartiles.
     */
    Exclusive = 0,
    /**
     * The quartile calculation excludes the median when splitting the dataset into quartiles.
     */
    Inclusive = 1,
}

/**
 * Represents the properties of series layout.
 */
export class SeriesLayoutProperties {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Indicates whether showing connector lines between data points.
     */
    getShowConnectorLines() : boolean;
    /**
     * Indicates whether showing connector lines between data points.
     * @param value - The value to set.
     */
    setShowConnectorLines(value: boolean) : void;
    /**
     * Indicates whether showing the line connecting all mean points.
     */
    getShowMeanLine() : boolean;
    /**
     * Indicates whether showing the line connecting all mean points.
     * @param value - The value to set.
     */
    setShowMeanLine(value: boolean) : void;
    /**
     * Indicates whether showing outlier data points.
     */
    getShowOutlierPoints() : boolean;
    /**
     * Indicates whether showing outlier data points.
     * @param value - The value to set.
     */
    setShowOutlierPoints(value: boolean) : void;
    /**
     * Indicates whether showing markers denoting the mean.
     */
    getShowMeanMarker() : boolean;
    /**
     * Indicates whether showing markers denoting the mean.
     * @param value - The value to set.
     */
    setShowMeanMarker(value: boolean) : void;
    /**
     * Indicates whether showing non-outlier data points.
     */
    getShowInnerPoints() : boolean;
    /**
     * Indicates whether showing non-outlier data points.
     * @param value - The value to set.
     */
    setShowInnerPoints(value: boolean) : void;
    /**
     * Represents the index of a subtotal data point.
     */
    getSubtotals() : number[];
    /**
     * Represents the index of a subtotal data point.
     * @param value - The value to set.
     */
    setSubtotals(value: number[]) : void;
    /**
     * Represents the statistical properties for the series.
     */
    getQuartileCalculation() : QuartileCalculationType;
    /**
     * Represents the statistical properties for the series.
     * @param value - The value to set.
     */
    setQuartileCalculation(value: QuartileCalculationType) : void;
    /**
     * Gets and sets the layout of map labels.
     */
    getMapLabelLayout() : MapChartLabelLayout;
    /**
     * Gets and sets the layout of map labels.
     * @param value - The value to set.
     */
    setMapLabelLayout(value: MapChartLabelLayout) : void;
    /**
     * Indicates whether the interval is closed on the left side.
     */
    isIntervalLeftClosed() : boolean;
    /**
     * Indicates whether the interval is closed on the left side.
     * @param value - The value to set.
     */
    setIsIntervalLeftClosed(value: boolean) : void;
    /**
     * Gets and sets the region type of the map.
     */
    getMapChartRegionType() : MapChartRegionType;
    /**
     * Gets and sets the region type of the map.
     * @param value - The value to set.
     */
    setMapChartRegionType(value: MapChartRegionType) : void;
    /**
     * Gets and sets the projection type of the map.
     */
    getMapChartProjectionType() : MapChartProjectionType;
    /**
     * Gets and sets the projection type of the map.
     * @param value - The value to set.
     */
    setMapChartProjectionType(value: MapChartProjectionType) : void;
}

/**
 * Represents conditional formatting condition.
 */
export class FormatCondition {
    /**
     * Gets and sets the conditional format operator type.
     */
    getOperator() : OperatorType;
    /**
     * Gets and sets the conditional format operator type.
     * @param value - The value to set.
     */
    setOperator(value: OperatorType) : void;
    /**
     * True, no rules with lower priority may be applied over this rule, when this rule evaluates to true.
     * Only applies for Excel 2007;
     */
    getStopIfTrue() : boolean;
    /**
     * True, no rules with lower priority may be applied over this rule, when this rule evaluates to true.
     * Only applies for Excel 2007;
     * @param value - The value to set.
     */
    setStopIfTrue(value: boolean) : void;
    /**
     * The priority of this conditional formatting rule. This value is used to determine which
     * format should be evaluated and rendered. Lower numeric values are higher priority than
     * higher numeric values, where '1' is the highest priority.
     */
    getPriority() : number;
    /**
     * The priority of this conditional formatting rule. This value is used to determine which
     * format should be evaluated and rendered. Lower numeric values are higher priority than
     * higher numeric values, where '1' is the highest priority.
     * @param value - The value to set.
     */
    setPriority(value: number) : void;
    /**
     * Gets or setts style of conditional formatted cell ranges.
     */
    getStyle() : Style;
    /**
     * Gets or setts style of conditional formatted cell ranges.
     * @param value - The value to set.
     */
    setStyle(value: Style) : void;
    /**
     * Gets and sets whether the conditional format Type.
     */
    getType() : FormatConditionType;
    /**
     * Gets and sets whether the conditional format Type.
     * @param value - The value to set.
     */
    setType(value: FormatConditionType) : void;
    /**
     * Get the conditional formatting's "IconSet" instance.
     * The default instance's IconSetType is TrafficLights31.
     * Valid only for type = IconSet.
     */
    getIconSet() : IconSet;
    /**
     * Get the conditional formatting's "DataBar" instance.
     * The default instance's color is blue.
     * Valid only for type is DataBar.
     */
    getDataBar() : DataBar;
    /**
     * Get the conditional formatting's "ColorScale" instance.
     * The default instance is a "green-yellow-red" 3ColorScale .
     * Valid only for type = ColorScale.
     */
    getColorScale() : ColorScale;
    /**
     * Get the conditional formatting's "Top10" instance.
     * The default instance's rule highlights cells whose
     * values fall in the top 10 bracket.
     * Valid only for type is Top10.
     */
    getTop10() : Top10;
    /**
     * Get the conditional formatting's "AboveAverage" instance.
     * The default instance's rule highlights cells that are
     * above the average for all values in the range.
     * Valid only for type = AboveAverage.
     */
    getAboveAverage() : AboveAverage;
    /**
     * The text value in a "text contains" conditional formatting rule.
     * Valid only for type = containsText, notContainsText, beginsWith and endsWith.
     * The default value is null.
     */
    getText() : string;
    /**
     * The text value in a "text contains" conditional formatting rule.
     * Valid only for type = containsText, notContainsText, beginsWith and endsWith.
     * The default value is null.
     * @param value - The value to set.
     */
    setText(value: string) : void;
    /**
     * The applicable time period in a "date occurring…" conditional formatting rule.
     * Valid only for type = timePeriod.
     * The default value is TimePeriodType.Today.
     */
    getTimePeriod() : TimePeriodType;
    /**
     * The applicable time period in a "date occurring…" conditional formatting rule.
     * Valid only for type = timePeriod.
     * The default value is TimePeriodType.Today.
     * @param value - The value to set.
     */
    setTimePeriod(value: TimePeriodType) : void;
    /**
     * Gets the value or expression associated with this format condition.
     * @param isR1C1 - Whether the formula needs to be formatted as R1C1.
     * @param isLocal - Whether the formula needs to be formatted by locale.
     * @returns
     * The value or expression associated with this format condition.
     */
    getFormula1(isR1C1: boolean, isLocal: boolean) : string;
    /**
     * Gets the value or expression of the conditional formatting of the cell.
     * @param isR1C1 - Whether the formula needs to be formatted as R1C1.
     * @param isLocal - Whether the formula needs to be formatted by locale.
     * @param row - The row index.
     * @param column - The column index.
     * @returns
     * The value or expression associated with the conditional formatting of the cell.
     * 
     * @remarks
     * The given cell must be contained by this conditional formatting, otherwise null will be returned.
     */
    getFormula1(isR1C1: boolean, isLocal: boolean, row: number, column: number) : string;
    /**
     * Gets the formula of the conditional formatting of the cell.
     * @param row - The row index.
     * @param column - The column index.
     * @returns
     * The formula.
     */
    getFormula1(row: number, column: number) : string;
    /**
     * Gets the value or expression associated with this format condition.
     * @param isR1C1 - Whether the formula needs to be formatted as R1C1.
     * @param isLocal - Whether the formula needs to be formatted by locale.
     * @returns
     * The value or expression associated with this format condition.
     */
    getFormula2(isR1C1: boolean, isLocal: boolean) : string;
    /**
     * Gets the value or expression of the conditional formatting of the cell.
     * @param isR1C1 - Whether the formula needs to be formatted as R1C1.
     * @param isLocal - Whether the formula needs to be formatted by locale.
     * @param row - The row index.
     * @param column - The column index.
     * @returns
     * The value or expression associated with the conditional formatting of the cell.
     * 
     * @remarks
     * The given cell must be contained by this conditional formatting, otherwise null will be returned.
     */
    getFormula2(isR1C1: boolean, isLocal: boolean, row: number, column: number) : string;
    /**
     * Gets the formula of the conditional formatting of the cell.
     * @param row - The row index.
     * @param column - The column index.
     * @returns
     * The formula.
     */
    getFormula2(row: number, column: number) : string;
    /**
     * Sets the value or expression associated with this format condition.
     * @param formula1 - The value or expression associated with this format condition.         /// If the input value starts with '=', then it will be taken as formula. Otherwise it will be taken as plain value(text, number, bool).         /// For text value that starts with '=', user may input it as formula in format: "=\"=...\"".
     * @param formula2 - The value or expression associated with this format condition. The input format is same with formula1
     * @param isR1C1 - Whether the formula is R1C1 formula.
     * @param isLocal - Whether the formula is locale formatted.
     */
    setFormulas(formula1: string, formula2: string, isR1C1: boolean, isLocal: boolean) : void;
    /**
     * Sets the value or expression associated with this format condition.
     * @param formula - The value or expression associated with this format condition.         /// If the input value starts with '=', then it will be taken as formula. Otherwise it will be taken as plain value(text, number, bool).         /// For text value that starts with '=', user may input it as formula in format: "=\"=...\"".
     * @param isR1C1 - Whether the formula is R1C1 formula.
     * @param isLocal - Whether the formula is locale formatted.
     */
    setFormula1(formula: string, isR1C1: boolean, isLocal: boolean) : void;
    /**
     * Sets the value or expression associated with this format condition.
     * @param formula - The value or expression associated with this format condition.         /// If the input value starts with '=', then it will be taken as formula. Otherwise it will be taken as plain value(text, number, bool).         /// For text value that starts with '=', user may input it as formula in format: "=\"=...\"".
     * @param isR1C1 - Whether the formula is R1C1 formula.
     * @param isLocal - Whether the formula is locale formatted.
     */
    setFormula2(formula: string, isR1C1: boolean, isLocal: boolean) : void;
}

/**
 * PdfBookmarkEntry is an entry in pdf bookmark.
 * if Text property of current instance is null or "",
 * current instance will be hidden and children will be inserted on current level.
 */
export class PdfBookmarkEntry {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Title of a bookmark.
     */
    getText() : string;
    /**
     * Title of a bookmark.
     * @param value - The value to set.
     */
    setText(value: string) : void;
    /**
     * The cell to which the bookmark link.
     */
    getDestination() : Cell;
    /**
     * The cell to which the bookmark link.
     * @param value - The value to set.
     */
    setDestination(value: Cell) : void;
    /**
     * Gets or sets name of destination.
     * 
     * @remarks
     * If destination name is set, the destination will be defined as a named destination with this name.
     */
    getDestinationName() : string;
    /**
     * Gets or sets name of destination.
     * @param value - The value to set.
     * 
     * @remarks
     * If destination name is set, the destination will be defined as a named destination with this name.
     */
    setDestinationName(value: string) : void;
    /**
     * When this property is true, the bookmarkentry will expand, otherwise it will collapse.
     */
    isOpen() : boolean;
    /**
     * When this property is true, the bookmarkentry will expand, otherwise it will collapse.
     * @param value - The value to set.
     */
    setIsOpen(value: boolean) : void;
    /**
     * When this property is true, the bookmarkentry will collapse, otherwise it will expand.
     */
    isCollapse() : boolean;
    /**
     * When this property is true, the bookmarkentry will collapse, otherwise it will expand.
     * @param value - The value to set.
     */
    setIsCollapse(value: boolean) : void;
}

/**
 * Represents the effect type of reflection.
 */
export enum ReflectionEffectType {
    /**
     * No reflection effect.
     */
    None = 0,
    /**
     * Custom reflection effect.
     */
    Custom = 1,
    /**
     * Tight reflection, touching.
     */
    TightReflectionTouching = 2,
    /**
     * Half reflection, touching.
     */
    HalfReflectionTouching = 3,
    /**
     * Full reflection, touching.
     */
    FullReflectionTouching = 4,
    /**
     * Tight reflection, 4 pt offset.
     */
    TightReflection4PtOffset = 5,
    /**
     * Half reflection, 4 pt offset.
     */
    HalfReflection4PtOffset = 6,
    /**
     * Full reflection, 4 pt offset.
     */
    FullReflection4PtOffset = 7,
    /**
     * Tight reflection, 8 pt offset.
     */
    TightReflection8PtOffset = 8,
    /**
     * Half reflection, 8 pt offset.
     */
    HalfReflection8PtOffset = 9,
    /**
     * Full reflection, 8 pt offset.
     */
    FullReflection8PtOffset = 10,
}

/**
 * Represents a preset for a type of bevel which can be applied to a shape in 3D.
 */
export enum BevelPresetType {
    /**
     * No bevel
     */
    None = 0,
    /**
     * Angle
     */
    Angle = 1,
    /**
     * Art deco
     */
    ArtDeco = 2,
    /**
     * Circle
     */
    Circle = 3,
    /**
     * Convex
     */
    Convex = 4,
    /**
     * Cool slant
     */
    CoolSlant = 5,
    /**
     * Cross
     */
    Cross = 6,
    /**
     * Divot
     */
    Divot = 7,
    /**
     * Hard edge
     */
    HardEdge = 8,
    /**
     * Relaxed inset
     */
    RelaxedInset = 9,
    /**
     * Riblet
     */
    Riblet = 10,
    /**
     * Slope
     */
    Slope = 11,
    /**
     * Soft round
     */
    SoftRound = 12,
}

/**
 * Represents a shape's three-dimensional formatting.
 */
export class ThreeDFormat {
    /**
     * Gets and sets the width of the bottom bevel, or how far into the shape it is applied.
     * In unit of Points.
     */
    getBottomBevelWidth() : number;
    /**
     * Gets and sets the width of the bottom bevel, or how far into the shape it is applied.
     * In unit of Points.
     * @param value - The value to set.
     */
    setBottomBevelWidth(value: number) : void;
    /**
     * Gets and sets the height of the bottom bevel, or how far into the shape it is applied.
     * In unit of Points.
     */
    getBottomBevelHeight() : number;
    /**
     * Gets and sets the height of the bottom bevel, or how far into the shape it is applied.
     * In unit of Points.
     * @param value - The value to set.
     */
    setBottomBevelHeight(value: number) : void;
    /**
     * Gets and sets the type of the bottom bevel, or how far into the shape it is applied.
     * In unit of Points.
     */
    getBottomBevelType() : BevelType;
    /**
     * Gets and sets the type of the bottom bevel, or how far into the shape it is applied.
     * In unit of Points.
     * @param value - The value to set.
     */
    setBottomBevelType(value: BevelType) : void;
    /**
     * Gets and sets the width of the top bevel, or how far into the shape it is applied.
     * In unit of Points.
     */
    getTopBevelWidth() : number;
    /**
     * Gets and sets the width of the top bevel, or how far into the shape it is applied.
     * In unit of Points.
     * @param value - The value to set.
     */
    setTopBevelWidth(value: number) : void;
    /**
     * Gets and sets the height of the top bevel, or how far into the shape it is applied.
     * In unit of Points.
     */
    getTopBevelHeight() : number;
    /**
     * Gets and sets the height of the top bevel, or how far into the shape it is applied.
     * In unit of Points.
     * @param value - The value to set.
     */
    setTopBevelHeight(value: number) : void;
    /**
     * Gets and sets the type of the top bevel, or how far into the shape it is applied.
     * In unit of Points.
     */
    getTopBevelType() : BevelType;
    /**
     * Gets and sets the type of the top bevel, or how far into the shape it is applied.
     * In unit of Points.
     * @param value - The value to set.
     */
    setTopBevelType(value: BevelType) : void;
    /**
     * Represents the preset material which is combined with the lighting properties to give the
     * final look and feel of a shape.
     */
    getMaterial() : PresetMaterialType;
    /**
     * Represents the preset material which is combined with the lighting properties to give the
     * final look and feel of a shape.
     * @param value - The value to set.
     */
    setMaterial(value: PresetMaterialType) : void;
    /**
     * Gets and sets the contour color on a shape.
     */
    getContourColor() : CellsColor;
    /**
     * Gets and sets the contour color on a shape.
     * @param value - The value to set.
     */
    setContourColor(value: CellsColor) : void;
    /**
     * Gets and sets the contour width on the shape, in unit of points.
     */
    getContourWidth() : number;
    /**
     * Gets and sets the contour width on the shape, in unit of points.
     * @param value - The value to set.
     */
    setContourWidth(value: number) : void;
    /**
     * Gets the extrusion color on a shape.
     */
    getExtrusionColor() : CellsColor;
    /**
     * Gets the extrusion color on a shape.
     * @param value - The value to set.
     */
    setExtrusionColor(value: CellsColor) : void;
    /**
     * Gets and sets the extrusion height of the applied to the shape, in unit of points.
     */
    getExtrusionHeight() : number;
    /**
     * Gets and sets the extrusion height of the applied to the shape, in unit of points.
     * @param value - The value to set.
     */
    setExtrusionHeight(value: number) : void;
    /**
     * Defines the distance from ground for the 3D shape.
     */
    getZ() : number;
    /**
     * Defines the distance from ground for the 3D shape.
     * @param value - The value to set.
     */
    setZ(value: number) : void;
    /**
     * Gets and sets the angle of the extrusion lights.
     */
    getLightAngle() : number;
    /**
     * Gets and sets the angle of the extrusion lights.
     * @param value - The value to set.
     */
    setLightAngle(value: number) : void;
    /**
     * Gets and sets type of light rig.
     */
    getLighting() : LightRigType;
    /**
     * Gets and sets type of light rig.
     * @param value - The value to set.
     */
    setLighting(value: LightRigType) : void;
    /**
     * Gets and sets the direction from which the light rig is oriented in relation to the scene.
     */
    getLightingDirection() : LightRigDirectionType;
    /**
     * Gets and sets the direction from which the light rig is oriented in relation to the scene.
     * @param value - The value to set.
     */
    setLightingDirection(value: LightRigDirectionType) : void;
    /**
     * Gets and sets the angle at which a ThreeDFormat object can be viewed.
     */
    getPerspective() : number;
    /**
     * Gets and sets the angle at which a ThreeDFormat object can be viewed.
     * @param value - The value to set.
     */
    setPerspective(value: number) : void;
    /**
     * Gets and sets the rotation of the extruded shape around the x-axis in degrees.
     */
    getRotationX() : number;
    /**
     * Gets and sets the rotation of the extruded shape around the x-axis in degrees.
     * @param value - The value to set.
     */
    setRotationX(value: number) : void;
    /**
     * Gets and sets the rotation of the extruded shape around the y-axis in degrees.
     */
    getRotationY() : number;
    /**
     * Gets and sets the rotation of the extruded shape around the y-axis in degrees.
     * @param value - The value to set.
     */
    setRotationY(value: number) : void;
    /**
     * Gets and sets the rotation of the extruded shape around the z-axis in degrees.
     */
    getRotationZ() : number;
    /**
     * Gets and sets the rotation of the extruded shape around the z-axis in degrees.
     * @param value - The value to set.
     */
    setRotationZ(value: number) : void;
    /**
     * Gets and sets the extrusion preset camera type.
     */
    getPresetCameraType() : PresetCameraType;
    /**
     * Gets and sets the extrusion preset camera type.
     * @param value - The value to set.
     */
    setPresetCameraType(value: PresetCameraType) : void;
    /**
     * Gets hashcode.
     */
    getHashCode() : number;
}

/**
 * Represents the dialog box.
 */
export class Dialog_Box extends Shape {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Shape);
}

/**
 * Represents line and arrowhead formatting.
 */
export class MsoLineFormatHelper {
    /**
     * Indicates whether the object is visible.
     */
    isVisible() : boolean;
    /**
     * Indicates whether the object is visible.
     * @param value - The value to set.
     */
    setIsVisible(value: boolean) : void;
    /**
     * Returns a Style object that represents the style of the specified range.
     */
    getStyle() : MsoLineStyle;
    /**
     * Returns a Style object that represents the style of the specified range.
     * @param value - The value to set.
     */
    setStyle(value: MsoLineStyle) : void;
    /**
     * Gets and sets the border line fore color.
     */
    getForeColor() : Color;
    /**
     * Gets and sets the border line fore color.
     * @param value - The value to set.
     */
    setForeColor(value: Color) : void;
    /**
     * Gets and sets the border line back color.
     */
    getBackColor() : Color;
    /**
     * Gets and sets the border line back color.
     * @param value - The value to set.
     */
    setBackColor(value: Color) : void;
    /**
     * Gets or sets the dash style for the specified line.
     */
    getDashStyle() : MsoLineDashStyle;
    /**
     * Gets or sets the dash style for the specified line.
     * @param value - The value to set.
     */
    setDashStyle(value: MsoLineDashStyle) : void;
    /**
     * Returns or sets the degree of transparency of the specified fill as a value from 0.0 (opaque) through 1.0 (clear).
     */
    getTransparency() : number;
    /**
     * Returns or sets the degree of transparency of the specified fill as a value from 0.0 (opaque) through 1.0 (clear).
     * @param value - The value to set.
     */
    setTransparency(value: number) : void;
    /**
     * Returns or sets the weight of the line ,in units of pt.
     */
    getWeight() : number;
    /**
     * Returns or sets the weight of the line ,in units of pt.
     * @param value - The value to set.
     */
    setWeight(value: number) : void;
}

/**
 * Represents all setting of the line.
 */
export class LineFormat extends FillFormat {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: FillFormat);
    /**
     * Specifies the line compound type.
     */
    getCompoundType() : MsoLineStyle;
    /**
     * Specifies the line compound type.
     * @param value - The value to set.
     */
    setCompoundType(value: MsoLineStyle) : void;
    /**
     * Specifies the line dash type.
     */
    getDashStyle() : MsoLineDashStyle;
    /**
     * Specifies the line dash type.
     * @param value - The value to set.
     */
    setDashStyle(value: MsoLineDashStyle) : void;
    /**
     * Specifies the ending caps.
     */
    getCapType() : LineCapType;
    /**
     * Specifies the ending caps.
     * @param value - The value to set.
     */
    setCapType(value: LineCapType) : void;
    /**
     * Specifies the line join type.
     */
    getJoinType() : LineJoinType;
    /**
     * Specifies the line join type.
     * @param value - The value to set.
     */
    setJoinType(value: LineJoinType) : void;
    /**
     * Gets and sets the begin arrow type of the line.
     */
    getBeginArrowheadStyle() : MsoArrowheadStyle;
    /**
     * Gets and sets the begin arrow type of the line.
     * @param value - The value to set.
     */
    setBeginArrowheadStyle(value: MsoArrowheadStyle) : void;
    /**
     * Gets and sets the begin arrow width type of the line.
     */
    getBeginArrowheadWidth() : MsoArrowheadWidth;
    /**
     * Gets and sets the begin arrow width type of the line.
     * @param value - The value to set.
     */
    setBeginArrowheadWidth(value: MsoArrowheadWidth) : void;
    /**
     * Gets and sets the begin arrow length type of the line.
     */
    getBeginArrowheadLength() : MsoArrowheadLength;
    /**
     * Gets and sets the begin arrow length type of the line.
     * @param value - The value to set.
     */
    setBeginArrowheadLength(value: MsoArrowheadLength) : void;
    /**
     * Gets and sets the end arrow type of the line.
     */
    getEndArrowheadStyle() : MsoArrowheadStyle;
    /**
     * Gets and sets the end arrow type of the line.
     * @param value - The value to set.
     */
    setEndArrowheadStyle(value: MsoArrowheadStyle) : void;
    /**
     * Gets and sets the end arrow width type of the line.
     */
    getEndArrowheadWidth() : MsoArrowheadWidth;
    /**
     * Gets and sets the end arrow width type of the line.
     * @param value - The value to set.
     */
    setEndArrowheadWidth(value: MsoArrowheadWidth) : void;
    /**
     * Gets and sets the end arrow length type of the line.
     */
    getEndArrowheadLength() : MsoArrowheadLength;
    /**
     * Gets and sets the end arrow length type of the line.
     * @param value - The value to set.
     */
    setEndArrowheadLength(value: MsoArrowheadLength) : void;
    /**
     * Gets or sets the weight of the line in unit of points.
     */
    getWeight() : number;
    /**
     * Gets or sets the weight of the line in unit of points.
     * @param value - The value to set.
     */
    setWeight(value: number) : void;
    /**
     * Gets the hash code.
     */
    getHashCode() : number;
}

/**
 * Represents the exported file path provider.
 */
export interface IFilePathProvider {
    /**
     * Gets the full path of the file by Worksheet name when exporting Worksheet to html separately.
     * So the references among the Worksheets can be exported correctly.
     * @param sheetName - Worksheet name
     * @returns
     * the full path of the file
     */
    getFullName(sheetName: string) : string;
}

/**
 * Represents the smart art.
 */
export class SmartArtShape extends Shape {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Shape);
    /**
     * Converting smart art to grouped shapes.
     */
    getResultOfSmartArt() : GroupShape;
}

/**
 * Represents the shape of web extension.
 */
export class WebExtensionShape extends Shape {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Shape);
    /**
     * Gets and set the web extension.
     */
    getWebExtension() : WebExtension;
    /**
     * Gets and set the web extension.
     * @param value - The value to set.
     */
    setWebExtension(value: WebExtension) : void;
}

/**
 * Represents the preset WordArt styles.
 */
export enum PresetWordArtStyle {
    /**
     * Fill - Black, Text 1, Shadow
     */
    WordArtStyle1 = 1,
    /**
     * Fill - Blue, Accent 1, Shadow
     */
    WordArtStyle2 = 2,
    /**
     * Fill - Orange, Accent 2, Outline - Accent 2
     */
    WordArtStyle3 = 3,
    /**
     * Fill - White, Outline - Accent 1, Shadow
     */
    WordArtStyle4 = 4,
    /**
     * Fill - Gold, Accent 4, Soft Bevel
     */
    WordArtStyle5 = 5,
    /**
     * Gradient Fill - Gray
     */
    WordArtStyle6 = 6,
    /**
     * Gradient Fill - Blue, Accent 1, Reflection
     */
    WordArtStyle7 = 7,
    /**
     * Gradient Fill - Gold, Accent 4, Outline - Accent 4
     */
    WordArtStyle8 = 8,
    /**
     * Fill - White, Outline - Accent 1, Glow - Accent 1
     */
    WordArtStyle9 = 9,
    /**
     * Fill - Gray-50%, Accent 3, Sharp Bevel
     */
    WordArtStyle10 = 10,
    /**
     * Fill - Black, Text 1, Outline - Background 1, Hard Shadow - Background 1
     */
    WordArtStyle11 = 11,
    /**
     * Fill - Black, Text 1, Outline - Background 1, Hard Shadow - Accent 1
     */
    WordArtStyle12 = 12,
    /**
     * Fill - Blue, Accent 1, Outline - Background 1, Hard Shadow - Accent 1
     */
    WordArtStyle13 = 13,
    /**
     * Fill - White, Outline - Accent 2, Hard Shadow - Accent 2
     */
    WordArtStyle14 = 14,
    /**
     * Fill - Gray-25%, Background 2, Inner Shadow
     */
    WordArtStyle15 = 15,
    /**
     * Pattern Fill - White, Text 2, Dark Upward Diagonal, Shadow
     */
    WordArtStyle16 = 16,
    /**
     * Pattern Fill - Gray-50%, Accent 3, Narrow Horizontal, Inner Shadow
     */
    WordArtStyle17 = 17,
    /**
     * Fill - Blue, Accent 1, 50%, Hard Shadow - Accent 1
     */
    WordArtStyle18 = 18,
    /**
     * Pattern Fill - Blue, Accent 1, Light Downward Diagonal, Outline - Accent 1
     */
    WordArtStyle19 = 19,
    /**
     * Pattern Fill - Blue-Gray, Text 2, Dark Upward Diagonal, Hard Shadow - Text 2
     */
    WordArtStyle20 = 20,
}

/**
 * This class in the equation node is used to store the actual content(a sequence of mathematical text) of the equation.
 * Usually a node object per character.
 */
export class TextRunEquationNode extends EquationNode {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: EquationNode);
    /**
     * Set the content of the text node(Usually a node object per character).
     */
    getText() : string;
    /**
     * Set the content of the text node(Usually a node object per character).
     * @param value - The value to set.
     */
    setText(value: string) : void;
}

/**
 * Represents all text paragraph.
 */
export class TextParagraphCollection {
    /**
     * Gets the <see cref="TextParagraph"/> object at specific index.
     * @param index - The index.
     */
    get(index: number) : TextParagraph;
    /**
     * Gets the count of text paragraphs.
     */
    getCount() : number;
    /**
     * Gets the enumerator of the paragraphs.
     */
    getEnumerator() : TextParagraphEnumerator;
}

/**
 * Encapsulates the object that represents fill formatting for a shape.
 */
export class FillFormat {
    /**
     * Gets and sets fill type
     */
    getFillType() : FillType;
    /**
     * Gets and sets fill type
     * @param value - The value to set.
     */
    setFillType(value: FillType) : void;
    /**
     * Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
     */
    getTransparency() : number;
    /**
     * Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
     * @param value - The value to set.
     */
    setTransparency(value: number) : void;
    /**
     * Gets <see cref="GradientFill"/> object.
     */
    getGradientFill() : GradientFill;
    /**
     * Gets <see cref="TextureFill"/> object.
     */
    getTextureFill() : TextureFill;
    /**
     * Gets <see cref="SolidFill"/> object.
     */
    getSolidFill() : SolidFill;
    /**
     * Gets <see cref="PatternFill"/> object.
     */
    getPatternFill() : PatternFill;
    /**
     * Returns the gradient color type for the specified fill.
     */
    getGradientColorType() : GradientColorType;
    /**
     * Returns the gradient style for the specified fill.
     */
    getGradientStyle() : GradientStyleType;
    /**
     * Returns the gradient color 1 for the specified fill.
     */
    getGradientColor1() : Color;
    /**
     * Returns the gradient color 2 for the specified fill.
     * 
     * @remarks
     * Only when the gradient color type is GradientColorType.TwoColors, this property is meaningful.
     */
    getGradientColor2() : Color;
    /**
     * Returns the gradient degree for the specified fill.
     * Only applies for Excel 2007.
     * 
     * @remarks
     * Can only be a value from 0.0 (dark) through 1.0 (light).
     */
    getGradientDegree() : number;
    /**
     * Returns the gradient variant for the specified fill.
     * Only applies for Excel 2007.
     * 
     * @remarks
     * Can only be a value from 1 through 4, corresponding to one of the four variants on the Gradient tab in the Fill Effects dialog box. If style is GradientStyle.FromCenter, the Variant argument can only be 1 or 2.
     */
    getGradientVariant() : number;
    /**
     * Returns the gradient preset color for the specified fill.
     */
    getPresetColor() : GradientPresetType;
    /**
     * Represents the texture type for the specified fill.
     */
    getTexture() : TextureType;
    /**
     * Represents the texture type for the specified fill.
     * @param value - The value to set.
     */
    setTexture(value: TextureType) : void;
    /**
     * Represents an area's display pattern.
     */
    getPattern() : FillPattern;
    /**
     * Represents an area's display pattern.
     * @param value - The value to set.
     */
    setPattern(value: FillPattern) : void;
    /**
     * Gets and sets the picture format type.
     */
    getPictureFormatType() : FillPictureType;
    /**
     * Gets and sets the picture format type.
     * @param value - The value to set.
     */
    setPictureFormatType(value: FillPictureType) : void;
    /**
     * Gets and sets the picture format scale.
     */
    getScale() : number;
    /**
     * Gets and sets the picture format scale.
     * @param value - The value to set.
     */
    setScale(value: number) : void;
    /**
     * Gets and sets the picture image data.
     * 
     * @remarks
     * If the fill format is not custom texture format, returns null.
     */
    getImageData() : number[];
    /**
     * Gets and sets the picture image data.
     * @param value - The value to set.
     * 
     * @remarks
     * If the fill format is not custom texture format, returns null.
     */
    setImageData(value: number[]) : void;
    /**
     * Sets the specified fill to a one-color gradient.
     * Only applies for Excel 2007.
     * @param color - One gradient color.
     * @param degree - The gradient degree. Can be a value from 0.0 (dark) through 1.0 (light).
     * @param style - Gradient shading style.
     * @param variant - The gradient variant. Can be a value from 1 through 4, corresponding to one of the four variants on the Gradient tab in the Fill Effects dialog box. If style is GradientStyle.FromCenter, the Variant argument can only be 1 or 2.
     */
    setOneColorGradient(color: Color, degree: number, style: GradientStyleType, variant: number) : void;
    /**
     * Sets the specified fill to a two-color gradient.
     * Only applies for Excel 2007.
     * @param color1 - One gradient color.
     * @param color2 - Two gradient color.
     * @param style - Gradient shading style.
     * @param variant - The gradient variant. Can be a value from 1 through 4, corresponding to one of the four variants on the Gradient tab in the Fill Effects dialog box. If style is GradientStyle.FromCenter, the Variant argument can only be 1 or 2.
     */
    setTwoColorGradient(color1: Color, color2: Color, style: GradientStyleType, variant: number) : void;
    /**
     * Sets the specified fill to a two-color gradient.
     * Only applies for Excel 2007.
     * @param color1 - One gradient color.
     * @param transparency1 - The degree of transparency of the color1 as a value from 0.0 (opaque) through 1.0 (clear).
     * @param color2 - Two gradient color.
     * @param transparency2 - The degree of transparency of the color2 as a value from 0.0 (opaque) through 1.0 (clear).
     * @param style - Gradient shading style.
     * @param variant - The gradient variant. Can be a value from 1 through 4, corresponding to one of the four variants on the Gradient tab in the Fill Effects dialog box. If style is GradientStyle.FromCenter, the Variant argument can only be 1 or 2.
     */
    setTwoColorGradient(color1: Color, transparency1: number, color2: Color, transparency2: number, style: GradientStyleType, variant: number) : void;
    /**
     * Sets the specified fill to a preset-color gradient.
     * Only applies for Excel 2007.
     * @param presetColor - Preset color type
     * @param style - Gradient shading style.
     * @param variant - The gradient variant. Can be a value from 1 through 4, corresponding to one of the four variants on the Gradient tab in the Fill Effects dialog box. If style is GradientStyle.FromCenter, the Variant argument can only be 1 or 2.
     */
    setPresetColorGradient(presetColor: GradientPresetType, style: GradientStyleType, variant: number) : void;
    /**
     * Gets the hash code.
     */
    getHashCode() : number;
}

/**
 * Specifies a data model connection
 */
export class DataModelConnection extends ExternalConnection {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: ExternalConnection);
}

/**
 * Represents the type of external link.
 */
export enum ExternalLinkType {
    /**
     * Represents the DDE link.
     */
    DDELink = 0,
    /**
     * Represents external link.
     */
    External = 1,
}

/**
 * Represents the single TrueType font file stored in the file system.
 */
export class FileFontSource extends FontSourceBase {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: FontSourceBase);
    /**
     * Ctor.
     * @param filePath - path to font file
     */
    constructor(filePath: string);
    /**
     * Path to font file.
     */
    getFilePath() : string;
    /**
     * Returns the type of the font source.
     */
    getType() : FontSourceType;
}

/**
 * Represents the folder that contains TrueType font files.
 */
export class FolderFontSource extends FontSourceBase {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: FontSourceBase);
    /**
     * Ctor.
     * @param folderPath - path to fonts folder
     * @param scanSubfolders - Determines whether or not to scan subfolders.
     */
    constructor(folderPath: string, scanSubfolders: boolean);
    /**
     * Path to fonts folder.
     */
    getFolderPath() : string;
    /**
     * Determines whether or not to scan the subfolders.
     */
    getScanSubFolders() : boolean;
    /**
     * Returns the type of the font source.
     */
    getType() : FontSourceType;
}

/**
 * Specifies font settings
 */
export class FontConfigs {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets or sets the default font name.
     */
    static getDefaultFontName() : string;
    /**
     * Gets or sets the default font name.
     * @param value - The value to set.
     */
    static setDefaultFontName(value: string) : void;
    /**
     * Indicate whether to use system font substitutes first or not when a font is not presented and the substitute of this font is not set.
     * e.g. On Ubuntu, "Arial" font is generally substituted by "Liberation Sans".
     * Default value is false.
     */
    static getPreferSystemFontSubstitutes() : boolean;
    /**
     * Indicate whether to use system font substitutes first or not when a font is not presented and the substitute of this font is not set.
     * e.g. On Ubuntu, "Arial" font is generally substituted by "Liberation Sans".
     * Default value is false.
     * @param value - The value to set.
     */
    static setPreferSystemFontSubstitutes(value: boolean) : void;
    /**
     * Indicate whether the font is available.
     * @param fontName - font name
     * @returns
     * true if font is available, otherwise false.
     */
    static isFontAvailable(fontName: string) : boolean;
    /**
     * Font substitute names for given original font name.
     * @param originalFontName - Original font name.
     * @param substituteFontNames - List of font substitute names to be used if original font is not presented.
     */
    static setFontSubstitutes(originalFontName: string, substituteFontNames: string[]) : void;
    /**
     * Returns array containing font substitute names to be used if original font is not presented.
     * @param originalFontName - originalFontName
     * @returns
     * An array containing font substitute names to be used if original font is not presented.
     */
    static getFontSubstitutes(originalFontName: string) : string[];
    /**
     * Sets the fonts folder
     * @param fontFolder - The folder that contains TrueType fonts.
     * @param recursive - Determines whether or not to scan subfolders.
     */
    static setFontFolder(fontFolder: string, recursive: boolean) : void;
    /**
     * Sets the fonts folders
     * @param fontFolders - The folders that contains TrueType fonts.
     * @param recursive - Determines whether or not to scan subfolders.
     */
    static setFontFolders(fontFolders: string[], recursive: boolean) : void;
    /**
     * Sets the fonts sources.
     * @param sources - An array of sources that contain TrueType fonts.
     */
    static setFontSources(sources: FontSourceBase[]) : void;
    /**
     * Gets a copy of the array that contains the list of sources
     */
    static getFontSources() : FontSourceBase[];
}

/**
 * This is an abstract base class for the classes that allow the user to specify various font sources
 */
export class FontSourceBase {
    /**
     * Returns the type of the font source.
     */
    getType() : FontSourceType;
}

/**
 * Specifies the type of a font source.
 */
export enum FontSourceType {
    /**
     * represents single font file.
     */
    FontFile = 0,
    /**
     * represents folder with font files.
     */
    FontsFolder = 1,
    /**
     * represents single font in memory.
     */
    MemoryFont = 2,
}

/**
 * Font configs for each <see cref="Workbook"/> object.
 */
export class IndividualFontConfigs {
    /**
     * Ctor.
     */
    constructor();
    /**
     * Font substitute names for given original font name.
     * @param originalFontName - Original font name.
     * @param substituteFontNames - List of font substitute names to be used if original font is not presented.
     */
    setFontSubstitutes(originalFontName: string, substituteFontNames: string[]) : void;
    /**
     * Returns array containing font substitute names to be used if original font is not presented.
     * @param originalFontName - originalFontName
     * @returns
     * An array containing font substitute names to be used if original font is not presented.
     */
    getFontSubstitutes(originalFontName: string) : string[];
    /**
     * Sets the fonts folder
     * @param fontFolder - The folder that contains TrueType fonts.
     * @param recursive - Determines whether or not to scan subfolders.
     */
    setFontFolder(fontFolder: string, recursive: boolean) : void;
    /**
     * Sets the fonts folders
     * @param fontFolders - The folders that contains TrueType fonts.
     * @param recursive - Determines whether or not to scan subfolders.
     */
    setFontFolders(fontFolders: string[], recursive: boolean) : void;
    /**
     * Sets the fonts sources.
     * @param sources - An array of sources that contain TrueType fonts.
     */
    setFontSources(sources: FontSourceBase[]) : void;
    /**
     * Gets a copy of the array that contains the list of sources
     */
    getFontSources() : FontSourceBase[];
}

/**
 * Represents the single TrueType font file stored in memory.
 */
export class MemoryFontSource extends FontSourceBase {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: FontSourceBase);
    /**
     * Ctor.
     * @param fontData - Binary font data.
     */
    constructor(fontData: number[]);
    /**
     * Binary font data.
     */
    getFontData() : number[];
    /**
     * Returns the type of the font source.
     */
    getType() : FontSourceType;
}

/**
 * Represents the options of loading json files
 */
export class JsonLoadOptions extends LoadOptions {
    /**
     * Creates an options of loading the file.
     */
    constructor();
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: LoadOptions);
    /**
     * Gets and sets the start cell.
     */
    getStartCell() : string;
    /**
     * Gets and sets the start cell.
     * @param value - The value to set.
     */
    setStartCell(value: string) : void;
    /**
     * The options of import json.
     */
    getLayoutOptions() : JsonLayoutOptions;
    /**
     * The options of import json.
     * @param value - The value to set.
     */
    setLayoutOptions(value: JsonLayoutOptions) : void;
    /**
     * Indicates whether importing each attribute of JsonObject object as one worksheet when all child nodes are array nodes.
     */
    getMultipleWorksheets() : boolean;
    /**
     * Indicates whether importing each attribute of JsonObject object as one worksheet when all child nodes are array nodes.
     * @param value - The value to set.
     */
    setMultipleWorksheets(value: boolean) : void;
    /**
     * Indicates whether keeping schema of this json.
     * 
     * @remarks
     * Sometimes we will save the file to JSON after loading JSON file.
     */
    getKeptSchema() : boolean;
    /**
     * Indicates whether keeping schema of this json.
     * @param value - The value to set.
     * 
     * @remarks
     * Sometimes we will save the file to JSON after loading JSON file.
     */
    setKeptSchema(value: boolean) : void;
}

/**
 * Represents the options of loading xml.
 */
export class XmlLoadOptions extends LoadOptions {
    /**
     * Represents the options of loading xml file.
     */
    constructor();
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: LoadOptions);
    /**
     * Represents the options of loading xml file.
     * @param type - The load format type.
     */
    constructor(type: LoadFormat);
    /**
     * Gets and sets the start cell.
     * 
     * @remarks
     * Only works when the file is not speadsheetML or mapping xml to Excel.
     */
    getStartCell() : string;
    /**
     * Gets and sets the start cell.
     * @param value - The value to set.
     * 
     * @remarks
     * Only works when the file is not speadsheetML or mapping xml to Excel.
     */
    setStartCell(value: string) : void;
    /**
     * Indicates whether mapping xml to Excel.
     * The default value is false.
     */
    isXmlMap() : boolean;
    /**
     * Indicates whether mapping xml to Excel.
     * The default value is false.
     * @param value - The value to set.
     */
    setIsXmlMap(value: boolean) : void;
    /**
     * Indicates whether importing xml as multiple worksheets.
     */
    getContainsMultipleWorksheets() : boolean;
    /**
     * Indicates whether importing xml as multiple worksheets.
     * @param value - The value to set.
     */
    setContainsMultipleWorksheets(value: boolean) : void;
    /**
     * Indicates whether converting the value in xml file to numeric or date.
     */
    getConvertNumericOrDate() : boolean;
    /**
     * Indicates whether converting the value in xml file to numeric or date.
     * @param value - The value to set.
     */
    setConvertNumericOrDate(value: boolean) : void;
    /**
     * Gets and sets the format of numeric value.
     */
    get_NumberFormat() : string;
    /**
     * Gets and sets the format of numeric value.
     * @param value - The value to set.
     */
    setNumberFormat(value: string) : void;
    /**
     * Gets and sets the format of date value.
     */
    get_DateFormat() : string;
    /**
     * Gets and sets the format of date value.
     * @param value - The value to set.
     */
    setDateFormat(value: string) : void;
    /**
     * Indicates whether ignore attributes of the root element.
     */
    getIgnoreRootAttributes() : boolean;
    /**
     * Indicates whether ignore attributes of the root element.
     * @param value - The value to set.
     */
    setIgnoreRootAttributes(value: boolean) : void;
}

/**
 * Represents the scope type of defined names.
 */
export enum NameScopeType {
    /**
     * All defined names.
     */
    All = 0,
    /**
     * The defined names in the workbook.
     */
    Workbook = 1,
    /**
     * The defined names in a worksheet or all worksheets.
     */
    Worksheet = 2,
}

/**
 * Represents operation type when pasting range.
 */
export enum PasteOperationType {
    /**
     * No operation.
     */
    None = 0,
    /**
     * Add
     */
    Add = 1,
    /**
     * Subtract
     */
    Subtract = 2,
    /**
     * Multiply
     */
    Multiply = 3,
    /**
     * Divide
     */
    Divide = 4,
}

/**
 * Represents the options of saving the workbook as a json file.
 */
export class JsonSaveOptions extends SaveOptions {
    /**
     * Creates options for saving json file.
     */
    constructor();
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: SaveOptions);
    /**
     * Represents the type of exporting hyperlink to json.
     * 
     * @remarks
     * The default value is <see cref="JsonExportHyperlinkType.DisplayString"/>;
     */
    getExportHyperlinkType() : JsonExportHyperlinkType;
    /**
     * Represents the type of exporting hyperlink to json.
     * @param value - The value to set.
     * 
     * @remarks
     * The default value is <see cref="JsonExportHyperlinkType.DisplayString"/>;
     */
    setExportHyperlinkType(value: JsonExportHyperlinkType) : void;
    /**
     * Indicates whether skipping emtpy rows.
     */
    getSkipEmptyRows() : boolean;
    /**
     * Indicates whether skipping emtpy rows.
     * @param value - The value to set.
     */
    setSkipEmptyRows(value: boolean) : void;
    /**
     * Represents the indexes of exported sheets.
     */
    getSheetIndexes() : number[];
    /**
     * Represents the indexes of exported sheets.
     * @param value - The value to set.
     */
    setSheetIndexes(value: number[]) : void;
    /**
     * Gets or sets the exporting range.
     */
    getExportArea() : CellArea;
    /**
     * Gets or sets the exporting range.
     * @param value - The value to set.
     */
    setExportArea(value: CellArea) : void;
    /**
     * Indicates whether the range contains header row.
     */
    getHasHeaderRow() : boolean;
    /**
     * Indicates whether the range contains header row.
     * @param value - The value to set.
     */
    setHasHeaderRow(value: boolean) : void;
    /**
     * Exports the string value of the cells to json.
     */
    getExportAsString() : boolean;
    /**
     * Exports the string value of the cells to json.
     * @param value - The value to set.
     */
    setExportAsString(value: boolean) : void;
    /**
     * Indicates the indent.
     * 
     * @remarks
     * If the indent is null or empty, the exported json is not formatted.
     */
    getIndent() : string;
    /**
     * Indicates the indent.
     * @param value - The value to set.
     * 
     * @remarks
     * If the indent is null or empty, the exported json is not formatted.
     */
    setIndent(value: string) : void;
    /**
     * Exported as parent-child hierarchy Json structure.
     * 
     * @remarks
     */
    getExportNestedStructure() : boolean;
    /**
     * Exported as parent-child hierarchy Json structure.
     * @param value - The value to set.
     * 
     * @remarks
     */
    setExportNestedStructure(value: boolean) : void;
    /**
     * Indicates whether exporting empty cells as null.
     */
    getExportEmptyCells() : boolean;
    /**
     * Indicates whether exporting empty cells as null.
     * @param value - The value to set.
     */
    setExportEmptyCells(value: boolean) : void;
    /**
     * Indicates whether always exporting excel to json as object, even there is only a worksheet in the file.
     */
    getAlwaysExportAsJsonObject() : boolean;
    /**
     * Indicates whether always exporting excel to json as object, even there is only a worksheet in the file.
     * @param value - The value to set.
     */
    setAlwaysExportAsJsonObject(value: boolean) : void;
    /**
     * Indicates whether converting to json struct of the Excel file.
     * 
     * @remarks
     * Only for converting range to JSON.
     */
    getToExcelStruct() : boolean;
    /**
     * Indicates whether converting to json struct of the Excel file.
     * @param value - The value to set.
     * 
     * @remarks
     * Only for converting range to JSON.
     */
    setToExcelStruct(value: boolean) : void;
}

/**
 * Represents column type map.
 */
export class SqlScriptColumnTypeMap {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets string type in the database.
     */
    getStringType() : string;
    /**
     * Gets numeric type in the database.
     */
    getNumbericType() : string;
}

/**
 * Represents the type of operating data.
 */
export enum SqlScriptOperatorType {
    /**
     * Insert data.
     */
    Insert = 0,
    /**
     * Update data.
     */
    Update = 1,
    /**
     * Delete data.
     */
    Delete = 2,
}

/**
 * Represents the options of saving sql.
 */
export class SqlScriptSaveOptions extends SaveOptions {
    /**
     * Creates options for saving sql file.
     */
    constructor();
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: SaveOptions);
    /**
     * Check if the table name exists before creating
     */
    getCheckIfTableExists() : boolean;
    /**
     * Check if the table name exists before creating
     * @param value - The value to set.
     */
    setCheckIfTableExists(value: boolean) : void;
    /**
     * Gets and sets the map of column type for different database.
     */
    getColumnTypeMap() : SqlScriptColumnTypeMap;
    /**
     * Gets and sets the map of column type for different database.
     * @param value - The value to set.
     */
    setColumnTypeMap(value: SqlScriptColumnTypeMap) : void;
    /**
     * Check all data to find columns' data type.
     * 
     * @remarks
     * The default value is false, we only check the first row for performance.
     * If this property is true and the columns contains mixed value type, the columns' type will be text.
     */
    getCheckAllDataForColumnType() : boolean;
    /**
     * Check all data to find columns' data type.
     * @param value - The value to set.
     * 
     * @remarks
     * The default value is false, we only check the first row for performance.
     * If this property is true and the columns contains mixed value type, the columns' type will be text.
     */
    setCheckAllDataForColumnType(value: boolean) : void;
    /**
     * Insert blank line between each data.
     * 
     * @remarks
     * If <see cref="Separator"/> is '\n' , it's better to set this property as true to increase readability.
     */
    getAddBlankLineBetweenRows() : boolean;
    /**
     * Insert blank line between each data.
     * @param value - The value to set.
     * 
     * @remarks
     * If <see cref="Separator"/> is '\n' , it's better to set this property as true to increase readability.
     */
    setAddBlankLineBetweenRows(value: boolean) : void;
    /**
     * Gets and sets character separator of sql script.
     * 
     * @remarks
     * Only can be ' ' or '\n'.
     * If the
     */
    getSeparator() : string;
    /**
     * Gets and sets character separator of sql script.
     * @param value - The value to set.
     * 
     * @remarks
     * Only can be ' ' or '\n'.
     * If the
     */
    setSeparator(value: string) : void;
    /**
     * Gets and sets the operator type of sql.
     */
    getOperatorType() : SqlScriptOperatorType;
    /**
     * Gets and sets the operator type of sql.
     * @param value - The value to set.
     */
    setOperatorType(value: SqlScriptOperatorType) : void;
    /**
     * Represents which column is primary key of the data table.
     */
    getPrimaryKey() : number;
    /**
     * Represents which column is primary key of the data table.
     * @param value - The value to set.
     */
    setPrimaryKey(value: number) : void;
    /**
     * Indicates whether exporting sql of creating table.
     */
    getCreateTable() : boolean;
    /**
     * Indicates whether exporting sql of creating table.
     * @param value - The value to set.
     */
    setCreateTable(value: boolean) : void;
    /**
     * Gets and sets the name of id column.
     * 
     * @remarks
     * If this property is set , a column will be inserted with automatical increment int value.
     */
    getIdName() : string;
    /**
     * Gets and sets the name of id column.
     * @param value - The value to set.
     * 
     * @remarks
     * If this property is set , a column will be inserted with automatical increment int value.
     */
    setIdName(value: string) : void;
    /**
     * Gets and sets the start id.
     * 
     * @remarks
     * Only works when <see cref="IdName"/> is set.
     */
    getStartId() : number;
    /**
     * Gets and sets the start id.
     * @param value - The value to set.
     * 
     * @remarks
     * Only works when <see cref="IdName"/> is set.
     */
    setStartId(value: number) : void;
    /**
     * Gets and sets the table name.
     */
    getTableName() : string;
    /**
     * Gets and sets the table name.
     * @param value - The value to set.
     */
    setTableName(value: string) : void;
    /**
     * Indicates whether exporting all data as string value.
     */
    getExportAsString() : boolean;
    /**
     * Indicates whether exporting all data as string value.
     * @param value - The value to set.
     */
    setExportAsString(value: boolean) : void;
    /**
     * Represents the indexes of exported sheets.
     */
    getSheetIndexes() : number[];
    /**
     * Represents the indexes of exported sheets.
     * @param value - The value to set.
     */
    setSheetIndexes(value: number[]) : void;
    /**
     * Gets or sets the exporting range.
     */
    getExportArea() : CellArea;
    /**
     * Gets or sets the exporting range.
     * @param value - The value to set.
     */
    setExportArea(value: CellArea) : void;
    /**
     * Indicates whether the range contains header row.
     */
    getHasHeaderRow() : boolean;
    /**
     * Indicates whether the range contains header row.
     * @param value - The value to set.
     */
    setHasHeaderRow(value: boolean) : void;
}

/**
 * Represents the options of saving the workbook as an xml file.
 */
export class XmlSaveOptions extends SaveOptions {
    /**
     * Creates options for saving xml file.
     */
    constructor();
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: SaveOptions);
    /**
     * Represents the indexes of exported sheets.
     */
    getSheetIndexes() : number[];
    /**
     * Represents the indexes of exported sheets.
     * @param value - The value to set.
     */
    setSheetIndexes(value: number[]) : void;
    /**
     * Gets or sets the exporting range.
     */
    getExportArea() : CellArea;
    /**
     * Gets or sets the exporting range.
     * @param value - The value to set.
     */
    setExportArea(value: CellArea) : void;
    /**
     * Indicates whether the range contains header row.
     */
    getHasHeaderRow() : boolean;
    /**
     * Indicates whether the range contains header row.
     * @param value - The value to set.
     */
    setHasHeaderRow(value: boolean) : void;
    /**
     * Indicates whether exporting xml map in the file.
     */
    getXmlMapName() : string;
    /**
     * Indicates whether exporting xml map in the file.
     * @param value - The value to set.
     */
    setXmlMapName(value: string) : void;
    /**
     * Indicates whether exporting sheet's name as the name of the element.
     */
    getSheetNameAsElementName() : boolean;
    /**
     * Indicates whether exporting sheet's name as the name of the element.
     * @param value - The value to set.
     */
    setSheetNameAsElementName(value: boolean) : void;
    /**
     * Indicates whether exporting data as attributes of element.
     */
    getDataAsAttribute() : boolean;
    /**
     * Indicates whether exporting data as attributes of element.
     * @param value - The value to set.
     */
    setDataAsAttribute(value: boolean) : void;
}

/**
 * Represents the globalization settings for pivot tables.
 */
export abstract class PivotGlobalizationSettings {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets the text of "Total" label in the PivotTable.
     * You need to override this method when the PivotTable contains two or more PivotFields in the data area.
     * @returns
     * The text of "Total" label
     */
    abstract getTextOfTotal() : string;
    /**
     * Gets the text of "Grand Total" label in the PivotTable.
     * @returns
     * The text of "Grand Total" label
     */
    abstract getTextOfGrandTotal() : string;
    /**
     * Gets the text of "(Multiple Items)" label in the PivotTable.
     * @returns
     * The text of "(Multiple Items)" label
     */
    abstract getTextOfMultipleItems() : string;
    /**
     * Gets the text of "(All)" label in the PivotTable.
     * @returns
     * The text of "(All)" label
     */
    abstract getTextOfAll() : string;
    /**
     * Gets the text for specified protected name.
     * @param protectedName - The protected name in PivotTable.
     * @returns
     * The local prorected names of PivotTable.
     * 
     * @remarks
     * In Ms Excel, some names are not allowed to be used as the name of PivotFields in PivotTable.
     * They are different in different region, user may specify them explicitly according to the used region.
     */
    abstract getTextOfProtectedName(protectedName: string) : string;
    /**
     * Gets the text of "Column Labels" label in the PivotTable.
     * @returns
     * The text of column labels
     */
    abstract getTextOfColumnLabels() : string;
    /**
     * Gets the text of "Row Labels" label in the PivotTable.
     * @returns
     * The text of row labels
     */
    abstract getTextOfRowLabels() : string;
    /**
     * Gets the text of "(blank)" label in the PivotTable.
     * @returns
     * The text of empty data
     */
    abstract getTextOfEmptyData() : string;
    /**
     * Gets the the text of the value area field header in the PivotTable.
     * @returns
     * The text of data field header name
     */
    abstract getTextOfDataFieldHeader() : string;
    /**
     * Gets all short formatted string of 12 months.
     */
    abstract getShortTextOf12Months() : string[];
    /**
     * Gets the local text of 4 Quaters.
     */
    abstract getTextOf4Quaters() : string[];
    /**
     * Gets the local text of "Years".
     */
    abstract getTextOfYears() : string;
    /**
     * Get the local text of "Quarters".
     */
    abstract getTextOfQuarters() : string;
    /**
     * Gets the local text of "Months".
     */
    abstract getTextOfMonths() : string;
    /**
     * Gets the local text of "Days".
     */
    abstract getTextOfDays() : string;
    /**
     * Gets the local text of "Hours".
     */
    abstract getTextOfHours() : string;
    /**
     * Gets the local text of "Minutes".
     */
    abstract getTextOfMinutes() : string;
    /**
     * Gets the local text of "Seconds"
     */
    abstract getTextOfSeconds() : string;
    /**
     * Gets the local text of "Range"
     */
    abstract getTextOfRange() : string;
    /**
     * Gets the text of <see cref="PivotFieldSubtotalType"/> type in the PivotTable.
     * @param subTotalType - The <see cref="PivotFieldSubtotalType"/>
     * @returns
     * The text of given type
     */
    abstract getTextOfSubTotal(subTotalType: PivotFieldSubtotalType) : string;
}

/**
 * Implementation of PivotGlobalizationSettings that supports user to set/change pre-defined texts.
 */
export class SettableChartGlobalizationSettings {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets the name of Series in the Chart.
     */
    getSeriesName() : string;
    /**
     * Sets the name of Series in the Chart.
     * @param name - local dependent name
     */
    setSeriesName(name: string) : void;
    /**
     * Gets the name of Chart Title.
     */
    getChartTitleName() : string;
    /**
     * Sets the name of Chart Title.
     * @param name - local dependent name
     */
    setChartTitleName(name: string) : void;
    /**
     * Gets the name of increase for Legend.
     */
    getLegendIncreaseName() : string;
    /**
     * Sets the name of increase for Legend.
     * @param name - local dependent name
     */
    setLegendIncreaseName(name: string) : void;
    /**
     * Gets the name of Decrease for Legend.
     */
    getLegendDecreaseName() : string;
    /**
     * Sets the name of Decrease for Legend.
     * @param name - local dependent name
     */
    setLegendDecreaseName(name: string) : void;
    /**
     * Gets the name of Total for Legend.
     */
    getLegendTotalName() : string;
    /**
     * Sets the name of Total for Legend.
     * @param name - local dependent name
     */
    setLegendTotalName(name: string) : void;
    /**
     * Gets the name of Title for Axis.
     */
    getAxisTitleName() : string;
    /**
     * Sets the name of Title for Axis.
     * @param name - local dependent name
     */
    setAxisTitleName(name: string) : void;
    /**
     * Gets the name of "Other" labels for Chart.
     */
    getOtherName() : string;
    /**
     * Sets the name of "Other" labels for Chart.
     * @param name - local dependent name
     */
    setOtherName(name: string) : void;
    /**
     * Gets the Name of Axis Unit.
     */
    getAxisUnitName(type: DisplayUnitType) : string;
    /**
     * Sets the Name of Axis Unit.
     * @param name - local dependent name
     */
    setAxisUnitName(type: DisplayUnitType, name: string) : void;
}

/**
 * Implementation of GlobalizationSettings that supports user to set/change pre-defined texts.
 */
export class SettableGlobalizationSettings {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets the separator for list, parameters of function, ...etc.
     */
    getListSeparator() : string;
    /**
     * Gets the separator for rows in array data in formula.
     */
    getRowSeparatorOfFormulaArray() : string;
    /**
     * Gets the separator for the items in array's row data in formula.
     */
    getColumnSeparatorOfFormulaArray() : string;
    /**
     * Gets the total name of specific function.
     * @param functionType - The function type.
     * @returns
     * The total name of the function.
     */
    getTotalName(functionType: ConsolidationFunction) : string;
    /**
     * Sets the total name of specific function.
     * @param functionType - The function type.
     * @param name - The total name of the function.
     */
    setTotalName(functionType: ConsolidationFunction, name: string) : void;
    /**
     * Gets the grand total name of the function.
     * @param functionType - The function type.
     * @returns
     * The grand total name of the function.
     */
    getGrandTotalName(functionType: ConsolidationFunction) : string;
    /**
     * Sets the grand total name of specific function.
     * @param functionType - The function type.
     * @param name - The grand total name of the function.
     */
    setGrandTotalName(functionType: ConsolidationFunction, name: string) : void;
    /**
     * Gets the type name of table rows that consists of the table header.
     * Default is "Headers", so in formula "#Headers" represents the table header.
     * @returns
     * the type name of table rows
     */
    getTableRowTypeOfHeaders() : string;
    /**
     * Sets the type name of table rows that consists of the table header.
     * @param name - the type name of table rows
     */
    setTableRowTypeOfHeaders(name: string) : void;
    /**
     * Gets the type name of table rows that consists of data region of referenced table.
     * Default is "Data", so in formula "#Data" represents the data region of the table.
     * @returns
     * the type name of table rows
     */
    getTableRowTypeOfData() : string;
    /**
     * Sets the type name of table rows that consists of data region of referenced table.
     * @param name - the type name of table rows
     */
    setTableRowTypeOfData(name: string) : void;
    /**
     * Gets the type name of table rows that consists of all rows in referenced table.
     * @returns
     * the type name of table rows
     */
    getTableRowTypeOfAll() : string;
    /**
     * Sets the type name of table rows that consists of all rows in referenced table.
     * @param name - the type name of table rows
     */
    setTableRowTypeOfAll(name: string) : void;
    /**
     * Gets the type name of table rows that consists of the total row of referenced table.
     * @returns
     * the type name of table rows
     */
    getTableRowTypeOfTotals() : string;
    /**
     * Sets the type name of table rows that consists of the total row of referenced table.
     * @param name - the type name of table rows
     */
    setTableRowTypeOfTotals(name: string) : void;
    /**
     * Gets the type name of table rows that consists of the current row in referenced table.
     * @returns
     * the type name of table rows
     */
    getTableRowTypeOfCurrent() : string;
    /**
     * Sets the type name of table rows that consists of the current row in referenced table.
     * @param name - the type name of table rows
     */
    setTableRowTypeOfCurrent(name: string) : void;
    /**
     * Gets the display string value for cell's error value
     * @param err - error values such as #VALUE!,#NAME?
     * @returns
     * By default returns the error value itself
     */
    getErrorValueString(err: string) : string;
    /**
     * Gets the display string value for cell's boolean value
     * @param bv - boolean value
     * @returns
     * By default returns "TRUE" for true value and "FALSE" for false value.
     */
    getBooleanValueString(bv: boolean) : string;
    /**
     * Sets the display string value for cell's boolean value
     * @param bv - boolean value
     * @param name - string value of the boolean value
     */
    setBooleanValueString(bv: boolean, name: string) : void;
    /**
     * Gets the locale dependent function name according to given standard function name.
     * @param standardName - Standard(en-US locale) function name.
     * @returns
     * Locale dependent function name. The locale was specified by the Workbook for which this settings is used.
     */
    getLocalFunctionName(standardName: string) : string;
    /**
     * Sets the locale dependent function name corresponding to given standard function name.
     * @param standardName - Standard(en-US locale) function name.
     * @param localName - Locale dependent function name
     * @param bidirectional - Whether map the local function name to standard function name automatically.         /// If true, the local name will be mapped to standard name automatically         /// so user does not need to call <see cref="SetStandardFunctionName(string, string, bool)"/> again         /// for the same standard and local names pair
     */
    setLocalFunctionName(standardName: string, localName: string, bidirectional: boolean) : void;
    /**
     * Gets the standard function name according to given locale dependent function name.
     * @param localName - Locale dependent function name. The locale was specified by the Workbook for which this settings is used.
     * @returns
     * Standard(en-US locale) function name.
     */
    getStandardFunctionName(localName: string) : string;
    /**
     * Sets the locale dependent function name according to given standard function name.
     * @param localName - Locale dependent function name
     * @param standardName - Standard(en-US locale) function name.
     * @param bidirectional - Whether map the standard function name to local function name automatically.         /// If true, the standar name will be mapped to local name automatically         /// so user does not need to call <see cref="SetLocalFunctionName(string, string, bool)"/> again         /// for the same standard and local names pair
     */
    setStandardFunctionName(localName: string, standardName: string, bidirectional: boolean) : void;
    /**
     * Gets the locale dependent text for built-in Name according to given standard text.
     * @param standardName - Standard(en-US locale) text of built-in Name.
     * @returns
     * Locale dependent text. The locale was specified by the Workbook for which this settings is used.
     */
    getLocalBuiltInName(standardName: string) : string;
    /**
     * Sets the locale dependent text for the built-in name with given standard name text.
     * @param standardName - Standard(en-US locale) name text of built-in name.
     * @param localName - Locale dependent name text
     * @param bidirectional - Whether map the local name text to standard name text automatically.         /// If true, the local name text will be mapped to standard name text automatically         /// so user does not need to call <see cref="SetStandardBuiltInName(string, string, bool)"/> again         /// for the same standard and local names pair
     */
    setLocalBuiltInName(standardName: string, localName: string, bidirectional: boolean) : void;
    /**
     * Gets the standard text of built-in Name according to given locale dependent text.
     * @param localName - Locale dependent text of built-in Name. The locale was specified by the Workbook for which this settings is used.
     * @returns
     * Standard(en-US locale) text.
     */
    getStandardBuiltInName(localName: string) : string;
    /**
     * Sets the locale dependent function name according to given standard function name.
     * @param localName - Locale dependent function name
     * @param standardName - Standard(en-US locale) function name.
     * @param bidirectional - Whether map the standard name text to local name text automatically.         /// If true, the standar name text will be mapped to local name text automatically         /// so user does not need to call <see cref="SetLocalBuiltInName(string, string, bool)"/> again         /// for the same standard and local names pair
     */
    setStandardBuiltInName(localName: string, standardName: string, bidirectional: boolean) : void;
    /**
     * Sets the separator for list, parameters of function, ...etc.
     * @param c - the specified separator
     */
    setListSeparator(c: string) : void;
    /**
     * Sets the separator for rows in array data in formula.
     * @param c - the specified separator
     */
    setRowSeparatorOfFormulaArray(c: string) : void;
    /**
     * Sets the separator for the items in array's row data in formula.
     * @param c - the specified separator
     */
    setColumnSeparatorOfFormulaArray(c: string) : void;
    /**
     * Gets standard English font style name(Regular, Bold, Italic) for Header/Footer according to given locale font style name.
     * @param localfontStyleName - Locale font style name for Header/Footer.
     * @returns
     * Standard English font style name(Regular, Bold, Italic)
     */
    getStandardHeaderFooterFontStyleName(localfontStyleName: string) : string;
    /**
     * Sets the locale dependent function name according to given standard function name.
     * @param localfontStyleName - Locale font style name for Header/Footer.
     * @param standardName - Standard(en-US locale) function name.
     */
    setStandardHeaderFooterFontStyleName(localfontStyleName: string, standardName: string) : void;
    /**
     * Gets the locale dependent comment title name according to comment title type.
     * @param type - type of comment title
     * @returns
     * locale dependent comment title name
     */
    getCommentTitleName(type: CommentTitleType) : string;
    /**
     * Gets the locale dependent comment title name according to comment title type.
     * @param type - type of comment title
     * @param name - locale dependent comment title name
     */
    setCommentTitleName(type: CommentTitleType, name: string) : void;
}

/**
 * Implementation of PivotGlobalizationSettings that supports user to set/change pre-defined texts.
 */
export class SettablePivotGlobalizationSettings {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets the text of "Total" label in the PivotTable.
     * You need to override this method when the PivotTable contains two or more PivotFields in the data area.
     * @returns
     * The text of "Total" label
     */
    getTextOfTotal() : string;
    /**
     * Sets the text of "Total" label in the PivotTable.
     * @param text - custom text
     */
    setTextOfTotal(text: string) : void;
    /**
     * Gets the text of "Grand Total" label in the PivotTable.
     * @returns
     * The text of "Grand Total" label
     */
    getTextOfGrandTotal() : string;
    /**
     * Sets the text of "Grand Total" label in the PivotTable.
     * @param text - custom text
     */
    setTextOfGrandTotal(text: string) : void;
    /**
     * Gets the text of "(Multiple Items)" label in the PivotTable.
     * @returns
     * The text of "(Multiple Items)" label
     */
    getTextOfMultipleItems() : string;
    /**
     * Sets the text of "(Multiple Items)" label in the PivotTable.
     * @param text - custom text
     */
    setTextOfMultipleItems(text: string) : void;
    /**
     * Gets the text of "(All)" label in the PivotTable.
     * @returns
     * The text of "(All)" label
     */
    getTextOfAll() : string;
    /**
     * Sets the text of "(All)" label in the PivotTable.
     * @param text - custom text
     */
    setTextOfAll(text: string) : void;
    /**
     * Gets the text for specified protected name.
     * @param protectedName - The protected name in PivotTable.
     * @returns
     * The local prorected names of PivotTable.
     * 
     * @remarks
     * In Ms Excel, some names are not allowed to be used as the name of PivotFields in PivotTable.
     * They are different in different region, user may specify them explicitly according to the used region.
     */
    getTextOfProtectedName(protectedName: string) : string;
    /**
     * Sets the text for specific protected name.
     * @param protectedName - The protected name in PivotTable.
     * @param text - The local prorected names of PivotTable.
     */
    setTextOfProtectedName(protectedName: string, text: string) : void;
    /**
     * Gets the text of "Column Labels" label in the PivotTable.
     * @returns
     * The text of column labels
     */
    getTextOfColumnLabels() : string;
    /**
     * Gets the text of "Column Labels" label in the PivotTable.
     * @param text - The text of column labels
     */
    setTextOfColumnLabels(text: string) : void;
    /**
     * Gets the text of "Row Labels" label in the PivotTable.
     * @returns
     * The text of row labels
     */
    getTextOfRowLabels() : string;
    /**
     * Sets the text of "Row Labels" label in the PivotTable.
     * @param text - The text of row labels
     */
    setTextOfRowLabels(text: string) : void;
    /**
     * Gets the text of "(blank)" label in the PivotTable.
     * @returns
     * The text of empty data
     */
    getTextOfEmptyData() : string;
    /**
     * Sets the text of "(blank)" label in the PivotTable.
     * @param text - The text of empty data
     */
    setTextOfEmptyData(text: string) : void;
    /**
     * Gets the the text of the value area field header in the PivotTable.
     * @returns
     * The text of data field header name
     */
    getTextOfDataFieldHeader() : string;
    /**
     * Sets the the text of the value area field header in the PivotTable.
     * @param text - The text of data field header name
     */
    setTextOfDataFieldHeader(text: string) : void;
    /**
     * Gets the text of <see cref="PivotFieldSubtotalType"/> type in the PivotTable.
     * @param subTotalType - The <see cref="PivotFieldSubtotalType"/>
     * @returns
     * The text of given type
     */
    getTextOfSubTotal(subTotalType: PivotFieldSubtotalType) : string;
    /**
     * Sets the text of <see cref="PivotFieldSubtotalType"/> type in the PivotTable.
     * @param subTotalType - The <see cref="PivotFieldSubtotalType"/>
     * @param text - The text of given type
     */
    setTextOfSubTotal(subTotalType: PivotFieldSubtotalType, text: string) : void;
}

/**
 * Represents user's custom calculation engine to extend the default calculation engine of Aspose.Cells.
 * 
 * @remarks
 * User should not modify any part of the Workbook directly in this implementation(except
 * the calculated result of the custom function, which can be set by CalculationData.CalculatedValue property).
 * Otherwise unexpected result or Exception may be caused.
 * If user needs to change other data than calculated result in the implementation for some custom functions,
 * for example, change cell's formula, style, ...etc., user should gather those data in this implementation
 * and change them out of the scope of formula calculation.
 */
export abstract class AbstractCalculationEngine {
    /**
     * Indicates whether this engine needs the literal text of parameter while doing calculation. Default value is false.
     * 
     * @remarks
     * If this custom calculation engine needs the parameter's literal text,
     * more stacks will be required to cache the literal text for parameters
     * and Calculate() method may be called recursively to calculate the parameter's value.
     * Generally the literal text is not needed for calculating formulas
     * and this property should be kept as false for most implementations to get better performance.
     */
    abstract isParamLiteralRequired() : boolean;
    /**
     * Indicates whether this engine needs the parameter to be calculated in array mode. Default value is false.
     * If <see cref="CalculationData.GetParamValueInArrayMode(int, int, int)"/> is required when calculating custom
     * functions and user has not updated the definition for them
     * (by <see cref="Workbook.UpdateCustomFunctionDefinition(CustomFunctionDefinition)"/>),
     * this property needs to be set as true.
     * 
     * @remarks
     * If this custom calculation engine needs the parameter to be calculated in array mode,
     * more stacks will be required to cache the tree for parameters
     * and Calculate() method may be called recursively to calculate the parameter's value.
     * For performance consideration, please keep this property as the default value(false)
     * if there is no special requirement.
     */
    abstract isParamArrayModeRequired() : boolean;
    /**
     * Whether built-in functions that have been supported by the built-in engine
     * should be checked and processed by this implementation.
     * Default is false.
     * 
     * @remarks
     * If user needs to change the calculation logic of some built-in functions, this property should be set as true.
     * Otherwise please leave this property as false for performance consideration.
     */
    abstract getProcessBuiltInFunctions() : boolean;
    /**
     * Calculates one function with given data.
     * @param data - the required data to calculate function such as function name, parameters, ...etc.
     * 
     * @remarks
     * User should set the calculated value for given data for all functions(including excel native functions)
     * that he wants to calculate by himself in this implementation.
     */
    abstract calculate(data: CalculationData) : void;
    /**
     * Whether force given function to be recalculated always when calculating shared formulas.
     * @param functionName - name of the function. Generally it is custom function's name.         /// If <see cref="ProcessBuiltInFunctions"/> is true, then built-in functions will also be checked here.
     * @returns
     * true if the specified function needs to be recalculated always.
     * 
     * @remarks
     * For shared formulas, multiple cells share the same function.
     * If the function's parameters keep same for those cells too, then generally this function needs to be calculated only once.
     * So for performance consideration we only calculate such kind of function once too(<see cref="Calculate(CalculationData)"/>
     * is called only once, instead of being called repeatedly for every cell).
     * However, for user's custom implementation, maybe the function, especially the custom function,
     * needs to be calculated differently for different cells.
     * If so, user needs to override this method to make it return true for the function.
     * And for <see cref="Calculate(CalculationData)"/>, the given <see cref="CalculationData.CalculatedValue"/>
     * may have been initialized with the cached value of previous calculation.
     */
    abstract forceRecalculate(functionName: string) : boolean;
}

/**
 * Represents the required data when calculating one function, such as function name, parameters, ...etc.
 * 
 * @remarks
 * All objects provided by this class are for "read" purpose only.
 * User should not change any data in the Workbook during the formula calculation process,
 * Otherwise unexpected result or Exception may be caused.
 */
export class CalculationData {
    /**
     * Gets the Workbook object where the function is in.
     */
    getWorkbook() : Workbook;
    /**
     * Gets the Worksheet object where the function is in.
     */
    getWorksheet() : Worksheet;
    /**
     * Gets the row index of the cell where the function is in.
     */
    getCellRow() : number;
    /**
     * Gets the column index of the cell where the function is in.
     */
    getCellColumn() : number;
    /**
     * Gets the Cell object where the function is in.
     * 
     * @remarks
     * When calculating a formula without setting it to a cell,
     * such as by <see cref="Worksheet.CalculateFormula(string, CalculationOptions)"/>,
     * the formula will be calculated just like it has been set to cell A1,
     * so both <see cref="CellRow"/> and <see cref="CellColumn"/> are 0.
     * However, cell A1 in the worksheet may has not been instantiated.
     * So for such kind of situation this property will be null.
     */
    getCell() : Cell;
    /**
     * Gets the function name to be calculated.
     */
    getFunctionName() : string;
    /**
     * Gets the count of parameters
     */
    getParamCount() : number;
    /**
     * Gets the literal text of the parameter at given index.
     * @param index - index of the parameter(0 based)
     * @returns
     * literal text of the parameter
     */
    getParamText(index: number) : string;
}

/**
 * Represents the globalization settings.
 */
export abstract class GlobalizationSettings {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets or sets the globalization settings for Chart.
     */
    getChartSettings() : ChartGlobalizationSettings;
    /**
     * Gets or sets the globalization settings for Chart.
     * @param value - The value to set.
     */
    setChartSettings(value: ChartGlobalizationSettings) : void;
    /**
     * Gets or sets the globalization settings for pivot table.
     */
    getPivotSettings() : PivotGlobalizationSettings;
    /**
     * Gets or sets the globalization settings for pivot table.
     * @param value - The value to set.
     */
    setPivotSettings(value: PivotGlobalizationSettings) : void;
    /**
     * Gets the separator for list, parameters of function, ...etc.
     */
    abstract getListSeparator() : string;
    /**
     * Gets the separator for rows in array data in formula.
     */
    abstract getRowSeparatorOfFormulaArray() : string;
    /**
     * Gets the separator for the items in array's row data in formula.
     */
    abstract getColumnSeparatorOfFormulaArray() : string;
    /**
     * Gets the total name of the function.
     * @param functionType - The function type.
     * @returns
     * The total name of the function.
     */
    abstract getTotalName(functionType: ConsolidationFunction) : string;
    /**
     * Gets the grand total name of the function.
     * @param functionType - The function type.
     * @returns
     * The grand total name of the function.
     */
    abstract getGrandTotalName(functionType: ConsolidationFunction) : string;
    /**
     * Gets the default sheet name for adding worksheet automatically.
     * Default is "Sheet".
     * @returns
     * the default sheet name for adding worksheet automatically
     * 
     * @remarks
     * The automatically added(such as by <see cref="WorksheetCollection.Add()"/>)
     * sheet's name will be the specified name plus sequence number.
     * For example, for Germany user maybe wants the sheet name to be "Tabellenblatt2" instead of "Sheet2".
     * Then user may implement this method to return "Tabellenblatt".
     */
    abstract getDefaultSheetName() : string;
    /**
     * Gets the type name of table rows that consists of the table header.
     * Default is "Headers", so in formula "#Headers" represents the table header.
     * @returns
     * the type name of table rows
     */
    abstract getTableRowTypeOfHeaders() : string;
    /**
     * Gets the type name of table rows that consists of data region of referenced table.
     * Default is "Data", so in formula "#Data" represents the data region of the table.
     * @returns
     * the type name of table rows
     */
    abstract getTableRowTypeOfData() : string;
    /**
     * Gets the type name of table rows that consists of all rows in referenced table.
     * Default is "All", so in formula "#All" represents all rows in referenced table.
     * @returns
     * the type name of table rows
     */
    abstract getTableRowTypeOfAll() : string;
    /**
     * Gets the type name of table rows that consists of the total row of referenced table.
     * Default is "Totals", so in formula "#Totals" represents the total row of referenced table.
     * @returns
     * the type name of table rows
     */
    abstract getTableRowTypeOfTotals() : string;
    /**
     * Gets the type name of table rows that consists of the current row in referenced table.
     * Default is "This Row", so in formula "#This Row" represents the current row in referenced table.
     * @returns
     * the type name of table rows
     */
    abstract getTableRowTypeOfCurrent() : string;
    /**
     * Gets the display string value for cell's error value
     * @param err - error values such as #VALUE!,#NAME?
     * @returns
     * By default returns the error value itself
     */
    abstract getErrorValueString(err: string) : string;
    /**
     * Gets the display string value for cell's boolean value
     * @param bv - boolean value
     * @returns
     * By default returns "TRUE" for true value and "FALSE" for false value.
     */
    abstract getBooleanValueString(bv: boolean) : string;
    /**
     * Gets the locale dependent function name according to given standard function name.
     * @param standardName - Standard(en-US locale) function name.
     * @returns
     * Locale dependent function name. The locale was specified by the Workbook for which this settings is used.
     */
    abstract getLocalFunctionName(standardName: string) : string;
    /**
     * Gets the standard function name according to given locale dependent function name.
     * @param localName - Locale dependent function name. The locale was specified by the Workbook for which this settings is used.
     * @returns
     * Standard(en-US locale) function name.
     */
    abstract getStandardFunctionName(localName: string) : string;
    /**
     * Gets the locale dependent text for built-in Name according to given standard text.
     * @param standardName - Standard(en-US locale) text of built-in Name.
     * @returns
     * Locale dependent text. The locale was specified by the Workbook for which this settings is used.
     */
    abstract getLocalBuiltInName(standardName: string) : string;
    /**
     * Gets the standard text of built-in Name according to given locale dependent text.
     * @param localName - Locale dependent text of built-in Name. The locale was specified by the Workbook for which this settings is used.
     * @returns
     * Standard(en-US locale) text.
     */
    abstract getStandardBuiltInName(localName: string) : string;
    /**
     * Gets standard English font style name(Regular, Bold, Italic) for Header/Footer according to given locale font style name.
     * @param localfontStyleName - Locale font style name for Header/Footer.
     * @returns
     * Standard English font style name(Regular, Bold, Italic)
     */
    abstract getStandardHeaderFooterFontStyleName(localfontStyleName: string) : string;
    /**
     * Gets the locale dependent comment title name according to comment title type.
     * @param type - 
     */
    abstract getCommentTitleName(type: CommentTitleType) : string;
    /**
     * Compares two string values according to certain collation rules.
     * @param v1 - the first string
     * @param v2 - the second string
     * @param ignoreCase - whether ignore case when comparing values
     * @returns
     * Integer that indicates the lexical relationship between the two comparands
     */
    abstract compare(v1: string, v2: string, ignoreCase: boolean) : number;
}

/**
 * Encapsulates the object that represents a single Workbook cell.
 */
export class Cell {
    /**
     * Gets the parent worksheet.
     */
    getWorksheet() : Worksheet;
    /**
     * Gets the DateTime value contained in the cell.
     */
    getDateTimeValue() : Date;
    /**
     * Gets row number (zero based) of the cell.
     */
    getRow() : number;
    /**
     * Gets column number (zero based) of the cell.
     */
    getColumn() : number;
    /**
     * Represents if the specified cell contains formula.
     */
    isFormula() : boolean;
    /**
     * Represents cell value type.
     */
    getType() : CellValueType;
    /**
     * Gets the name of the cell.
     * 
     * @remarks
     * A cell name includes its column letter and row number. For example, the name of a cell in row 0 and column 0 is A1.
     */
    getName() : string;
    /**
     * Checks if the value of this cell is an error.
     * 
     * @remarks
     * Also applies to formula cell to check whether the calculated result is an error.
     */
    isErrorValue() : boolean;
    /**
     * Indicates whether the value of this cell is numeric(int, double and datetime)
     * 
     * @remarks
     * Also applies to formula cell to check the calculated result
     */
    isNumericValue() : boolean;
    /**
     * Represents the category type of this cell's number formatting.
     * 
     * @remarks
     * When cell's formatting pattern is combined with conditional formatting patterns,
     * then the returned type is corresponding to the part which is used for current value of this cell.
     * For example, if the formatting pattern for this cell is "#,##0;(#,##0);"-";@",
     * then when cell's value is numeric and not 0, the returned type is <see cref="NumberCategoryType.Number"/>;
     * When cell's value is 0 or not numeric value, the returned type is <see cref="NumberCategoryType.Text"/>.
     */
    getNumberCategoryType() : NumberCategoryType;
    /**
     * Gets the formatted string value of this cell by cell's display style.
     */
    getDisplayStringValue() : string;
    /**
     * Gets the integer value contained in the cell.
     */
    getIntValue() : number;
    /**
     * Gets the double value contained in the cell.
     */
    getDoubleValue() : number;
    /**
     * Gets the float value contained in the cell.
     */
    getFloatValue() : number;
    /**
     * Gets the boolean value contained in the cell.
     */
    getBoolValue() : boolean;
    /**
     * Indicates whether this cell has custom style settings(different from the default one inherited
     * from corresponding row, column, or workbook).
     */
    getHasCustomStyle() : boolean;
    /**
     * Gets cell's shared style index in the style pool.
     */
    getSharedStyleIndex() : number;
    /**
     * Gets or sets a formula of the <see cref="Cell"/>.
     * @param value - The value to set.
     * 
     * @remarks
     * A formula string always begins with an equal sign (=).
     * And please always use comma(,) as parameters delimiter, such as "=SUM(A1, E1, H2)".
     */
    setFormula(value: string) : void;
    /**
     * Get the locale formatted formula of the cell.
     */
    getFormulaLocal() : string;
    /**
     * Get the locale formatted formula of the cell.
     * @param value - The value to set.
     */
    setFormulaLocal(value: string) : void;
    /**
     * Gets or sets a R1C1 formula of the <see cref="Cell"/>.
     */
    getR1C1Formula() : string;
    /**
     * Gets or sets a R1C1 formula of the <see cref="Cell"/>.
     * @param value - The value to set.
     */
    setR1C1Formula(value: string) : void;
    /**
     * Indicates whether this cell contains an external link.
     * Only applies when the cell is a formula cell.
     */
    getContainsExternalLink() : boolean;
    /**
     * Indicates the cell's formula is an array formula
     * and it is the first cell of the array.
     */
    isArrayHeader() : boolean;
    /**
     * Indicates whether the cell's formula is dynamic array formula(true) or legacy array formula(false).
     */
    isDynamicArrayFormula() : boolean;
    /**
     * Indicates whether the cell formula is an array formula.
     */
    isArrayFormula() : boolean;
    /**
     * Indicates whether the cell formula is part of shared formula.
     */
    isSharedFormula() : boolean;
    /**
     * Indicates whether this cell is part of table formula.
     */
    isTableFormula() : boolean;
    /**
     * Indicates if the cell's style is set. If return false, it means this cell has a default cell format.
     */
    isStyleSet() : boolean;
    /**
     * Checks if a cell is part of a merged range or not.
     */
    isMerged() : boolean;
    /**
     * Gets the comment of this cell.
     * 
     * @remarks
     * If there is no comment applies to the cell, returns null.
     */
    getComment() : Comment;
    /**
     * Gets and sets the html string which contains data and some formats in this cell.
     * @param value - The value to set.
     */
    setHtmlString(value: string) : void;
    /**
     * Gets and sets the embeddedn image in the cell.
     */
    getEmbeddedImage() : number[];
    /**
     * Gets and sets the embeddedn image in the cell.
     * @param value - The value to set.
     */
    setEmbeddedImage(value: number[]) : void;
    /**
     * Calculates the formula of the cell.
     * @param options - Options for calculation
     */
    calculate(options: CalculationOptions) : void;
    /**
     * Puts a boolean value into the cell.
     * @param boolValue - 
     */
    putValue(boolValue: boolean) : void;
    /**
     * Puts an integer value into the cell.
     * @param intValue - Input value
     */
    putValue(intValue: number) : void;
    /**
     * Puts a double value into the cell.
     * @param doubleValue - Input value
     */
    putValue(doubleValue: number) : void;
    /**
     * Puts a value into the cell, if appropriate the value will be converted to other data type and cell's number format will be reset.
     * @param stringValue - Input value
     * @param isConverted - True: converted to other data type if appropriate.
     * @param setStyle - True: set the number format to cell's style when converting to other data type
     */
    putValue(stringValue: string, isConverted: boolean, setStyle: boolean) : void;
    /**
     * Puts a string value into the cell and converts the value to other data type if appropriate.
     * @param stringValue - Input value
     * @param isConverted - True: converted to other data type if appropriate.
     */
    putValue(stringValue: string, isConverted: boolean) : void;
    /**
     * Puts a string value into the cell.
     * @param stringValue - Input value
     */
    putValue(stringValue: string) : void;
    /**
     * Puts a DateTime value into the cell.
     * @param dateTime - Input value
     * 
     * @remarks
     * Setting a DateTime value for a cell dose not means the cell will be formatted as date time automatically.
     * DateTime value was maintained as numeric value in the data model of both ms excel and Aspose.Cells.
     * Whether the numeric value will be taken as the numeric value itself or date time
     * depends on the number format applied on this cell. If this cell has not been formatted as date time,
     * it will be displayed as a numeric value even though what you input is DateTime.
     */
    putValue(dateTime: Date) : void;
    /**
     * Gets the string value by specific formatted strategy.
     * @param formatStrategy - The formatted strategy.
     */
    getStringValue(formatStrategy: CellValueFormatStrategy) : string;
    /**
     * Gets the width of the value in unit of pixels.
     */
    getWidthOfValue() : number;
    /**
     * Gets the height of the value in unit of pixels.
     */
    getHeightOfValue() : number;
    /**
     * Gets the display style of the cell.
     * If this cell is also affected by other settings such as conditional formatting, list objects, etc.,
     * then the display style may be different from cell.GetStyle().
     */
    getDisplayStyle() : Style;
    /**
     * Gets the display style of the cell.
     * If the cell is conditional formatted, the display style is not same as the cell.GetStyle().
     * @param includeMergedBorders - Indicates whether checking borders of the merged cells.
     */
    getDisplayStyle(includeMergedBorders: boolean) : Style;
    /**
     * Gets format conditions which applies to this cell.
     * @returns
     * Returns <see cref="FormatConditionCollection"/> object
     */
    getFormatConditions() : FormatConditionCollection[];
    /**
     * Gets the cell style.
     * @returns
     * Style object.
     * 
     * @remarks
     * To change the style of the cell, please call Cell.SetStyle() method after modifying the returned style object.
     * This method is same with <see cref="GetStyle(bool)"/> with true value for the parameter.
     */
    getStyle() : Style;
    /**
     * If checkBorders is true, check whether other cells' borders will effect the style of this cell.
     * @param checkBorders - Check other cells' borders
     * @returns
     * Style object.
     * 
     * @remarks
     */
    getStyle(checkBorders: boolean) : Style;
    /**
     * Sets the cell style.
     * @param style - The cell style.
     * 
     * @remarks
     * If the border settings are changed, the border of adjust cells will be updated too.
     */
    setStyle(style: Style) : void;
    /**
     * Apply the changed property of style to the cell.
     * @param style - The cell style.
     * @param explicitFlag - True, only overwriting formatting which is explicitly set.
     */
    setStyle(style: Style, explicitFlag: boolean) : void;
    /**
     * Apply the cell style based on flags.
     * @param style - The cell style.
     * @param flag - The style flag.
     */
    setStyle(style: Style, flag: StyleFlag) : void;
    /**
     * Get the formula of this cell.
     * @param isR1C1 - Whether the formula needs to be formatted as R1C1.
     * @param isLocal - Whether the formula needs to be formatted by locale.
     * @returns
     * the formula of this cell.
     */
    getFormula(isR1C1: boolean, isLocal: boolean) : string;
    /**
     * Sets an array formula(legacy array formula entered via CTRL+SHIFT+ENTER in ms excel) to a range of cells.
     * @param arrayFormula - Array formula.
     * @param rowNumber - Number of rows to populate result of the array formula.
     * @param columnNumber - Number of columns to populate result of the array formula.
     */
    setArrayFormula(arrayFormula: string, rowNumber: number, columnNumber: number) : void;
    /**
     * Sets an array formula to a range of cells.
     * @param arrayFormula - Array formula.
     * @param rowNumber - Number of rows to populate result of the array formula.
     * @param columnNumber - Number of columns to populate result of the array formula.
     * @param options - Options for parsing the formula.
     */
    setArrayFormula(arrayFormula: string, rowNumber: number, columnNumber: number, options: FormulaParseOptions) : void;
    /**
     * Sets shared formulas to a range of cells.
     * @param sharedFormula - Shared formula.
     * @param rowNumber - Number of rows to populate the formula.
     * @param columnNumber - Number of columns to populate the formula.
     * 
     * @remarks
     */
    setSharedFormula(sharedFormula: string, rowNumber: number, columnNumber: number) : void;
    /**
     * Sets shared formulas to a range of cells.
     * @param sharedFormula - Shared formula.
     * @param rowNumber - Number of rows to populate the formula.
     * @param columnNumber - Number of columns to populate the formula.
     * @param options - Options for parsing the formula.
     */
    setSharedFormula(sharedFormula: string, rowNumber: number, columnNumber: number, options: FormulaParseOptions) : void;
    /**
     * Gets all references appearing in this cell's formula.
     * @returns
     * Collection of all references appearing in this cell's formula.
     * 
     * @remarks
     * <ul>
     * <li>Returns null if this is not a formula cell.</li>
     * <li>All references appearing in this cell's formula will be returned no matter they are referenced or not while calculating.
     * For example, although cell A2 in formula "=IF(TRUE,A1,A2)" is not used while calculating,
     * it is still taken as the formula's precedents.</li>
     * <li>To get those references which influence the calculation only, please use <see cref="GetPrecedentsInCalculation()"/>.</li>
     * </ul>
     */
    getPrecedents() : ReferredAreaCollection;
    /**
     * Get all cells whose formula references to this cell directly.
     * @param isAll - Indicates whether check formulas in other worksheets
     * 
     * @remarks
     * <ul>
     * <li>If one reference containing this cell appears in one cell's formula, that cell will be taken as
     * the dependent of this cell, no matter the reference or this cell is used or not while calculating.
     * For example, although cell A2 in formula "=IF(TRUE,A1,A2)" is not used while calculating,
     * this formula is still be taken as A2's dependent.
     * </li>
     * <li>To get those formulas whose calculated results depend on this cell, please use <see cref="GetDependentsInCalculation(bool)"/>.</li>
     * <li>When tracing dependents for one cell, all formulas in the workbook or worksheet will be analized and checked.
     * So it is a time consumed process. If user need to trace dependents for lots of cells, using this method will
     * cause poor performance. For performance consideration, user should use <see cref="GetDependentsInCalculation(bool)"/> instead.
     * Or, user may gather precedents map of all cells by <see cref="GetPrecedents()"/> firstly,
     * and then build the dependents map according to the precedents map.</li>
     * </ul>
     */
    getDependents(isAll: boolean) : Cell[];
    /**
     * Gets all precedents(reference to cells in current workbook) used by this cell's formula while calculating it.
     * @returns
     * Enumerator to enumerate all references(ReferredArea)
     * 
     * @remarks
     * This method can only work with the situation that <see cref="FormulaSettings.EnableCalculationChain"/>
     * is true for the workbook and the workbook has been fully calculated.
     * If this cell is not a formula or it does not reference to any other cells, null will be returned.
     */
    getPrecedentsInCalculation() : ReferredAreaEnumerator;
    /**
     * Gets all cells whose calculated result depends on this cell.
     * @param recursive - Whether returns those dependents which do not reference to this cell directly         /// but reference to other leafs of this cell
     * @returns
     * Enumerator to enumerate all dependents(Cell objects)
     * 
     * @remarks
     * To use this method, please make sure the workbook has been set with true value for
     * <see cref="FormulaSettings.EnableCalculationChain"/> and has been fully calculated with this setting.
     * If there is no formula reference to this cell, null will be returned.
     */
    getDependentsInCalculation(recursive: boolean) : CellEnumerator;
    /**
     * Gets the array range if the cell's formula is an array formula.
     * @returns
     * The array range.
     * 
     * @remarks
     * Only applies when the cell's formula is an array formula
     */
    getArrayRange() : CellArea;
    /**
     * Sets dynamic array formula and make the formula spill into neighboring cells if possible.
     * @param arrayFormula - the formula expression
     * @param options - options to parse formula.         /// "Parse" option will be ignored and the formula will always be parsed immediately
     * @param calculateValue - whether calculate this dynamic array formula for those cells in the spilled range.
     * @returns
     * the range that the formula should spill into.
     * 
     * @remarks
     * the returned range may be not same with the actual one that this dynamic array formula spills into.
     * If there are non-empty cells in the range, the formula will be set for current cell only and marked as "#SPILL!".
     * But for such kind of situation we still return the whole range that this formula should spill into.
     */
    setDynamicArrayFormula(arrayFormula: string, options: FormulaParseOptions, calculateValue: boolean) : CellArea;
    /**
     * Remove array formula.
     * @param leaveNormalFormula - True represents converting the array formula to normal formula.
     */
    removeArrayFormula(leaveNormalFormula: boolean) : void;
    /**
     * Copies data from a source cell.
     * @param cell - Source <see cref="Cell"/> object.
     */
    copy(cell: Cell) : void;
    /**
     * Returns a Characters object that represents a range of characters within the cell text.
     * @param startIndex - The index of the start of the character.
     * @param length - The number of characters.
     * @returns
     * Characters object.
     * 
     * @remarks
     * This method only works on cell with string value.
     */
    characters(startIndex: number, length: number) : FontSetting;
    /**
     * Replace text of the cell with options.
     * @param placeHolder - Cell placeholder
     * @param newValue - String value to replace
     * @param options - The replace options
     */
    replace(placeHolder: string, newValue: string, options: ReplaceOptions) : void;
    /**
     * Insert some characters to the cell.
     * If the cell is rich formatted, this method could keep the original formatting.
     * @param index - The index.
     * @param text - Inserted text.
     */
    insertText(index: number, text: string) : void;
    /**
     * Indicates whether the string value of this cell is a rich formatted text.
     */
    isRichText() : boolean;
    /**
     * Returns all Characters objects
     * that represents a range of characters within the cell text.
     * @returns
     * All Characters objects
     */
    getCharacters() : FontSetting[];
    /**
     * Returns all Characters objects
     * that represents a range of characters within the cell text.
     * @param flag - Indicates whether applying table style to the cell if the cell is in the table.
     * @returns
     * All Characters objects
     */
    getCharacters(flag: boolean) : FontSetting[];
    /**
     * Sets rich text format of the cell.
     * @param characters - All Characters objects.
     */
    setCharacters(characters: FontSetting[]) : void;
    /**
     * Returns a <see cref="Range"/> object which represents a merged range.
     * @returns
     * <see cref="Range"/> object. Null if this cell is not merged.
     */
    getMergedRange() : Range;
    /**
     * Gets the html string which contains data and some formats in this cell.
     * @param html5 - Indicates whether the value is compatible for html5
     */
    getHtmlString(html5: boolean) : string;
    /**
     * Returns a string represents the current Cell object.
     */
    toString() : string;
    /**
     * Convert <see cref="Cell"/> to JSON struct data.
     */
    toJson() : string;
    /**
     * Serves as a hash function for a particular type.
     * @returns
     * A hash code for current Cell object.
     */
    getHashCode() : number;
    /**
     * Checks whether this object refers to the same cell with another cell object.
     * @param cell - another cell object
     * @returns
     * true if two cell objects refers to the same cell.
     */
    equals(cell: Cell) : boolean;
    /**
     * Get the result of the conditional formatting.
     * 
     * @remarks
     * Returns null if no conditional formatting is applied to this cell,
     */
    getConditionalFormattingResult() : ConditionalFormattingResult;
    /**
     * Gets the validation applied to this cell.
     */
    getValidation() : Validation;
    /**
     * Gets the value of validation which applied to this cell.
     */
    getValidationValue() : boolean;
    /**
     * Gets the table which contains this cell.
     */
    getTable() : ListObject;
    /**
     */
    dispose() : void;
}

/**
 * Encapsulates a collection of cell relevant objects, such as <see cref="Cell"/>, <see cref="Row"/>, ...etc.
 * 
 * @remarks
 */
export class Cells {
    /**
     * Gets the <see cref="Cell"/> element at the specified cell row index and column index.
     * @param row - Row index.
     * @param column - Column index.
     * @returns
     * The <see cref="Cell"/> object.
     */
    get(row: number, column: number) : Cell;
    /**
     * Gets the <see cref="Cell"/> element at the specified cell name.
     * @param cellName - Cell name,including its column letter and row number, for example A5.
     * @returns
     * A <see cref="Cell"/> object
     */
    get(cellName: string) : Cell;
    /**
     * Gets the list of fields of ods.
     */
    getOdsCellFields() : OdsCellFieldCollection;
    /**
     * Gets the total count of instantiated Cell objects.
     */
    getCount() : number;
    /**
     * Gets the total count of instantiated Cell objects.
     */
    getCountLarge() : number;
    /**
     * Gets the collection of <see cref="Row"/> objects that represents the individual rows in this worksheet.
     */
    getRows() : RowCollection;
    /**
     * Gets or sets whether the cells data model should support Multi-Thread reading.
     * Default value of this property is false.
     * 
     * @remarks
     * If there are multiple threads to read Row/Cell objects in this collection concurrently,
     * this property should be set as true, otherwise unexpected result may be produced.
     * Supporting Multi-Thread reading may degrade the performance for accessing Row/Cell objects from this collection.
     * Please note, some features cannot support Multi-Thread reading,
     * such as formatting values(by <see cref="Cell.StringValue"/>, <see cref="Cell.DisplayStringValue"/>, .etc.).
     * So, even with this property being set as true, those APIs still may give unexpected result for Multi-Thread reading.
     */
    getMultiThreadReading() : boolean;
    /**
     * Gets or sets whether the cells data model should support Multi-Thread reading.
     * Default value of this property is false.
     * @param value - The value to set.
     * 
     * @remarks
     * If there are multiple threads to read Row/Cell objects in this collection concurrently,
     * this property should be set as true, otherwise unexpected result may be produced.
     * Supporting Multi-Thread reading may degrade the performance for accessing Row/Cell objects from this collection.
     * Please note, some features cannot support Multi-Thread reading,
     * such as formatting values(by <see cref="Cell.StringValue"/>, <see cref="Cell.DisplayStringValue"/>, .etc.).
     * So, even with this property being set as true, those APIs still may give unexpected result for Multi-Thread reading.
     */
    setMultiThreadReading(value: boolean) : void;
    /**
     * Gets or sets the memory usage option for this cells.
     */
    getMemorySetting() : MemorySetting;
    /**
     * Gets or sets the memory usage option for this cells.
     * @param value - The value to set.
     */
    setMemorySetting(value: MemorySetting) : void;
    /**
     * Gets and sets the default style of the worksheet.
     */
    getStyle() : Style;
    /**
     * Gets and sets the default style of the worksheet.
     * @param value - The value to set.
     */
    setStyle(value: Style) : void;
    /**
     * Gets or sets the default column width in the worksheet, in unit of inches.
     */
    getStandardWidthInch() : number;
    /**
     * Gets or sets the default column width in the worksheet, in unit of inches.
     * @param value - The value to set.
     */
    setStandardWidthInch(value: number) : void;
    /**
     * Gets or sets the default column width in the worksheet, in unit of pixels.
     */
    getStandardWidthPixels() : number;
    /**
     * Gets or sets the default column width in the worksheet, in unit of pixels.
     * @param value - The value to set.
     */
    setStandardWidthPixels(value: number) : void;
    /**
     * Gets or sets the default column width in the worksheet, in unit of characters.
     */
    getStandardWidth() : number;
    /**
     * Gets or sets the default column width in the worksheet, in unit of characters.
     * @param value - The value to set.
     */
    setStandardWidth(value: number) : void;
    /**
     * Gets or sets the default row height in this worksheet, in unit of points.
     */
    getStandardHeight() : number;
    /**
     * Gets or sets the default row height in this worksheet, in unit of points.
     * @param value - The value to set.
     */
    setStandardHeight(value: number) : void;
    /**
     * Gets or sets the default row height in this worksheet, in unit of pixels.
     */
    getStandardHeightPixels() : number;
    /**
     * Gets or sets the default row height in this worksheet, in unit of pixels.
     * @param value - The value to set.
     */
    setStandardHeightPixels(value: number) : void;
    /**
     * Gets or sets the default row height in this worksheet, in unit of inches.
     */
    getStandardHeightInch() : number;
    /**
     * Gets or sets the default row height in this worksheet, in unit of inches.
     * @param value - The value to set.
     */
    setStandardHeightInch(value: number) : void;
    /**
     * Gets or sets a value indicating whether all worksheet values are preserved as strings.
     * Default is false.
     */
    getPreserveString() : boolean;
    /**
     * Gets or sets a value indicating whether all worksheet values are preserved as strings.
     * Default is false.
     * @param value - The value to set.
     */
    setPreserveString(value: boolean) : void;
    /**
     * Minimum row index of cell which contains data or style.
     */
    getMinRow() : number;
    /**
     * Maximum row index of cell which contains data or style.
     * 
     * @remarks
     * Return -1 if there is no cell which contains data or style in the worksheet.
     */
    getMaxRow() : number;
    /**
     * Minimum column index of those cells that have been instantiated in the collection(does not include the column
     * where style is defined for the whole column but no cell has been instantiated in it).
     */
    getMinColumn() : number;
    /**
     * Maximum column index of those cells that have been instantiated in the collection(does not include the column
     * where style is defined for the whole column but no cell has been instantiated in it).
     * 
     * @remarks
     * Return -1 if there is no cell.
     */
    getMaxColumn() : number;
    /**
     * Minimum row index of cell which contains data.
     */
    getMinDataRow() : number;
    /**
     * Maximum row index of cell which contains data.
     * 
     * @remarks
     * Return -1 if there is no cell which contains data.
     */
    getMaxDataRow() : number;
    /**
     * Minimum column index of cell which contains data.
     * 
     * @remarks
     * -1 will be returned if there is no cell which contains data.
     * This property needs to iterate and check all cells in a worksheet,
     * so it is a time-consumed progress and should not be invoked repeatedly.
     */
    getMinDataColumn() : number;
    /**
     * Maximum column index of cell which contains data.
     * 
     * @remarks
     * -1 will be returned if there is no cell which contains data.
     * This property needs to iterate and check all cells in a worksheet,
     * so it is a time-consumed progress and should not be invoked repeatedly.
     */
    getMaxDataColumn() : number;
    /**
     * Indicates that row height and default font height matches
     */
    isDefaultRowHeightMatched() : boolean;
    /**
     * Indicates that row height and default font height matches
     * @param value - The value to set.
     */
    setIsDefaultRowHeightMatched(value: boolean) : void;
    /**
     * Indicates whether the row is default hidden.
     */
    isDefaultRowHidden() : boolean;
    /**
     * Indicates whether the row is default hidden.
     * @param value - The value to set.
     */
    setIsDefaultRowHidden(value: boolean) : void;
    /**
     * Gets the collection of <see cref="Column"/> objects that represents the individual columns in this worksheet.
     */
    getColumns() : ColumnCollection;
    /**
     * Gets the collection of <see cref="Range"/> objects created at run time.
     */
    getRanges() : RangeCollection;
    /**
     * Gets the last cell in this worksheet.
     * 
     * @remarks
     * Returns null if there is no data in the worksheet.
     */
    getLastCell() : Cell;
    /**
     * Gets the max range which includes data, merged cells and shapes.
     * 
     * @remarks
     * Reutrns null if the worksheet is empty since Aspose.Cells 21.5.2.
     */
    getMaxDisplayRange() : Range;
    /**
     * Gets the first cell in this worksheet.
     * 
     * @remarks
     * Returns null if there is no data in the worksheet.
     */
    getFirstCell() : Cell;
    /**
     * Performs application-defined tasks associated with freeing, releasing, or
     * resetting unmanaged resources.
     */
    dispose() : void;
    /**
     * Gets the cells enumerator.
     * @returns
     * The cells enumerator
     * 
     * @remarks
     * When traversing elements by the returned Enumerator, the cells collection
     * should not be modified(such as operations that will cause new Cell/Row be instantiated or existing Cell/Row be deleted).
     * Otherwise the enumerator may not be able to traverse all cells correctly(some elements may be traversed repeatedly or skipped).
     */
    getEnumerator() : CellEnumerator;
    /**
     * Gets all merged cells.
     */
    getMergedAreas() : CellArea[];
    /**
     * Gets the <see cref="Cell"/> element or null at the specified cell row index and column index.
     * @param row - Row index
     * @param column - Column index
     * @returns
     * Return Cell object if a Cell object exists.
     * Return null if the cell does not exist.
     * 
     * @remarks
     * NOTE: This member is now obsolete. Instead,
     * please use CheckCell(int row, int column) method.
     * This method will be removed 12 months later since February 2024.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use Cells.CheckCell(int row, int column) instead.
     */
    getCell(row: number, column: number) : Cell;
    /**
     * Gets the <see cref="Row"/> element at the specified cell row index.
     * @param row - Row index
     * @returns
     * If the row object does exist return Row object, otherwise return null.
     * 
     * @remarks
     * NOTE: This member is now obsolete. Instead,
     * please use Cells.CheckRow(int row) method.
     * This method will be removed 12 months later since February 2024.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use Cells.CheckRow(int row) instead.
     */
    getRow(row: number) : Row;
    /**
     * Gets the <see cref="Cell"/> element or null at the specified cell row index and column index.
     * @param row - Row index
     * @param column - Column index
     * @returns
     * Return Cell object if a Cell object exists.
     * Return null if the cell does not exist.
     */
    checkCell(row: number, column: number) : Cell;
    /**
     * Gets the <see cref="Row"/> element or null at the specified cell row index.
     * @param row - Row index
     * @returns
     * Returns <see cref="Row"/> object If the row object does exist, otherwise returns null.
     */
    checkRow(row: number) : Row;
    /**
     * Gets the <see cref="Column"/> element or null at the specified column index.
     * @param columnIndex - The column index.
     * @returns
     * The Column object.
     */
    checkColumn(columnIndex: number) : Column;
    /**
     * Checks whether a row at given index is hidden.
     * @param rowIndex - row index
     * @returns
     * true if the row is hidden
     */
    isRowHidden(rowIndex: number) : boolean;
    /**
     * Checks whether a column at given index is hidden.
     * @param columnIndex - column index
     * @returns
     * true if the column is hidden.
     */
    isColumnHidden(columnIndex: number) : boolean;
    /**
     * Adds a range object reference to cells
     * @param rangeObject - The range object will be contained in the cells
     */
    addRange(rangeObject: Range) : void;
    /**
     * Creates a <see cref="Range"/> object from a range of cells.
     * @param upperLeftCell - Upper left cell name.
     * @param lowerRightCell - Lower right cell name.
     * @returns
     * A <see cref="Range"/> object
     */
    createRange(upperLeftCell: string, lowerRightCell: string) : Range;
    /**
     * Creates a <see cref="Range"/> object from a range of cells.
     * @param firstRow - First row of this range
     * @param firstColumn - First column of this range
     * @param totalRows - Number of rows
     * @param totalColumns - Number of columns
     * @returns
     * A <see cref="Range"/> object
     */
    createRange(firstRow: number, firstColumn: number, totalRows: number, totalColumns: number) : Range;
    /**
     * Creates a <see cref="Range"/> object from an address of the range.
     * @param address - The address of the range.
     * @returns
     * A <see cref="Range"/> object
     */
    createRange(address: string) : Range;
    /**
     * Creates a <see cref="Range"/> object from rows of cells or columns of cells.
     * @param firstIndex - First row index or first column index, zero based.
     * @param number - Total number of rows or columns, one based.
     * @param isVertical - True - Range created from columns of cells. False - Range created from rows of cells.
     * @returns
     * A <see cref="Range"/> object.
     */
    createRange(firstIndex: number, number: number, isVertical: boolean) : Range;
    /**
     * Clears all data of the worksheet.
     */
    clear() : void;
    /**
     * Imports an array of formula into a worksheet.
     * @param stringArray - Formula array.
     * @param firstRow - The row number of the first cell to import in.
     * @param firstColumn - The column number of the first cell to import in.
     * @param isVertical - Specifies to import data vertically or horizontally.
     */
    importFormulaArray(stringArray: string[], firstRow: number, firstColumn: number, isVertical: boolean) : void;
    /**
     * Splits the text in the column to columns.
     * @param row - The row index.
     * @param column - The column index.
     * @param totalRows - The number of rows.
     * @param options - The split options.
     */
    textToColumns(row: number, column: number, totalRows: number, options: TxtLoadOptions) : void;
    /**
     * Import a CSV file to the cells.
     * @param fileName - The CSV file name.
     * @param splitter - The splitter
     * @param convertNumericData - Whether the string in text file is converted to numeric data.
     * @param firstRow - The row number of the first cell to import in.
     * @param firstColumn - The column number of the first cell to import in.
     */
    importCSV(fileName: string, splitter: string, convertNumericData: boolean, firstRow: number, firstColumn: number) : void;
    /**
     * Import a CSV file to the cells.
     * @param stream - The CSV file stream.
     * @param splitter - The splitter
     * @param convertNumericData - Whether the string in text file is converted to numeric data.
     * @param firstRow - The row number of the first cell to import in.
     * @param firstColumn - The column number of the first cell to import in.
     */
    importCSV(stream: Uint8Array, splitter: string, convertNumericData: boolean, firstRow: number, firstColumn: number) : void;
    /**
     * Import a CSV file to the cells.
     * @param fileName - The CSV file name.
     * @param options - The load options for reading text file
     * @param firstRow - The row number of the first cell to import in.
     * @param firstColumn - The column number of the first cell to import in.
     */
    importCSV(fileName: string, options: TxtLoadOptions, firstRow: number, firstColumn: number) : void;
    /**
     * Import a CSV file to the cells.
     * @param stream - The CSV file stream.
     * @param options - The load options for reading text file
     * @param firstRow - The row number of the first cell to import in.
     * @param firstColumn - The column number of the first cell to import in.
     */
    importCSV(stream: Uint8Array, options: TxtLoadOptions, firstRow: number, firstColumn: number) : void;
    /**
     * Merges a specified range of cells into a single cell.
     * @param firstRow - First row of this range(zero based)
     * @param firstColumn - First column of this range(zero based)
     * @param totalRows - Number of rows(one based)
     * @param totalColumns - Number of columns(one based)
     * 
     * @remarks
     * Reference the merged cell via the address of the upper-left cell in the range.
     */
    merge(firstRow: number, firstColumn: number, totalRows: number, totalColumns: number) : void;
    /**
     * Merges a specified range of cells into a single cell.
     * @param firstRow - First row of this range(zero based)
     * @param firstColumn - First column of this range(zero based)
     * @param totalRows - Number of rows(one based)
     * @param totalColumns - Number of columns(one based)
     * @param mergeConflict - Merge conflict merged ranges.
     * 
     * @remarks
     * Reference the merged cell via the address of the upper-left cell in the range.
     * If mergeConflict is true and the merged range conflicts with other merged cells,
     * other merged cells will be  automatically removed.
     */
    merge(firstRow: number, firstColumn: number, totalRows: number, totalColumns: number, mergeConflict: boolean) : void;
    /**
     * Merges a specified range of cells into a single cell.
     * @param firstRow - First row of this range(zero based)
     * @param firstColumn - First column of this range(zero based)
     * @param totalRows - Number of rows(one based)
     * @param totalColumns - Number of columns(one based)
     * @param checkConflict - Indicates whether check the merged cells intersects other merged cells
     * @param mergeConflict - Merge conflict merged ranges.
     * 
     * @remarks
     * Reference the merged cell via the address of the upper-left cell in the range.
     * If mergeConflict is true and the merged range conflicts with other merged cells,
     * other merged cells will be  automatically removed.
     */
    merge(firstRow: number, firstColumn: number, totalRows: number, totalColumns: number, checkConflict: boolean, mergeConflict: boolean) : void;
    /**
     * Unmerges a specified range of merged cells.
     * @param firstRow - First row of this range(zero based)
     * @param firstColumn - First column of this range(zero based)
     * @param totalRows - Number of rows(one based)
     * @param totalColumns - Number of columns(one based)
     */
    unMerge(firstRow: number, firstColumn: number, totalRows: number, totalColumns: number) : void;
    /**
     * Clears all merged ranges.
     */
    clearMergedCells() : void;
    /**
     * Hides a row.
     * @param row - Row index.
     */
    hideRow(row: number) : void;
    /**
     * Unhides a row.
     * @param row - Row index.
     * @param height - Row height. The row's height will be changed only when the row is hidden and given height value is positive.
     */
    unhideRow(row: number, height: number) : void;
    /**
     * Hides multiple rows.
     * @param row - The row index.
     * @param totalRows - The row number.
     */
    hideRows(row: number, totalRows: number) : void;
    /**
     * Unhides the hidden rows.
     * @param row - The row index.
     * @param totalRows - The row number.
     * @param height - Row height. The row's height will be changed only when the row is hidden and given height value is positive.
     */
    unhideRows(row: number, totalRows: number, height: number) : void;
    /**
     * Sets row height in unit of pixels.
     * @param row - Row index.
     * @param pixels - Number of pixels.
     */
    setRowHeightPixel(row: number, pixels: number) : void;
    /**
     * Sets row height in unit of inches.
     * @param row - Row index.
     * @param inches - Number of inches. It should be between 0 and 409.5/72.
     */
    setRowHeightInch(row: number, inches: number) : void;
    /**
     * Sets the height of the specified row.
     * @param row - Row index.
     * @param height - Height of row.In unit of point It should be between 0 and 409.5.
     */
    setRowHeight(row: number, height: number) : void;
    /**
     * Gets row's height.
     * @param row - The row index.
     * @param isOriginal - Whether returns the original row height or 0 for hidden row.
     * @param unitType - Unit type of the returned height value
     * @returns
     * Row's height
     */
    getRowHeight(row: number, isOriginal: boolean, unitType: CellsUnitType) : number;
    /**
     * Gets the height of a specified row, in unit of points.
     * @param row - Row index
     * @returns
     * Height of row
     */
    getRowHeight(row: number) : number;
    /**
     * Gets original row's height in unit of point if the row is hidden
     * @param row - The row index.
     * 
     * @remarks
     * NOTE: This member is now obsolete. Instead,
     * please use Cells.GetRowHeight(int,bool,CellsUnitType) method.
     * This method will be removed 12 months later since April 2024.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use Cells.GetRowHeight(int,bool,CellsUnitType) method, instead.
     */
    getRowOriginalHeightPoint(row: number) : number;
    /**
     * Gets the column width.
     * @param column - The column index.
     * @param isOriginal - Indicates whether getting original width.
     * @param unitType - 
     */
    getColumnWidth(column: number, isOriginal: boolean, unitType: CellsUnitType) : number;
    /**
     * Gets the width(in unit of characters) of the specified column in normal view
     * @param column - Column index
     * @returns
     * Width of column. For spreadsheet, column width is measured as the number of characters
     * of the maximum digit width of the numbers 0~9 as rendered in the normal style's font.
     */
    getColumnWidth(column: number) : number;
    /**
     * Gets original column's height in unit of point if the column is hidden
     * @param column - The row index.
     * 
     * @remarks
     * NOTE: This method is now obsolete. Instead,
     * please use Cells.GetColumnWidth(int ,bool , CellsUnitType ) method.
     * This method will be removed 12 months later since April 2024.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use Cells.GetColumnWidth(int ,bool , CellsUnitType ) method, instead.
     */
    getColumnOriginalWidthPoint(column: number) : number;
    /**
     * Hides a column.
     * @param column - Column index.
     */
    hideColumn(column: number) : void;
    /**
     * Unhides a column
     * @param column - Column index.
     * @param width - Column width.
     */
    unhideColumn(column: number, width: number) : void;
    /**
     * Hide multiple columns.
     * @param column - Column index.
     * @param totalColumns - Column number.
     */
    hideColumns(column: number, totalColumns: number) : void;
    /**
     * Unhide multiple columns.
     * @param column - Column index.
     * @param totalColumns - Column number
     * @param width - Column width.
     * 
     * @remarks
     * Only applies the column width to the hidden columns.
     */
    unhideColumns(column: number, totalColumns: number, width: number) : void;
    /**
     * Gets the height of a specified row.
     * @param row - Row index.
     * @returns
     * Height of row.
     */
    getViewRowHeight(row: number) : number;
    /**
     * Gets the height of a specified row in unit of inches.
     * @param row - Row index
     * @returns
     * Height of row
     */
    getRowHeightInch(row: number) : number;
    /**
     * Gets the height of a specified row in unit of inches.
     * @param row - Row index
     * @returns
     * Height of row
     */
    getViewRowHeightInch(row: number) : number;
    /**
     * Gets the height of a specified row in unit of pixel.
     * @param row - Row index
     * @returns
     * Height of row
     */
    getRowHeightPixel(row: number) : number;
    /**
     * Sets column width in unit of pixels in normal view.
     * @param column - Column index.
     * @param pixels - Number of pixels.
     */
    setColumnWidthPixel(column: number, pixels: number) : void;
    /**
     * Sets column width in unit of inches  in normal view.
     * @param column - Column index.
     * @param inches - Number of inches.
     */
    setColumnWidthInch(column: number, inches: number) : void;
    /**
     * Sets the width of the specified column in normal view.
     * @param column - Column index.
     * @param width - Width of column.Column width must be between 0 and 255.
     * 
     * @remarks
     * To hide a column, sets column width to zero.
     */
    setColumnWidth(column: number, width: number) : void;
    /**
     * Gets the width of the specified column in normal view, in units of pixel.
     * @param column - Column index
     * @returns
     * Width of column in normal view.
     */
    getColumnWidthPixel(column: number) : number;
    /**
     * Gets the width of the specified column in normal view, in units of pixel.
     * @param column - Column index
     * @param original - Indicates whether returning original width even when the column is hidden
     * @returns
     * Width of column in normal view.
     * 
     * @remarks
     * NOTE: This method is now obsolete. Instead,
     * please use Cells.GetColumnWidth(int ,bool , CellsUnitType ) method.
     * This method will be removed 12 months later since April 2024.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use Cells.GetColumnWidth(int ,bool , CellsUnitType ) method, instead.
     */
    getColumnWidthPixel(column: number, original: boolean) : number;
    /**
     * Gets the width of the specified column in normal view, in units of inches.
     * @param column - Column index
     * @returns
     * Width of column
     * 
     * @remarks
     * NOTE: This method is now obsolete. Instead,
     * please use Cells.GetColumnWidth(int ,bool , CellsUnitType ) method.
     * This method will be removed 12 months later since April 2024.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use Cells.GetColumnWidth(int ,bool , CellsUnitType ) method, instead.
     */
    getColumnWidthInch(column: number) : number;
    /**
     * Get the width in different view type.
     * @param column - The column index.
     * @returns
     * the column width in unit of pixels
     */
    getViewColumnWidthPixel(column: number) : number;
    /**
     * Sets the width of the column in different view.
     * @param column - The column index.
     * @param pixels - The width in unit of pixels.
     * 
     * @remarks
     * If the current view type is <see cref="ViewType.PageLayoutView"/>, the column's width is same as printed width.
     */
    setViewColumnWidthPixel(column: number, pixels: number) : void;
    /**
     * Gets the last row index of cell which contains data in the specified column.
     * @param column - Column index.
     * @returns
     * last row index.
     */
    getLastDataRow(column: number) : number;
    /**
     * Applies formats for a whole column.
     * @param column - The column index.
     * @param style - The style object which will be applied.
     * @param flag - Flags which indicates applied formatting properties.
     */
    applyColumnStyle(column: number, style: Style, flag: StyleFlag) : void;
    /**
     * Applies formats for a whole row.
     * @param row - The row index.
     * @param style - The style object which will be applied.
     * @param flag - Flags which indicates applied formatting properties.
     */
    applyRowStyle(row: number, style: Style, flag: StyleFlag) : void;
    /**
     * Applies formats for a whole worksheet.
     * @param style - The style object which will be applied.
     * @param flag - Flags which indicates applied formatting properties.
     */
    applyStyle(style: Style, flag: StyleFlag) : void;
    /**
     * Copies data and formats of a whole column.
     * @param sourceCells0 - Source Cells object contains data and formats to copy.
     * @param sourceColumnIndex - Source column index.
     * @param destinationColumnIndex - Destination column index.
     * @param columnNumber - The copied column number.
     * @param pasteOptions - the options of pasting.
     */
    copyColumns(sourceCells0: Cells, sourceColumnIndex: number, destinationColumnIndex: number, columnNumber: number, pasteOptions: PasteOptions) : void;
    /**
     * Copies data and formats of a whole column.
     * @param sourceCells0 - Source Cells object contains data and formats to copy.
     * @param sourceColumnIndex - Source column index.
     * @param destinationColumnIndex - Destination column index.
     * @param columnNumber - The copied column number.
     */
    copyColumns(sourceCells0: Cells, sourceColumnIndex: number, destinationColumnIndex: number, columnNumber: number) : void;
    /**
     * Copies data and formats of the whole columns.
     * @param sourceCells - Source Cells object contains data and formats to copy.
     * @param sourceColumnIndex - Source column index.
     * @param sourceTotalColumns - The number of the source columns.
     * @param destinationColumnIndex - Destination column index.
     * @param destinationTotalColumns - The number of the destination columns.
     */
    copyColumns(sourceCells: Cells, sourceColumnIndex: number, sourceTotalColumns: number, destinationColumnIndex: number, destinationTotalColumns: number) : void;
    /**
     * Copies data and formats of a whole column.
     * @param sourceCells - Source Cells object contains data and formats to copy.
     * @param sourceColumnIndex - Source column index.
     * @param destinationColumnIndex - Destination column index.
     */
    copyColumn(sourceCells: Cells, sourceColumnIndex: number, destinationColumnIndex: number) : void;
    /**
     * Copies data and formats of a whole row.
     * @param sourceCells - Source Cells object contains data and formats to copy.
     * @param sourceRowIndex - Source row index.
     * @param destinationRowIndex - Destination row index.
     */
    copyRow(sourceCells: Cells, sourceRowIndex: number, destinationRowIndex: number) : void;
    /**
     * Copies data and formats of some whole rows.
     * @param sourceCells - Source Cells object contains data and formats to copy.
     * @param sourceRowIndex - Source row index.
     * @param destinationRowIndex - Destination row index.
     * @param rowNumber - The copied row number.
     */
    copyRows(sourceCells: Cells, sourceRowIndex: number, destinationRowIndex: number, rowNumber: number) : void;
    /**
     * Copies data and formats of some whole rows.
     * @param sourceCells0 - Source Cells object contains data and formats to copy.
     * @param sourceRowIndex - Source row index.
     * @param destinationRowIndex - Destination row index.
     * @param rowNumber - The copied row number.
     * @param copyOptions - The copy options.
     */
    copyRows(sourceCells0: Cells, sourceRowIndex: number, destinationRowIndex: number, rowNumber: number, copyOptions: CopyOptions) : void;
    /**
     * Copies data and formats of some whole rows.
     * @param sourceCells0 - Source Cells object contains data and formats to copy.
     * @param sourceRowIndex - Source row index.
     * @param destinationRowIndex - Destination row index.
     * @param rowNumber - The copied row number.
     * @param copyOptions - The copy options.
     * @param pasteOptions - the options of pasting.
     */
    copyRows(sourceCells0: Cells, sourceRowIndex: number, destinationRowIndex: number, rowNumber: number, copyOptions: CopyOptions, pasteOptions: PasteOptions) : void;
    /**
     * Gets the outline level (zero-based) of the row.
     * @param rowIndex - The row index.
     * @returns
     * The outline level (zero-based) of the row.
     * 
     * @remarks
     * If the row is not grouped, returns zero.
     */
    getGroupedRowOutlineLevel(rowIndex: number) : number;
    /**
     * Gets the outline level (zero-based) of the column.
     * @param columnIndex - The column index
     * @returns
     * The outline level of the column
     * 
     * @remarks
     * If the column is not grouped, returns zero.
     */
    getGroupedColumnOutlineLevel(columnIndex: number) : number;
    /**
     * Gets the max grouped column outline level (zero-based).
     * @returns
     * The max grouped column outline level (zero-based)
     */
    getMaxGroupedColumnOutlineLevel() : number;
    /**
     * Gets the max grouped row outline level (zero-based).
     * @returns
     * The max grouped row outline level (zero-based)
     */
    getMaxGroupedRowOutlineLevel() : number;
    /**
     * Expands the grouped rows/columns.
     * @param isVertical - True, expands the grouped rows.
     * @param index - The row/column index
     */
    showGroupDetail(isVertical: boolean, index: number) : void;
    /**
     * Collapses the grouped rows/columns.
     * @param isVertical - True, collapse the grouped rows.
     * @param index - The row/column index
     */
    hideGroupDetail(isVertical: boolean, index: number) : void;
    /**
     * Ungroups columns.
     * @param firstIndex - The first column index to be ungrouped.
     * @param lastIndex - The last column index to be ungrouped.
     */
    ungroupColumns(firstIndex: number, lastIndex: number) : void;
    /**
     * Groups columns.
     * @param firstIndex - The first column index to be grouped.
     * @param lastIndex - The last column index to be grouped.
     */
    groupColumns(firstIndex: number, lastIndex: number) : void;
    /**
     * Groups columns.
     * @param firstIndex - The first column index to be grouped.
     * @param lastIndex - The last column index to be grouped.
     * @param isHidden - Specifies if the grouped columns are hidden.
     */
    groupColumns(firstIndex: number, lastIndex: number, isHidden: boolean) : void;
    /**
     * Ungroups rows.
     * @param firstIndex - The first row index to be ungrouped.
     * @param lastIndex - The last row index to be ungrouped.
     * @param isAll - True, removes all grouped info.Otherwise, remove the outer group info.
     */
    ungroupRows(firstIndex: number, lastIndex: number, isAll: boolean) : void;
    /**
     * Ungroups rows.
     * @param firstIndex - The first row index to be ungrouped.
     * @param lastIndex - The last row index to be ungrouped.
     * 
     * @remarks
     * Only removes outer group info.
     */
    ungroupRows(firstIndex: number, lastIndex: number) : void;
    /**
     * Groups rows.
     * @param firstIndex - The first row index to be grouped.
     * @param lastIndex - The last row index to be grouped.
     * @param isHidden - Specifies if the grouped rows are hidden.
     */
    groupRows(firstIndex: number, lastIndex: number, isHidden: boolean) : void;
    /**
     * Groups rows.
     * @param firstIndex - The first row index to be grouped.
     * @param lastIndex - The last row index to be grouped.
     */
    groupRows(firstIndex: number, lastIndex: number) : void;
    /**
     * Deletes a column.
     * @param columnIndex - Index of the column to be deleted.
     * @param updateReference - Indicates whether update references in other worksheets.
     */
    deleteColumn(columnIndex: number, updateReference: boolean) : void;
    /**
     * Deletes a column.
     * @param columnIndex - Index of the column to be deleted.
     */
    deleteColumn(columnIndex: number) : void;
    /**
     * Deletes several columns.
     * @param columnIndex - Index of the first column to be deleted.
     * @param totalColumns - Count of columns to be deleted.
     * @param updateReference - Indicates whether update references in other worksheets.
     */
    deleteColumns(columnIndex: number, totalColumns: number, updateReference: boolean) : void;
    /**
     * Check whether the range could be deleted.
     * @param startRow - The start row index of the range.
     * @param startColumn - The start column index of the range.
     * @param totalRows - The number of the rows in the range.
     * @param totalColumns - The number of the columns in the range.
     */
    isDeletingRangeEnabled(startRow: number, startColumn: number, totalRows: number, totalColumns: number) : boolean;
    /**
     * Deletes a row.
     * @param rowIndex - Index of the row to be deleted.
     */
    deleteRow(rowIndex: number) : void;
    /**
     * Deletes a row.
     * @param rowIndex - Index of the row to be deleted.
     * @param updateReference - Indicates whether update references in other worksheets.
     */
    deleteRow(rowIndex: number, updateReference: boolean) : void;
    /**
     * Deletes several rows.
     * @param rowIndex - The first row index to be deleted.
     * @param totalRows - Count of rows to be deleted.
     * 
     * @remarks
     * If the deleted range contains the top part(not whole) of the table(ListObject),
     * the ranged could not be deleted and nothing will be done.
     * It works in the same way with MS Excel.
     */
    deleteRows(rowIndex: number, totalRows: number) : boolean;
    /**
     * Deletes multiple rows in the worksheet.
     * @param rowIndex - Index of the first row to be deleted.
     * @param totalRows - Count of rows to be deleted.
     * @param updateReference - Indicates whether update references in other worksheets.
     */
    deleteRows(rowIndex: number, totalRows: number, updateReference: boolean) : boolean;
    /**
     * Delete all blank columns which do not contain any data.
     */
    deleteBlankColumns() : void;
    /**
     * Delete all blank columns which do not contain any data.
     * @param options - The options of deleting range.
     */
    deleteBlankColumns(options: DeleteOptions) : void;
    /**
     * Checks whether given column is blank(does not contain any data).
     * @param columnIndex - the column index
     * @returns
     * true if given column does not contain any data
     */
    isBlankColumn(columnIndex: number) : boolean;
    /**
     * Delete all blank rows which do not contain any data or other object.
     */
    deleteBlankRows() : void;
    /**
     * Delete all blank rows which do not contain any data or other object.
     * @param options - The options of deleting range.
     * 
     * @remarks
     * For blank rows that will be deleted, it is not only required that <see cref="Row.IsBlank"/> should be true,
     * but also there should be no visible comment defined for any cell in those rows,
     * and no pivot table whose range intersects with them.
     */
    deleteBlankRows(options: DeleteOptions) : void;
    /**
     * Inserts some columns into the worksheet.
     * @param columnIndex - Column index.
     * @param totalColumns - The number of columns.
     */
    insertColumns(columnIndex: number, totalColumns: number) : void;
    /**
     * Inserts some columns into the worksheet.
     * @param columnIndex - Column index.
     * @param totalColumns - The number of columns.
     * @param updateReference - Indicates if references in other worksheets will be updated.
     */
    insertColumns(columnIndex: number, totalColumns: number, updateReference: boolean) : void;
    /**
     * Inserts a new column into the worksheet.
     * @param columnIndex - Column index.
     * @param updateReference - Indicates if references in other worksheets will be updated.
     */
    insertColumn(columnIndex: number, updateReference: boolean) : void;
    /**
     * Inserts a new column into the worksheet.
     * @param columnIndex - Column index.
     */
    insertColumn(columnIndex: number) : void;
    /**
     * Inserts multiple rows into the worksheet.
     * @param rowIndex - Row index.
     * @param totalRows - Number of rows to be inserted.
     * @param updateReference - Indicates if references in other worksheets will be updated.
     */
    insertRows(rowIndex: number, totalRows: number, updateReference: boolean) : void;
    /**
     * Inserts multiple rows into the worksheet.
     * @param rowIndex - Row index.
     * @param totalRows - Number of rows to be inserted.
     * @param options - Indicates if references in other worksheets will be updated.
     */
    insertRows(rowIndex: number, totalRows: number, options: InsertOptions) : void;
    /**
     * Inserts multiple rows into the worksheet.
     * @param rowIndex - Row index.
     * @param totalRows - Number of rows to be inserted.
     */
    insertRows(rowIndex: number, totalRows: number) : void;
    /**
     * Inserts a new row into the worksheet.
     * @param rowIndex - Row index.
     */
    insertRow(rowIndex: number) : void;
    /**
     * Clears contents and formatting of a range.
     * @param range - Range to be cleared.
     */
    clearRange(range: CellArea) : void;
    /**
     * Clears contents and formatting of a range.
     * @param startRow - Start row index.
     * @param startColumn - Start column index.
     * @param endRow - End row index.
     * @param endColumn - End column index.
     */
    clearRange(startRow: number, startColumn: number, endRow: number, endColumn: number) : void;
    /**
     * Clears contents of a range.
     * @param range - Range to be cleared.
     */
    clearContents(range: CellArea) : void;
    /**
     * Clears contents of a range.
     * @param startRow - Start row index.
     * @param startColumn - Start column index.
     * @param endRow - End row index.
     * @param endColumn - End column index.
     */
    clearContents(startRow: number, startColumn: number, endRow: number, endColumn: number) : void;
    /**
     * Clears formatting of a range.
     * @param range - Range to be cleared.
     */
    clearFormats(range: CellArea) : void;
    /**
     * Clears formatting of a range.
     * @param startRow - Start row index.
     * @param startColumn - Start column index.
     * @param endRow - End row index.
     * @param endColumn - End column index.
     */
    clearFormats(startRow: number, startColumn: number, endRow: number, endColumn: number) : void;
    /**
     * Link to a xml map.
     * @param mapName - name of xml map
     * @param row - row of the destination cell
     * @param column - column of the destination cell
     * @param path - path of xml element in xml map
     */
    linkToXmlMap(mapName: string, row: number, column: number, path: string) : void;
    /**
     * Gets the last cell in this row.
     * @param rowIndex - Row index.
     * @returns
     * Cell object.
     */
    endCellInRow(rowIndex: number) : Cell;
    /**
     * Gets the last cell with maximum row index in this range.
     * @param startRow - Start row index.
     * @param endRow - End row index.
     * @param startColumn - Start column index.
     * @param endColumn - End column index.
     * @returns
     * Cell object.
     */
    endCellInRow(startRow: number, endRow: number, startColumn: number, endColumn: number) : Cell;
    /**
     * Gets the last cell in this column.
     * @param columnIndex - Column index.
     * @returns
     * Cell object.
     */
    endCellInColumn(columnIndex: number) : Cell;
    /**
     * Gets the last cell with maximum column index in this range.
     * @param startRow - Start row index.
     * @param endRow - End row index.
     * @param startColumn - Start column index.
     * @param endColumn - End column index.
     * @returns
     * Cell object.
     */
    endCellInColumn(startRow: number, endRow: number, startColumn: number, endColumn: number) : Cell;
    /**
     * Moves the range.
     * @param sourceArea - The range which should be moved.
     * @param destRow - The dest row.
     * @param destColumn - The dest column.
     */
    moveRange(sourceArea: CellArea, destRow: number, destColumn: number) : void;
    /**
     * Insert cut range.
     * @param cutRange - The cut range.
     * @param row - The row.
     * @param column - The column.
     * @param shiftType - The shift type .
     */
    insertCutCells(cutRange: Range, row: number, column: number, shiftType: ShiftType) : void;
    /**
     * Inserts a range of cells and shift cells according to the shift option.
     * @param area - Shift area.
     * @param shiftNumber - Number of rows or columns to be inserted.
     * @param shiftType - Shift cells option.
     * @param updateReference - Indicates whether update references in other worksheets.
     */
    insertRange(area: CellArea, shiftNumber: number, shiftType: ShiftType, updateReference: boolean) : void;
    /**
     * Inserts a range of cells and shift cells according to the shift option.
     * @param area - Shift area.
     * @param shiftType - Shift cells option.
     */
    insertRange(area: CellArea, shiftType: ShiftType) : void;
    /**
     * Inserts a range of cells and shift cells according to the shift option.
     * @param area - Shift area.
     * @param shiftNumber - Number of rows or columns to be inserted.
     * @param shiftType - Shift cells option.
     */
    insertRange(area: CellArea, shiftNumber: number, shiftType: ShiftType) : void;
    /**
     * Deletes a range of cells and shift cells according to the shift option.
     * @param startRow - Start row index.
     * @param startColumn - Start column index.
     * @param endRow - End row index.
     * @param endColumn - End column index.
     * @param shiftType - Shift cells option.
     */
    deleteRange(startRow: number, startColumn: number, endRow: number, endColumn: number, shiftType: ShiftType) : void;
    /**
     * Retrieves subtotals setting of the range.
     * @param ca - The range
     */
    retrieveSubtotalSetting(ca: CellArea) : SubtotalSetting;
    /**
     * Creates subtotals for the range.
     * @param ca - The range
     * @param groupBy - The field to group by, as a zero-based integer offset
     * @param consolidationFunction - The subtotal function.
     * @param totalList - An array of zero-based field offsets, indicating the fields to which the subtotals are added.
     */
    subtotal(ca: CellArea, groupBy: number, consolidationFunction: ConsolidationFunction, totalList: number[]) : void;
    /**
     * Creates subtotals for the range.
     * @param ca - The range
     * @param groupBy - The field to group by, as a zero-based integer offset
     * @param consolidationFunction - The subtotal function.
     * @param totalList - An array of zero-based field offsets, indicating the fields to which the subtotals are added.
     * @param replace - Indicates whether replace the current subtotals
     * @param pageBreaks - Indicates whether add page break between groups
     * @param summaryBelowData - Indicates whether add summary below data.
     */
    subtotal(ca: CellArea, groupBy: number, consolidationFunction: ConsolidationFunction, totalList: number[], replace: boolean, pageBreaks: boolean, summaryBelowData: boolean) : void;
    /**
     * Removes all formula and replaces with the value of the formula.
     */
    removeFormulas() : void;
    /**
     * Removes duplicate rows in the sheet.
     */
    removeDuplicates() : void;
    /**
     * Removes duplicate values in the range.
     * @param startRow - The start row.
     * @param startColumn - The start column
     * @param endRow - The end row index.
     * @param endColumn - The end column index.
     */
    removeDuplicates(startRow: number, startColumn: number, endRow: number, endColumn: number) : void;
    /**
     * Removes duplicate data of the range.
     * @param startRow - The start row.
     * @param startColumn - The start column
     * @param endRow - The end row index.
     * @param endColumn - The end column index.
     * @param hasHeaders - Indicates whether the range contains headers.
     * @param columnOffsets - The column offsets.
     */
    removeDuplicates(startRow: number, startColumn: number, endRow: number, endColumn: number, hasHeaders: boolean, columnOffsets: number[]) : void;
    /**
     * Converts all string data in the worksheet to numeric value if possible.
     */
    convertStringToNumericValue() : void;
    /**
     * Get all cells which refer to the specific cell.
     * @param isAll - Indicates whether check other worksheets
     * @param row - The row index.
     * @param column - The column index.
     */
    getDependents(isAll: boolean, row: number, column: number) : Cell[];
    /**
     * Gets all cells whose calculated result depends on specific cell.
     * @param row - Row index of the specific cell
     * @param column - Column index of the specific cell.
     * @param recursive - Whether returns those dependents which do not reference to the specific cell directly         /// but reference to other leafs of that cell.
     * @returns
     * Enumerator to enumerate all dependents(Cell objects)
     * 
     * @remarks
     * To use this method, please make sure the workbook has been set with true value for
     * <see cref="FormulaSettings.EnableCalculationChain"/> and has been fully calculated with this setting.
     * If there is no formula reference to this cell, null will be returned.
     * For more details and example, please see <see cref="Cell.GetDependentsInCalculation(bool)"/>
     */
    getDependentsInCalculation(row: number, column: number, recursive: boolean) : CellEnumerator;
    /**
     * Gets all cells that contain embedded picture.
     * @returns
     * Enumerator to enumerate all Cell objects that contain embedded picture
     * 
     * @remarks
     * If there is no picture which is set as "Place in Cell" in this worksheet, null will be returned.
     * >
     */
    getCellsWithPlaceInCellPicture() : CellEnumerator;
    /**
     * Get the style of given cell.
     * @param row - row index
     * @param column - column
     * @returns
     * the style of given cell.
     */
    getCellStyle(row: number, column: number) : Style;
}

/**
 * Collection of the <see cref="Column"/> objects that represent the individual column(setting)s in a worksheet.
 * The Column object only represents the settings such as column width, styles, .etc. for the whole column,
 * has nothing to do with the fact that there are non-empty cells(data) or not in corresponding column.
 * And the "Count" of this collection only represents the count Column objects that have been instantiated in this collection,
 * has nothing to do with the fact that there are non-empty cells(data) or not in the worksheet.
 */
export class ColumnCollection {
    /**
     * Gets a <see cref="Column"/> object by column index.
     * The Column object of given column index will be instantiated if it does not exist before.
     */
    get(columnIndex: number) : Column;
    /**
     * Gets the <see cref="Column"/> object by the position in the list.
     * @param index - The position in the list.
     * @returns
     * Returns the column object.
     */
    getColumnByIndex(index: number) : Column;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents a single column in a worksheet.
 */
export class Column {
    /**
     * Gets the index of this column.
     */
    getIndex() : number;
    /**
     * Gets and sets the column width in unit of characters.
     * 
     * @remarks
     * For spreadsheet, column width is measured as the number of characters
     * of the maximum digit width of the numbers 0~9 as rendered in the normal style's font.
     */
    getWidth() : number;
    /**
     * Gets and sets the column width in unit of characters.
     * @param value - The value to set.
     * 
     * @remarks
     * For spreadsheet, column width is measured as the number of characters
     * of the maximum digit width of the numbers 0~9 as rendered in the normal style's font.
     */
    setWidth(value: number) : void;
    /**
     * Gets the group level of the column.
     */
    getGroupLevel() : number;
    /**
     * Gets the group level of the column.
     * @param value - The value to set.
     */
    setGroupLevel(value: number) : void;
    /**
     * Indicates whether the column is hidden.
     */
    isHidden() : boolean;
    /**
     * Indicates whether the column is hidden.
     * @param value - The value to set.
     */
    setIsHidden(value: boolean) : void;
    /**
     * Indicates whether this column has custom style settings(different from the default one inherited from workbook).
     */
    getHasCustomStyle() : boolean;
    /**
     * whether the column is collapsed
     */
    isCollapsed() : boolean;
    /**
     * whether the column is collapsed
     * @param value - The value to set.
     */
    setIsCollapsed(value: boolean) : void;
    /**
     * Applies formats for a whole column.
     * @param style - The style object which will be applied.
     * @param flag - Flags which indicates applied formatting properties.
     */
    applyStyle(style: Style, flag: StyleFlag) : void;
    /**
     * Gets the style of this column.
     * 
     * @remarks
     * Modifying the returned style object directly takes no effect for this column or any cells in this column.
     * You have to call <see cref="ApplyStyle(Style, StyleFlag)"/> or <see cref="SetStyle(Style)"/> method
     * to apply the change to this column.<br></br>
     * Column's style is the style which will be inherited by cells in this column(those cells that have no custom style settings,
     * such as existing cells that have not been set style explicitly, or those that have not been instantiated)
     */
    getStyle() : Style;
    /**
     * Sets the style of this column.
     * @param style - the style to be used as the default style for cells in this column.
     * 
     * @remarks
     * This method only sets the given style as the default style for this column,
     * without changing the style settings for existing cells in this column.
     * To update style settings of existing cells to the specified style at the same time,
     * please use <see cref="ApplyStyle(Style, StyleFlag)"/>
     */
    setStyle(style: Style) : void;
}

/**
 * Represents the setting of the subtotal .
 */
export class SubtotalSetting {
    /**
     * The field to group by, as a zero-based integer offset
     */
    getGroupBy() : number;
    /**
     * The subtotal function.
     */
    getSubtotalFunction() : ConsolidationFunction;
    /**
     * An array of zero-based field offsets, indicating the fields to which the subtotals are added.
     */
    getTotalList() : number[];
    /**
     * Indicates whether add summary below data.
     */
    getSummaryBelowData() : boolean;
}

/**
 * Common options for loading text values
 */
export class AbstractTextLoadOptions extends LoadOptions {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: LoadOptions);
    /**
     * Gets and sets the default encoding. Only applies for csv file.
     */
    getEncoding() : EncodingType;
    /**
     * Gets and sets the default encoding. Only applies for csv file.
     * @param value - The value to set.
     */
    setEncoding(value: EncodingType) : void;
    /**
     * Indicates the strategy to apply style for parsed values when converting string value to number or datetime.
     */
    getLoadStyleStrategy() : TxtLoadStyleStrategy;
    /**
     * Indicates the strategy to apply style for parsed values when converting string value to number or datetime.
     * @param value - The value to set.
     */
    setLoadStyleStrategy(value: TxtLoadStyleStrategy) : void;
    /**
     * Gets or sets a value that indicates whether the string in text file is converted to numeric data.
     */
    getConvertNumericData() : boolean;
    /**
     * Gets or sets a value that indicates whether the string in text file is converted to numeric data.
     * @param value - The value to set.
     */
    setConvertNumericData(value: boolean) : void;
    /**
     * Gets or sets a value that indicates whether the string in text file is converted to date data.
     */
    getConvertDateTimeData() : boolean;
    /**
     * Gets or sets a value that indicates whether the string in text file is converted to date data.
     * @param value - The value to set.
     */
    setConvertDateTimeData(value: boolean) : void;
    /**
     * Indicates whether not parsing a string value if the length is 15.
     */
    getKeepPrecision() : boolean;
    /**
     * Indicates whether not parsing a string value if the length is 15.
     * @param value - The value to set.
     */
    setKeepPrecision(value: boolean) : void;
}

/**
 * Represents the options of loading ods file.
 */
export class OdsLoadOptions extends LoadOptions {
    /**
     * Represents the options of loading ods file.
     */
    constructor();
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: LoadOptions);
    /**
     * Represents the options of loading ods file.
     * @param type - The load format type.
     */
    constructor(type: LoadFormat);
    /**
     * Indicates whether applying the default style of the Excel to hyperlink.
     */
    getApplyExcelDefaultStyleToHyperlink() : boolean;
    /**
     * Indicates whether applying the default style of the Excel to hyperlink.
     * @param value - The value to set.
     */
    setApplyExcelDefaultStyleToHyperlink(value: boolean) : void;
    /**
     * Indicates whether refresh pivot tables when loading file.
     */
    getRefreshPivotTables() : boolean;
    /**
     * Indicates whether refresh pivot tables when loading file.
     * @param value - The value to set.
     */
    setRefreshPivotTables(value: boolean) : void;
}

/**
 * Represents the cell field of ods.
 */
export class OdsCellField {
    /**
     * Represents the custom format of the field's value.
     */
    getCustomFormat() : string;
    /**
     * Represents the custom format of the field's value.
     * @param value - The value to set.
     */
    setCustomFormat(value: string) : void;
    /**
     * Gets and sets the type of the field.
     */
    getFieldType() : OdsCellFieldType;
    /**
     * Gets and sets the type of the field.
     * @param value - The value to set.
     */
    setFieldType(value: OdsCellFieldType) : void;
    /**
     * Get and sets the row index of the cell.
     */
    getRow() : number;
    /**
     * Get and sets the row index of the cell.
     * @param value - The value to set.
     */
    setRow(value: number) : void;
    /**
     * Get and sets the column index of the cell.
     */
    getColumn() : number;
    /**
     * Get and sets the column index of the cell.
     * @param value - The value to set.
     */
    setColumn(value: number) : void;
}

/**
 * Represents the fields of ODS.
 */
export class OdsCellFieldCollection {
    /**
     * Gets the field by the index.
     * @param index - The index.
     */
    get(index: number) : OdsCellField;
    /**
     * Gets the field by row and column index.
     * @param row - The row index.
     * @param column - The column index.
     */
    get(row: number, column: number) : OdsCellField;
    /**
     * Adds a field.
     * @param row - The row index.
     * @param column - The column index.
     * @param fieldType - The type of the field.
     * @param format - The number format of the field.
     */
    add(row: number, column: number, fieldType: OdsCellFieldType, format: string) : number;
    /**
     * Update fields value to the cells.
     */
    updateFieldsValue() : void;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the cell field type of ods.
 */
export enum OdsCellFieldType {
    /**
     * Current date.
     */
    Date = 0,
    /**
     * The name of the sheet.
     */
    SheetName = 1,
    /**
     * The name of the file.
     */
    Title = 2,
}

/**
 * Represents the type of ODS generator.
 */
export enum OdsGeneratorType {
    /**
     * Libre Office
     */
    LibreOffice = 0,
    /**
     * Open Office
     */
    OpenOffice = 1,
}

/**
 * Represents the page background of ods.
 */
export class OdsPageBackground {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets and sets the page background type.
     */
    getType() : OdsPageBackgroundType;
    /**
     * Gets and sets the page background type.
     * @param value - The value to set.
     */
    setType(value: OdsPageBackgroundType) : void;
    /**
     * Gets and sets the color of background.
     */
    getColor() : Color;
    /**
     * Gets and sets the color of background.
     * @param value - The value to set.
     */
    setColor(value: Color) : void;
    /**
     * Gets and sets the page background graphic type.
     */
    getGraphicType() : OdsPageBackgroundGraphicType;
    /**
     * Gets and sets the page background graphic type.
     * @param value - The value to set.
     */
    setGraphicType(value: OdsPageBackgroundGraphicType) : void;
    /**
     * Gets and set the background graphic position.
     */
    getGraphicPositionType() : OdsPageBackgroundGraphicPositionType;
    /**
     * Gets and set the background graphic position.
     * @param value - The value to set.
     */
    setGraphicPositionType(value: OdsPageBackgroundGraphicPositionType) : void;
    /**
     * Indicates whether it's a linked graphic.
     */
    isLink() : boolean;
    /**
     * Gets and sets the linked graphic path.
     */
    getLinkedGraphic() : string;
    /**
     * Gets and sets the linked graphic path.
     * @param value - The value to set.
     */
    setLinkedGraphic(value: string) : void;
    /**
     * Gets and sets the graphic data.
     */
    getGraphicData() : number[];
    /**
     * Gets and sets the graphic data.
     * @param value - The value to set.
     */
    setGraphicData(value: number[]) : void;
}

/**
 * Represents the position.
 */
export enum OdsPageBackgroundGraphicPositionType {
    /**
     * Top left.
     */
    TopLeft = 0,
    /**
     * Top center.
     */
    TopCenter = 1,
    /**
     * Top right.
     */
    TopRight = 2,
    /**
     * Center left.
     */
    CenterLeft = 3,
    /**
     * Center.
     */
    CenterCenter = 4,
    /**
     * Center right.
     */
    CenterRight = 5,
    /**
     * Bottom left.
     */
    BottomLeft = 6,
    /**
     * Bottom center.
     */
    BottomCenter = 7,
    /**
     * Bottom right.
     */
    BottomRight = 8,
}

/**
 * Represents the type of formatting page background with image.
 */
export enum OdsPageBackgroundGraphicType {
    /**
     * Set the image at specific position.
     */
    Position = 0,
    /**
     * Stretch the image.
     */
    Area = 1,
    /**
     * Repeat and repeat the image.
     */
    Tile = 2,
}

/**
 * Represents the page background type of ods.
 */
export enum OdsPageBackgroundType {
    /**
     * No background.
     */
    None = 0,
    /**
     * Formats the background with color.
     */
    Color = 1,
    /**
     * Formats the background with image.
     */
    Graphic = 2,
}

/**
 * Enumerates page layout alignment types.
 */
export enum PageLayoutAlignmentType {
    /**
     * Represents bottom page layout alignment.
     */
    Bottom = 0,
    /**
     * Represents center page layout alignment.
     */
    Center = 1,
    /**
     * Represents left page layout alignment.
     */
    Left = 2,
    /**
     * Represents right page layout alignment.
     */
    Right = 3,
    /**
     * Represents top page layout alignment.
     */
    Top = 4,
}

/**
 * Represents two color gradient.
 */
export class TwoColorGradient {
    /**
     * @param color1 - 
     * @param color2 - 
     * @param gradientStyleType - 
     * @param variant - 
     */
    constructor(color1: Color, color2: Color, gradientStyleType: GradientStyleType, variant: number);
    /**
     * Gets and sets the first gradient color.
     */
    getColor1() : Color;
    /**
     * Gets and sets the first gradient color.
     * @param value - The value to set.
     */
    setColor1(value: Color) : void;
    /**
     * Gets and sets the second gradient color.
     */
    getColor2() : Color;
    /**
     * Gets and sets the second gradient color.
     * @param value - The value to set.
     */
    setColor2(value: Color) : void;
    /**
     * Gets and sets gradient shading style.
     */
    getGradientStyleType() : GradientStyleType;
    /**
     * Gets and sets gradient shading style.
     * @param value - The value to set.
     */
    setGradientStyleType(value: GradientStyleType) : void;
    /**
     * Gets and sets the gradient variant.
     */
    getVariant() : number;
    /**
     * Gets and sets the gradient variant.
     * @param value - The value to set.
     */
    setVariant(value: number) : void;
}

/**
 * Simple implementation of <see cref="AbstractInterruptMonitor"/> by checking and comparing current system time with user specified limit.
 * 
 * @remarks
 * This implementation is just a simple solution for simple scenarios.
 * It needs to frequently retrieve and check the system time so itself may have a negative impact on performance to some extent.
 */
export class SystemTimeInterruptMonitor {
    /**
     * Constructs one interruption monitor.
     * @param terminateWithoutException - <see cref="AbstractInterruptMonitor.TerminateWithoutException"/>
     */
    constructor(terminateWithoutException: boolean);
    /**
     * This implementation just checks whether the time cost(from the time when starting this monitor to now) is greater than user specified limit.
     */
    isInterruptionRequested() : boolean;
    /**
     * See <see cref="AbstractInterruptMonitor.TerminateWithoutException"/>.
     * This property is specified by user when constructing this monitor instance.
     */
    getTerminateWithoutException() : boolean;
    /**
     * Starts the monitor with the specified time limit. The start time to calculate time cost is just when this method is called,
     * so the procedure which needs to be monitored should be started just after this call.
     * @param msLimit - time limit(ms) to require the interruption.
     */
    startMonitor(msLimit: number) : void;
}

/**
 * Summary description of Timeline View
 * Due to MS Excel, Excel 2003 does not support Timeline
 */
export class Timeline {
    /**
     * Returns or sets the caption of the specified Timeline.
     */
    getCaption() : string;
    /**
     * Returns or sets the caption of the specified Timeline.
     * @param value - The value to set.
     */
    setCaption(value: string) : void;
    /**
     * Returns or sets the name of the specified Timeline
     */
    getName() : string;
    /**
     * Returns or sets the name of the specified Timeline
     * @param value - The value to set.
     */
    setName(value: string) : void;
    /**
     * Returns or sets the horizontal offset of timeline shape from its left column, in pixels.
     */
    getLeftPixel() : number;
    /**
     * Returns or sets the horizontal offset of timeline shape from its left column, in pixels.
     * @param value - The value to set.
     */
    setLeftPixel(value: number) : void;
    /**
     * Returns or sets the vertical offset of timeline shape from its top row, in pixels.
     */
    getTopPixel() : number;
    /**
     * Returns or sets the vertical offset of timeline shape from its top row, in pixels.
     * @param value - The value to set.
     */
    setTopPixel(value: number) : void;
    /**
     * Returns or sets the width of the specified timeline, in pixels.
     */
    getWidthPixel() : number;
    /**
     * Returns or sets the width of the specified timeline, in pixels.
     * @param value - The value to set.
     */
    setWidthPixel(value: number) : void;
    /**
     * Returns or sets the height of the specified timeline, in pixels.
     */
    getHeightPixel() : number;
    /**
     * Returns or sets the height of the specified timeline, in pixels.
     * @param value - The value to set.
     */
    setHeightPixel(value: number) : void;
}

/**
 * Specifies the collection of all the Timeline objects on the specified worksheet.
 * Due to MS Excel, Excel 2003 does not support Timeline.
 */
export class TimelineCollection {
    /**
     * Gets the Timeline by index.
     */
    get(index: number) : Timeline;
    /**
     * Gets the Timeline  by Timeline's name.
     */
    get(name: string) : Timeline;
    /**
     * Add a new Timeline using PivotTable as data source
     * @param pivot - PivotTable object
     * @param row - Row index of the cell in the upper-left corner of the Timeline range.
     * @param column - Column index of the cell in the upper-left corner of the Timeline range.
     * @param baseFieldName - The name of PivotField in PivotTable.BaseFields
     * @returns
     * The new add Timeline index
     */
    add(pivot: PivotTable, row: number, column: number, baseFieldName: string) : number;
    /**
     * Add a new Timeline using PivotTable as data source
     * @param pivot - PivotTable object
     * @param destCellName - The cell name in the upper-left corner of the Timeline range.
     * @param baseFieldName - The name of PivotField in PivotTable.BaseFields
     * @returns
     * The new add Timeline index
     */
    add(pivot: PivotTable, destCellName: string, baseFieldName: string) : number;
    /**
     * Add a new Timeline using PivotTable as data source
     * @param pivot - PivotTable object
     * @param row - Row index of the cell in the upper-left corner of the Timeline range.
     * @param column - Column index of the cell in the upper-left corner of the Timeline range.
     * @param baseFieldIndex - The index of PivotField in PivotTable.BaseFields
     * @returns
     * The new add Timeline index
     */
    add(pivot: PivotTable, row: number, column: number, baseFieldIndex: number) : number;
    /**
     * Add a new Timeline using PivotTable as data source
     * @param pivot - PivotTable object
     * @param destCellName - The cell name in the upper-left corner of the Timeline range.
     * @param baseFieldIndex - The index of PivotField in PivotTable.BaseFields
     * @returns
     * The new add Timeline index
     */
    add(pivot: PivotTable, destCellName: string, baseFieldIndex: number) : number;
    /**
     * Add a new Timeline using PivotTable as data source
     * @param pivot - PivotTable object
     * @param row - Row index of the cell in the upper-left corner of the Timeline range.
     * @param column - Column index of the cell in the upper-left corner of the Timeline range.
     * @param baseField - The PivotField in PivotTable.BaseFields
     * @returns
     * The new add Timeline index
     */
    add(pivot: PivotTable, row: number, column: number, baseField: PivotField) : number;
    /**
     * Add a new Timeline using PivotTable as data source
     * @param pivot - PivotTable object
     * @param destCellName - The cell name in the upper-left corner of the Timeline range.
     * @param baseField - The PivotField in PivotTable.BaseFields
     * @returns
     * The new add Timeline index
     */
    add(pivot: PivotTable, destCellName: string, baseField: PivotField) : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents converting files other formats.
 */
export class ConversionUtility {
    /**
     * Converts Excel files to other formats.
     * @param source - The source file name.
     * @param saveAs - The file name of expected file.
     */
    static convert(source: string, saveAs: string) : void;
}

/**
 * Represents type of exporting hyperlinks to json.
 */
export enum JsonExportHyperlinkType {
    /**
     * Export display string
     */
    DisplayString = 0,
    /**
     * Export url
     */
    Address = 1,
    /**
     * Export as html string.
     */
    HtmlString = 2,
}

/**
 * Represents state of the sheet's pane.
 */
export enum PaneStateType {
    /**
     * Panes are frozen, but were not before being frozen.
     */
    Frozen = 0,
    /**
     * Panes are frozen and were split before being frozen.
     */
    FrozenSplit = 1,
    /**
     * Panes are split, but not frozen.
     */
    Split = 2,
    /**
     * Panes are not frozen and not split.
     */
    Normal = 3,
}

/**
 * Represents mashup data.
 */
export class DataMashup {
    /**
     * Gets all power query formulas.
     */
    getPowerQueryFormulas() : PowerQueryFormulaCollection;
    /**
     * Gets all parameters of power query formulas.
     */
    getPowerQueryFormulaParameters() : PowerQueryFormulaParameterCollection;
}

/**
 * Represents the definition of power query formula.
 */
export class PowerQueryFormula {
    /**
     * Gets the definition of the power query formula.
     */
    getFormulaDefinition() : string;
    /**
     * Gets and sets the name of the power query formula.
     */
    getName() : string;
    /**
     * Gets and sets the name of the power query formula.
     * @param value - The value to set.
     */
    setName(value: string) : void;
    /**
     * Gets all items of power query formula.
     */
    getPowerQueryFormulaItems() : PowerQueryFormulaItemCollection;
}

/**
 * Represents all power query formulas in the mashup data.
 */
export class PowerQueryFormulaCollection {
    /**
     * Gets <see cref=" PowerQueryFormula"/> by the index in the list.
     * @param index - The index.
     */
    get(index: number) : PowerQueryFormula;
    /**
     * Gets <see cref=" PowerQueryFormula"/> by the name of the power query formula.
     * @param name - The name of the item.
     */
    get(name: string) : PowerQueryFormula;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the function of power query.
 */
export class PowerQueryFormulaFunction extends PowerQueryFormula {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: PowerQueryFormula);
    /**
     * Gets and sets the definition of function.
     */
    getF() : string;
    /**
     * Gets and sets the definition of function.
     * @param value - The value to set.
     */
    setF(value: string) : void;
}

/**
 * Represents the item of the power query formula.
 */
export class PowerQueryFormulaItem {
    /**
     * Gets the name of the item.
     */
    getName() : string;
    /**
     * Gets the value of the item.
     */
    getValue() : string;
    /**
     * Gets the value of the item.
     * @param value - The value to set.
     */
    setValue(value: string) : void;
}

/**
 * Represents all item of the power query formula.
 */
export class PowerQueryFormulaItemCollection {
    /**
     * Gets <see cref=" PowerQueryFormulaItem"/> by the index in the list.
     * @param index - The index.
     */
    get(index: number) : PowerQueryFormulaItem;
    /**
     * Gets <see cref=" PowerQueryFormulaItem"/> by the name of the item.
     * @param name - The name of the item.
     */
    get(name: string) : PowerQueryFormulaItem;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the parameter of power query formula.
 */
export class PowerQueryFormulaParameter {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets the name of parameter.
     */
    getName() : string;
    /**
     * Gets the name of parameter.
     * @param value - The value to set.
     */
    setName(value: string) : void;
    /**
     * Gets the value of parameter.
     */
    getValue() : string;
    /**
     * Gets the value of parameter.
     * @param value - The value to set.
     */
    setValue(value: string) : void;
    /**
     * Gets the definition of the parameter.
     */
    getParameterDefinition() : string;
}

/**
 * Represents the parameters of power query formula.
 */
export class PowerQueryFormulaParameterCollection {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets <see cref=" PowerQueryFormulaParameter"/> by the index in the list.
     * @param index - The index.
     */
    get(index: number) : PowerQueryFormulaParameter;
    /**
     * Gets <see cref=" PowerQueryFormulaParameter"/> by the name of the item.
     * @param name - The name of the item.
     */
    get(name: string) : PowerQueryFormulaParameter;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Encapsulates the object that represents a range of cells within a spreadsheet.
 * 
 * @remarks
 * The Range class denotes a region of Excel spreadsheet.
 * With this, you can format and set value of the range.
 * And you can simply copy range of Excel too.
 */
export class Range {
    /**
     * Gets <see cref="Cell"/> object in this range.
     * @param rowOffset - Row offset in this range, zero based.
     * @param columnOffset - Column offset in this range, zero based.
     * @returns
     * <see cref="Cell"/> object.
     */
    get(rowOffset: number, columnOffset: number) : Cell;
    /**
     * Returns a Range object that represents the current region.
     * The current region is a range bounded by any combination of blank rows and blank columns.
     */
    getCurrentRegion() : Range;
    /**
     * Gets all hyperlink in the range.
     */
    getHyperlinks() : Hyperlink[];
    /**
     * Gets the count of rows in the range.
     */
    getRowCount() : number;
    /**
     * Gets the count of columns in the range.
     */
    getColumnCount() : number;
    /**
     * Gets or sets the name of the range.
     * 
     * @remarks
     * Named range is supported. For example,
     * <p>range.Name = "Sheet1!MyRange";</p>
     */
    getName() : string;
    /**
     * Gets or sets the name of the range.
     * @param value - The value to set.
     * 
     * @remarks
     * Named range is supported. For example,
     * <p>range.Name = "Sheet1!MyRange";</p>
     */
    setName(value: string) : void;
    /**
     * Gets the range's refers to.
     */
    getRefersTo() : string;
    /**
     * Gets address of the range.
     */
    getAddress() : string;
    /**
     * Gets the distance, in points, from the left edge of column A to the left edge of the range.
     */
    getLeft() : number;
    /**
     * Gets the distance, in points, from the top edge of row 1 to the top edge of the range.
     */
    getTop() : number;
    /**
     * Gets the width of a range in points.
     */
    getWidth() : number;
    /**
     * Gets the width of a range in points.
     */
    getHeight() : number;
    /**
     * Gets the index of the first row of the range.
     */
    getFirstRow() : number;
    /**
     * Gets the index of the first column of the range.
     */
    getFirstColumn() : number;
    /**
     * Sets or gets the column width of this range
     */
    getColumnWidth() : number;
    /**
     * Sets or gets the column width of this range
     * @param value - The value to set.
     */
    setColumnWidth(value: number) : void;
    /**
     * Sets or gets the height of rows in this range
     */
    getRowHeight() : number;
    /**
     * Sets or gets the height of rows in this range
     * @param value - The value to set.
     */
    setRowHeight(value: number) : void;
    /**
     * Gets a Range object that represents the entire column (or columns) that contains the specified range.
     */
    getEntireColumn() : Range;
    /**
     * Gets a Range object that represents the entire row (or rows) that contains the specified range.
     */
    getEntireRow() : Range;
    /**
     * Gets the <see cref="Worksheet"/>object which contains this range.
     */
    getWorksheet() : Worksheet;
    /**
     * Automaticall fill the target range.
     * @param target - the target range.
     */
    autoFill(target: Range) : void;
    /**
     * Automaticall fill the target range.
     * @param target - The targed range.
     * @param autoFillType - The auto fill type.
     */
    autoFill(target: Range, autoFillType: AutoFillType) : void;
    /**
     * Adds a hyperlink to a specified cell or a range of cells.
     * @param address - Address of the hyperlink.
     * @param textToDisplay - The text to be displayed for the specified hyperlink.
     * @param screenTip - The screenTip text for the specified hyperlink.
     * @returns
     * <see cref="Hyperlink"/> object.
     */
    addHyperlink(address: string, textToDisplay: string, screenTip: string) : Hyperlink;
    /**
     * Gets the enumerator for cells in this Range.
     * @returns
     * The cells enumerator
     * 
     * @remarks
     * When traversing elements by the returned Enumerator, the cells collection
     * should not be modified(such as operations that will cause new Cell/Row be instantiated or existing Cell/Row be deleted).
     * Otherwise the enumerator may not be able to traverse all cells correctly(some elements may be traversed repeatedly or skipped).
     */
    getEnumerator() : CellEnumerator;
    /**
     * Indicates whether the range is intersect.
     * @param range - The range.
     * @returns
     * Whether the range is intersect.
     * 
     * @remarks
     * If the two ranges area not in the same worksheet ,return false.
     */
    isIntersect(range: Range) : boolean;
    /**
     * Returns a <see cref="Range"/> object that represents the rectangular intersection of two ranges.
     * @param range - The intersecting range.
     * @returns
     * Returns a <see cref="Range"/> object
     * 
     * @remarks
     * If the two ranges are not intersected, returns null.
     */
    intersect(range: Range) : Range;
    /**
     * Returns the union result of two ranges.
     * @param range - The range
     * @returns
     * The union of two ranges.
     * 
     * @remarks
     * NOTE: This method is now obsolete. Instead,
     * please use Range.UnionRanges() method.
     * This method will be removed 12 months later since May 2024.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use Range.UnionRanges() instead.
     */
    unionRang(range: Range) : Range[];
    /**
     * Returns the union result of two ranges.
     * @param ranges - The range
     * @returns
     * The union of two ranges.
     */
    unionRanges(ranges: Range[]) : UnionRange;
    /**
     * Indicates whether the range contains values.
     */
    isBlank() : boolean;
    /**
     * Combines a range of cells into a single cell.
     * 
     * @remarks
     * Reference the merged cell via the address of the upper-left cell in the range.
     */
    merge() : void;
    /**
     * Unmerges merged cells of this range.
     */
    unMerge() : void;
    /**
     * Puts a value into the range, if appropriate the value will be converted to other data type and cell's number format will be reset.
     * @param stringValue - Input value
     * @param isConverted - True: converted to other data type if appropriate.
     * @param setStyle - True: set the number format to cell's style when converting to other data type
     */
    putValue(stringValue: string, isConverted: boolean, setStyle: boolean) : void;
    /**
     * Apply the cell style.
     * @param style - The cell style.
     * @param explicitFlag - True, only overwriting formatting which is explicitly set.
     */
    setStyle(style: Style, explicitFlag: boolean) : void;
    /**
     * Sets the style of the range.
     * @param style - The Style object.
     */
    setStyle(style: Style) : void;
    /**
     * Applies formats for a whole range.
     * @param style - The style object which will be applied.
     * @param flag - Flags which indicates applied formatting properties.
     * 
     * @remarks
     * Each cell in this range will contains a <see cref="Style"/> object.
     * So this is a memory-consuming method. Please use it carefully.
     */
    applyStyle(style: Style, flag: StyleFlag) : void;
    /**
     * Sets the outline borders around a range of cells with same border style and color.
     * @param borderStyle - Border style.
     * @param borderColor - Border color.
     */
    setOutlineBorders(borderStyle: CellBorderType, borderColor: CellsColor) : void;
    /**
     * Sets the outline borders around a range of cells with same border style and color.
     * @param borderStyle - Border style.
     * @param borderColor - Border color.
     */
    setOutlineBorders(borderStyle: CellBorderType, borderColor: Color) : void;
    /**
     * Sets out line borders around a range of cells.
     * @param borderStyles - Border styles.
     * @param borderColors - Border colors.
     * 
     * @remarks
     * Both the length of borderStyles and borderStyles must be 4.
     * The order of borderStyles and borderStyles must be top,bottom,left,right
     */
    setOutlineBorders(borderStyles: CellBorderType[], borderColors: Color[]) : void;
    /**
     * Sets outline border around a range of cells.
     * @param borderEdge - Border edge.
     * @param borderStyle - Border style.
     * @param borderColor - Border color.
     */
    setOutlineBorder(borderEdge: BorderType, borderStyle: CellBorderType, borderColor: CellsColor) : void;
    /**
     * Sets outline border around a range of cells.
     * @param borderEdge - Border edge.
     * @param borderStyle - Border style.
     * @param borderColor - Border color.
     */
    setOutlineBorder(borderEdge: BorderType, borderStyle: CellBorderType, borderColor: Color) : void;
    /**
     * Set inside borders of the range.
     * @param borderEdge - Inside borde type, only can be <see cref="BorderType.Vertical"/> and <see cref="BorderType.Horizontal"/>.
     * @param lineStyle - The border style.
     * @param borderColor - The color of the border.
     */
    setInsideBorders(borderEdge: BorderType, lineStyle: CellBorderType, borderColor: CellsColor) : void;
    /**
     * Move the current range to the dest range.
     * @param destRow - The start row of the dest range.
     * @param destColumn - The start column of the dest range.
     */
    moveTo(destRow: number, destColumn: number) : void;
    /**
     * Copies cell data (including formulas) from a source range.
     * @param range - Source <see cref="Range"/> object.
     */
    copyData(range: Range) : void;
    /**
     * Copies cell value from a source range.
     * @param range - Source <see cref="Range"/> object.
     */
    copyValue(range: Range) : void;
    /**
     * Copies style settings from a source range.
     * @param range - Source <see cref="Range"/> object.
     */
    copyStyle(range: Range) : void;
    /**
     * Copying the range with paste special options.
     * @param range - The source range.
     * @param options - The paste special options.
     */
    copy(range: Range, options: PasteOptions) : void;
    /**
     * Copies data (including formulas), formatting, drawing objects etc. from a source range.
     * @param range - Source <see cref="Range"/> object.
     */
    copy(range: Range) : void;
    /**
     * Transpose (rotate) data from rows to columns or vice versa.
     */
    transpose() : void;
    /**
     * Gets <see cref="Cell"/> object or null in this range.
     * @param rowOffset - Row offset in this range, zero based.
     * @param columnOffset - Column offset in this range, zero based.
     * @returns
     * <see cref="Cell"/> object.
     */
    getCellOrNull(rowOffset: number, columnOffset: number) : Cell;
    /**
     * Gets <see cref="Range"/> range by offset.
     * @param rowOffset - Row offset in this range, zero based.
     * @param columnOffset - Column offset in this range, zero based.
     */
    getOffset(rowOffset: number, columnOffset: number) : Range;
    /**
     * Returns a string represents the current Range object.
     */
    toString() : string;
    /**
     * Converts the range to image.
     * @param options - The options for converting this range to image
     */
    toImage(options: ImageOrPrintOptions) : number[];
    /**
     * Convert the range to JSON value.
     * @param options - The options of converting
     */
    toJson(options: JsonSaveOptions) : string;
    /**
     * Convert the range to html .
     * @param saveOptions - Options for coverting range to html.
     */
    toHtml(saveOptions: HtmlSaveOptions) : number[];
}

/**
 * Represents how to loading the linked resource.
 */
export enum ResourceLoadingType {
    /**
     * Loads this resource as usual.
     */
    Default = 0,
    /**
     * Skips loading of this resource.
     */
    Skip = 1,
    /**
     * Use stream provided by user
     */
    UserProvided = 2,
}

/**
 * Collects the <see cref="Row"/> objects that represent the individual rows in a worksheet.
 */
export class RowCollection {
    /**
     * Gets a <see cref="Row"/> object by given row index. The Row object of given row index will be instantiated if it does not exist before.
     */
    get(rowIndex: number) : Row;
    /**
     * Gets the number of rows in this collection.
     */
    getCount() : number;
    /**
     * Gets an enumerator that iterates rows through this collection
     * @returns
     * enumerator
     */
    getEnumerator() : RowEnumerator;
    /**
     * Gets an enumerator that iterates rows through this collection
     * @param reversed - whether enumerate rows in reversed order
     * @param sync - whether the returned enumerator should check the modification of row collection         /// and keep synchronized with it.
     * @returns
     * The row enumerator
     * 
     * @remarks
     * If the row collection will be modified(by operations that may cause new Row be instantiated or
     * existing Row be removed) during the traversal with the enumerator,
     * synchronized enumerator should be used instead of normal enumerator so that the traversal can continue
     * from the position just after the one has been traversed by the last MoveNext().
     * However, together with the advantage that no element be skipped or traversed repeatedly,
     * the disadvantage for synchronized enumerator is that the performance will be degraded a bit
     * when comparing with normal enumerator.
     */
    getEnumerator(reversed: boolean, sync: boolean) : RowEnumerator;
    /**
     * Gets the row object by the position in the list.
     * @param index - The position.
     * @returns
     * The Row object at given position.
     */
    getRowByIndex(index: number) : Row;
    /**
     * Clear all rows and cells.
     */
    clear() : void;
    /**
     * Remove the row item at the specified index(position) in this collection.
     * @param index - zero-based index(position, not <see cref="Row.Index"/>) of the existing row item in this collection.
     */
    removeAt(index: number) : void;
}

/**
 * Represents a single row in a worksheet.
 */
export class Row {
    /**
     * Gets the cell.
     * @param column - The column index
     */
    get(column: number) : Cell;
    /**
     * Indicates whether the row contains any data
     */
    isBlank() : boolean;
    /**
     * whether the row is collapsed
     */
    isCollapsed() : boolean;
    /**
     * whether the row is collapsed
     * @param value - The value to set.
     */
    setIsCollapsed(value: boolean) : void;
    /**
     * Gets and sets the row height in unit of Points.
     */
    getHeight() : number;
    /**
     * Gets and sets the row height in unit of Points.
     * @param value - The value to set.
     */
    setHeight(value: number) : void;
    /**
     * Indicates whether the row is hidden.
     */
    isHidden() : boolean;
    /**
     * Indicates whether the row is hidden.
     * @param value - The value to set.
     */
    setIsHidden(value: boolean) : void;
    /**
     * Gets the index of this row.
     */
    getIndex() : number;
    /**
     * Gets the group level of the row.
     */
    getGroupLevel() : number;
    /**
     * Gets the group level of the row.
     * @param value - The value to set.
     */
    setGroupLevel(value: number) : void;
    /**
     * Indicates whether the row height matches current default font setting of the workbook.
     * True of this property also denotes the row height is "automatic" without custom height value set by user.
     * 
     * @remarks
     * When this property is true, if the content in this row changes,
     * generally the row height needs to be re-calculated(such as by <see cref="Worksheet.AutoFitRows()"/>)
     * to get the same result with what is shown in ms excel when you opening the workbook in it.
     */
    isHeightMatched() : boolean;
    /**
     * Indicates whether the row height matches current default font setting of the workbook.
     * True of this property also denotes the row height is "automatic" without custom height value set by user.
     * @param value - The value to set.
     * 
     * @remarks
     * When this property is true, if the content in this row changes,
     * generally the row height needs to be re-calculated(such as by <see cref="Worksheet.AutoFitRows()"/>)
     * to get the same result with what is shown in ms excel when you opening the workbook in it.
     */
    setIsHeightMatched(value: boolean) : void;
    /**
     * Indicates whether this row has custom style settings(different from the default one inherited from workbook).
     */
    getHasCustomStyle() : boolean;
    /**
     * Gets the first cell object in the row.
     */
    getFirstCell() : Cell;
    /**
     * Gets the first non-blank cell in the row.
     */
    getFirstDataCell() : Cell;
    /**
     * Gets the last cell object in the row.
     */
    getLastCell() : Cell;
    /**
     * Gets the last non-blank cell in the row.
     */
    getLastDataCell() : Cell;
    /**
     * Get the cell by specific index in the cells collection of this row.
     * @param index - The index(position) of the cell in the cells collection of this row.
     * @returns
     * The Cell object at given position.
     * 
     * @remarks
     * To traverse all cells in sequence without modification,
     * using <see cref="GetEnumerator()"/> will give better performance than using this method to get cell one by one.
     */
    getCellByIndex(index: number) : Cell;
    /**
     * Gets the cells enumerator
     * @returns
     * The cells enumerator
     */
    getEnumerator() : CellEnumerator;
    /**
     * Gets an enumerator that iterates cells through this row.
     * @param reversed - whether enumerate cells in reversed order
     * @param sync - whether the returned enumerator should check the modification of cells in this row         /// and keep synchronized with it.
     * @returns
     * The cell enumerator
     * 
     * @remarks
     * If the row will be modified(by operations that may cause new Cell be instantiated or
     * existing Cell be removed) during the traversal with the enumerator,
     * synchronized enumerator should be used instead of normal enumerator so that the traversal can continue
     * from the position just after the one has been traversed by the last MoveNext().
     * However, together with the advantage that no element be skipped or traversed repeatedly,
     * the disadvantage for synchronized enumerator is that the performance will be degraded a bit
     * when comparing with normal enumerator.
     */
    getEnumerator(reversed: boolean, sync: boolean) : CellEnumerator;
    /**
     * Gets the cell or null in the specific index.
     * @param column - The column index
     * @returns
     * Returns the cell object if the cell exists.
     * Or returns null if the cell object does not exist.
     */
    getCellOrNull(column: number) : Cell;
    /**
     * Gets the style of this row.
     * 
     * @remarks
     * Modifying the returned style object directly takes no effect for this row or any cells in this row.
     * You have to call <see cref="ApplyStyle(Style, StyleFlag)"/> or <see cref="SetStyle(Style)"/> method
     * to apply the change to this row.<br></br>
     * Row's style is the style which will be inherited by cells in this row(those cells that have no custom style settings,
     * such as existing cells that have not been set style explicitly, or those that have not been instantiated)
     */
    getStyle() : Style;
    /**
     * Sets the style of this row.
     * @param style - the style to be used as the default style for cells in this row.
     * 
     * @remarks
     * This method only sets the given style as the default style for this row,
     * without changing the style settings for existing cells in this row.
     * To update style settings of existing cells to the specified style at the same time,
     * please use <see cref="ApplyStyle(Style, StyleFlag)"/>
     */
    setStyle(style: Style) : void;
    /**
     * Copy settings of row, such as style, height, visibility, ...etc.
     * @param source - the source row whose settings will be copied to this one
     * @param checkStyle - whether check and gather style.         /// Only takes effect and be needed when two row objects belong to different workbook and the styles of two workbooks are different.
     */
    copySettings(source: Row, checkStyle: boolean) : void;
    /**
     * Applies formats for a whole row.
     * @param style - The style object which will be applied.
     * @param flag - Flags which indicates applied formatting properties.
     */
    applyStyle(style: Style, flag: StyleFlag) : void;
    /**
     * Checks whether this object refers to the same row with another row object.
     * @param row - another row object
     * @returns
     * true if two row objects refers to the same row.
     */
    equals(row: Row) : boolean;
}

/**
 * Represents options of saving .docx file.
 */
export class DocxSaveOptions extends PaginatedSaveOptions {
    /**
     * Represents options of saving .docx file.
     */
    constructor();
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: PaginatedSaveOptions);
    /**
     * Represents options of saving .docx file.
     * @param saveAsImage - If True, the workbook will be converted into some pictures of .docx file.         ///If False, the workbook will be converted into some tables of .docx file.
     */
    constructor(saveAsImage: boolean);
}

/**
 * Represents the save options for markdown.
 */
export class MarkdownSaveOptions extends SaveOptions {
    /**
     * Creates options for saving markdown document
     */
    constructor();
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: SaveOptions);
    /**
     * Gets and sets the default encoding.
     */
    getEncoding() : EncodingType;
    /**
     * Gets and sets the default encoding.
     * @param value - The value to set.
     */
    setEncoding(value: EncodingType) : void;
    /**
     * Gets and sets the format strategy when exporting the cell value as string.
     */
    getFormatStrategy() : CellValueFormatStrategy;
    /**
     * Gets and sets the format strategy when exporting the cell value as string.
     * @param value - The value to set.
     */
    setFormatStrategy(value: CellValueFormatStrategy) : void;
    /**
     * The Data provider to provide cells data for saving workbook in light mode.
     */
    getLightCellsDataProvider() : LightCellsDataProvider;
    /**
     * The Data provider to provide cells data for saving workbook in light mode.
     * @param value - The value to set.
     */
    setLightCellsDataProvider(value: LightCellsDataProvider) : void;
    /**
     * Gets and sets the line separator.
     */
    getLineSeparator() : string;
    /**
     * Gets and sets the line separator.
     * @param value - The value to set.
     */
    setLineSeparator(value: string) : void;
}

/**
 * Allows to specify which OOXML specification will be used when saving in the Xlsx format.
 */
export enum OoxmlCompliance {
    /**
     * ECMA-376 1st Edition, 2006.
     */
    Ecma376_2006 = 0,
    /**
     * ISO/IEC 29500:2008 Strict compliance level.
     */
    Iso29500_2008_Strict = 1,
}

/**
 * The Ooxml compression type
 */
export enum OoxmlCompressionType {
    /**
     * The fastest but least effective compression.
     */
    Level1 = 1,
    /**
     * A little slower, but better, than level 1.
     */
    Level2 = 2,
    /**
     * A little slower, but better, than level 2.
     */
    Level3 = 3,
    /**
     * A little slower, but better, than level 3.
     */
    Level4 = 4,
    /**
     * A little slower than level 4, but with better compression.
     */
    Level5 = 5,
    /**
     * A good balance of speed and compression efficiency.
     */
    Level6 = 6,
    /**
     * Pretty good compression!
     */
    Level7 = 7,
    /**
     * Better compression than Level7!
     */
    Level8 = 8,
    /**
     * The "best" compression, where best means greatest reduction in size of the input data stream.
     * This is also the slowest compression.
     */
    Level9 = 9,
}

/**
 * Represents the pptx save options.
 */
export class PptxSaveOptions extends PaginatedSaveOptions {
    /**
     * Represents the pptx save options.
     */
    constructor();
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: PaginatedSaveOptions);
    /**
     * Represents options of saving .pptx file.
     * @param saveAsImage - If True, the workbook will be converted into some pictures of .pptx file.         /// If False, the workbook will be converted into some tables of .pptx file.
     */
    constructor(saveAsImage: boolean);
    /**
     * Inidicates whether ignoring hidden rows when converting Excel to PowerPoint.
     */
    getIgnoreHiddenRows() : boolean;
    /**
     * Inidicates whether ignoring hidden rows when converting Excel to PowerPoint.
     * @param value - The value to set.
     */
    setIgnoreHiddenRows(value: boolean) : void;
    /**
     * Represents what type of line needs to be adjusted size of font if height of row is small.
     */
    getAdjustFontSizeForRowType() : AdjustFontSizeForRowType;
    /**
     * Represents what type of line needs to be adjusted size of font if height of row is small.
     * @param value - The value to set.
     */
    setAdjustFontSizeForRowType(value: AdjustFontSizeForRowType) : void;
    /**
     * Gets and sets the display type when exporting to PowerPoint.
     * The default exporting type is working as printing.
     */
    getExportViewType() : SlideViewType;
    /**
     * Gets and sets the display type when exporting to PowerPoint.
     * The default exporting type is working as printing.
     * @param value - The value to set.
     */
    setExportViewType(value: SlideViewType) : void;
}

/**
 * Represents the key list of data sorter.
 */
export class DataSorterKeyCollection {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets and sets <see cref="DataSorterKey"/> by index.
     * @param index - The index.
     */
    get(index: number) : DataSorterKey;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the options when converting table to range.
 */
export class TableToRangeOptions {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets and sets the last row index of the table.
     */
    getLastRow() : number;
    /**
     * Gets and sets the last row index of the table.
     * @param value - The value to set.
     */
    setLastRow(value: number) : void;
}

/**
 * Represents the type of target mode.
 */
export enum TargetModeType {
    /**
     * External link
     */
    External = 0,
    /**
     * Local and full paths to files or folders.
     */
    FilePath = 1,
    /**
     * Email.
     */
    Email = 2,
    /**
     * Link on cell or named range.
     */
    CellReference = 3,
}

/**
 * Represents union range.
 */
export class UnionRange {
    /**
     * Gets the index of the first row of the range.
     * 
     * @remarks
     * Only effects when it only contains one range.
     */
    getFirstRow() : number;
    /**
     * Gets the index of the first column of the range.
     * 
     * @remarks
     * Only effects when it only contains one range.
     */
    getFirstColumn() : number;
    /**
     * Gets the count of rows in the range.
     * 
     * @remarks
     * Only effects when it only contains one range.
     */
    getRowCount() : number;
    /**
     * Gets the count of rows in the range.
     * 
     * @remarks
     * Only effects when it only contains one range.
     */
    getColumnCount() : number;
    /**
     * Gets or sets the name of the range.
     * 
     * @remarks
     * Named range is supported. For example,
     * <p>range.Name = "Sheet1!MyRange";</p>
     */
    getName() : string;
    /**
     * Gets or sets the name of the range.
     * @param value - The value to set.
     * 
     * @remarks
     * Named range is supported. For example,
     * <p>range.Name = "Sheet1!MyRange";</p>
     */
    setName(value: string) : void;
    /**
     * Gets the range's refers to.
     */
    getRefersTo() : string;
    /**
     * Indicates whether this has range.
     */
    getHasRange() : boolean;
    /**
     * Gets all hyperlink in the range.
     */
    getHyperlinks() : Hyperlink[];
    /**
     * Gets all cell count in the range.
     */
    getCellCount() : number;
    /**
     * Gets the count of the ranges.
     */
    getRangeCount() : number;
    /**
     * Gets all union ranges.
     */
    getRanges() : Range[];
    /**
     * Combines a range of cells into a single cell.
     * 
     * @remarks
     * Reference the merged cell via the address of the upper-left cell in the range.
     */
    merge() : void;
    /**
     * Unmerges merged cells of this range.
     */
    unMerge() : void;
    /**
     * Puts a value into the range, if appropriate the value will be converted to other data type and cell's number format will be reset.
     * @param stringValue - Input value
     * @param isConverted - True: converted to other data type if appropriate.
     * @param setStyle - True: set the number format to cell's style when converting to other data type
     */
    putValue(stringValue: string, isConverted: boolean, setStyle: boolean) : void;
    /**
     * Sets the style of the range.
     * @param style - The Style object.
     */
    setStyle(style: Style) : void;
    /**
     * Applies formats for a whole range.
     * @param style - The style object which will be applied.
     * @param flag - Flags which indicates applied formatting properties.
     * 
     * @remarks
     * Each cell in this range will contains a <see cref="Style"/> object.
     * So this is a memory-consuming method. Please use it carefully.
     */
    applyStyle(style: Style, flag: StyleFlag) : void;
    /**
     * Copying the range with paste special options.
     * @param range - The source range.
     * @param options - The paste special options.
     */
    copy(range: UnionRange, options: PasteOptions) : void;
    /**
     * Gets the enumerator for cells in this Range.
     * @returns
     * The cells enumerator
     * 
     * @remarks
     * When traversing elements by the returned Enumerator, the cells collection
     * should not be modified(such as operations that will cause new Cell/Row be instantiated or existing Cell/Row be deleted).
     * Otherwise the enumerator may not be able to traverse all cells correctly(some elements may be traversed repeatedly or skipped).
     */
    getEnumerator() : CellEnumerator;
    /**
     * Sets out line borders around a range of cells.
     * @param borderStyles - Border styles.
     * @param borderColors - Border colors.
     * 
     * @remarks
     * Both the length of borderStyles and borderStyles must be 4.
     * The order of borderStyles and borderStyles must be top,bottom,left,right
     */
    setOutlineBorders(borderStyles: CellBorderType[], borderColors: Color[]) : void;
    /**
     * Sets the outline borders around a range of cells with same border style and color.
     * @param borderStyle - Border style.
     * @param borderColor - Border color.
     */
    setOutlineBorders(borderStyle: CellBorderType, borderColor: Color) : void;
    /**
     * Intersects another range.
     * @param range - The range.
     * 
     * @remarks
     * If the two union ranges are not intersected, returns null.
     */
    intersect(range: string) : UnionRange;
    /**
     * Intersects another range.
     * @param unionRange - The range.
     * 
     * @remarks
     * If the two union ranges are not intersected, returns null.
     */
    intersect(unionRange: UnionRange) : UnionRange;
    /**
     * Intersects another range.
     * @param ranges - The range.
     * 
     * @remarks
     * If the two union ranges are not intersected, returns null.
     */
    intersect(ranges: Range[]) : UnionRange;
    /**
     * Union another range.
     * @param range - The range.
     */
    union(range: string) : UnionRange;
    /**
     * Union another range.
     * @param unionRange - The range.
     */
    union(unionRange: UnionRange) : UnionRange;
    /**
     * Union the ranges.
     * @param ranges - The ranges.
     */
    union(ranges: Range[]) : UnionRange;
}

/**
 * Indicates the options that exporting range to json.
 */
export class ExportRangeToJsonOptions {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Indicates whether the range contains header row.
     */
    getHasHeaderRow() : boolean;
    /**
     * Indicates whether the range contains header row.
     * @param value - The value to set.
     */
    setHasHeaderRow(value: boolean) : void;
    /**
     * Exports the string value of the cells to json.
     */
    getExportAsString() : boolean;
    /**
     * Exports the string value of the cells to json.
     * @param value - The value to set.
     */
    setExportAsString(value: boolean) : void;
    /**
     * Indicates whether exporting empty cells as null.
     */
    getExportEmptyCells() : boolean;
    /**
     * Indicates whether exporting empty cells as null.
     * @param value - The value to set.
     */
    setExportEmptyCells(value: boolean) : void;
    /**
     * Indicates the indent.
     * 
     * @remarks
     * If the indent is null or empty, the exported json is not formatted.
     */
    getIndent() : string;
    /**
     * Indicates the indent.
     * @param value - The value to set.
     * 
     * @remarks
     * If the indent is null or empty, the exported json is not formatted.
     */
    setIndent(value: string) : void;
}

/**
 * Represents the options of json layout type.
 */
export class JsonLayoutOptions {
    /**
     * Constructor of loading JSON layout options.
     */
    constructor();
    /**
     * Processes Array as table.
     */
    getArrayAsTable() : boolean;
    /**
     * Processes Array as table.
     * @param value - The value to set.
     */
    setArrayAsTable(value: boolean) : void;
    /**
     * Indicates whether ignoring null value.
     */
    getIgnoreNull() : boolean;
    /**
     * Indicates whether ignoring null value.
     * @param value - The value to set.
     */
    setIgnoreNull(value: boolean) : void;
    /**
     * Ingores titles of attributes
     */
    getIgnoreTitle() : boolean;
    /**
     * Ingores titles of attributes
     * @param value - The value to set.
     */
    setIgnoreTitle(value: boolean) : void;
    /**
     * Indicates whether converting the string in json to numeric or date value.
     */
    getConvertNumericOrDate() : boolean;
    /**
     * Indicates whether converting the string in json to numeric or date value.
     * @param value - The value to set.
     */
    setConvertNumericOrDate(value: boolean) : void;
    /**
     * Gets and sets the format of numeric value.
     */
    get_NumberFormat() : string;
    /**
     * Gets and sets the format of numeric value.
     * @param value - The value to set.
     */
    setNumberFormat(value: string) : void;
    /**
     * Gets and sets the format of date value.
     */
    get_DateFormat() : string;
    /**
     * Gets and sets the format of date value.
     * @param value - The value to set.
     */
    setDateFormat(value: string) : void;
    /**
     * Gets and sets the style of the title.
     */
    getTitleStyle() : Style;
    /**
     * Gets and sets the style of the title.
     * @param value - The value to set.
     */
    setTitleStyle(value: Style) : void;
    /**
     * Indicates whether keeping schema of this json.
     * 
     * @remarks
     * Sometimes we will save the file to JSON after loading JSON file.
     */
    getKeptSchema() : boolean;
    /**
     * Indicates whether keeping schema of this json.
     * @param value - The value to set.
     * 
     * @remarks
     * Sometimes we will save the file to JSON after loading JSON file.
     */
    setKeptSchema(value: boolean) : void;
}

/**
 * Represents the utility class of processing json.
 */
export class JsonUtility {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Import the json string.
     * @param json - The json string.
     * @param cells - The Cells.
     * @param row - The row index.
     * @param column - The column index.
     * @param option - The options of import json string.
     */
    static importData(json: string, cells: Cells, row: number, column: number, option: JsonLayoutOptions) : number[];
    /**
     * Exporting the range to json file.
     * @param range - The range.
     * @param options - The options of exporting.
     * @returns
     * The json string value.
     */
    static exportRangeToJson(range: Range, options: JsonSaveOptions) : string;
}

/**
 * Represents a persisted taskpane object.
 */
export class WebExtensionTaskPane {
    /**
     * Gets and sets the web extension part associated with the taskpane instance
     */
    getWebExtension() : WebExtension;
    /**
     * Gets and sets the web extension part associated with the taskpane instance
     * @param value - The value to set.
     */
    setWebExtension(value: WebExtension) : void;
    /**
     * Gets and sets the last-docked location of this taskpane object.
     */
    getDockState() : string;
    /**
     * Gets and sets the last-docked location of this taskpane object.
     * @param value - The value to set.
     */
    setDockState(value: string) : void;
    /**
     * Indicates whether the Task Pane shows as visible by default when the document opens.
     */
    isVisible() : boolean;
    /**
     * Indicates whether the Task Pane shows as visible by default when the document opens.
     * @param value - The value to set.
     */
    setIsVisible(value: boolean) : void;
    /**
     * Indicates whether the taskpane is locked to the document in the UI and cannot be closed by the user.
     */
    isLocked() : boolean;
    /**
     * Indicates whether the taskpane is locked to the document in the UI and cannot be closed by the user.
     * @param value - The value to set.
     */
    setIsLocked(value: boolean) : void;
    /**
     * Gets and sets the default width value for this taskpane instance.
     */
    getWidth() : number;
    /**
     * Gets and sets the default width value for this taskpane instance.
     * @param value - The value to set.
     */
    setWidth(value: number) : void;
    /**
     * Gets and sets the index, enumerating from the outside to the inside, of this taskpane among other persisted taskpanes docked in the same default location.
     */
    getRow() : number;
    /**
     * Gets and sets the index, enumerating from the outside to the inside, of this taskpane among other persisted taskpanes docked in the same default location.
     * @param value - The value to set.
     */
    setRow(value: number) : void;
}

/**
 * Represents the list of task pane.
 */
export class WebExtensionTaskPaneCollection {
    /**
     * Gets task pane by the specific index.
     * @param index - The index.
     * @returns
     * The task pane.
     */
    get(index: number) : WebExtensionTaskPane;
    /**
     * Adds task pane.
     * @returns
     * The index.
     */
    add() : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents an Office Add-in instance.
 */
export class WebExtension {
    /**
     * Gets and sets the uniquely identifies the Office Add-in instance in the current document.
     */
    getId() : string;
    /**
     * Gets and sets the uniquely identifies the Office Add-in instance in the current document.
     * @param value - The value to set.
     */
    setId(value: string) : void;
    /**
     * Indicates whether the user can interact with the Office Add-in or not.
     */
    isFrozen() : boolean;
    /**
     * Indicates whether the user can interact with the Office Add-in or not.
     * @param value - The value to set.
     */
    setIsFrozen(value: boolean) : void;
    /**
     * Get the primary reference to an Office Add-in.
     */
    getReference() : WebExtensionReference;
    /**
     * Gets a list of alter references.
     */
    getAlterReferences() : WebExtensionReferenceCollection;
    /**
     * Gets all properties of web extension.
     */
    getProperties() : WebExtensionPropertyCollection;
    /**
     * Gets all bindings relationship between an Office Add-in and the data in the document.
     */
    getBindings() : WebExtensionBindingCollection;
}

/**
 * Represents a binding relationship between an Office Add-in and the data in the document.
 */
export class WebExtensionBinding {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets and sets the binding identifier.
     */
    getId() : string;
    /**
     * Gets and sets the binding identifier.
     * @param value - The value to set.
     */
    setId(value: string) : void;
    /**
     * Gets and sets the binding type.
     */
    getType() : string;
    /**
     * Gets and sets the binding type.
     * @param value - The value to set.
     */
    setType(value: string) : void;
    /**
     * Gets and sets the binding key used to map the binding entry in this list with the bound data in the document.
     */
    getAppref() : string;
    /**
     * Gets and sets the binding key used to map the binding entry in this list with the bound data in the document.
     * @param value - The value to set.
     */
    setAppref(value: string) : void;
}

/**
 * Represents the list of binding relationships between an Office Add-in and the data in the document.
 */
export class WebExtensionBindingCollection {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets web extension binding relationship by the specific index.
     * @param index - The index.
     * @returns
     * The  web extension binding relationship
     */
    get(index: number) : WebExtensionBinding;
    /**
     * Adds an a binding relationship between an Office Add-in and the data in the document.
     */
    add() : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the list of web extension.
 */
export class WebExtensionCollection {
    /**
     * Gets web extension by the specific index.
     * @param index - The index.
     * @returns
     * The  web extension.
     */
    get(index: number) : WebExtension;
    /**
     * Adds a web extension.
     * @returns
     * The index.
     */
    add() : number;
    /**
     * Add a web video player into exel.
     * @param url - 
     * @param autoPlay - Indicates whether auto playing the video.
     * @param startTime - The start time in unit of seconds.
     * @param endTime - The end time in unit of seconds.
     */
    addWebVideoPlayer(url: string, autoPlay: boolean, startTime: number, endTime: number) : number;
    /**
     * Remove web extension by the index.
     * @param index - The index.
     */
    removeAt(index: number) : void;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents an Office Add-in custom property.
 */
export class WebExtensionProperty {
    /**
     * Gets and set a custom property name.
     */
    getName() : string;
    /**
     * Gets and set a custom property name.
     * @param value - The value to set.
     */
    setName(value: string) : void;
    /**
     * Gets and sets a custom property value.
     */
    getValue() : string;
    /**
     * Gets and sets a custom property value.
     * @param value - The value to set.
     */
    setValue(value: string) : void;
}

/**
 * Represents the list of web extension properties.
 */
export class WebExtensionPropertyCollection {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets the property of web extension by the index.
     * @param index - The index.
     * @returns
     * The property of web extension.
     */
    get(index: number) : WebExtensionProperty;
    /**
     * Gets the property of web extension.
     * @param name - The name of property.
     * @returns
     * The property of web extension.
     */
    get(name: string) : WebExtensionProperty;
    /**
     * Adds web extension property.
     * @param name - The name of property.
     * @param value - The value of property.
     * @returns
     * The index of added property.
     */
    add(name: string, value: string) : number;
    /**
     * Remove the property by the name.
     * @param name - The name of the property.
     */
    removeAt(name: string) : void;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents identify the provider location and version of the extension.
 */
export class WebExtensionReference {
    /**
     * Gets and sets the identifier associated with the Office Add-in within a catalog provider.
     * The identifier MUST be unique within a catalog provider.
     */
    getId() : string;
    /**
     * Gets and sets the identifier associated with the Office Add-in within a catalog provider.
     * The identifier MUST be unique within a catalog provider.
     * @param value - The value to set.
     */
    setId(value: string) : void;
    /**
     * Gets and sets the version.
     */
    getVersion() : string;
    /**
     * Gets and sets the version.
     * @param value - The value to set.
     */
    setVersion(value: string) : void;
    /**
     * Gets and sets the instance of the marketplace where the Office Add-in is stored. .
     */
    getStoreName() : string;
    /**
     * Gets and sets the instance of the marketplace where the Office Add-in is stored. .
     * @param value - The value to set.
     */
    setStoreName(value: string) : void;
    /**
     * Gets and sets the type of marketplace that the store attribute identifies.
     */
    getStoreType() : WebExtensionStoreType;
    /**
     * Gets and sets the type of marketplace that the store attribute identifies.
     * @param value - The value to set.
     */
    setStoreType(value: WebExtensionStoreType) : void;
}

/**
 * Represents the list of web extension reference.
 */
export class WebExtensionReferenceCollection {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets web extension by the specific index.
     * @param index - The index.
     * @returns
     * The web extension
     */
    get(index: number) : WebExtensionReference;
    /**
     * Adds an empty reference of web extension.
     */
    add() : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the store type of web extension.
 */
export enum WebExtensionStoreType {
    /**
     * Specifies that the store type is Office.com.
     */
    OMEX = 0,
    /**
     * Specifies that the store type is SharePoint corporate catalog.
     */
    SPCatalog = 1,
    /**
     * Specifies that the store type is a SharePoint web application.
     */
    SPApp = 2,
    /**
     * Specifies that the store type is an Exchange server.
     */
    Exchange = 3,
    /**
     * Specifies that the store type is a file system share.
     */
    FileSystem = 4,
    /**
     * Specifies that the store type is the system registry.
     */
    Registry = 5,
    /**
     * Specifies that the store type is Centralized Deployment via Exchange.
     */
    ExCatalog = 6,
}

/**
 * Represents a root object to create an Excel spreadsheet.
 * 
 * @remarks
 * The Workbook class denotes an Excel spreadsheet. Each spreadsheet can contain multiple worksheets.
 * The basic feature of the class is to open and save native excel files.
 * The class has some advanced features like copying data from other Workbooks, combining two Workbooks, converting Excel to PDF, rendering Excel to image and protecting the Excel spreadsheet.
 */
export class Workbook {
    /**
     * Initializes a new instance of the <see cref="Workbook"/> class.
     * 
     * @remarks
     * The default file format type is Xlsx. If you want to create other types of files, please use Workbook(FileFormatType).
     */
    constructor();
    /**
     * Initializes a new instance of the <see cref="Workbook"/> class.
     * @param fileFormatType - The new file format.
     * 
     * @remarks
     * The default file format type is Excel97To2003.
     */
    constructor(fileFormatType: FileFormatType);
    /**
     * Initializes a new instance of the <see cref="Workbook"/> class and open a file.
     * @param file - The file name.
     */
    constructor(file: string);
    /**
     * Initializes a new instance of the <see cref="Workbook"/> class and open a stream.
     * @param stream - The stream.
     */
    constructor(stream: Uint8Array);
    /**
     * Initializes a new instance of the <see cref="Workbook"/> class and open a file.
     * @param file - The file name.
     * @param loadOptions - The load options
     */
    constructor(file: string, loadOptions: LoadOptions);
    /**
     * Initializes a new instance of the <see cref="Workbook"/> class and open stream.
     * @param stream - The stream.
     * @param loadOptions - The load options
     */
    constructor(stream: Uint8Array, loadOptions: LoadOptions);
    /**
     * Represents the workbook settings.
     */
    getSettings() : WorkbookSettings;
    /**
     * Gets the <see cref="WorksheetCollection"/> collection in the spreadsheet.
     * @returns
     * <see cref="WorksheetCollection"/> collection
     */
    getWorksheets() : WorksheetCollection;
    /**
     * Indicates whether license is set.
     */
    isLicensed() : boolean;
    /**
     * Returns colors in the palette for the spreadsheet.
     * 
     * @remarks
     * The palette has 56 entries, each represented by an RGB value.
     */
    getColors() : Color[];
    /**
     * Gets number of the styles in the style pool.
     */
    getCountOfStylesInPool() : number;
    /**
     * Gets or sets the default <see cref="Style"/> object of the workbook.
     * 
     * @remarks
     * The DefaultStyle property is useful to implement a Style for the whole Workbook.
     */
    getDefaultStyle() : Style;
    /**
     * Gets or sets the default <see cref="Style"/> object of the workbook.
     * @param value - The value to set.
     * 
     * @remarks
     * The DefaultStyle property is useful to implement a Style for the whole Workbook.
     */
    setDefaultStyle(value: Style) : void;
    /**
     * Indicates if this spreadsheet is digitally signed.
     */
    isDigitallySigned() : boolean;
    /**
     * Indicates whether structure or window is protected with password.
     */
    isWorkbookProtectedWithPassword() : boolean;
    /**
     * Gets the <see cref="VbaProject"/> in a spreadsheet.
     */
    getVbaProject() : VbaProject;
    /**
     * Indicates if this spreadsheet contains macro/VBA.
     */
    getHasMacro() : boolean;
    /**
     * Gets if the workbook has any tracked changes
     */
    getHasRevisions() : boolean;
    /**
     * Gets and sets the current file name.
     * 
     * @remarks
     * If the file is opened by stream and there are some external formula references,
     * please set the file name.
     */
    getFileName() : string;
    /**
     * Gets and sets the current file name.
     * @param value - The value to set.
     * 
     * @remarks
     * If the file is opened by stream and there are some external formula references,
     * please set the file name.
     */
    setFileName(value: string) : void;
    /**
     * Gets a DataSorter object to sort data.
     */
    getDataSorter() : DataSorter;
    /**
     * Gets the theme name.
     */
    getTheme() : string;
    /**
     * Returns a <see cref="DocumentProperty"/> collection that represents all the built-in document properties of the spreadsheet.
     * 
     * @remarks
     * A new property cannot be added to built-in document properties list. You can only get a built-in property and change its value.
     * The following is the built-in properties name list:
     * <p>Title</p>
     * <p>Subject</p>
     * <p>Author</p>
     * <p>Keywords</p>
     * <p>Comments</p>
     * <p>Template</p>
     * <p>Last Author</p>
     * <p>Revision Number</p>
     * <p>Application Name</p>
     * <p>Last Print Date</p>
     * <p>Creation Date</p>
     * <p>Last Save Time</p>
     * <p>Total Editing Time</p>
     * <p>Number of Pages</p>
     * <p>Number of Words</p>
     * <p>Number of Characters</p>
     * <p>Security</p>
     * <p>Category</p>
     * <p>Format</p>
     * <p>Manager</p>
     * <p>Company</p>
     * <p>Number of Bytes</p>
     * <p>Number of Lines</p>
     * <p>Number of Paragraphs</p>
     * <p>Number of Slides</p>
     * <p>Number of Notes</p>
     * <p>Number of Hidden Slides</p>
     * <p>Number of Multimedia Clips</p>
     */
    getBuiltInDocumentProperties() : BuiltInDocumentPropertyCollection;
    /**
     * Returns a <see cref="DocumentProperty"/> collection that represents all the custom document properties of the spreadsheet.
     */
    getCustomDocumentProperties() : CustomDocumentPropertyCollection;
    /**
     * Gets and sets the file format.
     */
    getFileFormat() : FileFormatType;
    /**
     * Gets and sets the file format.
     * @param value - The value to set.
     */
    setFileFormat(value: FileFormatType) : void;
    /**
     * Gets and sets the interrupt monitor.
     */
    getInterruptMonitor() : AbstractInterruptMonitor;
    /**
     * Gets the list of  <see cref="ContentTypeProperty"/> objects in the workbook.
     */
    getContentTypeProperties() : ContentTypePropertyCollection;
    /**
     * Represents a Custom XML Data Storage Part (custom XML data within a package).
     */
    getCustomXmlParts() : CustomXmlPartCollection;
    /**
     * Gets mashup data.
     */
    getDataMashup() : DataMashup;
    /**
     * Gets and sets the XML file that defines the Ribbon UI.
     */
    getRibbonXml() : string;
    /**
     * Gets and sets the XML file that defines the Ribbon UI.
     * @param value - The value to set.
     */
    setRibbonXml(value: string) : void;
    /**
     * Gets and sets the absolute path of the file.
     * 
     * @remarks
     * Only used for external links.
     */
    getAbsolutePath() : string;
    /**
     * Gets and sets the absolute path of the file.
     * @param value - The value to set.
     * 
     * @remarks
     * Only used for external links.
     */
    setAbsolutePath(value: string) : void;
    /**
     * Gets the <see cref="ExternalConnection"/> collection.
     */
    getDataConnections() : ExternalConnectionCollection;
    /**
     * Parses all formulas which have not been parsed when they were loaded from template file or set to a cell.
     * @param ignoreError - Whether ignore error for invalid formula.         /// For one invalid formula, if ignore error then this formula will be ignored         /// and the process will continue to parse other formulas, otherwise exception will be thrown.
     */
    parseFormulas(ignoreError: boolean) : void;
    /**
     * Starts the session that uses caches to access data.
     * @param opts - options of data access
     * 
     * @remarks
     * If the cache of specified data access requires some data models in worksheet to be "read-only",
     * then corresponding data models in every worksheet in this workbook will be taken as "read-only"
     * and user should not change any of them.
     * <br></br>
     * After finishing the access to the data, <see cref="CloseAccessCache(AccessCacheOptions)"/> should
     * be invoked with same options to clear all caches and recover normal access mode.
     * <br></br>
     */
    startAccessCache(opts: AccessCacheOptions) : void;
    /**
     * Closes the session that uses caches to access data.
     * @param opts - options of data access
     */
    closeAccessCache(opts: AccessCacheOptions) : void;
    /**
     * Saves the workbook to the disk.
     * @param fileName - The file name.
     * @param saveFormat - The save format type.
     */
    save(fileName: string, saveFormat: SaveFormat) : void;
    /**
     * Save the workbook to the disk.
     * @param fileName - 
     */
    save(fileName: string) : void;
    /**
     * Saves the workbook to the disk.
     * @param fileName - The file name.
     * @param saveOptions - The save options.
     */
    save(fileName: string, saveOptions: SaveOptions) : void;
    /**
     * Saves the workbook to the stream.
     * @param saveFormat - The save file format type.
     * @returns
     * The result stream.
     */
    save(saveFormat: SaveFormat) : Uint8Array;
    /**
     * Saves the workbook to the stream.
     * @param saveOptions - The save options.
     * @returns
     * The result stream.
     */
    save(saveOptions: SaveOptions) : Uint8Array;
    /**
     * Saves Excel file to a MemoryStream object and returns it.
     * @returns
     * MemoryStream object which contains an Excel file.
     * 
     * @remarks
     * This method provides same function as Save method and only save the workbook as Excel97-2003 xls file.
     * It's mainly for calling from COM clients.
     */
    saveToStream() : Uint8Array;
    /**
     * Remove all unused styles.
     */
    removeUnusedStyles() : void;
    /**
     * Creates a new style.
     * @returns
     * Returns a style object.
     */
    createStyle() : Style;
    /**
     * Creates built-in style by given type.
     * @param type - The builtin style stype.
     * @returns
     * <see cref="Style"/> object
     */
    createBuiltinStyle(type: BuiltinStyleType) : Style;
    /**
     * Creates a <see cref="CellsColor"/> object.
     * @returns
     * Returns a <see cref="CellsColor"/> object.
     */
    createCellsColor() : CellsColor;
    /**
     * Replaces a cell's value with a new string.
     * @param placeHolder - Cell placeholder
     * @param newValue - String value to replace
     */
    replace(placeHolder: string, newValue: string) : number;
    /**
     * Replaces a cell's value with a new integer.
     * @param placeHolder - Cell placeholder
     * @param newValue - Integer value to replace
     */
    replace(placeHolder: string, newValue: number) : number;
    /**
     * Replaces a cell's value with a new double.
     * @param placeHolder - Cell placeholder
     * @param newValue - Double value to replace
     */
    replace(placeHolder: string, newValue: number) : number;
    /**
     * Replaces a cell's value with a new string array.
     * @param placeHolder - Cell placeholder
     * @param newValues - String array to replace
     * @param isVertical - True - Vertical, False - Horizontal
     */
    replace(placeHolder: string, newValues: string[], isVertical: boolean) : number;
    /**
     * Replaces cells' values with an integer array.
     * @param placeHolder - Cell placeholder
     * @param newValues - Integer array to replace
     * @param isVertical - True - Vertical, False - Horizontal
     */
    replace(placeHolder: string, newValues: number[], isVertical: boolean) : number;
    /**
     * Replaces cells' values with a double array.
     * @param placeHolder - Cell placeholder
     * @param newValues - Double array to replace
     * @param isVertical - True - Vertical, False - Horizontal
     */
    replace(placeHolder: string, newValues: number[], isVertical: boolean) : number;
    /**
     * Replaces a cell's value with a new string.
     * @param placeHolder - Cell placeholder
     * @param newValue - String value to replace
     * @param options - The replace options
     */
    replace(placeHolder: string, newValue: string, options: ReplaceOptions) : number;
    /**
     * Copies another Workbook object.
     * @param source - Source Workbook object.
     * @param copyOptions - The options of copying other workbook.
     * 
     * @remarks
     * It's very simple to clone an Excel file.
     */
    copy(source: Workbook, copyOptions: CopyOptions) : void;
    /**
     * Copies data from a source Workbook object.
     * @param source - Source Workbook object.
     */
    copy(source: Workbook) : void;
    /**
     * Combines another Workbook object.
     * @param secondWorkbook - Another Workbook object.
     * 
     * @remarks
     * Merge Excel, ODS , CSV and other files to one file.
     */
    combine(secondWorkbook: Workbook) : void;
    /**
     * Gets the style in the style pool.
     * All styles in the workbook will be gathered into a pool.
     * There is only a simple reference index in the cells.
     * @param index - The index.
     * @returns
     * The style in the pool corresponds to given index, may be null.
     * 
     * @remarks
     * If the returned style is changed, the style of all cells(which refers to this style) will be changed.
     */
    getStyleInPool(index: number) : Style;
    /**
     * Gets all fonts in the style pool.
     */
    getFonts() : Font[];
    /**
     * Gets the named style in the style pool.
     * @param name - name of the style
     * @returns
     * named style, maybe null.
     */
    getNamedStyle(name: string) : Style;
    /**
     * Changes the palette for the spreadsheet in the specified index.
     * @param color - Color structure.
     * @param index - Palette index, 0 - 55.
     * 
     * @remarks
     * <p>The palette has 56 entries, each represented by an RGB value.</p>
     * <p>If you set a color which is not in the palette, it will not take effect.</p>
     * <p>So if you want to set a custom color, please change the palette at first.</p>
     * <p>The following is the standard color palette.</p>
     * <list type="table">
     * <listheader>
     * <description>Color</description>
     * <description>Red</description>
     * <description>Green</description>
     * <description>Blue</description>
     * </listheader>
     * <item>
     * <description>Black</description>
     * <description>0</description>
     * <description>0</description>
     * <description>0</description>
     * </item>
     * <item>
     * <description>White</description>
     * <description>255</description>
     * <description>255</description>
     * <description>255</description>
     * </item>
     * <item>
     * <description>Red</description>
     * <description>255</description>
     * <description>0</description>
     * <description>0</description>
     * </item>
     * <item>
     * <description>Lime</description>
     * <description>0</description>
     * <description>255</description>
     * <description>0</description>
     * </item>
     * <item>
     * <description>Blue</description>
     * <description>0</description>
     * <description>0</description>
     * <description>255</description>
     * </item>
     * <item>
     * <description>Yellow</description>
     * <description>255</description>
     * <description>255</description>
     * <description>0</description>
     * </item>
     * <item>
     * <description>Magenta</description>
     * <description>255</description>
     * <description>0</description>
     * <description>255</description>
     * </item>
     * <item>
     * <description>Cyan</description>
     * <description>0</description>
     * <description>255</description>
     * <description>255</description>
     * </item>
     * <item>
     * <description>Maroon</description>
     * <description>128</description>
     * <description>0</description>
     * <description>0</description>
     * </item>
     * <item>
     * <description>Green</description>
     * <description>0</description>
     * <description>128</description>
     * <description>0</description>
     * </item>
     * <item>
     * <description>Navy</description>
     * <description>0</description>
     * <description>0</description>
     * <description>128</description>
     * </item>
     * <item>
     * <description>Olive</description>
     * <description>128</description>
     * <description>128</description>
     * <description>0</description>
     * </item>
     * <item>
     * <description>Purple</description>
     * <description>128</description>
     * <description>0</description>
     * <description>128</description>
     * </item>
     * <item>
     * <description>Teal</description>
     * <description>0</description>
     * <description>128</description>
     * <description>128</description>
     * </item>
     * <item>
     * <description>Silver</description>
     * <description>192</description>
     * <description>192</description>
     * <description>192</description>
     * </item>
     * <item>
     * <description>Gray</description>
     * <description>128</description>
     * <description>128</description>
     * <description>128</description>
     * </item>
     * <item>
     * <description>Color17</description>
     * <description>153</description>
     * <description>153</description>
     * <description>255</description>
     * </item>
     * <item>
     * <description>Color18</description>
     * <description>153</description>
     * <description>51</description>
     * <description>102</description>
     * </item>
     * <item>
     * <description>Color19</description>
     * <description>255</description>
     * <description>255</description>
     * <description>204</description>
     * </item>
     * <item>
     * <description>Color20</description>
     * <description>204</description>
     * <description>255</description>
     * <description>255</description>
     * </item>
     * <item>
     * <description>Color21</description>
     * <description>102</description>
     * <description>0</description>
     * <description>102</description>
     * </item>
     * <item>
     * <description>Color22</description>
     * <description>255</description>
     * <description>128</description>
     * <description>128</description>
     * </item>
     * <item>
     * <description>Color23</description>
     * <description>0</description>
     * <description>102</description>
     * <description>204</description>
     * </item>
     * <item>
     * <description>Color24</description>
     * <description>204</description>
     * <description>204</description>
     * <description>255</description>
     * </item>
     * <item>
     * <description>Color25</description>
     * <description>0</description>
     * <description>0</description>
     * <description>128</description>
     * </item>
     * <item>
     * <description>Color26</description>
     * <description>255</description>
     * <description>0</description>
     * <description>255</description>
     * </item>
     * <item>
     * <description>Color27</description>
     * <description>255</description>
     * <description>255</description>
     * <description>0</description>
     * </item>
     * <item>
     * <description>Color28</description>
     * <description>0</description>
     * <description>255</description>
     * <description>255</description>
     * </item>
     * <item>
     * <description>Color29</description>
     * <description>128</description>
     * <description>0</description>
     * <description>128</description>
     * </item>
     * <item>
     * <description>Color30</description>
     * <description>128</description>
     * <description>0</description>
     * <description>0</description>
     * </item>
     * <item>
     * <description>Color31</description>
     * <description>0</description>
     * <description>128</description>
     * <description>128</description>
     * </item>
     * <item>
     * <description>Color32</description>
     * <description>0</description>
     * <description>0</description>
     * <description>255</description>
     * </item>
     * <item>
     * <description>Color33</description>
     * <description>0</description>
     * <description>204</description>
     * <description>255</description>
     * </item>
     * <item>
     * <description>Color34</description>
     * <description>204</description>
     * <description>255</description>
     * <description>255</description>
     * </item>
     * <item>
     * <description>Color35</description>
     * <description>204</description>
     * <description>255</description>
     * <description>204</description>
     * </item>
     * <item>
     * <description>Color36</description>
     * <description>255</description>
     * <description>255</description>
     * <description>153</description>
     * </item>
     * <item>
     * <description>Color37</description>
     * <description>153</description>
     * <description>204</description>
     * <description>255</description>
     * </item>
     * <item>
     * <description>Color38</description>
     * <description>255</description>
     * <description>153</description>
     * <description>204</description>
     * </item>
     * <item>
     * <description>Color39</description>
     * <description>204</description>
     * <description>153</description>
     * <description>255</description>
     * </item>
     * <item>
     * <description>Color40</description>
     * <description>255</description>
     * <description>204</description>
     * <description>153</description>
     * </item>
     * <item>
     * <description>Color41</description>
     * <description>51</description>
     * <description>102</description>
     * <description>255</description>
     * </item>
     * <item>
     * <description>Color42</description>
     * <description>51</description>
     * <description>204</description>
     * <description>204</description>
     * </item>
     * <item>
     * <description>Color43</description>
     * <description>153</description>
     * <description>204</description>
     * <description>0</description>
     * </item>
     * <item>
     * <description>Color44</description>
     * <description>255</description>
     * <description>204</description>
     * <description>0</description>
     * </item>
     * <item>
     * <description>Color45</description>
     * <description>255</description>
     * <description>153</description>
     * <description>0</description>
     * </item>
     * <item>
     * <description>Color46</description>
     * <description>255</description>
     * <description>102</description>
     * <description>0</description>
     * </item>
     * <item>
     * <description>Color47</description>
     * <description>102</description>
     * <description>102</description>
     * <description>153</description>
     * </item>
     * <item>
     * <description>Color48</description>
     * <description>150</description>
     * <description>150</description>
     * <description>150</description>
     * </item>
     * <item>
     * <description>Color49</description>
     * <description>0</description>
     * <description>51</description>
     * <description>102</description>
     * </item>
     * <item>
     * <description>Color50</description>
     * <description>51</description>
     * <description>153</description>
     * <description>102</description>
     * </item>
     * <item>
     * <description>Color51</description>
     * <description>0</description>
     * <description>51</description>
     * <description>0</description>
     * </item>
     * <item>
     * <description>Color52</description>
     * <description>51</description>
     * <description>51</description>
     * <description>0</description>
     * </item>
     * <item>
     * <description>Color53</description>
     * <description>153</description>
     * <description>51</description>
     * <description>0</description>
     * </item>
     * <item>
     * <description>Color54</description>
     * <description>153</description>
     * <description>51</description>
     * <description>102</description>
     * </item>
     * <item>
     * <description>Color55</description>
     * <description>51</description>
     * <description>51</description>
     * <description>153</description>
     * </item>
     * <item>
     * <description>Color56</description>
     * <description>51</description>
     * <description>51</description>
     * <description>51</description>
     * </item>
     * </list>
     */
    changePalette(color: Color, index: number) : void;
    /**
     * Checks if a color is in the palette for the spreadsheet.
     * @param color - Color structure.
     * @returns
     * Returns true if this color is in the palette. Otherwise, returns false
     */
    isColorInPalette(color: Color) : boolean;
    /**
     * Calculates the result of formulas.
     * 
     * @remarks
     * For all supported formulas, please see the list at https://docs.aspose.com/display/cellsnet/Supported+Formula+Functions
     */
    calculateFormula() : void;
    /**
     * Calculates the result of formulas.
     * @param ignoreError - Indicates if hide the error in calculating formulas. The error may be unsupported function, external links, etc.
     */
    calculateFormula(ignoreError: boolean) : void;
    /**
     * Calculating formulas in this workbook.
     * @param options - Options for calculation
     */
    calculateFormula(options: CalculationOptions) : void;
    /**
     * Refreshes dynamic array formulas(spill into new range of neighboring cells according to current data)
     * Other formulas in the workbook will not be calculated recursively even if they were used by dynamic array formulas.
     * @param calculate - Whether calculates and updates cell values for those dynamic array formulas
     */
    refreshDynamicArrayFormulas(calculate: boolean) : void;
    /**
     * Refreshes dynamic array formulas(spill into new range of neighboring cells according to current data)
     * @param calculate - Whether calculates and updates cell values for those dynamic array formulas
     * @param copts - The options for calculating formulas
     * 
     * @remarks
     * For performance consideration, we do not refresh all dynamic array formulas automatically
     * when the formula itself or the data it references to changed.
     * So user need to call this method manually after those operations which may influence dynamic array formulas,
     * such as importing/setting cell values, inserting/deleting rows/columns/ranges, ...etc.<br></br>
     * For most formulas with functions, calculating the spill range also needs to calculating the formula,
     * so in general true value for "calculate" flag is preferred.
     * If the formula is simple, such as a range reference or array(for example "=C1:E5", "={1,2;3,4}", ...),
     * simple function on a range or array(for example "=ABS(C1:E5)", "=1+{1,2;3,4}", ...),
     * and all formulas will be calculated later(such as by <see cref="Workbook.CalculateFormula(CalculationOptions)"/>),
     * then using false vlaue for "calculate" flag may avoid the duplicated calculation for the benefit of performance.
     */
    refreshDynamicArrayFormulas(calculate: boolean, copts: CalculationOptions) : void;
    /**
     * Find best matching Color in current palette.
     * @param rawColor - Raw color.
     * @returns
     * Best matching color.
     */
    getMatchingColor(rawColor: Color) : Color;
    /**
     * Set Encryption Options.
     * @param encryptionType - The encryption type.
     * @param keyLength - The key length.
     */
    setEncryptionOptions(encryptionType: EncryptionType, keyLength: number) : void;
    /**
     * Protects a workbook.
     * @param protectionType - Protection type.
     * @param password - Password to protect the workbook.
     */
    protect(protectionType: ProtectionType, password: string) : void;
    /**
     * Protects a shared workbook.
     * @param password - Password to protect the workbook.
     */
    protectSharedWorkbook(password: string) : void;
    /**
     * Unprotects a workbook.
     * @param password - Password to unprotect the workbook.
     */
    unprotect(password: string) : void;
    /**
     * Unprotects a shared workbook.
     * @param password - Password to unprotect the workbook.
     */
    unprotectSharedWorkbook(password: string) : void;
    /**
     * Removes VBA/macro from this spreadsheet.
     */
    removeMacro() : void;
    /**
     * Removes digital signature from this spreadsheet.
     */
    removeDigitalSignature() : void;
    /**
     * Accepts all tracked changes in the workbook.
     */
    acceptAllRevisions() : void;
    /**
     * Gets theme color.
     * @param type - The theme color type.
     * @returns
     * The theme color.
     */
    getThemeColor(type: ThemeColorType) : Color;
    /**
     * Sets the theme color
     * @param type - The theme color type.
     * @param color - the theme color
     */
    setThemeColor(type: ThemeColorType, color: Color) : void;
    /**
     * Customs the theme.
     * @param themeName - The theme name
     * @param colors - The theme colors
     * 
     * @remarks
     * The length of colors should be 12.
     * <list type="table">
     * <listheader>
     * <description>Array index</description>
     * <description>Theme type</description>
     * </listheader>
     * <item>
     * <description>0</description>
     * <description>Backgournd1</description>
     * </item>
     * <item>
     * <description>1</description>
     * <description>Text1</description>
     * </item>
     * <item>
     * <description>2</description>
     * <description>Backgournd2</description>
     * </item>
     * <item>
     * <description>3</description>
     * <description>Text2</description>
     * </item>
     * <item>
     * <description>4</description>
     * <description>Accent1</description>
     * </item>
     * <item>
     * <description>5</description>
     * <description>Accent2</description>
     * </item>
     * <item>
     * <description>6</description>
     * <description>Accent3</description>
     * </item>
     * <item>
     * <description>7</description>
     * <description>Accent4</description>
     * </item>
     * <item>
     * <description>8</description>
     * <description>Accent5</description>
     * </item>
     * <item>
     * <description>9</description>
     * <description>Accent6</description>
     * </item>
     * <item>
     * <description>10</description>
     * <description>Hyperlink</description>
     * </item>
     * <item>
     * <description>11</description>
     * <description>Followed Hyperlink</description>
     * </item>
     * </list>
     */
    customTheme(themeName: string, colors: Color[]) : void;
    /**
     * Copies the theme from another workbook.
     * @param source - Source workbook.
     */
    copyTheme(source: Workbook) : void;
    /**
     * Updates definition of custom functions.
     * @param definition - Special definition of custom functions for user's special requirement.
     * 
     * @remarks
     * This method can be used for some special scenarios. For example, if user needs some parameters
     * of some custom functions be calculated in array mode, then user may provide their own definition with implemented
     * <see cref="CustomFunctionDefinition.GetArrayModeParameters(string)"/> for those functions.
     * After the data of formulas being updated, those specified parameters will be calculated in array mode automatically
     * when calculating corresponding custom functions.
     */
    updateCustomFunctionDefinition(definition: CustomFunctionDefinition) : void;
    /**
     * If this workbook contains external links to other data source,
     * Aspose.Cells will attempt to retrieve the latest data from give sources.
     * @param externalWorkbooks - Workbooks that will be used to update data of external links referenced by this workbook.         /// The match of those workbooks with external links is determined by <see cref="Workbook.FileName"/>         /// and <see cref="ExternalLink.DataSource"/>. So please make sure <see cref="Workbook.FileName"/> has         /// been specified with the proper value for every workbook so they can be linked to corresponding external link.
     * 
     * @remarks
     * If corresponding external link cannot be found for one workbook, then this workbook will be ignored.
     * So when you set a formula later with one new external link which you intend to make the ignored workbook
     * be linked to it, the link cannot be performed until you call this this method again with those workbooks.
     */
    updateLinkedDataSource(externalWorkbooks: Workbook[]) : void;
    /**
     * Sets the interrupt monitor.
     * @param interruptMonitor - An InterruptMonitor object.
     */
    setInterruptMonitor(interruptMonitor: InterruptMonitor) : void;
    /**
     * Imports/Updates an XML data file into the workbook.
     * @param url - the url/path of the xml file.
     * @param sheetName - the destination sheet name.
     * @param row - the destination row
     * @param col - the destination column
     */
    importXml(url: string, sheetName: string, row: number, col: number) : void;
    /**
     * Imports/Updates an XML data file into the workbook.
     * @param stream - the xml file stream.
     * @param sheetName - the destination sheet name.
     * @param row - the destination row.
     * @param col - the destination column.
     */
    importXml(stream: Uint8Array, sheetName: string, row: number, col: number) : void;
    /**
     * Export XML data linked by the specified XML map.
     * @param mapName - name of the XML map that need to be exported
     * @param path - the export path
     */
    exportXml(mapName: string, path: string) : void;
    /**
     * Export XML data.
     * @param mapName - name of the XML map that need to be exported
     * @returns
     * The result stream.
     */
    exportXml(mapName: string) : Uint8Array;
    /**
     * Sets digital signature to an spreadsheet file (Excel2007 and later).
     * @param digitalSignatureCollection - 
     * 
     * @remarks
     * Only support adding Xmldsig Digital Signature
     */
    setDigitalSignature(digitalSignatureCollection: DigitalSignatureCollection) : void;
    /**
     * Adds digital signature to an OOXML spreadsheet file (Excel2007 and later).
     * @param digitalSignatureCollection - 
     * 
     * @remarks
     * Only support adding Xmldsig Digital Signature to an OOXML spreadsheet file
     */
    addDigitalSignature(digitalSignatureCollection: DigitalSignatureCollection) : void;
    /**
     * Gets digital signature from file.
     */
    getDigitalSignature() : DigitalSignatureCollection;
    /**
     * Removes personal information.
     */
    removePersonalInformation() : void;
    /**
     * Performs application-defined tasks associated with freeing, releasing, or
     * resetting unmanaged resources.
     */
    dispose() : void;
}

/**
 * Represents all settings of the workbook.
 */
export class WorkbookSettings {
    /**
     * Gets and sets the author of the file.
     * 
     * @remarks
     * It''s not set, check  <see cref="BuiltInDocumentPropertyCollection.Author"/> first, then check the user of Environment.
     */
    getAuthor() : string;
    /**
     * Gets and sets the author of the file.
     * @param value - The value to set.
     * 
     * @remarks
     * It''s not set, check  <see cref="BuiltInDocumentPropertyCollection.Author"/> first, then check the user of Environment.
     */
    setAuthor(value: string) : void;
    /**
     * Indicates whether checking custom number format when setting Style.Custom.
     */
    getCheckCustomNumberFormat() : boolean;
    /**
     * Indicates whether checking custom number format when setting Style.Custom.
     * @param value - The value to set.
     */
    setCheckCustomNumberFormat(value: boolean) : void;
    /**
     * Enable macros;
     * 
     * @remarks
     * Now it only works when copying a worksheet to other worksheet in a workbook.
     */
    getEnableMacros() : boolean;
    /**
     * Enable macros;
     * @param value - The value to set.
     * 
     * @remarks
     * Now it only works when copying a worksheet to other worksheet in a workbook.
     */
    setEnableMacros(value: boolean) : void;
    /**
     * Gets or sets a value which represents if the workbook uses the 1904 date system.
     */
    getDate1904() : boolean;
    /**
     * Gets or sets a value which represents if the workbook uses the 1904 date system.
     * @param value - The value to set.
     */
    setDate1904(value: boolean) : void;
    /**
     * Gets the protection type of the workbook.
     */
    getProtectionType() : ProtectionType;
    /**
     * Indicates whether and how to show objects in the workbook.
     */
    getDisplayDrawingObjects() : DisplayDrawingObjects;
    /**
     * Indicates whether and how to show objects in the workbook.
     * @param value - The value to set.
     */
    setDisplayDrawingObjects(value: DisplayDrawingObjects) : void;
    /**
     * Width of worksheet tab bar (in 1/1000 of window width).
     */
    getSheetTabBarWidth() : number;
    /**
     * Width of worksheet tab bar (in 1/1000 of window width).
     * @param value - The value to set.
     */
    setSheetTabBarWidth(value: number) : void;
    /**
     * Get or sets a value whether the Workbook tabs are displayed.
     * 
     * @remarks
     * The default value is true.
     */
    getShowTabs() : boolean;
    /**
     * Get or sets a value whether the Workbook tabs are displayed.
     * @param value - The value to set.
     * 
     * @remarks
     * The default value is true.
     */
    setShowTabs(value: boolean) : void;
    /**
     * Gets or sets the first visible worksheet tab.
     */
    getFirstVisibleTab() : number;
    /**
     * Gets or sets the first visible worksheet tab.
     * @param value - The value to set.
     */
    setFirstVisibleTab(value: number) : void;
    /**
     * Gets or sets a value indicating whether the generated spreadsheet will contain a horizontal scroll bar.
     * 
     * @remarks
     * The default value is true.
     */
    isHScrollBarVisible() : boolean;
    /**
     * Gets or sets a value indicating whether the generated spreadsheet will contain a horizontal scroll bar.
     * @param value - The value to set.
     * 
     * @remarks
     * The default value is true.
     */
    setIsHScrollBarVisible(value: boolean) : void;
    /**
     * Gets or sets a value indicating whether the generated spreadsheet will contain a vertical scroll bar.
     * 
     * @remarks
     * The default value is true.
     */
    isVScrollBarVisible() : boolean;
    /**
     * Gets or sets a value indicating whether the generated spreadsheet will contain a vertical scroll bar.
     * @param value - The value to set.
     * 
     * @remarks
     * The default value is true.
     */
    setIsVScrollBarVisible(value: boolean) : void;
    /**
     * Gets or sets a value that indicates whether the Workbook is shared.
     * 
     * @remarks
     * The default value is false.
     */
    getShared() : boolean;
    /**
     * Gets or sets a value that indicates whether the Workbook is shared.
     * @param value - The value to set.
     * 
     * @remarks
     * The default value is false.
     */
    setShared(value: boolean) : void;
    /**
     * Gets or sets the user interface language of the Workbook version based on CountryCode that has saved the file.
     */
    getLanguageCode() : CountryCode;
    /**
     * Gets or sets the user interface language of the Workbook version based on CountryCode that has saved the file.
     * @param value - The value to set.
     */
    setLanguageCode(value: CountryCode) : void;
    /**
     * Gets or sets the regional settings for workbook.
     * 
     * @remarks
     * 1. Regional settings used by Aspose.Cells component for a workbook loaded from template file:
     * i). For an XLS file, there are fields defined for regional settings and MS Excel does save regional settings data into the file when saving the XLS file.
     * So, we use the saved region in the template file for the workbook.
     * If you do not want to use the region saved in the XLS file, please reset it to the expected one (such as, CountryCode.Default) after loading the template file.
     * And, we save the user specified value (by this method) into the file too when saving an XLS file.
     * ii). For other file formats, such as, XLSX, XLSB...etc., there is no field defined for regional settings in the file format specification.
     * So, we use the regional settings of application's environment for the workbook.
     * And, the user specified value (by this method) cannot be kept for the generated files with those file formats.
     * 2. For the view effect in MS Excel:
     * The applied regional settings here can take effect only at runtime with Aspose.Cells component and not when viewing the generated file with MS Excel.
     * Even for the generated XLS file in which the specified regional settings data has been saved, when viewing/editing it with MS Excel,
     * the used region to perform formatting by MS Excel is always the default regional settings of the environment where MS Excel is running,
     * not the one saved in the file. It is MS Excel's behavior and cannot be changed by code.
     */
    getRegion() : CountryCode;
    /**
     * Gets or sets the regional settings for workbook.
     * @param value - The value to set.
     * 
     * @remarks
     * 1. Regional settings used by Aspose.Cells component for a workbook loaded from template file:
     * i). For an XLS file, there are fields defined for regional settings and MS Excel does save regional settings data into the file when saving the XLS file.
     * So, we use the saved region in the template file for the workbook.
     * If you do not want to use the region saved in the XLS file, please reset it to the expected one (such as, CountryCode.Default) after loading the template file.
     * And, we save the user specified value (by this method) into the file too when saving an XLS file.
     * ii). For other file formats, such as, XLSX, XLSB...etc., there is no field defined for regional settings in the file format specification.
     * So, we use the regional settings of application's environment for the workbook.
     * And, the user specified value (by this method) cannot be kept for the generated files with those file formats.
     * 2. For the view effect in MS Excel:
     * The applied regional settings here can take effect only at runtime with Aspose.Cells component and not when viewing the generated file with MS Excel.
     * Even for the generated XLS file in which the specified regional settings data has been saved, when viewing/editing it with MS Excel,
     * the used region to perform formatting by MS Excel is always the default regional settings of the environment where MS Excel is running,
     * not the one saved in the file. It is MS Excel's behavior and cannot be changed by code.
     */
    setRegion(value: CountryCode) : void;
    /**
     * Gets and sets the globalization settings.
     */
    getGlobalizationSettings() : GlobalizationSettings;
    /**
     * Gets and sets the globalization settings.
     * @param value - The value to set.
     */
    setGlobalizationSettings(value: GlobalizationSettings) : void;
    /**
     * Gets or sets the decimal separator for formatting/parsing numeric values. Default is the decimal separator of current Region.
     */
    getNumberDecimalSeparator() : string;
    /**
     * Gets or sets the decimal separator for formatting/parsing numeric values. Default is the decimal separator of current Region.
     * @param value - The value to set.
     */
    setNumberDecimalSeparator(value: string) : void;
    /**
     * Gets or sets the character that separates groups of digits to the left of the decimal in numeric values. Default is the group separator of current Region.
     */
    getNumberGroupSeparator() : string;
    /**
     * Gets or sets the character that separates groups of digits to the left of the decimal in numeric values. Default is the group separator of current Region.
     * @param value - The value to set.
     */
    setNumberGroupSeparator(value: string) : void;
    /**
     * Represents Workbook file encryption password.
     */
    getPassword() : string;
    /**
     * Represents Workbook file encryption password.
     * @param value - The value to set.
     */
    setPassword(value: string) : void;
    /**
     * Provides access to the workbook write protection options.
     */
    getWriteProtection() : WriteProtection;
    /**
     * Gets a value that indicates whether a password is required to open this workbook.
     */
    isEncrypted() : boolean;
    /**
     * Gets a value that indicates whether the structure or window of the Workbook is protected.
     */
    isProtected() : boolean;
    /**
     * Indicates whether encrypting the workbook with default password if Structure and Windows of the workbook are locked.
     * 
     * @remarks
     * The default value is false now. It's same as MS Excel 2013.
     */
    isDefaultEncrypted() : boolean;
    /**
     * Indicates whether encrypting the workbook with default password if Structure and Windows of the workbook are locked.
     * @param value - The value to set.
     * 
     * @remarks
     * The default value is false now. It's same as MS Excel 2013.
     */
    setIsDefaultEncrypted(value: boolean) : void;
    /**
     * Represents whether the generated spreadsheet will be opened Minimized.
     */
    isMinimized() : boolean;
    /**
     * Represents whether the generated spreadsheet will be opened Minimized.
     * @param value - The value to set.
     */
    setIsMinimized(value: boolean) : void;
    /**
     * Indicates whether this workbook is hidden.
     */
    isHidden() : boolean;
    /**
     * Indicates whether this workbook is hidden.
     * @param value - The value to set.
     */
    setIsHidden(value: boolean) : void;
    /**
     * Specifies a boolean value that indicates the application automatically compressed pictures in the workbook.
     */
    getAutoCompressPictures() : boolean;
    /**
     * Specifies a boolean value that indicates the application automatically compressed pictures in the workbook.
     * @param value - The value to set.
     */
    setAutoCompressPictures(value: boolean) : void;
    /**
     * True if personal information can be removed from the specified workbook.
     * 
     * @remarks
     */
    getRemovePersonalInformation() : boolean;
    /**
     * True if personal information can be removed from the specified workbook.
     * @param value - The value to set.
     * 
     * @remarks
     */
    setRemovePersonalInformation(value: boolean) : void;
    /**
     * Gets and sets whether hide the field list for the PivotTable.
     */
    getHidePivotFieldList() : boolean;
    /**
     * Gets and sets whether hide the field list for the PivotTable.
     * @param value - The value to set.
     */
    setHidePivotFieldList(value: boolean) : void;
    /**
     * Gets and sets how updates external links when the workbook is opened.
     */
    getUpdateLinksType() : UpdateLinksType;
    /**
     * Gets and sets how updates external links when the workbook is opened.
     * @param value - The value to set.
     */
    setUpdateLinksType(value: UpdateLinksType) : void;
    /**
     * Gets the max row index, zero-based.
     * 
     * @remarks
     * Returns 65535 if the file format is Excel97-2003;
     */
    getMaxRow() : number;
    /**
     * Gets the max column index, zero-based.
     * 
     * @remarks
     * Returns 255 if the file format is Excel97-2003;
     */
    getMaxColumn() : number;
    /**
     * Gets the settings for default values of style-related properties for this workbook.
     */
    getDefaultStyleSettings() : DefaultStyleSettings;
    /**
     * The distance from the left edge of the client area to the left edge of the window, in unit of point.
     */
    getWindowLeft() : number;
    /**
     * The distance from the left edge of the client area to the left edge of the window, in unit of point.
     * @param value - The value to set.
     */
    setWindowLeft(value: number) : void;
    /**
     * The distance from the left edge of the client area to the left edge of the window.
     * In unit of inch.
     */
    getWindowLeftInch() : number;
    /**
     * The distance from the left edge of the client area to the left edge of the window.
     * In unit of inch.
     * @param value - The value to set.
     */
    setWindowLeftInch(value: number) : void;
    /**
     * The distance from the left edge of the client area to the left edge of the window.
     * In unit of centimeter.
     */
    getWindowLeftCM() : number;
    /**
     * The distance from the left edge of the client area to the left edge of the window.
     * In unit of centimeter.
     * @param value - The value to set.
     */
    setWindowLeftCM(value: number) : void;
    /**
     * The distance from the top edge of the client area to the top edge of the window, in unit of point.
     */
    getWindowTop() : number;
    /**
     * The distance from the top edge of the client area to the top edge of the window, in unit of point.
     * @param value - The value to set.
     */
    setWindowTop(value: number) : void;
    /**
     * The distance from the top edge of the client area to the top edge of the window, in unit of inch.
     */
    getWindowTopInch() : number;
    /**
     * The distance from the top edge of the client area to the top edge of the window, in unit of inch.
     * @param value - The value to set.
     */
    setWindowTopInch(value: number) : void;
    /**
     * The distance from the top edge of the client area to the top edge of the window, in unit of centimeter.
     */
    getWindowTopCM() : number;
    /**
     * The distance from the top edge of the client area to the top edge of the window, in unit of centimeter.
     * @param value - The value to set.
     */
    setWindowTopCM(value: number) : void;
    /**
     * The width of the window, in unit of point.
     */
    getWindowWidth() : number;
    /**
     * The width of the window, in unit of point.
     * @param value - The value to set.
     */
    setWindowWidth(value: number) : void;
    /**
     * The width of the window, in unit of inch.
     */
    getWindowWidthInch() : number;
    /**
     * The width of the window, in unit of inch.
     * @param value - The value to set.
     */
    setWindowWidthInch(value: number) : void;
    /**
     * The width of the window, in unit of centimeter.
     */
    getWindowWidthCM() : number;
    /**
     * The width of the window, in unit of centimeter.
     * @param value - The value to set.
     */
    setWindowWidthCM(value: number) : void;
    /**
     * The height of the window, in unit of point.
     */
    getWindowHeight() : number;
    /**
     * The height of the window, in unit of point.
     * @param value - The value to set.
     */
    setWindowHeight(value: number) : void;
    /**
     * The height of the window, in unit of inch.
     */
    getWindowHeightInch() : number;
    /**
     * The height of the window, in unit of inch.
     * @param value - The value to set.
     */
    setWindowHeightInch(value: number) : void;
    /**
     * The height of the window, in unit of centimeter.
     */
    getWindowHeightCM() : number;
    /**
     * The height of the window, in unit of centimeter.
     * @param value - The value to set.
     */
    setWindowHeightCM(value: number) : void;
    /**
     * Indicates whether update adjacent cells' border.
     * 
     * @remarks
     * The default value is false.
     * For example: the bottom border of the cell A1 is update,
     * the top border of the cell A2 should be changed too.
     */
    getUpdateAdjacentCellsBorder() : boolean;
    /**
     * Indicates whether update adjacent cells' border.
     * @param value - The value to set.
     * 
     * @remarks
     * The default value is false.
     * For example: the bottom border of the cell A1 is update,
     * the top border of the cell A2 should be changed too.
     */
    setUpdateAdjacentCellsBorder(value: boolean) : void;
    /**
     * Gets and sets the number of significant digits.
     * The default value is <see cref="CellsHelper.SignificantDigits"/>.
     * 
     * @remarks
     * Only could be 15 or 17 now.
     */
    getSignificantDigits() : number;
    /**
     * Gets and sets the number of significant digits.
     * The default value is <see cref="CellsHelper.SignificantDigits"/>.
     * @param value - The value to set.
     * 
     * @remarks
     * Only could be 15 or 17 now.
     */
    setSignificantDigits(value: number) : void;
    /**
     * Indicates whether check compatibility with earlier versions when saving workbook.
     * 
     * @remarks
     * The default value is true.
     * Only for Excel97-2003 xls or xlt files.
     */
    getCheckCompatibility() : boolean;
    /**
     * Indicates whether check compatibility with earlier versions when saving workbook.
     * @param value - The value to set.
     * 
     * @remarks
     * The default value is true.
     * Only for Excel97-2003 xls or xlt files.
     */
    setCheckCompatibility(value: boolean) : void;
    /**
     * Whether check restriction of excel file when user modify cells related objects.
     * For example, excel does not allow inputting string value longer than 32K.
     * When you input a value longer than 32K such as by Cell.PutValue(string), if this property is true, you will get an Exception.
     * If this property is false, we will accept your input string value as the cell's value so that later
     * you can output the complete string value for other file formats such as CSV.
     * However, if you have set such kind of value that is invalid for excel file format,
     * you should not save the workbook as excel file format later. Otherwise there may be unexpected error for the generated excel file.
     */
    getCheckExcelRestriction() : boolean;
    /**
     * Whether check restriction of excel file when user modify cells related objects.
     * For example, excel does not allow inputting string value longer than 32K.
     * When you input a value longer than 32K such as by Cell.PutValue(string), if this property is true, you will get an Exception.
     * If this property is false, we will accept your input string value as the cell's value so that later
     * you can output the complete string value for other file formats such as CSV.
     * However, if you have set such kind of value that is invalid for excel file format,
     * you should not save the workbook as excel file format later. Otherwise there may be unexpected error for the generated excel file.
     * @param value - The value to set.
     */
    setCheckExcelRestriction(value: boolean) : void;
    /**
     * Indicates whether the file is marked for auto-recovery.
     */
    getAutoRecover() : boolean;
    /**
     * Indicates whether the file is marked for auto-recovery.
     * @param value - The value to set.
     */
    setAutoRecover(value: boolean) : void;
    /**
     * indicates whether the application last saved the workbook file after a crash.
     */
    getCrashSave() : boolean;
    /**
     * indicates whether the application last saved the workbook file after a crash.
     * @param value - The value to set.
     */
    setCrashSave(value: boolean) : void;
    /**
     * indicates whether the application last opened the workbook for data recovery.
     */
    getDataExtractLoad() : boolean;
    /**
     * indicates whether the application last opened the workbook for data recovery.
     * @param value - The value to set.
     */
    setDataExtractLoad(value: boolean) : void;
    /**
     * Indicates whether the application last opened the workbook in safe or repair mode.
     */
    getRepairLoad() : boolean;
    /**
     * Indicates whether the application last opened the workbook in safe or repair mode.
     * @param value - The value to set.
     */
    setRepairLoad(value: boolean) : void;
    /**
     * Specifies the incremental public release of the application.
     */
    getBuildVersion() : string;
    /**
     * Specifies the incremental public release of the application.
     * @param value - The value to set.
     */
    setBuildVersion(value: string) : void;
    /**
     * Gets or sets the memory usage options. The new option will be taken as the default option for newly created worksheets but does not take effect for existing worksheets.
     */
    getMemorySetting() : MemorySetting;
    /**
     * Gets or sets the memory usage options. The new option will be taken as the default option for newly created worksheets but does not take effect for existing worksheets.
     * @param value - The value to set.
     */
    setMemorySetting(value: MemorySetting) : void;
    /**
     * Gets and sets the default print paper size.
     * 
     * @remarks
     * If there is no setting about paper size,MS Excel will use default printer's setting.
     */
    getPaperSize() : PaperSizeType;
    /**
     * Gets and sets the default print paper size.
     * @param value - The value to set.
     * 
     * @remarks
     * If there is no setting about paper size,MS Excel will use default printer's setting.
     */
    setPaperSize(value: PaperSizeType) : void;
    /**
     * Gets or sets warning callback.
     * @param value - The value to set.
     */
    setWarningCallback(value: IWarningCallback) : void;
    /**
     * Gets or sets warning callback.
     */
    getWarningCallback() : IWarningCallback;
    /**
     * Gets and sets the max row number of shared formula.
     * 
     * @remarks
     * If the number is too large, the autofilter works very slow in MS Excel 2013.
     */
    getMaxRowsOfSharedFormula() : number;
    /**
     * Gets and sets the max row number of shared formula.
     * @param value - The value to set.
     * 
     * @remarks
     * If the number is too large, the autofilter works very slow in MS Excel 2013.
     */
    setMaxRowsOfSharedFormula(value: number) : void;
    /**
     * Specifies the OOXML version for the output document. The default value is Ecma376_2006.
     * 
     * @remarks
     * Only for .xlsx files.
     */
    getCompliance() : OoxmlCompliance;
    /**
     * Specifies the OOXML version for the output document. The default value is Ecma376_2006.
     * @param value - The value to set.
     * 
     * @remarks
     * Only for .xlsx files.
     */
    setCompliance(value: OoxmlCompliance) : void;
    /**
     * Indicates whether setting <see cref="Style.QuotePrefix"/> property when entering the string value(which starts  with single quote mark ) to the cell
     */
    getQuotePrefixToStyle() : boolean;
    /**
     * Indicates whether setting <see cref="Style.QuotePrefix"/> property when entering the string value(which starts  with single quote mark ) to the cell
     * @param value - The value to set.
     */
    setQuotePrefixToStyle(value: boolean) : void;
    /**
     * Gets the settings for formula-related features.
     */
    getFormulaSettings() : FormulaSettings;
    /**
     * Releases resources.
     */
    dispose() : void;
    /**
     * Gets the default theme font name.
     * @param type - The scheme type of the font.
     */
    getThemeFont(type: FontSchemeType) : string;
    /**
     * Set the type of  print orientation for the whole workbook.
     * @param pageOrientationType - The page orientation type
     */
    setPageOrientationType(pageOrientationType: PageOrientationType) : void;
}

/**
 * Encapsulates a collection of <see cref="Worksheet"/> objects.
 */
export class WorksheetCollection {
    /**
     * Gets the <see cref="Worksheet"/> element at the specified index.
     * @param index - The zero based index of the element.
     * @returns
     * The element at the specified index.
     */
    get(index: number) : Worksheet;
    /**
     * Gets the <see cref="Worksheet"/> element with the specified name.
     * @param sheetName - Worksheet name
     * @returns
     * The element with the specified name.
     */
    get(sheetName: string) : Worksheet;
    /**
     * Gets the list of task panes.
     */
    getWebExtensionTaskPanes() : WebExtensionTaskPaneCollection;
    /**
     * Gets the list of task panes.
     */
    getWebExtensions() : WebExtensionCollection;
    /**
     * Gets the list of threaded comment authors.
     */
    getThreadedCommentAuthors() : ThreadedCommentAuthorCollection;
    /**
     * Indicates whether refresh all connections on opening file in MS Excel.
     */
    isRefreshAllConnections() : boolean;
    /**
     * Indicates whether refresh all connections on opening file in MS Excel.
     * @param value - The value to set.
     */
    setIsRefreshAllConnections(value: boolean) : void;
    /**
     * Gets the collection of all the Name objects in the spreadsheet.
     */
    getNames() : NameCollection;
    /**
     * Represents the name of active worksheet when the spreadsheet is opened.
     */
    getActiveSheetName() : string;
    /**
     * Represents the name of active worksheet when the spreadsheet is opened.
     * @param value - The value to set.
     */
    setActiveSheetName(value: string) : void;
    /**
     * Represents the index of active worksheet when the spreadsheet is opened.
     * 
     * @remarks
     * Sheet index is zero based.
     */
    getActiveSheetIndex() : number;
    /**
     * Represents the index of active worksheet when the spreadsheet is opened.
     * @param value - The value to set.
     * 
     * @remarks
     * Sheet index is zero based.
     */
    setActiveSheetIndex(value: number) : void;
    /**
     * Gets the master differential formatting records.
     */
    getDxfs() : DxfCollection;
    /**
     * Gets and sets the XML maps in the workbook.
     */
    getXmlMaps() : XmlMapCollection;
    /**
     * Gets and sets the XML maps in the workbook.
     * @param value - The value to set.
     */
    setXmlMaps(value: XmlMapCollection) : void;
    /**
     * Returns a <see cref="DocumentProperty"/> collection that represents all the built-in document properties of the spreadsheet.
     * 
     * @remarks
     * A new property cannot be added to built-in document properties list. You can only get a built-in property and change its value.
     * The following is the built-in properties name list:
     * <p>Title</p>
     * <p>Subject</p>
     * <p>Author</p>
     * <p>Keywords</p>
     * <p>Comments</p>
     * <p>Template</p>
     * <p>Last Author</p>
     * <p>Revision Number</p>
     * <p>Application Name</p>
     * <p>Last Print Date</p>
     * <p>Creation Date</p>
     * <p>Last Save Time</p>
     * <p>Total Editing Time</p>
     * <p>Number of Pages</p>
     * <p>Number of Words</p>
     * <p>Number of Characters</p>
     * <p>Security</p>
     * <p>Category</p>
     * <p>Format</p>
     * <p>Manager</p>
     * <p>Company</p>
     * <p>Number of Bytes</p>
     * <p>Number of Lines</p>
     * <p>Number of Paragraphs</p>
     * <p>Number of Slides</p>
     * <p>Number of Notes</p>
     * <p>Number of Hidden Slides</p>
     * <p>Number of Multimedia Clips</p>
     */
    getBuiltInDocumentProperties() : BuiltInDocumentPropertyCollection;
    /**
     * Returns a <see cref="DocumentProperty"/> collection that represents all the custom document properties of the spreadsheet.
     */
    getCustomDocumentProperties() : CustomDocumentPropertyCollection;
    /**
     * Represents external links in a workbook.
     */
    getExternalLinks() : ExternalLinkCollection;
    /**
     * Gets <see cref="TableStyles"/> object.
     */
    getTableStyles() : TableStyleCollection;
    /**
     * Represents revision logs.
     */
    getRevisionLogs() : RevisionLogCollection;
    /**
     * Creates a <see cref="Range"/> object from an address of the range.
     * @param address - The address of the range.
     * @param sheetIndex - The sheet index.
     * @returns
     * A <see cref="Range"/> object
     */
    createRange(address: string, sheetIndex: number) : Range;
    /**
     * Creates a <see cref="Range"/> object from an address of the range.
     * @param address - The address of the range.
     * @param sheetIndex - The sheet index.
     * @returns
     * A <see cref="Range"/> object
     */
    createUnionRange(address: string, sheetIndex: number) : UnionRange;
    /**
     * Gets the worksheet by the code name.
     * @param codeName - Worksheet code name.
     * @returns
     * The element with the specified code name.
     */
    getSheetByCodeName(codeName: string) : Worksheet;
    /**
     * Sorts the defined names.
     * 
     * @remarks
     * If you create a large amount of named ranges in the Excel file,
     * please call this method after all named ranges are created and before saving
     */
    sortNames() : void;
    /**
     * Insert a worksheet.
     * @param index - The sheet index
     * @param sheetType - The sheet type.
     * @returns
     * Returns an inserted worksheet.
     */
    insert(index: number, sheetType: SheetType) : Worksheet;
    /**
     * Insert a worksheet.
     * @param index - The sheet index
     * @param sheetType - The sheet type.
     * @param sheetName - The sheet name.
     * @returns
     * Returns an inserted worksheet.
     */
    insert(index: number, sheetType: SheetType, sheetName: string) : Worksheet;
    /**
     * Adds a worksheet to the collection.
     * @param type - Worksheet type.
     * @returns
     * <see cref="Worksheet"/> object index.
     */
    add(type: SheetType) : number;
    /**
     * Adds a worksheet to the collection.
     * @returns
     * <see cref="Worksheet"/> object index.
     */
    add() : number;
    /**
     * Adds a worksheet to the collection.
     * @param sheetName - Worksheet name
     * @returns
     * <see cref="Worksheet"/> object.
     */
    add(sheetName: string) : Worksheet;
    /**
     * Swaps the two sheets.
     * @param sheetIndex1 - The first worksheet.
     * @param sheetIndex2 - The second worksheet.
     */
    swapSheet(sheetIndex1: number, sheetIndex2: number) : void;
    /**
     * Adds addin function into the workbook
     * @param addInFile - the file contains the addin functions
     * @param functionName - the addin function name
     * @param lib - whether the given addin file is in the directory or sub-directory of Workbook Add-In library.         /// This flag takes effect and makes difference when given addInFile is of relative path:         /// true denotes the path is relative to Add-In library and false denotes the path is relative to this Workbook.
     * @returns
     * ID of the data which contains given addin function
     */
    registerAddInFunction(addInFile: string, functionName: string, lib: boolean) : number;
    /**
     * Adds addin function into the workbook
     * @param id - ID of the data which contains addin functions,         /// can be got by the first call of <see cref="RegisterAddInFunction(string, string, bool)"/> for the same addin file.
     * @param functionName - the addin function name
     * @returns
     * URL of the addin file which contains addin functions
     */
    registerAddInFunction(id: number, functionName: string) : string;
    /**
     * Removes the element at a specified name.
     * @param name - The name of the element to remove.
     */
    removeAt(name: string) : void;
    /**
     * Removes the element at a specified index.
     * @param index - The index value of the element to remove.
     */
    removeAt(index: number) : void;
    /**
     * Clear all worksheets.
     * 
     * @remarks
     * A workbook must contains a worksheet.
     */
    clear() : void;
    /**
     * Adds a worksheet to the collection and copies data from an existed worksheet.
     * @param sheetName - Name of source worksheet.
     * @returns
     * <see cref="Worksheet"/> object index.
     */
    addCopy(sheetName: string) : number;
    /**
     * Adds a worksheet to the collection and copies data from an existed worksheet.
     * @param sheetIndex - Index of source worksheet.
     * @returns
     * <see cref="Worksheet"/> object index.
     */
    addCopy(sheetIndex: number) : number;
    /**
     * Copy a group of worksheets.
     * @param source - The source worksheets.
     * @param destSheetNames - The names of the copied sheets.
     */
    addCopy(source: Worksheet[], destSheetNames: string[]) : void;
    /**
     * Gets Range object by pre-defined name.
     * @param rangeName - Name of range.
     * @returns
     * Range object.<p></p>Returns null if the named range does not exist.
     */
    getRangeByName(rangeName: string) : Range;
    /**
     * Gets <see cref="Range"/> by pre-defined name or table's name
     * @param rangeName - Name of range or table's name.
     * @param currentSheetIndex - The sheet index. -1 represents global .
     * @param includeTable - Indicates whether checking all tables.
     */
    getRangeByName(rangeName: string, currentSheetIndex: number, includeTable: boolean) : Range;
    /**
     * Gets all pre-defined named ranges in the spreadsheet.
     * @returns
     * An array of Range objects.
     * If the defined Name's reference is external or has multiple ranges, no Range object will be returned for this Name.
     * <p></p>Returns null if the named range does not exist.
     */
    getNamedRanges() : Range[];
    /**
     * Gets all pre-defined named ranges in the spreadsheet.
     * @returns
     * An array of Range objects.<p></p>Returns null if the named range does not exist.
     */
    getNamedRangesAndTables() : Range[];
    /**
     * Sets displayed size when Workbook file is used as an Ole object.
     * @param startRow - Start row index.
     * @param endRow - End row index.
     * @param startColumn - Start column index.
     * @param endColumn - End column index.
     * 
     * @remarks
     * This method is generally used to adjust display size in ppt file or doc file.
     */
    setOleSize(startRow: number, endRow: number, startColumn: number, endColumn: number) : void;
    /**
     * Clears pivot tables from the spreadsheet.
     */
    clearPivottables() : void;
    /**
     * Refresh all pivot tables and charts with pivot source.
     */
    refreshAll() : void;
    /**
     * Refreshes all the PivotTables in the Excel file.
     */
    refreshPivotTables() : void;
    /**
     * Refreshes all the PivotTables in the Excel file.
     * @param option - The option for refreshing data source of the pivot tables.
     */
    refreshPivotTables(option: PivotTableRefreshOption) : void;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Encapsulates the object that represents a single worksheet.
 */
export class Worksheet {
    /**
     * Represents the various types of protection options available for a worksheet. Supports advanced protection options in ExcelXP and above version.
     * 
     * @remarks
     * This property can protect worksheet in all versions of Excel file and support advanced protection options in ExcelXP and above version.
     */
    getProtection() : Protection;
    /**
     * Gets and sets the unique id, it is same as {15DB5C3C-A5A1-48AF-8F25-3D86AC232D4F}.
     */
    getUniqueId() : string;
    /**
     * Gets and sets the unique id, it is same as {15DB5C3C-A5A1-48AF-8F25-3D86AC232D4F}.
     * @param value - The value to set.
     */
    setUniqueId(value: string) : void;
    /**
     * Gets the workbook object which contains this sheet.
     */
    getWorkbook() : Workbook;
    /**
     * Gets the <see cref="Cells"/> collection.
     */
    getCells() : Cells;
    /**
     * Gets <see cref="QueryTableCollection"/> in the worksheet.
     */
    getQueryTables() : QueryTableCollection;
    /**
     * Gets all pivot tables in this worksheet.
     */
    getPivotTables() : PivotTableCollection;
    /**
     * Represents worksheet type.
     */
    getType() : SheetType;
    /**
     * Represents worksheet type.
     * @param value - The value to set.
     */
    setType(value: SheetType) : void;
    /**
     * Gets or sets the name of the worksheet.
     * 
     * @remarks
     * The max length of sheet name is 31. And you cannot assign same name(case insensitive) to two worksheets.
     * For example, you cannot set "SheetName1" to the first worksheet and set "SHEETNAME1" to the second worksheet.
     */
    getName() : string;
    /**
     * Gets or sets the name of the worksheet.
     * @param value - The value to set.
     * 
     * @remarks
     * The max length of sheet name is 31. And you cannot assign same name(case insensitive) to two worksheets.
     * For example, you cannot set "SheetName1" to the first worksheet and set "SHEETNAME1" to the second worksheet.
     */
    setName(value: string) : void;
    /**
     * Indicates whether to show formulas or their results.
     */
    getShowFormulas() : boolean;
    /**
     * Indicates whether to show formulas or their results.
     * @param value - The value to set.
     */
    setShowFormulas(value: boolean) : void;
    /**
     * Gets or sets a value indicating whether the gridlines are visible.Default is true.
     */
    isGridlinesVisible() : boolean;
    /**
     * Gets or sets a value indicating whether the gridlines are visible.Default is true.
     * @param value - The value to set.
     */
    setIsGridlinesVisible(value: boolean) : void;
    /**
     * Gets or sets a value indicating whether the worksheet will display row and column headers.
     * Default is true.
     */
    isRowColumnHeadersVisible() : boolean;
    /**
     * Gets or sets a value indicating whether the worksheet will display row and column headers.
     * Default is true.
     * @param value - The value to set.
     */
    setIsRowColumnHeadersVisible(value: boolean) : void;
    /**
     * Indicates whether the pane has horizontal or vertical splits, and whether those splits are frozen.
     */
    getPaneState() : PaneStateType;
    /**
     * True if zero values are displayed.
     */
    getDisplayZeros() : boolean;
    /**
     * True if zero values are displayed.
     * @param value - The value to set.
     */
    setDisplayZeros(value: boolean) : void;
    /**
     * Indicates if the specified worksheet is displayed from right to left instead of from left to right.
     * Default is false.
     */
    getDisplayRightToLeft() : boolean;
    /**
     * Indicates if the specified worksheet is displayed from right to left instead of from left to right.
     * Default is false.
     * @param value - The value to set.
     */
    setDisplayRightToLeft(value: boolean) : void;
    /**
     * Indicates whether to show outline.
     */
    isOutlineShown() : boolean;
    /**
     * Indicates whether to show outline.
     * @param value - The value to set.
     */
    setIsOutlineShown(value: boolean) : void;
    /**
     * Indicates whether this worksheet is selected when the workbook is opened.
     */
    isSelected() : boolean;
    /**
     * Indicates whether this worksheet is selected when the workbook is opened.
     * @param value - The value to set.
     */
    setIsSelected(value: boolean) : void;
    /**
     * Gets all ListObjects in this worksheet.
     */
    getListObjects() : ListObjectCollection;
    /**
     * Specifies the internal identifier for the sheet.
     */
    getTabId() : number;
    /**
     * Specifies the internal identifier for the sheet.
     * @param value - The value to set.
     */
    setTabId(value: number) : void;
    /**
     * Gets the <see cref="HorizontalPageBreakCollection"/> collection.
     */
    getHorizontalPageBreaks() : HorizontalPageBreakCollection;
    /**
     * Gets the <see cref="VerticalPageBreakCollection"/> collection.
     */
    getVerticalPageBreaks() : VerticalPageBreakCollection;
    /**
     * Gets the <see cref="HyperlinkCollection"/> collection.
     */
    getHyperlinks() : HyperlinkCollection;
    /**
     * Represents the page setup description in this sheet.
     */
    getPageSetup() : PageSetup;
    /**
     * Represents auto filter for the specified worksheet.
     */
    getAutoFilter() : AutoFilter;
    /**
     * Indicates whether this worksheet has auto filter.
     */
    getHasAutofilter() : boolean;
    /**
     * Indicates whether the Transition Formula Evaluation (Lotus compatibility) option is enabled.
     */
    getTransitionEvaluation() : boolean;
    /**
     * Indicates whether the Transition Formula Evaluation (Lotus compatibility) option is enabled.
     * @param value - The value to set.
     */
    setTransitionEvaluation(value: boolean) : void;
    /**
     * Indicates whether the Transition Formula Entry (Lotus compatibility) option is enabled.
     */
    getTransitionEntry() : boolean;
    /**
     * Indicates whether the Transition Formula Entry (Lotus compatibility) option is enabled.
     * @param value - The value to set.
     */
    setTransitionEntry(value: boolean) : void;
    /**
     * Indicates the visible state for this sheet.
     */
    getVisibilityType() : VisibilityType;
    /**
     * Indicates the visible state for this sheet.
     * @param value - The value to set.
     */
    setVisibilityType(value: VisibilityType) : void;
    /**
     * Represents if the worksheet is visible.
     */
    isVisible() : boolean;
    /**
     * Represents if the worksheet is visible.
     * @param value - The value to set.
     */
    setIsVisible(value: boolean) : void;
    /**
     * Gets the sparkline groups in the worksheet.
     */
    getSparklineGroups() : SparklineGroupCollection;
    /**
     * Gets a <see cref="Chart"/> collection
     */
    getCharts() : ChartCollection;
    /**
     * Gets the <see cref="Comment"/> collection.
     */
    getComments() : CommentCollection;
    /**
     * Gets a <see cref="Picture"/> collection.
     */
    getPictures() : PictureCollection;
    /**
     * Gets a <see cref="TextBox"/> collection.
     */
    getTextBoxes() : TextBoxCollection;
    /**
     * Gets a <see cref="CheckBox"/> collection.
     */
    getCheckBoxes() : CheckBoxCollection;
    /**
     * Represents a collection of <see cref="OleObject"/> in a worksheet.
     */
    getOleObjects() : OleObjectCollection;
    /**
     * Returns all drawing shapes in this worksheet.
     */
    getShapes() : ShapeCollection;
    /**
     * Get the Slicer collection in the worksheet
     */
    getSlicers() : SlicerCollection;
    /**
     * Get the Timeline collection in the worksheet
     */
    getTimelines() : TimelineCollection;
    /**
     * Gets the index of sheet in the worksheet collection.
     */
    getIndex() : number;
    /**
     * Indicates if the worksheet is protected.
     */
    isProtected() : boolean;
    /**
     * Gets the data validation setting collection in the worksheet.
     */
    getValidations() : ValidationCollection;
    /**
     * Gets the allow edit range collection in the worksheet.
     */
    getAllowEditRanges() : ProtectedRangeCollection;
    /**
     * Gets error check setting applied on certain ranges.
     */
    getErrorCheckOptions() : ErrorCheckOptionCollection;
    /**
     * Gets the outline on this worksheet.
     */
    getOutline() : Outline;
    /**
     * Represents first visible row index.
     */
    getFirstVisibleRow() : number;
    /**
     * Represents first visible row index.
     * @param value - The value to set.
     */
    setFirstVisibleRow(value: number) : void;
    /**
     * Represents first visible column index.
     */
    getFirstVisibleColumn() : number;
    /**
     * Represents first visible column index.
     * @param value - The value to set.
     */
    setFirstVisibleColumn(value: number) : void;
    /**
     * Represents the scaling factor in percentage. It should be between 10 and 400.
     * 
     * @remarks
     * Please set the view type first.
     */
    getZoom() : number;
    /**
     * Represents the scaling factor in percentage. It should be between 10 and 400.
     * @param value - The value to set.
     * 
     * @remarks
     * Please set the view type first.
     */
    setZoom(value: number) : void;
    /**
     * Gets and sets the view type.
     */
    getViewType() : ViewType;
    /**
     * Gets and sets the view type.
     * @param value - The value to set.
     */
    setViewType(value: ViewType) : void;
    /**
     * Indicates whether the specified worksheet is shown in normal view or page break preview.
     */
    isPageBreakPreview() : boolean;
    /**
     * Indicates whether the specified worksheet is shown in normal view or page break preview.
     * @param value - The value to set.
     */
    setIsPageBreakPreview(value: boolean) : void;
    /**
     * Indicates whether the ruler is visible. This property is only applied for page break preview.
     */
    isRulerVisible() : boolean;
    /**
     * Indicates whether the ruler is visible. This property is only applied for page break preview.
     * @param value - The value to set.
     */
    setIsRulerVisible(value: boolean) : void;
    /**
     * Represents worksheet tab color.
     * 
     * @remarks
     * This feature is only supported in ExcelXP(Excel2002) and later versions.
     * If you save file as Excel97 or Excel2000 format, it will be omitted.
     */
    getTabColor() : Color;
    /**
     * Represents worksheet tab color.
     * @param value - The value to set.
     * 
     * @remarks
     * This feature is only supported in ExcelXP(Excel2002) and later versions.
     * If you save file as Excel97 or Excel2000 format, it will be omitted.
     */
    setTabColor(value: Color) : void;
    /**
     * Gets worksheet code name.
     */
    getCodeName() : string;
    /**
     * Gets worksheet code name.
     * @param value - The value to set.
     */
    setCodeName(value: string) : void;
    /**
     * Gets and sets worksheet background image.
     */
    getBackgroundImage() : number[];
    /**
     * Gets and sets worksheet background image.
     * @param value - The value to set.
     */
    setBackgroundImage(value: number[]) : void;
    /**
     * Gets the ConditionalFormattings in the worksheet.
     */
    getConditionalFormattings() : ConditionalFormattingCollection;
    /**
     * Gets or sets the active cell in the worksheet.
     */
    getActiveCell() : string;
    /**
     * Gets or sets the active cell in the worksheet.
     * @param value - The value to set.
     */
    setActiveCell(value: string) : void;
    /**
     * Gets an object representing
     * the identifier information associated with a worksheet.
     * 
     * @remarks
     * Worksheet.CustomProperties provide a preferred mechanism for storing arbitrary data.
     * It supports legacy third-party document components, as well as those situations that have a stringent need for binary parts.
     */
    getCustomProperties() : CustomPropertyCollection;
    /**
     * Gets all <see cref="SmartTagCollection"/> objects of the worksheet.
     */
    getSmartTagSetting() : SmartTagSetting;
    /**
     * Gets the collection of <see cref="Scenario"/>.
     */
    getScenarios() : ScenarioCollection;
    /**
     * Gets collection of cells on this worksheet being watched in the 'watch window'.
     */
    getCellWatches() : CellWatchCollection;
    /**
     * Performs application-defined tasks associated with freeing, releasing, or
     * resetting unmanaged resources.
     */
    dispose() : void;
    /**
     * Gets the window panes.
     * 
     * @remarks
     * If the window is not split or frozen.
     */
    getPanes() : PaneCollection;
    /**
     * Freezes panes at the specified cell in the worksheet.
     * @param row - Row index.
     * @param column - Column index.
     * @param freezedRows - Number of visible rows in top pane, no more than row index.
     * @param freezedColumns - Number of visible columns in left pane, no more than column index.
     * 
     * @remarks
     * <p>Row index and column index cannot all be zero. Number of rows and number of columns
     * also cannot all be zero.</p>
     * <p>The first two parameters specify the froze position and the last two parameters specify the area frozen on the left top pane.</p>
     */
    freezePanes(row: number, column: number, freezedRows: number, freezedColumns: number) : void;
    /**
     * Freezes panes at the specified cell in the worksheet.
     * @param cellName - Cell name.
     * @param freezedRows - Number of visible rows in top pane, no more than row index.
     * @param freezedColumns - Number of visible columns in left pane, no more than column index.
     * 
     * @remarks
     * Row index and column index cannot all be zero. Number of rows and number of columns
     * also cannot all be zero.
     */
    freezePanes(cellName: string, freezedRows: number, freezedColumns: number) : void;
    /**
     * Gets the freeze panes.
     * @param row - Row index.
     * @param column - Column index.
     * @param freezedRows - Number of visible rows in top pane, no more than row index.
     * @param freezedColumns - Number of visible columns in left pane, no more than column index.
     * @returns
     * Return whether the worksheet is frozen
     */
    getFreezedPanes(row: number, column: number, freezedRows: number, freezedColumns: number) : boolean;
    /**
     * Splits window.
     */
    split() : void;
    /**
     * Unfreezes panes in the worksheet.
     */
    unFreezePanes() : void;
    /**
     * Removes split window.
     */
    removeSplit() : void;
    /**
     * Adds page break.
     * @param cellName - 
     */
    addPageBreaks(cellName: string) : void;
    /**
     * Copies contents and formats from another worksheet.
     * @param sourceSheet - Source worksheet.
     */
    copy(sourceSheet: Worksheet) : void;
    /**
     * Copies contents and formats from another worksheet.
     * @param sourceSheet - Source worksheet.
     * @param copyOptions - 
     * 
     * @remarks
     * You can copy data from another worksheet in the same file or another file. However, this method does not support to copy drawing objects, such as comments, images and charts.
     */
    copy(sourceSheet: Worksheet, copyOptions: CopyOptions) : void;
    /**
     * Autofits the column width.
     * @param columnIndex - Column index.
     * @param firstRow - First row index.
     * @param lastRow - Last row index.
     * 
     * @remarks
     * This method autofits a row based on content in a range of cells within the row.
     */
    autoFitColumn(columnIndex: number, firstRow: number, lastRow: number) : void;
    /**
     * Autofits the column width.
     * @param columnIndex - Column index.
     * 
     * @remarks
     * AutoFitColumn is an imprecise function.
     */
    autoFitColumn(columnIndex: number) : void;
    /**
     * Autofits all columns in this worksheet.
     */
    autoFitColumns() : void;
    /**
     * Autofits all columns in this worksheet.
     * @param options - The auto fitting options
     */
    autoFitColumns(options: AutoFitterOptions) : void;
    /**
     * Autofits the columns width.
     * @param firstColumn - First column index.
     * @param lastColumn - Last column index.
     * 
     * @remarks
     * AutoFitColumn is an imprecise function.
     */
    autoFitColumns(firstColumn: number, lastColumn: number) : void;
    /**
     * Autofits the columns width.
     * @param firstColumn - First column index.
     * @param lastColumn - Last column index.
     * @param options - The auto fitting options
     * 
     * @remarks
     * AutoFitColumn is an imprecise function.
     */
    autoFitColumns(firstColumn: number, lastColumn: number, options: AutoFitterOptions) : void;
    /**
     * Autofits the columns width.
     * @param firstRow - First row index.
     * @param firstColumn - First column index.
     * @param lastRow - Last row index.
     * @param lastColumn - Last column index.
     * 
     * @remarks
     * AutoFitColumn is an imprecise function.
     */
    autoFitColumns(firstRow: number, firstColumn: number, lastRow: number, lastColumn: number) : void;
    /**
     * Autofits the columns width.
     * @param firstRow - First row index.
     * @param firstColumn - First column index.
     * @param lastRow - Last row index.
     * @param lastColumn - Last column index.
     * @param options - The auto fitting options
     * 
     * @remarks
     * AutoFitColumn is an imprecise function.
     */
    autoFitColumns(firstRow: number, firstColumn: number, lastRow: number, lastColumn: number, options: AutoFitterOptions) : void;
    /**
     * Autofits the row height.
     * @param rowIndex - Row index.
     * @param firstColumn - First column index.
     * @param lastColumn - Last column index.
     * 
     * @remarks
     * This method autofits a row based on content in a range of cells within the row.
     */
    autoFitRow(rowIndex: number, firstColumn: number, lastColumn: number) : void;
    /**
     * Autofits the row height.
     * @param rowIndex - Row index.
     * @param firstColumn - First column index.
     * @param lastColumn - Last column index.
     * @param options - The auto fitter options
     * 
     * @remarks
     * This method autofits a row based on content in a range of cells within the row.
     */
    autoFitRow(rowIndex: number, firstColumn: number, lastColumn: number, options: AutoFitterOptions) : void;
    /**
     * Autofits row height in a rectangle range.
     * @param startRow - Start row index.
     * @param endRow - End row index.
     * @param startColumn - Start column index.
     * @param endColumn - End column index.
     */
    autoFitRow(startRow: number, endRow: number, startColumn: number, endColumn: number) : void;
    /**
     * Autofits the row height.
     * @param rowIndex - Row index.
     * 
     * @remarks
     * AutoFitRow is an imprecise function.
     */
    autoFitRow(rowIndex: number) : void;
    /**
     * Autofits all rows in this worksheet.
     */
    autoFitRows() : void;
    /**
     * Autofits all rows in this worksheet.
     * @param onlyAuto - True,only autofits the row height when row height is not customed.
     */
    autoFitRows(onlyAuto: boolean) : void;
    /**
     * Autofits all rows in this worksheet.
     * @param options - The auto fitter options
     */
    autoFitRows(options: AutoFitterOptions) : void;
    /**
     * Autofits row height in a range.
     * @param startRow - Start row index.
     * @param endRow - End row index.
     */
    autoFitRows(startRow: number, endRow: number) : void;
    /**
     * Autofits row height in a range.
     * @param startRow - Start row index.
     * @param endRow - End row index.
     * @param options - The options of auto fitter.
     */
    autoFitRows(startRow: number, endRow: number, options: AutoFitterOptions) : void;
    /**
     * Gets the settings of advanced filter.
     */
    getAdvancedFilter() : AdvancedFilter;
    /**
     * Filters data using complex criteria.
     * @param isFilter - Indicates whether filtering the list in place.
     * @param listRange - The list range.
     * @param criteriaRange - The criteria range.
     * @param copyTo - The range where copying data to.
     * @param uniqueRecordOnly - Only displaying or copying unique rows.
     */
    advanced_Filter(isFilter: boolean, listRange: string, criteriaRange: string, copyTo: string, uniqueRecordOnly: boolean) : void;
    /**
     * Removes the auto filter of the worksheet.
     */
    removeAutoFilter() : void;
    /**
     * Sets the visible options.
     * @param isVisible - Whether the worksheet is visible
     * @param ignoreError - Whether to ignore error if this option is not valid.
     */
    setVisible(isVisible: boolean, ignoreError: boolean) : void;
    /**
     * Selects a range.
     * @param startRow - The start row.
     * @param startColumn - The start column
     * @param totalRows - The number of rows.
     * @param totalColumns - The number of columns
     * @param removeOthers - True means removing other selected range and only select this range.
     */
    selectRange(startRow: number, startColumn: number, totalRows: number, totalColumns: number, removeOthers: boolean) : void;
    /**
     * Removes all drawing objects in this worksheet.
     */
    removeAllDrawingObjects() : void;
    /**
     * Clears all comments in designer spreadsheet.
     */
    clearComments() : void;
    /**
     * Protects worksheet.
     * @param type - Protection type.
     * 
     * @remarks
     * This method protects worksheet without password. It can protect worksheet in all versions of Excel file.
     */
    protect(type: ProtectionType) : void;
    /**
     * Protects worksheet.
     * @param type - Protection type.
     * @param password - Password.
     * @param oldPassword - If the worksheet is already protected by a password, please supply the old password. 		/// Otherwise, you can set a null value or blank string to this parameter.
     * 
     * @remarks
     * This method can protect worksheet in all versions of Excel file.
     */
    protect(type: ProtectionType, password: string, oldPassword: string) : void;
    /**
     * Unprotects worksheet.
     * 
     * @remarks
     * This method unprotects worksheet which is protected without password.
     */
    unprotect() : void;
    /**
     * Unprotects worksheet.
     * @param password - Password
     * 
     * @remarks
     * If the worksheet is protected without a password, you can set a null value or blank string to password parameter.
     */
    unprotect(password: string) : void;
    /**
     * Moves the sheet to another location in the spreadsheet.
     * @param index - Destination sheet index.
     */
    moveTo(index: number) : void;
    /**
     * Replaces all cells' text with a new string.
     * @param oldString - Old string value.
     * @param newString - New string value.
     */
    replace(oldString: string, newString: string) : number;
    /**
     * Gets automatic page breaks.
     * @param options - The print options
     * @returns
     * The automatic page breaks areas.
     * 
     * @remarks
     * Each cell area represents a paper.
     */
    getPrintingPageBreaks(options: ImageOrPrintOptions) : CellArea[];
    /**
     * Returns a string represents the current Worksheet object.
     */
    toString() : string;
    /**
     * Starts the session that uses caches to access the data in this worksheet.
     * @param opts - options of data access
     * 
     * @remarks
     * After finishing the access to the data, <see cref="CloseAccessCache(AccessCacheOptions)"/> should
     * be invoked with same options to clear all caches and recover normal access mode.
     */
    startAccessCache(opts: AccessCacheOptions) : void;
    /**
     * Closes the session that uses caches to access the data in this worksheet.
     * @param opts - options of data access
     */
    closeAccessCache(opts: AccessCacheOptions) : void;
    /**
     * Converts the formula reference style.
     * @param formula - The formula to be converted.
     * @param toR1C1 - Which reference style to convert the formula to.         /// If the original formula is of A1 reference style,         /// then this value should be true so the formula will be converted from A1 to R1C1 reference style;         /// If the original formula is of R1C1 reference style,         /// then this value should be false so the formula will be converted from R1C1 to A1 reference style;
     * @param baseCellRow - The row index of the base cell.
     * @param baseCellColumn - The column index of the base cell.
     * @returns
     * The converted formula.
     */
    convertFormulaReferenceStyle(formula: string, toR1C1: boolean, baseCellRow: number, baseCellColumn: number) : string;
    /**
     * Calculates all formulas in this worksheet.
     * @param options - Options for calculation
     * @param recursive - True means if the worksheet' cells depend on the cells of other worksheets,         ///  the dependent cells in other worksheets will be calculated too.         ///  False means all the formulas in the worksheet have been calculated and the values are right.
     */
    calculateFormula(options: CalculationOptions, recursive: boolean) : void;
    /**
     * Refreshes all the PivotTables in this Worksheet.
     */
    refreshPivotTables() : void;
    /**
     * Refreshes all the PivotTables in this Worksheet.
     * @param option - The option for refreshing data source of pivot table.
     */
    refreshPivotTables(option: PivotTableRefreshOption) : void;
}

/**
 * Represents the filter that provides options for loading data when loading workbook from template.
 * 
 * @remarks
 * User may specify the filter options or implement their own LoadFilter to specify how to load data.
 */
export abstract class LoadFilter {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Constructs one LoadFilter with given filter options.
     * @param opts - The default filter options.
     */
    constructor(opts: LoadDataFilterOptions);
    /**
     * The filter options to denote what data should be loaded.
     */
    getLoadDataFilterOptions() : LoadDataFilterOptions;
    /**
     * The filter options to denote what data should be loaded.
     * @param value - The value to set.
     */
    setLoadDataFilterOptions(value: LoadDataFilterOptions) : void;
    /**
     * Specifies the sheets(indices) and order to be loaded.
     * Default is null, that denotes to load all sheets in the default order in template file.
     * If not null and some sheet's index is not in the returned array, then the sheet will not be loaded.
     */
    abstract getSheetsInLoadingOrder() : number[];
    /**
     * Prepares filter options before loading given worksheet.
     * User's implementation of LoadFilter can change the LoadDataFilterOptions here
     * to denote how to load data for this worksheet.
     * @param sheet - The worksheet to be loaded.         /// There are only few properties can be used for the given worksheet object here         /// because most data and properties have not been loaded. The available properties are:         /// Name, Index, VisibilityType
     */
    abstract startSheet(sheet: Worksheet) : void;
}

/**
 * Encapsulates the object that represents the page setup description.
 * The PageSetup object contains all page setup options.
 */
export class PageSetup {
    /**
     * Gets the background of ODS.
     */
    getODSPageBackground() : OdsPageBackground;
    /**
     * Represents the range to be printed.
     */
    getPrintArea() : string;
    /**
     * Represents the range to be printed.
     * @param value - The value to set.
     */
    setPrintArea(value: string) : void;
    /**
     * Represents the columns that contain the cells to be repeated on the left side of each page.
     */
    getPrintTitleColumns() : string;
    /**
     * Represents the columns that contain the cells to be repeated on the left side of each page.
     * @param value - The value to set.
     */
    setPrintTitleColumns(value: string) : void;
    /**
     * Represents the rows that contain the cells to be repeated at the top of each page.
     */
    getPrintTitleRows() : string;
    /**
     * Represents the rows that contain the cells to be repeated at the top of each page.
     * @param value - The value to set.
     */
    setPrintTitleRows(value: string) : void;
    /**
     * Represents if elements of the document will be printed in black and white.
     */
    getBlackAndWhite() : boolean;
    /**
     * Represents if elements of the document will be printed in black and white.
     * @param value - The value to set.
     */
    setBlackAndWhite(value: boolean) : void;
    /**
     * Represent if the sheet is printed centered horizontally.
     */
    getCenterHorizontally() : boolean;
    /**
     * Represent if the sheet is printed centered horizontally.
     * @param value - The value to set.
     */
    setCenterHorizontally(value: boolean) : void;
    /**
     * Represent if the sheet is printed centered vertically.
     */
    getCenterVertically() : boolean;
    /**
     * Represent if the sheet is printed centered vertically.
     * @param value - The value to set.
     */
    setCenterVertically(value: boolean) : void;
    /**
     * Represents if the sheet will be printed without graphics.
     */
    getPrintDraft() : boolean;
    /**
     * Represents if the sheet will be printed without graphics.
     * @param value - The value to set.
     */
    setPrintDraft(value: boolean) : void;
    /**
     * Represents the distance from the bottom of the page to the footer, in unit of centimeters.
     */
    getFooterMargin() : number;
    /**
     * Represents the distance from the bottom of the page to the footer, in unit of centimeters.
     * @param value - The value to set.
     */
    setFooterMargin(value: number) : void;
    /**
     * Represents the distance from the bottom of the page to the footer, in unit of inches.
     */
    getFooterMarginInch() : number;
    /**
     * Represents the distance from the bottom of the page to the footer, in unit of inches.
     * @param value - The value to set.
     */
    setFooterMarginInch(value: number) : void;
    /**
     * Represents the distance from the top of the page to the header, in unit of centimeters.
     */
    getHeaderMargin() : number;
    /**
     * Represents the distance from the top of the page to the header, in unit of centimeters.
     * @param value - The value to set.
     */
    setHeaderMargin(value: number) : void;
    /**
     * Represents the distance from the top of the page to the header, in unit of inches.
     */
    getHeaderMarginInch() : number;
    /**
     * Represents the distance from the top of the page to the header, in unit of inches.
     * @param value - The value to set.
     */
    setHeaderMarginInch(value: number) : void;
    /**
     * Gets and sets the settings of the default printer.
     */
    getPrinterSettings() : number[];
    /**
     * Gets and sets the settings of the default printer.
     * @param value - The value to set.
     */
    setPrinterSettings(value: number[]) : void;
    /**
     * Represents the size of the left margin, in unit of centimeters.
     */
    getLeftMargin() : number;
    /**
     * Represents the size of the left margin, in unit of centimeters.
     * @param value - The value to set.
     */
    setLeftMargin(value: number) : void;
    /**
     * Represents the size of the left margin, in unit of inches.
     */
    getLeftMarginInch() : number;
    /**
     * Represents the size of the left margin, in unit of inches.
     * @param value - The value to set.
     */
    setLeftMarginInch(value: number) : void;
    /**
     * Represents the size of the right margin, in unit of centimeters.
     */
    getRightMargin() : number;
    /**
     * Represents the size of the right margin, in unit of centimeters.
     * @param value - The value to set.
     */
    setRightMargin(value: number) : void;
    /**
     * Represents the size of the right margin, in unit of inches.
     */
    getRightMarginInch() : number;
    /**
     * Represents the size of the right margin, in unit of inches.
     * @param value - The value to set.
     */
    setRightMarginInch(value: number) : void;
    /**
     * Represents the size of the top margin, in unit of centimeters.
     */
    getTopMargin() : number;
    /**
     * Represents the size of the top margin, in unit of centimeters.
     * @param value - The value to set.
     */
    setTopMargin(value: number) : void;
    /**
     * Represents the size of the top margin, in unit of inches.
     */
    getTopMarginInch() : number;
    /**
     * Represents the size of the top margin, in unit of inches.
     * @param value - The value to set.
     */
    setTopMarginInch(value: number) : void;
    /**
     * Represents the size of the bottom margin, in unit of centimeters.
     */
    getBottomMargin() : number;
    /**
     * Represents the size of the bottom margin, in unit of centimeters.
     * @param value - The value to set.
     */
    setBottomMargin(value: number) : void;
    /**
     * Represents the size of the bottom margin, in unit of inches.
     */
    getBottomMarginInch() : number;
    /**
     * Represents the size of the bottom margin, in unit of inches.
     * @param value - The value to set.
     */
    setBottomMarginInch(value: number) : void;
    /**
     * Represents the first page number that will be used when this sheet is printed.
     */
    getFirstPageNumber() : number;
    /**
     * Represents the first page number that will be used when this sheet is printed.
     * @param value - The value to set.
     */
    setFirstPageNumber(value: number) : void;
    /**
     * Represents  the number of pages tall the worksheet will be scaled to when it's printed.
     * The default value is 1.
     * 
     * @remarks
     * You have to set FitToPagesWide as zero if you want to fit all rows on one page.
     */
    getFitToPagesTall() : number;
    /**
     * Represents  the number of pages tall the worksheet will be scaled to when it's printed.
     * The default value is 1.
     * @param value - The value to set.
     * 
     * @remarks
     * You have to set FitToPagesWide as zero if you want to fit all rows on one page.
     */
    setFitToPagesTall(value: number) : void;
    /**
     * Represents the number of pages wide the worksheet will be scaled to when it's printed.
     * The default value is 1.
     * 
     * @remarks
     * You have to set FitToPagesTall as zero if you want to fit all columns on one page.
     */
    getFitToPagesWide() : number;
    /**
     * Represents the number of pages wide the worksheet will be scaled to when it's printed.
     * The default value is 1.
     * @param value - The value to set.
     * 
     * @remarks
     * You have to set FitToPagesTall as zero if you want to fit all columns on one page.
     */
    setFitToPagesWide(value: number) : void;
    /**
     * If this property is False, the FitToPagesWide and FitToPagesTall properties control how the worksheet is scaled.
     */
    isPercentScale() : boolean;
    /**
     * If this property is False, the FitToPagesWide and FitToPagesTall properties control how the worksheet is scaled.
     * @param value - The value to set.
     */
    setIsPercentScale(value: boolean) : void;
    /**
     * Represents the order that Microsoft Excel uses to number pages when printing a large worksheet.
     */
    getOrder() : PrintOrderType;
    /**
     * Represents the order that Microsoft Excel uses to number pages when printing a large worksheet.
     * @param value - The value to set.
     */
    setOrder(value: PrintOrderType) : void;
    /**
     * Indicates whether the paper size is automatic.
     */
    isAutomaticPaperSize() : boolean;
    /**
     * Represents the size of the paper.
     */
    getPaperSize() : PaperSizeType;
    /**
     * Represents the size of the paper.
     * @param value - The value to set.
     */
    setPaperSize(value: PaperSizeType) : void;
    /**
     * Gets the width of the paper in unit of inches, considered page orientation.
     */
    getPaperWidth() : number;
    /**
     * Gets the height of the paper in unit of inches , considered page orientation.
     */
    getPaperHeight() : number;
    /**
     * Represents page print orientation.
     */
    getOrientation() : PageOrientationType;
    /**
     * Represents page print orientation.
     * @param value - The value to set.
     */
    setOrientation(value: PageOrientationType) : void;
    /**
     * Represents the way comments are printed with the sheet.
     */
    getPrintComments() : PrintCommentsType;
    /**
     * Represents the way comments are printed with the sheet.
     * @param value - The value to set.
     */
    setPrintComments(value: PrintCommentsType) : void;
    /**
     * Specifies the type of print error displayed.
     */
    getPrintErrors() : PrintErrorsType;
    /**
     * Specifies the type of print error displayed.
     * @param value - The value to set.
     */
    setPrintErrors(value: PrintErrorsType) : void;
    /**
     * Represents if row and column headings are printed with this page.
     */
    getPrintHeadings() : boolean;
    /**
     * Represents if row and column headings are printed with this page.
     * @param value - The value to set.
     */
    setPrintHeadings(value: boolean) : void;
    /**
     * Represents if cell gridlines are printed on the page.
     */
    getPrintGridlines() : boolean;
    /**
     * Represents if cell gridlines are printed on the page.
     * @param value - The value to set.
     */
    setPrintGridlines(value: boolean) : void;
    /**
     * Represents the scaling factor in percent. It should be between 10 and 400.
     */
    getZoom() : number;
    /**
     * Represents the scaling factor in percent. It should be between 10 and 400.
     * @param value - The value to set.
     */
    setZoom(value: number) : void;
    /**
     * Indicates whether the first the page number is automatically assigned.
     */
    isAutoFirstPageNumber() : boolean;
    /**
     * Indicates whether the first the page number is automatically assigned.
     * @param value - The value to set.
     */
    setIsAutoFirstPageNumber(value: boolean) : void;
    /**
     * Represents the print quality.
     */
    getPrintQuality() : number;
    /**
     * Represents the print quality.
     * @param value - The value to set.
     */
    setPrintQuality(value: number) : void;
    /**
     * Get and sets number of copies to print.
     */
    getPrintCopies() : number;
    /**
     * Get and sets number of copies to print.
     * @param value - The value to set.
     */
    setPrintCopies(value: number) : void;
    /**
     * True means that the header/footer of the odd pages is different with odd pages.
     */
    isHFDiffOddEven() : boolean;
    /**
     * True means that the header/footer of the odd pages is different with odd pages.
     * @param value - The value to set.
     */
    setIsHFDiffOddEven(value: boolean) : void;
    /**
     * True means that the header/footer of the first page is different with other pages.
     */
    isHFDiffFirst() : boolean;
    /**
     * True means that the header/footer of the first page is different with other pages.
     * @param value - The value to set.
     */
    setIsHFDiffFirst(value: boolean) : void;
    /**
     * Indicates whether header and footer are scaled with document scaling.
     * Only applies for Excel 2007.
     */
    isHFScaleWithDoc() : boolean;
    /**
     * Indicates whether header and footer are scaled with document scaling.
     * Only applies for Excel 2007.
     * @param value - The value to set.
     */
    setIsHFScaleWithDoc(value: boolean) : void;
    /**
     * Indicates whether header and footer margins are aligned with the page margins.
     * If this property is true, the left header and footer will be aligned with the left margin,
     * and the right header and footer will be aligned with the right margin.
     * This option is enabled by default.
     */
    isHFAlignMargins() : boolean;
    /**
     * Indicates whether header and footer margins are aligned with the page margins.
     * If this property is true, the left header and footer will be aligned with the left margin,
     * and the right header and footer will be aligned with the right margin.
     * This option is enabled by default.
     * @param value - The value to set.
     */
    setIsHFAlignMargins(value: boolean) : void;
    /**
     * Copies the setting of the page setup.
     * @param source - The source.
     * @param copyOptions - The copy options.
     */
    copy(source: PageSetup, copyOptions: CopyOptions) : void;
    /**
     * Sets the number of pages the worksheet will be scaled to when it's printed.
     * @param wide - Pages wide.
     * @param tall - Pages tall.
     */
    setFitToPages(wide: number, tall: number) : void;
    /**
     * Sets the custom paper size, in unit of inches.
     * @param width - The width of the paper.
     * @param height - The height of the paper.
     */
    customPaperSize(width: number, height: number) : void;
    /**
     * Clears header and footer setting.
     */
    clearHeaderFooter() : void;
    /**
     * Gets a script formatting the header of an Excel file.
     * @param section - 0: Left Section, 1: Center Section, 2: Right Section.
     */
    getHeader(section: number) : string;
    /**
     * Gets all commands of header or footer.
     * @param headerFooterScript - The header/footer script
     * @returns
     * Returns all commands of header or footer.
     */
    getCommands(headerFooterScript: string) : HeaderFooterCommand[];
    /**
     * Gets a script formatting the footer of an Excel file.
     * @param section - 0: Left Section, 1: Center Section, 2: Right Section.
     */
    getFooter(section: number) : string;
    /**
     * Sets a script formatting the header of an Excel file.
     * @param section - 0: Left Section, 1: Center Section, 2: Right Section.
     * @param headerScript - Header format script.
     * 
     * @remarks
     * <p>Script commands:</p>
     * <list type="table">
     * <listheader>
     * <description>Command</description>
     * <description>Description</description>
     * </listheader>
     * <item>
     * <description>&amp;P</description>
     * <description>Current page number　</description>
     * </item>
     * <item>
     * <description>&amp;N</description>
     * <description>Page count　</description>
     * </item>
     * <item>
     * <description>&amp;D</description>
     * <description>Current date　</description>
     * </item>
     * <item>
     * <description>&amp;T</description>
     * <description>Current time</description>
     * </item>
     * <item>
     * <description>&amp;A</description>
     * <description>Sheet name</description>
     * </item>
     * <item>
     * <description>&amp;F</description>
     * <description>File name without path</description>
     * </item>
     * <item>
     * <description>&amp;"&lt;FontName&gt;"</description>
     * <description>Font name, for example: &amp;"Arial"</description>
     * </item>
     * <item>
     * <description>&amp;"&lt;FontName&gt;, &lt;FontStyle&gt;"</description>
     * <description>Font name and font style, for example: &amp;"Arial,Bold"</description>
     * </item>
     * <item>
     * <description>&amp;&lt;FontSize&gt;</description>
     * <description>Font size. If this command is followed by a plain number to be printed in the header, it will be separated from the font height with a space character.</description>
     * </item>
     * <item>
     * <description>&amp;K&lt;RRGGBB&gt;</description>
     * <description>Font color, for example(RED): &amp;KFF0000</description>
     * </item>
     * <item>
     * <description>&amp;G</description>
     * <description>Image script</description>
     * </item>
     * </list>
     * For example: "&amp;Arial,Bold&amp;8Header Note"
     */
    setHeader(section: number, headerScript: string) : void;
    /**
     * Sets a script formatting the footer of an Excel file.
     * @param section - 0: Left Section, 1: Center Section, 2: Right Section.
     * @param footerScript - Footer format script.
     * 
     * @remarks
     * <p>Script commands:</p>
     * <list type="table">
     * <listheader>
     * <description>Command</description>
     * <description>Description</description>
     * </listheader>
     * <item>
     * <description>&amp;P</description>
     * <description>Current page number　</description>
     * </item>
     * <item>
     * <description>&amp;N</description>
     * <description>Page count　</description>
     * </item>
     * <item>
     * <description>&amp;D</description>
     * <description>Current date　</description>
     * </item>
     * <item>
     * <description>&amp;T</description>
     * <description>Current time</description>
     * </item>
     * <item>
     * <description>&amp;A</description>
     * <description>Sheet name</description>
     * </item>
     * <item>
     * <description>&amp;F</description>
     * <description>File name without path</description>
     * </item>
     * <item>
     * <description>&amp;"&lt;FontName&gt;"</description>
     * <description>Font name, for example: &amp;"Arial"</description>
     * </item>
     * <item>
     * <description>&amp;"&lt;FontName&gt;, &lt;FontStyle&gt;"</description>
     * <description>Font name and font style, for example: &amp;"Arial,Bold"</description>
     * </item>
     * <item>
     * <description>&amp;&lt;FontSize&gt;</description>
     * <description>Font size. If this command is followed by a plain number to be printed in the header, it will be separated from the font height with a space character.</description>
     * </item>
     * <item>
     * <description>&amp;K&lt;RRGGBB&gt;</description>
     * <description>Font color, for example(RED): &amp;KFF0000</description>
     * </item>
     * <item>
     * <description>&amp;G</description>
     * <description>Image script</description>
     * </item>
     * </list>
     * For example: "&amp;Arial,Bold&amp;8Footer Note"
     */
    setFooter(section: number, footerScript: string) : void;
    /**
     * Sets a script formatting the even page header of an Excel file.
     * Only effect in Excel 2007 when IsHFDiffOddEven is true.
     * @param section - 0: Left Section, 1: Center Section, 2: Right Section.
     * @param headerScript - Header format script.
     */
    setEvenHeader(section: number, headerScript: string) : void;
    /**
     * Gets a script formatting the even header of an Excel file.
     * @param section - 0: Left Section, 1: Center Section, 2: Right Section.
     */
    getEvenHeader(section: number) : string;
    /**
     * Sets a script formatting the even page footer of an Excel file.
     * Only effect in Excel 2007 when IsHFDiffOddEven is true.
     * @param section - 0: Left Section, 1: Center Section, 2: Right Section.
     * @param footerScript - Footer format script.
     */
    setEvenFooter(section: number, footerScript: string) : void;
    /**
     * Gets a script formatting the even footer of an Excel file.
     * @param section - 0: Left Section, 1: Center Section, 2: Right Section.
     */
    getEvenFooter(section: number) : string;
    /**
     * Sets a script formatting the first page header of an Excel file.
     * Only effect in Excel 2007 when IsHFDiffFirst is true.
     * @param section - 0: Left Section, 1: Center Section, 2: Right Section.
     * @param headerScript - Header format script.
     */
    setFirstPageHeader(section: number, headerScript: string) : void;
    /**
     * Gets a script formatting the first page header of an Excel file.
     * @param section - 0: Left Section, 1: Center Section, 2: Right Section.
     */
    getFirstPageHeader(section: number) : string;
    /**
     * Sets a script formatting the first page footer of an Excel file.
     * @param section - 0: Left Section, 1: Center Section, 2: Right Section.
     * @param footerScript - Footer format script.
     */
    setFirstPageFooter(section: number, footerScript: string) : void;
    /**
     * Gets a script formatting the first page footer of an Excel file.
     * @param section - 0: Left Section, 1: Center Section, 2: Right Section.
     */
    getFirstPageFooter(section: number) : string;
    /**
     * Sets an image in the header of a worksheet.
     * @param section - 0: Left Section, 1: Center Section, 2: Right Section.
     * @param headerPicture - Image data.
     * @returns
     * Returns <see cref="Picture"/> object.
     */
    setHeaderPicture(section: number, headerPicture: number[]) : Picture;
    /**
     * Sets an image in the footer of a worksheet.
     * @param section - 0: Left Section, 1: Center Section, 2: Right Section.
     * @param footerPicture - Image data.
     * @returns
     * Returns <see cref="Picture"/> object.
     */
    setFooterPicture(section: number, footerPicture: number[]) : Picture;
    /**
     * Sets an image in the header/footer of a worksheet.
     * @param isFirst - Indicates whether setting the picture of first page header/footer.
     * @param isEven - Indicates whether setting the picture of even page header/footer.
     * @param isHeader - Indicates whether setting the picture of header/footer.
     * @param section - 0: Left Section, 1: Center Section, 2: Right Section.
     * @param imageData - Image data.
     * @returns
     * Returns <see cref="Picture"/> object.
     */
    setPicture(isFirst: boolean, isEven: boolean, isHeader: boolean, section: number, imageData: number[]) : Picture;
    /**
     * Gets the <see cref="Picture"/> object of the header / footer.
     * @param isHeader - Indicates whether it is in the header or footer.
     * @param section - 0: Left Section, 1: Center Section, 2: Right Section.
     * @returns
     * Returns <see cref="Picture"/> object.
     * Returns null if there is no picture.
     */
    getPicture(isHeader: boolean, section: number) : Picture;
    /**
     * Gets the <see cref="Picture"/> object of the header / footer.
     * @param isFirst - Indicates whether getting the picture of first page header/footer.
     * @param isEven - Indicates whether getting the picture of even page header/footer.
     * @param isHeader - Indicates whether getting the picture of header/footer.
     * @param section - 0: Left Section, 1: Center Section, 2: Right Section.
     * @returns
     * Returns <see cref="Picture"/> object.
     */
    getPicture(isFirst: boolean, isEven: boolean, isHeader: boolean, section: number) : Picture;
}

/**
 * Represents the text options.
 */
export class TextOptions extends Font {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Font);
    /**
     * Gets and sets the name of the shape.
     */
    getName() : string;
    /**
     * Gets and sets the name of the shape.
     * @param value - The value to set.
     */
    setName(value: string) : void;
    /**
     * Gets and sets the user interface language.
     */
    getLanguageCode() : CountryCode;
    /**
     * Gets and sets the user interface language.
     * @param value - The value to set.
     */
    setLanguageCode(value: CountryCode) : void;
    /**
     * Gets and sets the latin name.
     */
    getLatinName() : string;
    /**
     * Gets and sets the latin name.
     * @param value - The value to set.
     */
    setLatinName(value: string) : void;
    /**
     * Gets and sets the FarEast name.
     */
    getFarEastName() : string;
    /**
     * Gets and sets the FarEast name.
     * @param value - The value to set.
     */
    setFarEastName(value: string) : void;
    /**
     * Represents the fill format of the text.
     */
    getFill() : FillFormat;
    /**
     * Represents the outline format of the text.
     */
    getOutline() : LineFormat;
    /**
     * Represents a <see cref="ShadowEffect"/> object that specifies shadow effect for the chart element or shape.
     */
    getShadow() : ShadowEffect;
    /**
     * Gets or sets the color of underline.
     */
    getUnderlineColor() : CellsColor;
    /**
     * Gets or sets the color of underline.
     * @param value - The value to set.
     */
    setUnderlineColor(value: CellsColor) : void;
    /**
     * Specifies the minimum font size at which character kerning will occur for this text run.
     */
    getKerning() : number;
    /**
     * Specifies the minimum font size at which character kerning will occur for this text run.
     * @param value - The value to set.
     */
    setKerning(value: number) : void;
    /**
     * Specifies the spacing between characters within a text run.
     */
    getSpacing() : number;
    /**
     * Specifies the spacing between characters within a text run.
     * @param value - The value to set.
     */
    setSpacing(value: number) : void;
}

/**
 * Represents a field in a PivotTable report.
 */
export class PivotField {
    /**
     * Gets the pivot items of the pivot field
     */
    getPivotItems() : PivotItemCollection;
    /**
     * Gets the group settings of the pivot field.
     * 
     * @remarks
     * If this field is not grouped, Null will be returned.
     */
    getGroupSettings() : PivotFieldGroupSettings;
    /**
     * Indicates whether the specified PivotTable field is calculated field.
     */
    isCalculatedField() : boolean;
    /**
     * Represents the PivotField index in the base PivotFields.
     */
    getBaseIndex() : number;
    /**
     * Represents the PivotField index in the base PivotFields.
     * @param value - The value to set.
     */
    setBaseIndex(value: number) : void;
    /**
     * Represents the index of <see cref="PivotField"/> in the region.
     */
    getPosition() : number;
    /**
     * Represents the name of PivotField.
     */
    getName() : string;
    /**
     * Represents the name of PivotField.
     * @param value - The value to set.
     */
    setName(value: string) : void;
    /**
     * Represents the PivotField display name.
     */
    getDisplayName() : string;
    /**
     * Represents the PivotField display name.
     * @param value - The value to set.
     */
    setDisplayName(value: string) : void;
    /**
     * Indicates whether the specified field shows automatic subtotals. Default is true.
     */
    isAutoSubtotals() : boolean;
    /**
     * Indicates whether the specified field shows automatic subtotals. Default is true.
     * @param value - The value to set.
     */
    setIsAutoSubtotals(value: boolean) : void;
    /**
     * Indicates whether the specified field can be dragged to the column position.
     * The default value is true.
     */
    getDragToColumn() : boolean;
    /**
     * Indicates whether the specified field can be dragged to the column position.
     * The default value is true.
     * @param value - The value to set.
     */
    setDragToColumn(value: boolean) : void;
    /**
     * Indicates whether the specified field can be dragged to the hide position.
     * The default value is true.
     */
    getDragToHide() : boolean;
    /**
     * Indicates whether the specified field can be dragged to the hide position.
     * The default value is true.
     * @param value - The value to set.
     */
    setDragToHide(value: boolean) : void;
    /**
     * Indicates whether the specified field can be dragged to the row position.
     * The default value is true.
     */
    getDragToRow() : boolean;
    /**
     * Indicates whether the specified field can be dragged to the row position.
     * The default value is true.
     * @param value - The value to set.
     */
    setDragToRow(value: boolean) : void;
    /**
     * Indicates whether the specified field can be dragged to the page position.
     * The default value is true.
     */
    getDragToPage() : boolean;
    /**
     * Indicates whether the specified field can be dragged to the page position.
     * The default value is true.
     * @param value - The value to set.
     */
    setDragToPage(value: boolean) : void;
    /**
     * Indicates whether the specified field can be dragged to the data position.
     * The default value is true.
     */
    getDragToData() : boolean;
    /**
     * Indicates whether the specified field can be dragged to the data position.
     * The default value is true.
     * @param value - The value to set.
     */
    setDragToData(value: boolean) : void;
    /**
     * indicates whether the field can have multiple items
     * selected in the page field
     * The default value is false.
     */
    isMultipleItemSelectionAllowed() : boolean;
    /**
     * indicates whether the field can have multiple items
     * selected in the page field
     * The default value is false.
     * @param value - The value to set.
     */
    setIsMultipleItemSelectionAllowed(value: boolean) : void;
    /**
     * Indicates whether repeating labels of the field in the region.
     * The default value is false.
     */
    isRepeatItemLabels() : boolean;
    /**
     * Indicates whether repeating labels of the field in the region.
     * The default value is false.
     * @param value - The value to set.
     */
    setIsRepeatItemLabels(value: boolean) : void;
    /**
     * Indicates whether including new items to the field in manual filter.
     * The default value is false.
     */
    isIncludeNewItemsInFilter() : boolean;
    /**
     * Indicates whether including new items to the field in manual filter.
     * The default value is false.
     * @param value - The value to set.
     */
    setIsIncludeNewItemsInFilter(value: boolean) : void;
    /**
     * Indicates whether inserting page breaks after each item.
     * The default value is false.
     */
    isInsertPageBreaksBetweenItems() : boolean;
    /**
     * Indicates whether inserting page breaks after each item.
     * The default value is false.
     * @param value - The value to set.
     */
    setIsInsertPageBreaksBetweenItems(value: boolean) : void;
    /**
     * Indicates whether all items displays in the PivotTable report,
     * even if they don't contain summary data.
     * show items with no data
     * The default value is false.
     */
    getShowAllItems() : boolean;
    /**
     * Indicates whether all items displays in the PivotTable report,
     * even if they don't contain summary data.
     * show items with no data
     * The default value is false.
     * @param value - The value to set.
     */
    setShowAllItems(value: boolean) : void;
    /**
     * Indicates whether a sort operation that will be applied to this pivot field is an autosort operation or a simple data sort.
     */
    getNonAutoSortDefault() : boolean;
    /**
     * Indicates whether a sort operation that will be applied to this pivot field is an autosort operation or a simple data sort.
     * @param value - The value to set.
     */
    setNonAutoSortDefault(value: boolean) : void;
    /**
     * Indicates whether the specified PivotTable field is automatically sorted.
     */
    isAutoSort() : boolean;
    /**
     * Indicates whether the specified PivotTable field is automatically sorted.
     * @param value - The value to set.
     */
    setIsAutoSort(value: boolean) : void;
    /**
     * Indicates whether the specified PivotTable field is autosorted ascending.
     */
    isAscendSort() : boolean;
    /**
     * Indicates whether the specified PivotTable field is autosorted ascending.
     * @param value - The value to set.
     */
    setIsAscendSort(value: boolean) : void;
    /**
     * Represents the index of field which is auto sorted.
     * -1 means PivotField itself,others means the position of the data fields.
     */
    getAutoSortField() : number;
    /**
     * Represents the index of field which is auto sorted.
     * -1 means PivotField itself,others means the position of the data fields.
     * @param value - The value to set.
     */
    setAutoSortField(value: number) : void;
    /**
     * Indicates whether the specified PivotTable field is automatically shown,only valid for excel 2003.
     */
    isAutoShow() : boolean;
    /**
     * Indicates whether the specified PivotTable field is automatically shown,only valid for excel 2003.
     * @param value - The value to set.
     */
    setIsAutoShow(value: boolean) : void;
    /**
     * Indicates whether the specified PivotTable field is autoshown ascending.
     */
    isAscendShow() : boolean;
    /**
     * Indicates whether the specified PivotTable field is autoshown ascending.
     * @param value - The value to set.
     */
    setIsAscendShow(value: boolean) : void;
    /**
     * Represent the number of top or bottom items
     * that are automatically shown in the specified PivotTable field.
     */
    getAutoShowCount() : number;
    /**
     * Represent the number of top or bottom items
     * that are automatically shown in the specified PivotTable field.
     * @param value - The value to set.
     */
    setAutoShowCount(value: number) : void;
    /**
     * Represents auto show field index. -1 means PivotField itself.
     * It should be the index of the data fields.
     */
    getAutoShowField() : number;
    /**
     * Represents auto show field index. -1 means PivotField itself.
     * It should be the index of the data fields.
     * @param value - The value to set.
     */
    setAutoShowField(value: number) : void;
    /**
     * Represents the function used to summarize the PivotTable data field.
     */
    getFunction() : ConsolidationFunction;
    /**
     * Represents the function used to summarize the PivotTable data field.
     * @param value - The value to set.
     */
    setFunction(value: ConsolidationFunction) : void;
    /**
     * Gets the settings of showing values as when the ShowDataAs calculation is in use.
     */
    getShowValuesSetting() : PivotShowValuesSetting;
    /**
     * Represents how to display the values in a data field of the pivot report.
     * 
     * @remarks
     * NOTE: This property is now obsolete. Instead,
     * please use PivotField.PivotShowValuesSetting.CalculationType property instead.
     * This method will be removed 12 months later since June 2024.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use PivotField.PivotShowValuesSetting.CalculationType property instead.
     */
    getDataDisplayFormat() : PivotFieldDataDisplayFormat;
    /**
     * Represents how to display the values in a data field of the pivot report.
     * @param value - The value to set.
     * 
     * @remarks
     * NOTE: This property is now obsolete. Instead,
     * please use PivotField.PivotShowValuesSetting.CalculationType property instead.
     * This method will be removed 12 months later since June 2024.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use PivotField.PivotShowValuesSetting.CalculationType property instead.
     */
    setDataDisplayFormat(value: PivotFieldDataDisplayFormat) : void;
    /**
     * Represents the base field for a custom calculation when the ShowDataAs calculation is in use.
     * 
     * @remarks
     * NOTE: This property is now obsolete. Instead,
     * please use PivotField.PivotShowValuesSetting.BaseFieldIndex property instead.
     * This method will be removed 12 months later since June 2024.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use PivotField.PivotShowValuesSetting.BaseFieldIndex property instead.
     */
    getBaseFieldIndex() : number;
    /**
     * Represents the base field for a custom calculation when the ShowDataAs calculation is in use.
     * @param value - The value to set.
     * 
     * @remarks
     * NOTE: This property is now obsolete. Instead,
     * please use PivotField.PivotShowValuesSetting.BaseFieldIndex property instead.
     * This method will be removed 12 months later since June 2024.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use PivotField.PivotShowValuesSetting.BaseFieldIndex property instead.
     */
    setBaseFieldIndex(value: number) : void;
    /**
     * Represents the item in the base field for a custom calculation when the ShowDataAs calculation is in use.
     * Valid only for data fields.
     * Because PivotItemPosition.Custom is only for read,if you need to set PivotItemPosition.Custom,
     * please set PivotField.BaseItemIndex attribute.
     * 
     * @remarks
     * NOTE: This property is now obsolete. Instead,
     * please use PivotField.PivotShowValuesSetting.BaseItemType property instead.
     * This method will be removed 12 months later since June 2024.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use PivotField.PivotShowValuesSetting.BaseItemType property instead.
     */
    getBaseItemPosition() : PivotItemPosition;
    /**
     * Represents the item in the base field for a custom calculation when the ShowDataAs calculation is in use.
     * Valid only for data fields.
     * Because PivotItemPosition.Custom is only for read,if you need to set PivotItemPosition.Custom,
     * please set PivotField.BaseItemIndex attribute.
     * @param value - The value to set.
     * 
     * @remarks
     * NOTE: This property is now obsolete. Instead,
     * please use PivotField.PivotShowValuesSetting.BaseItemType property instead.
     * This method will be removed 12 months later since June 2024.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use PivotField.PivotShowValuesSetting.BaseItemType property instead.
     */
    setBaseItemPosition(value: PivotItemPosition) : void;
    /**
     * Represents the item in the base field for a custom calculation when the ShowDataAs calculation is in use.
     * Valid only for data fields.
     * 
     * @remarks
     * NOTE: This property is now obsolete. Instead,
     * please use PivotField.PivotShowValuesSetting.BaseItemIndex property instead.
     * This method will be removed 12 months later since June 2024.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use PivotField.PivotShowValuesSetting.BaseItemIndex property instead.
     */
    getBaseItemIndex() : number;
    /**
     * Represents the item in the base field for a custom calculation when the ShowDataAs calculation is in use.
     * Valid only for data fields.
     * @param value - The value to set.
     * 
     * @remarks
     * NOTE: This property is now obsolete. Instead,
     * please use PivotField.PivotShowValuesSetting.BaseItemIndex property instead.
     * This method will be removed 12 months later since June 2024.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use PivotField.PivotShowValuesSetting.BaseItemIndex property instead.
     */
    setBaseItemIndex(value: number) : void;
    /**
     * Represents the current page item showing for the page field (valid only for page fields).
     */
    getCurrentPageItem() : number;
    /**
     * Represents the current page item showing for the page field (valid only for page fields).
     * @param value - The value to set.
     */
    setCurrentPageItem(value: number) : void;
    /**
     * Represents the built-in display format of numbers and dates.
     */
    getNumber() : number;
    /**
     * Represents the built-in display format of numbers and dates.
     * @param value - The value to set.
     */
    setNumber(value: number) : void;
    /**
     * Indicates whether inserting blank line after each item.
     */
    getInsertBlankRow() : boolean;
    /**
     * Indicates whether inserting blank line after each item.
     * @param value - The value to set.
     */
    setInsertBlankRow(value: boolean) : void;
    /**
     * when ShowInOutlineForm is true, then display subtotals at the top of the list of items instead of at the bottom
     * 
     * @remarks
     * Only works when ShowInOutlineForm is true.
     */
    getShowSubtotalAtTop() : boolean;
    /**
     * when ShowInOutlineForm is true, then display subtotals at the top of the list of items instead of at the bottom
     * @param value - The value to set.
     * 
     * @remarks
     * Only works when ShowInOutlineForm is true.
     */
    setShowSubtotalAtTop(value: boolean) : void;
    /**
     * Indicates whether layout this field in outline form on the Pivot Table view
     */
    getShowInOutlineForm() : boolean;
    /**
     * Indicates whether layout this field in outline form on the Pivot Table view
     * @param value - The value to set.
     */
    setShowInOutlineForm(value: boolean) : void;
    /**
     * Represents the custom display format of numbers and dates.
     */
    get_NumberFormat() : string;
    /**
     * Represents the custom display format of numbers and dates.
     * @param value - The value to set.
     */
    setNumberFormat(value: string) : void;
    /**
     * Get all labels of pivot items in this field.
     */
    getItems() : string[];
    /**
     * Get the original base items;
     */
    getOriginalItems() : string[];
    /**
     * Gets the count of the base items in this pivot field.
     */
    getItemCount() : number;
    /**
     * Indicates whether display labels from the next field in the same column on the Pivot Table view
     */
    getShowCompact() : boolean;
    /**
     * Indicates whether display labels from the next field in the same column on the Pivot Table view
     * @param value - The value to set.
     */
    setShowCompact(value: boolean) : void;
    /**
     * Gets the pivot filter of the pivot field by type
     */
    getPivotFilterByType(type: PivotFilterType) : PivotFilter;
    /**
     * Gets all pivot filters of this pivot field.
     */
    getFilters() : PivotFilter[];
    /**
     * Init the pivot items of the pivot field
     */
    initPivotItems() : void;
    /**
     * Automatically group the field with internal
     * @param interval - The internal of group.         /// Automatic value will be assigned if it's zero,
     * @param newField - Indicates whether adding a new field to the pivottable.
     */
    groupBy(interval: number, newField: boolean) : void;
    /**
     * Group the file by the date group types.
     * @param start - The start datetime
     * @param end - The end of datetime
     * @param groups - Group types
     * @param interval - The interval
     * @param firstAsNewField - Indicates whether adding a new field to the pivottable.         /// Only for the first group item.
     */
    groupBy(start: Date, end: Date, groups: PivotGroupByType[], interval: number, firstAsNewField: boolean) : void;
    /**
     * Group the file by number.
     * @param start - The start value
     * @param end - The end of value
     * @param interval - The interval
     * @param newField - Indicates whether adding a new field to the pivottable
     */
    groupBy(start: number, end: number, interval: number, newField: boolean) : void;
    /**
     * Custom group the field.
     * @param customGroupItems - The custom group items.
     * @param newField - Indicates whether adding a new field to the pivottable
     */
    groupBy(customGroupItems: CustomPiovtFieldGroupItem[], newField: boolean) : void;
    /**
     * Ungroup the pivot field.
     */
    ungroup() : void;
    /**
     * Get the formula string of the specified calculated field .
     */
    getCalculatedFieldFormula() : string;
    /**
     * Sets whether the specified field shows that subtotals.
     * @param subtotalType - subtotals type.
     * @param shown - whether the specified field shows that subtotals.
     */
    setSubtotals(subtotalType: PivotFieldSubtotalType, shown: boolean) : void;
    /**
     * Indicates whether showing specified subtotal.
     * @param subtotalType - subtotal type.
     * @returns
     * Returns whether showing specified subtotal.
     */
    getSubtotals(subtotalType: PivotFieldSubtotalType) : boolean;
    /**
     * Shows values of data field as different display format when the ShowDataAs calculation is in use.
     * @param displayFormat - The data display format type.
     * @param baseField - The index to the field which ShowDataAs calculation bases on.
     * @param baseItemPositionType - The position type of base iteam.
     * @param baseItem - The index to the base item which ShowDataAs calculation bases on.         /// Only works when baseItemPositionType is custom.
     * 
     * @remarks
     * Only for data field.
     */
    showValuesAs(displayFormat: PivotFieldDataDisplayFormat, baseField: number, baseItemPositionType: PivotItemPositionType, baseItem: number) : void;
    /**
     * Gets whether the specific PivotItem is hidden.
     * @param index - The index of the pivotItem in the pivotField.
     * @returns
     * whether the specific PivotItem is hidden
     */
    isHiddenItem(index: number) : boolean;
    /**
     * Sets whether the specific PivotItem in a data field is hidden.
     * @param index - the index of the pivotItem in the pivotField.
     * @param isHidden - whether the specific PivotItem is hidden
     */
    hideItem(index: number, isHidden: boolean) : void;
    /**
     * Sets whether the specific PivotItem in a data field is hidden.
     * @param itemValue - the value of the pivotItem in the pivotField.
     * @param isHidden - whether the specific PivotItem is hidden
     */
    hideItem(itemValue: string, isHidden: boolean) : void;
    /**
     * Gets whether hidding the detail of  the specific PivotItem..
     * @param index - The index of the pivotItem in the pivotField.
     * @returns
     * whether the specific PivotItem is hidden detail
     */
    isHiddenItemDetail(index: number) : boolean;
    /**
     * Sets whether the specific PivotItem in a pivot field is hidden detail.
     * @param index - the index of the pivotItem in the pivotField.
     * @param isHiddenDetail - whether the specific PivotItem is hidden
     */
    hideItemDetail(index: number, isHiddenDetail: boolean) : void;
    /**
     * Sets whether the PivotItems in a pivot field is hidden detail.That is collapse/expand this field.
     * @param isHiddenDetail - Whether hide the detail of the pivot field.
     */
    hideDetail(isHiddenDetail: boolean) : void;
    /**
     * Add a calculated formula item to the pivot field.
     * @param name - The item's name.
     * @param formula - The formula of pivot item.
     * 
     * @remarks
     * Only supports to add calculated item to Row/Column field.
     */
    addCalculatedItem(name: string, formula: string) : void;
}

/**
 * Summary description for PivotTable.
 */
export class PivotTable {
    /**
     * Specifies whether the PivotTable is compatible for Excel2003 when refreshing PivotTable,
     * if true, a string must be less than or equal to 255 characters, so if the string is greater than 255 characters,
     * it will be truncated. if false, a string will not have the aforementioned restriction.
     * The default value is true.
     */
    isExcel2003Compatible() : boolean;
    /**
     * Specifies whether the PivotTable is compatible for Excel2003 when refreshing PivotTable,
     * if true, a string must be less than or equal to 255 characters, so if the string is greater than 255 characters,
     * it will be truncated. if false, a string will not have the aforementioned restriction.
     * The default value is true.
     * @param value - The value to set.
     */
    setIsExcel2003Compatible(value: boolean) : void;
    /**
     * Gets the name of the last user who refreshed this PivotTable
     */
    getRefreshedByWho() : string;
    /**
     * Gets the last date time when the PivotTable was refreshed.
     */
    getRefreshDate() : Date;
    /**
     * Gets and sets the pivottable style name.
     */
    getPivotTableStyleName() : string;
    /**
     * Gets and sets the pivottable style name.
     * @param value - The value to set.
     */
    setPivotTableStyleName(value: string) : void;
    /**
     * Gets and sets the built-in pivot table style.
     */
    getPivotTableStyleType() : PivotTableStyleType;
    /**
     * Gets and sets the built-in pivot table style.
     * @param value - The value to set.
     */
    setPivotTableStyleType(value: PivotTableStyleType) : void;
    /**
     * Returns a PivotFields object that are currently shown as column fields.
     */
    getColumnFields() : PivotFieldCollection;
    /**
     * Returns a PivotFields object that are currently shown as row fields.
     */
    getRowFields() : PivotFieldCollection;
    /**
     * Returns a PivotFields object that are currently shown as page fields.
     */
    getPageFields() : PivotFieldCollection;
    /**
     * Gets a PivotField object that represents all the data fields in a PivotTable.
     * Read-only.It would be init only when there are two or more data fields in the DataPiovtFiels.
     * It only use to add DataPivotField to the PivotTable row/column area . Default is in row area.
     */
    getDataFields() : PivotFieldCollection;
    /**
     * Gets a <see cref="PivotField"/> object that represents all the data fields in a PivotTable.
     * Read-only.
     * It would only be created when there are two or more data fields in the Data region.
     * Defaultly it is in row region. You can drag it to the row/column region with PivotTable.AddFieldToArea() method .
     */
    getDataField() : PivotField;
    /**
     * Returns all base pivot fields in the PivotTable.
     */
    getBaseFields() : PivotFieldCollection;
    /**
     * Returns a list of pivot filters.
     */
    getPivotFilters() : PivotFilterCollection;
    /**
     * Returns a CellArea object that represents the range
     * that contains the column area in the PivotTable report. Read-only.
     */
    getColumnRange() : CellArea;
    /**
     * Returns a CellArea object that represents the range
     * that contains the row area in the PivotTable report. Read-only.
     */
    getRowRange() : CellArea;
    /**
     * Returns a <see cref="CellArea"/> object that represents the range that contains the data area
     * in the list between the header row and the insert row. Read-only.
     */
    getDataBodyRange() : CellArea;
    /**
     * Returns a CellArea object that represents the range containing the entire PivotTable report,
     * but doesn't include page fields. Read-only.
     */
    getTableRange1() : CellArea;
    /**
     * Returns a CellArea object that represents the range containing the entire PivotTable report,
     * includes page fields. Read-only.
     */
    getTableRange2() : CellArea;
    /**
     * Indicates whether the PivotTable report shows grand totals for columns.
     */
    getColumnGrand() : boolean;
    /**
     * Indicates whether the PivotTable report shows grand totals for columns.
     * @param value - The value to set.
     */
    setColumnGrand(value: boolean) : void;
    /**
     * Indicates whether the PivotTable report displays classic pivottable layout.
     * (enables dragging fields in the grid)
     */
    isGridDropZones() : boolean;
    /**
     * Indicates whether the PivotTable report displays classic pivottable layout.
     * (enables dragging fields in the grid)
     * @param value - The value to set.
     */
    setIsGridDropZones(value: boolean) : void;
    /**
     * Indicates whether the PivotTable report shows grand totals for rows.
     */
    getRowGrand() : boolean;
    /**
     * Indicates whether the PivotTable report shows grand totals for rows.
     * @param value - The value to set.
     */
    setRowGrand(value: boolean) : void;
    /**
     * Indicates whether the PivotTable report displays a custom string if the value is null.
     */
    getDisplayNullString() : boolean;
    /**
     * Indicates whether the PivotTable report displays a custom string if the value is null.
     * @param value - The value to set.
     */
    setDisplayNullString(value: boolean) : void;
    /**
     * Gets the string displayed in cells that contain null values
     * when the DisplayNullString property is true.The default value is an empty string.
     */
    getNullString() : string;
    /**
     * Gets the string displayed in cells that contain null values
     * when the DisplayNullString property is true.The default value is an empty string.
     * @param value - The value to set.
     */
    setNullString(value: string) : void;
    /**
     * Indicates whether the PivotTable report displays a custom string in cells that contain errors.
     */
    getDisplayErrorString() : boolean;
    /**
     * Indicates whether the PivotTable report displays a custom string in cells that contain errors.
     * @param value - The value to set.
     */
    setDisplayErrorString(value: boolean) : void;
    /**
     * Gets and sets the name of the value area field header in the PivotTable.
     */
    getDataFieldHeaderName() : string;
    /**
     * Gets and sets the name of the value area field header in the PivotTable.
     * @param value - The value to set.
     */
    setDataFieldHeaderName(value: string) : void;
    /**
     * Gets the string displayed in cells that contain errors
     * when the DisplayErrorString property is true.The default value is an empty string.
     */
    getErrorString() : string;
    /**
     * Gets the string displayed in cells that contain errors
     * when the DisplayErrorString property is true.The default value is an empty string.
     * @param value - The value to set.
     */
    setErrorString(value: string) : void;
    /**
     * Indicates whether the PivotTable report is automatically formatted.
     * Checkbox "autoformat table " which is in pivottable option for Excel 2003
     */
    isAutoFormat() : boolean;
    /**
     * Indicates whether the PivotTable report is automatically formatted.
     * Checkbox "autoformat table " which is in pivottable option for Excel 2003
     * @param value - The value to set.
     */
    setIsAutoFormat(value: boolean) : void;
    /**
     * Indicates whether autofitting column width on update
     */
    getAutofitColumnWidthOnUpdate() : boolean;
    /**
     * Indicates whether autofitting column width on update
     * @param value - The value to set.
     */
    setAutofitColumnWidthOnUpdate(value: boolean) : void;
    /**
     * Gets and sets the auto format type of PivotTable.
     */
    getAutoFormatType() : PivotTableAutoFormatType;
    /**
     * Gets and sets the auto format type of PivotTable.
     * @param value - The value to set.
     */
    setAutoFormatType(value: PivotTableAutoFormatType) : void;
    /**
     * Indicates whether to add blank rows.
     * This property only applies for the PivotTable auto format types which needs to add blank rows.
     */
    getHasBlankRows() : boolean;
    /**
     * Indicates whether to add blank rows.
     * This property only applies for the PivotTable auto format types which needs to add blank rows.
     * @param value - The value to set.
     */
    setHasBlankRows(value: boolean) : void;
    /**
     * True if the specified PivotTable report's outer-row item, column item, subtotal, and grand total labels use merged cells.
     */
    getMergeLabels() : boolean;
    /**
     * True if the specified PivotTable report's outer-row item, column item, subtotal, and grand total labels use merged cells.
     * @param value - The value to set.
     */
    setMergeLabels(value: boolean) : void;
    /**
     * Indicates whether formatting is preserved when the PivotTable is refreshed or recalculated.
     */
    getPreserveFormatting() : boolean;
    /**
     * Indicates whether formatting is preserved when the PivotTable is refreshed or recalculated.
     * @param value - The value to set.
     */
    setPreserveFormatting(value: boolean) : void;
    /**
     * Gets and sets whether showing expand/collapse buttons.
     */
    getShowDrill() : boolean;
    /**
     * Gets and sets whether showing expand/collapse buttons.
     * @param value - The value to set.
     */
    setShowDrill(value: boolean) : void;
    /**
     * Gets whether drilldown is enabled.
     */
    getEnableDrilldown() : boolean;
    /**
     * Gets whether drilldown is enabled.
     * @param value - The value to set.
     */
    setEnableDrilldown(value: boolean) : void;
    /**
     * Indicates whether the PivotTable Field dialog box is available
     * when the user double-clicks the PivotTable field.
     */
    getEnableFieldDialog() : boolean;
    /**
     * Indicates whether the PivotTable Field dialog box is available
     * when the user double-clicks the PivotTable field.
     * @param value - The value to set.
     */
    setEnableFieldDialog(value: boolean) : void;
    /**
     * Gets whether enable the field list for the PivotTable.
     */
    getEnableFieldList() : boolean;
    /**
     * Gets whether enable the field list for the PivotTable.
     * @param value - The value to set.
     */
    setEnableFieldList(value: boolean) : void;
    /**
     * Indicates whether the PivotTable Wizard is available.
     */
    getEnableWizard() : boolean;
    /**
     * Indicates whether the PivotTable Wizard is available.
     * @param value - The value to set.
     */
    setEnableWizard(value: boolean) : void;
    /**
     * Indicates whether hidden page field items in the PivotTable report
     * are included in row and column subtotals, block totals, and grand totals.
     * The default value is False.
     */
    getSubtotalHiddenPageItems() : boolean;
    /**
     * Indicates whether hidden page field items in the PivotTable report
     * are included in row and column subtotals, block totals, and grand totals.
     * The default value is False.
     * @param value - The value to set.
     */
    setSubtotalHiddenPageItems(value: boolean) : void;
    /**
     * Returns the text string label that is displayed in the grand total column or row heading.
     * The default value is the string "Grand Total".
     */
    getGrandTotalName() : string;
    /**
     * Returns the text string label that is displayed in the grand total column or row heading.
     * The default value is the string "Grand Total".
     * @param value - The value to set.
     */
    setGrandTotalName(value: string) : void;
    /**
     * Indicates whether the PivotTable report is recalculated only at the user's request.
     */
    getManualUpdate() : boolean;
    /**
     * Indicates whether the PivotTable report is recalculated only at the user's request.
     * @param value - The value to set.
     */
    setManualUpdate(value: boolean) : void;
    /**
     * Specifies a boolean value that indicates whether the fields of a PivotTable can have multiple filters set on them.
     */
    isMultipleFieldFilters() : boolean;
    /**
     * Specifies a boolean value that indicates whether the fields of a PivotTable can have multiple filters set on them.
     * @param value - The value to set.
     */
    setIsMultipleFieldFilters(value: boolean) : void;
    /**
     * Specifies a boolean value that indicates whether the fields of a PivotTable can have multiple filters set on them.
     */
    getMissingItemsLimit() : PivotMissingItemLimitType;
    /**
     * Specifies a boolean value that indicates whether the fields of a PivotTable can have multiple filters set on them.
     * @param value - The value to set.
     */
    setMissingItemsLimit(value: PivotMissingItemLimitType) : void;
    /**
     * Specifies a boolean value that indicates whether the user is allowed to edit the cells in the data area of the pivottable.
     * Enable cell editing in the values area
     */
    getEnableDataValueEditing() : boolean;
    /**
     * Specifies a boolean value that indicates whether the user is allowed to edit the cells in the data area of the pivottable.
     * Enable cell editing in the values area
     * @param value - The value to set.
     */
    setEnableDataValueEditing(value: boolean) : void;
    /**
     * Specifies a boolean value that indicates whether tooltips should be displayed for PivotTable data cells.
     */
    getShowDataTips() : boolean;
    /**
     * Specifies a boolean value that indicates whether tooltips should be displayed for PivotTable data cells.
     * @param value - The value to set.
     */
    setShowDataTips(value: boolean) : void;
    /**
     * Specifies a boolean value that indicates whether member property information should be omitted from PivotTable tooltips.
     */
    getShowMemberPropertyTips() : boolean;
    /**
     * Specifies a boolean value that indicates whether member property information should be omitted from PivotTable tooltips.
     * @param value - The value to set.
     */
    setShowMemberPropertyTips(value: boolean) : void;
    /**
     * Specifies a boolean value that indicates whether show values row.
     * show the values row
     */
    getShowValuesRow() : boolean;
    /**
     * Specifies a boolean value that indicates whether show values row.
     * show the values row
     * @param value - The value to set.
     */
    setShowValuesRow(value: boolean) : void;
    /**
     * Specifies a boolean value that indicates whether to include empty columns in the table
     */
    getShowEmptyCol() : boolean;
    /**
     * Specifies a boolean value that indicates whether to include empty columns in the table
     * @param value - The value to set.
     */
    setShowEmptyCol(value: boolean) : void;
    /**
     * Specifies a boolean value that indicates whether to include empty rows in the table.
     */
    getShowEmptyRow() : boolean;
    /**
     * Specifies a boolean value that indicates whether to include empty rows in the table.
     * @param value - The value to set.
     */
    setShowEmptyRow(value: boolean) : void;
    /**
     * Indicates whether fields in the PivotTable are sorted in non-default order in the field list.
     */
    getFieldListSortAscending() : boolean;
    /**
     * Indicates whether fields in the PivotTable are sorted in non-default order in the field list.
     * @param value - The value to set.
     */
    setFieldListSortAscending(value: boolean) : void;
    /**
     * Specifies a boolean value that indicates whether drill indicators should be printed.
     * print expand/collapse buttons when displayed on pivottable.
     */
    getPrintDrill() : boolean;
    /**
     * Specifies a boolean value that indicates whether drill indicators should be printed.
     * print expand/collapse buttons when displayed on pivottable.
     * @param value - The value to set.
     */
    setPrintDrill(value: boolean) : void;
    /**
     * Gets the title of the altertext
     */
    getAltTextTitle() : string;
    /**
     * Gets the title of the altertext
     * @param value - The value to set.
     */
    setAltTextTitle(value: string) : void;
    /**
     * Gets the description of the alt text
     */
    getAltTextDescription() : string;
    /**
     * Gets the description of the alt text
     * @param value - The value to set.
     */
    setAltTextDescription(value: string) : void;
    /**
     * Gets the name of the PivotTable
     */
    getName() : string;
    /**
     * Gets the name of the PivotTable
     * @param value - The value to set.
     */
    setName(value: string) : void;
    /**
     * Gets the Column Header Caption of the PivotTable.
     */
    getColumnHeaderCaption() : string;
    /**
     * Gets the Column Header Caption of the PivotTable.
     * @param value - The value to set.
     */
    setColumnHeaderCaption(value: string) : void;
    /**
     * Specifies the indentation increment for compact axis and can be used to set the Report Layout to Compact Form.
     */
    getIndent() : number;
    /**
     * Specifies the indentation increment for compact axis and can be used to set the Report Layout to Compact Form.
     * @param value - The value to set.
     */
    setIndent(value: number) : void;
    /**
     * Gets the Row Header Caption of the PivotTable.
     */
    getRowHeaderCaption() : string;
    /**
     * Gets the Row Header Caption of the PivotTable.
     * @param value - The value to set.
     */
    setRowHeaderCaption(value: string) : void;
    /**
     * Indicates whether row header caption is shown in the PivotTable report
     * Indicates whether Display field captions and filter drop downs
     */
    getShowRowHeaderCaption() : boolean;
    /**
     * Indicates whether row header caption is shown in the PivotTable report
     * Indicates whether Display field captions and filter drop downs
     * @param value - The value to set.
     */
    setShowRowHeaderCaption(value: boolean) : void;
    /**
     * Indicates whether consider built-in custom list when sort data
     */
    getCustomListSort() : boolean;
    /**
     * Indicates whether consider built-in custom list when sort data
     * @param value - The value to set.
     */
    setCustomListSort(value: boolean) : void;
    /**
     * Gets the Format Conditions of the pivot table.
     */
    getPivotFormatConditions() : PivotFormatConditionCollection;
    /**
     * Gets the order in which page fields are added to the PivotTable report's layout.
     */
    getPageFieldOrder() : PrintOrderType;
    /**
     * Gets the order in which page fields are added to the PivotTable report's layout.
     * @param value - The value to set.
     */
    setPageFieldOrder(value: PrintOrderType) : void;
    /**
     * Gets the number of page fields in each column or row in the PivotTable report.
     */
    getPageFieldWrapCount() : number;
    /**
     * Gets the number of page fields in each column or row in the PivotTable report.
     * @param value - The value to set.
     */
    setPageFieldWrapCount(value: number) : void;
    /**
     * Gets a string saved with the PivotTable report.
     */
    getTag() : string;
    /**
     * Gets a string saved with the PivotTable report.
     * @param value - The value to set.
     */
    setTag(value: string) : void;
    /**
     * Indicates whether data for the PivotTable report is saved with the workbook.
     */
    getSaveData() : boolean;
    /**
     * Indicates whether data for the PivotTable report is saved with the workbook.
     * @param value - The value to set.
     */
    setSaveData(value: boolean) : void;
    /**
     * Indicates whether Refresh Data when Opening File.
     */
    getRefreshDataOnOpeningFile() : boolean;
    /**
     * Indicates whether Refresh Data when Opening File.
     * @param value - The value to set.
     */
    setRefreshDataOnOpeningFile(value: boolean) : void;
    /**
     * Indicates whether Refreshing Data or not.
     */
    getRefreshDataFlag() : boolean;
    /**
     * Indicates whether Refreshing Data or not.
     * @param value - The value to set.
     */
    setRefreshDataFlag(value: boolean) : void;
    /**
     * Gets the external connection data source.
     */
    getExternalConnectionDataSource() : ExternalConnection;
    /**
     * Gets and sets the data source of the pivot table.
     */
    getDataSource() : string[];
    /**
     * Gets and sets the data source of the pivot table.
     * @param value - The value to set.
     */
    setDataSource(value: string[]) : void;
    /**
     * Gets the collection of formats applied to PivotTable.
     */
    getPivotFormats() : PivotTableFormatCollection;
    /**
     * Indicates whether PivotItem names should be repeated at the top of each printed page.
     */
    getItemPrintTitles() : boolean;
    /**
     * Indicates whether PivotItem names should be repeated at the top of each printed page.
     * @param value - The value to set.
     */
    setItemPrintTitles(value: boolean) : void;
    /**
     * Indicates whether the print titles for the worksheet are set based
     * on the PivotTable report. The default value is false.
     */
    getPrintTitles() : boolean;
    /**
     * Indicates whether the print titles for the worksheet are set based
     * on the PivotTable report. The default value is false.
     * @param value - The value to set.
     */
    setPrintTitles(value: boolean) : void;
    /**
     * Indicates whether items in the row and column areas are visible
     * when the data area of the PivotTable is empty. The default value is true.
     */
    getDisplayImmediateItems() : boolean;
    /**
     * Indicates whether items in the row and column areas are visible
     * when the data area of the PivotTable is empty. The default value is true.
     * @param value - The value to set.
     */
    setDisplayImmediateItems(value: boolean) : void;
    /**
     * Indicates whether this PivotTable is selected.
     */
    isSelected() : boolean;
    /**
     * Indicates whether this PivotTable is selected.
     * @param value - The value to set.
     */
    setIsSelected(value: boolean) : void;
    /**
     * Indicates whether the row header in the pivot table should have the style applied.
     */
    getShowPivotStyleRowHeader() : boolean;
    /**
     * Indicates whether the row header in the pivot table should have the style applied.
     * @param value - The value to set.
     */
    setShowPivotStyleRowHeader(value: boolean) : void;
    /**
     * Indicates whether the column header in the pivot table should have the style applied.
     */
    getShowPivotStyleColumnHeader() : boolean;
    /**
     * Indicates whether the column header in the pivot table should have the style applied.
     * @param value - The value to set.
     */
    setShowPivotStyleColumnHeader(value: boolean) : void;
    /**
     * Indicates whether row stripe formatting is applied.
     */
    getShowPivotStyleRowStripes() : boolean;
    /**
     * Indicates whether row stripe formatting is applied.
     * @param value - The value to set.
     */
    setShowPivotStyleRowStripes(value: boolean) : void;
    /**
     * Indicates whether stripe formatting is applied for column.
     */
    getShowPivotStyleColumnStripes() : boolean;
    /**
     * Indicates whether stripe formatting is applied for column.
     * @param value - The value to set.
     */
    setShowPivotStyleColumnStripes(value: boolean) : void;
    /**
     * Indicates whether the column formatting is applied.
     */
    getShowPivotStyleLastColumn() : boolean;
    /**
     * Indicates whether the column formatting is applied.
     * @param value - The value to set.
     */
    setShowPivotStyleLastColumn(value: boolean) : void;
    /**
     * Performs application-defined tasks associated with freeing, releasing, or
     * resetting unmanaged resources.
     */
    dispose() : void;
    /**
     * Copies named style from another pivot table.
     * @param pivotTable - Source pivot table.
     */
    copyStyle(pivotTable: PivotTable) : void;
    /**
     * Show all the report filter pages according to PivotField, the PivotField must be located in the PageFields.
     * @param pageField - The PivotField object
     */
    showReportFilterPage(pageField: PivotField) : void;
    /**
     * Show all the report filter pages according to PivotField's name, the PivotField must be located in the PageFields.
     * @param fieldName - The name of PivotField
     */
    showReportFilterPageByName(fieldName: string) : void;
    /**
     * Show all the report filter pages according to the position index in the PageFields
     * @param posIndex - The position index in the PageFields
     */
    showReportFilterPageByIndex(posIndex: number) : void;
    /**
     * Removes a field from specific field area
     * @param fieldType - The fields area type.
     * @param fieldName - The name in the base fields.
     */
    removeField(fieldType: PivotFieldType, fieldName: string) : void;
    /**
     * Removes a field from specific field area
     * @param fieldType - The fields area type.
     * @param baseFieldIndex - The field index in the base fields.
     */
    removeField(fieldType: PivotFieldType, baseFieldIndex: number) : void;
    /**
     * Remove field from specific field area
     * @param fieldType - the fields area type.
     * @param pivotField - the field in the base fields.
     */
    removeField(fieldType: PivotFieldType, pivotField: PivotField) : void;
    /**
     * Adds the field to the specific area.
     * @param fieldType - The fields area type.
     * @param fieldName - The name in the base fields.
     * @returns
     * The field position in the specific fields.If there is no field named as it, return -1.
     */
    addFieldToArea(fieldType: PivotFieldType, fieldName: string) : number;
    /**
     * Adds the field to the specific area.
     * @param fieldType - The fields area type.
     * @param baseFieldIndex - The field index in the base fields.
     * @returns
     * The field position in the specific fields.
     */
    addFieldToArea(fieldType: PivotFieldType, baseFieldIndex: number) : number;
    /**
     * Adds the field to the specific area.
     * @param fieldType - the fields area type.
     * @param pivotField - the field in the base fields.
     * @returns
     * the field position in the specific fields.
     */
    addFieldToArea(fieldType: PivotFieldType, pivotField: PivotField) : number;
    /**
     * Adds a calculated field to pivot field.
     * @param name - The name of the calculated field
     * @param formula - The formula of the calculated field.
     * @param dragToDataArea - True,drag this field to data area immediately
     */
    addCalculatedField(name: string, formula: string, dragToDataArea: boolean) : void;
    /**
     * Adds a calculated field to pivot field and drag it to data area.
     * @param name - The name of the calculated field
     * @param formula - The formula of the calculated field.
     */
    addCalculatedField(name: string, formula: string) : void;
    /**
     * Gets the specific pivot field list by the region.
     * @param fieldType - the region type.
     * @returns
     * the specific pivot field collection
     */
    getFields(fieldType: PivotFieldType) : PivotFieldCollection;
    /**
     * Moves the PivotTable to a different location in the worksheet.
     * @param row - row index.
     * @param column - column index.
     */
    move(row: number, column: number) : void;
    /**
     * Moves the PivotTable to a different location in the worksheet.
     * @param destCellName - the dest cell name.
     */
    move(destCellName: string) : void;
    /**
     * Set pivottable's source data.
     * Sheet1!$A$1:$C$3
     */
    changeDataSource(source: string[]) : void;
    /**
     * Get pivottable's source data.
     */
    getSource() : string[];
    /**
     * Refreshes pivottable's data and setting from it's data source.
     * 
     * @remarks
     * We will gather data from data source to a pivot cache ,then calculate the data in the cache to the cells.
     * This method is only used to gather all data to a pivot cache.
     */
    refreshData() : void;
    /**
     * Refreshes pivottable's data and setting from it's data source with options.
     * @param option - The options for refreshing data source of pivot table.
     */
    refreshData(option: PivotTableRefreshOption) : void;
    /**
     * Calculates pivottable's data to cells.
     * 
     * @remarks
     * Cell.Value in the pivot range could not return the correct result if the method is not been called.
     * This method calculates data with an inner pivot cache,not original data source.
     * So if the data source is changed, please call RefreshData() method first.
     */
    calculateData() : void;
    /**
     * Calculating pivot tables with options
     * @param option - 
     */
    calculateData(option: PivotTableCalculateOption) : void;
    /**
     * Clear PivotTable's data and formatting
     * 
     * @remarks
     * If this method is not called before you add or delete PivotField, Maybe the PivotTable data is not corrected
     */
    clearData() : void;
    /**
     * Calculates pivottable's range.
     * 
     * @remarks
     * If this method is not been called,maybe the pivottable range is not corrected.
     */
    calculateRange() : void;
    /**
     * Format all the cell in the pivottable area
     * @param style - Style which is to format
     */
    formatAll(style: Style) : void;
    /**
     * Format the row data in the pivottable area
     * @param row - Row Index of the Row object
     * @param style - Style which is to format
     */
    formatRow(row: number, style: Style) : void;
    /**
     * Formats selected area of the PivotTable.
     * @param pivotArea - 
     * @param style - 
     */
    format(pivotArea: PivotArea, style: Style) : void;
    /**
     * Format the cell in the pivottable area
     * @param row - Row Index of the cell
     * @param column - Column index of the cell
     * @param style - Style which is to format the cell
     */
    format(row: number, column: number, style: Style) : void;
    /**
     * Layouts the PivotTable in compact form.
     */
    showInCompactForm() : void;
    /**
     * Layouts the PivotTable in outline form.
     */
    showInOutlineForm() : void;
    /**
     * Layouts the PivotTable in tabular form.
     */
    showInTabularForm() : void;
    /**
     * Gets the <see cref="Cell"/> object by the display name of PivotField.
     * @param displayName - the DisplayName of PivotField
     * @returns
     * the Cell object
     */
    getCellByDisplayName(displayName: string) : Cell;
    /**
     * Gets the Children Pivot Tables which use this PivotTable data as data source.
     * @returns
     * the PivotTable array object
     */
    getChildren() : PivotTable[];
}

/**
 * Strategy option for duplicate names of columns.
 * 
 * @remarks
 * When processing data with headers, some scenarios require the headers to be no duplication for all columns.
 * For example, when exporting data to a datatable and the header is required to be taken as datatable's column name,
 * duplicated values of the header are invalid.
 * For such kind of situations, user may determine how to handle them by specifying this strategy.
 */
export enum RenameStrategy {
    /**
     * Throws exception.
     */
    Exception = 0,
    /**
     * Named with digit. Duplicated names will become ...1, ...2, etc.
     */
    Digit = 1,
    /**
     * Named with letter.. Duplicated names will become ...A, ...B, etc.
     */
    Letter = 2,
}

/**
 * Specifies how to handle formatting from the HTML source
 */
export enum HtmlFormatHandlingType {
    /**
     * Transfer all HTML formatting into the worksheet along with data.
     */
    All = 0,
    /**
     * Bring data in as unformatted text (setting data types still occurs).
     */
    None = 1,
    /**
     * Translate HTML formatting to rich text formatting on the data brought into the worksheet.
     */
    Rtf = 2,
}

/**
 * Specifies a type of optimization.
 */
export enum PdfOptimizationType {
    /**
     * High print quality
     */
    Standard = 0,
    /**
     * File size is more important than print quality
     * 
     * @remarks
     * Font Arial and Times New Roman with characters 32-127 will not be embedded in pdf.
     * Border lines are optimized for smaller file size.
     */
    MinimumSize = 1,
}

/**
 * Specifies the unit of measurement.
 */
export enum CellsUnitType {
    /**
     * Measurement is in pixels.
     */
    Pixel = 1,
    /**
     * Measurement is in points. A point represents 1/72 of an inch.
     */
    Point = 2,
    /**
     * Measurement is in inches.
     */
    Inch = 4,
    /**
     * Measurement is in centimeters.
     */
    Cm = 6,
    /**
     * In unit of characters.
     * 
     * @remarks
     * Only for width.
     */
    Character = 7,
}

/**
 * Represents the options of loading metadata of the file.
 */
export class MetadataOptions {
    /**
     * Creates an options of loading the metadata.
     * @param metadataType - The type of metadata.
     */
    constructor(metadataType: MetadataType);
    /**
     * Gets and sets the type of the metadata which is loading.
     */
    getMetadataType() : MetadataType;
    /**
     * Represents Workbook file encryption password.
     */
    getPassword() : string;
    /**
     * Represents Workbook file encryption password.
     * @param value - The value to set.
     */
    setPassword(value: string) : void;
    /**
     * The key length.
     */
    getKeyLength() : number;
    /**
     * The key length.
     * @param value - The value to set.
     */
    setKeyLength(value: number) : void;
}

/**
 * Represents the type of metadata.
 */
export enum MetadataType {
    /**
     * Encrypts the file.
     */
    Encryption = 1,
    /**
     * Decrypts the file.
     */
    Decryption = 2,
    /**
     * Load the properties of the file.
     */
    Document_Properties = 4,
}

/**
 * Represents the meta data.
 */
export class WorkbookMetadata {
    /**
     * Create the meta data object.
     * @param fileName - 
     * @param options - 
     */
    constructor(fileName: string, options: MetadataOptions);
    /**
     * Create the meta data object.
     * @param stream - 
     * @param options - 
     */
    constructor(stream: Uint8Array, options: MetadataOptions);
    /**
     * Gets the options of the metadata.
     */
    getOptions() : MetadataOptions;
    /**
     * Returns a <see cref="DocumentProperty"/> collection that represents all the  built-in document properties of the spreadsheet.
     */
    getBuiltInDocumentProperties() : BuiltInDocumentPropertyCollection;
    /**
     * Returns a <see cref="DocumentProperty"/> collection that represents all the custom document properties of the spreadsheet.
     */
    getCustomDocumentProperties() : CustomDocumentPropertyCollection;
    /**
     * Save the modified metadata to the file.
     * @param fileName - The file name.
     */
    save(fileName: string) : void;
    /**
     * Save the modified metadata to the stream.
     * @param stream - The stream.
     */
    save(stream: Uint8Array) : void;
}

/**
 * Specifies how to apply style for the value of the cell.
 */
export enum CellValueFormatStrategy {
    /**
     * Not formatted.
     */
    None = 0,
    /**
     * Only formatted with the cell's original style.
     */
    CellStyle = 1,
    /**
     * Formatted with the cell's displayed style.
     */
    DisplayStyle = 2,
    /**
     * Gets the displayed string shown in ms excel.
     * The main difference from <see cref="DisplayStyle"/> is this option also considers the effect of column width.
     * If the column width is too small to show the formatted string completely,
     * "#" may be shown, just like what ms excel does.
     */
    DisplayString = 3,
}

/**
 * Represents a complex type that specifies the pivot controls that appear on the chart
 */
export class PivotOptions {
    /**
     * Specifies whether a control for each PivotTable field on the PivotTable page axis
     * of the source PivotTable appears on the chart when dropZonesVisible is set to true.
     */
    getDropZoneFilter() : boolean;
    /**
     * Specifies whether a control for each PivotTable field on the PivotTable page axis
     * of the source PivotTable appears on the chart when dropZonesVisible is set to true.
     * @param value - The value to set.
     */
    setDropZoneFilter(value: boolean) : void;
    /**
     * Specifies whether a control for each PivotTable field on the PivotTable row axis
     * of the source PivotTable appears on the chart when dropZonesVisible is set to true.
     */
    getDropZoneCategories() : boolean;
    /**
     * Specifies whether a control for each PivotTable field on the PivotTable row axis
     * of the source PivotTable appears on the chart when dropZonesVisible is set to true.
     * @param value - The value to set.
     */
    setDropZoneCategories(value: boolean) : void;
    /**
     * Specifies whether a control for each PivotTable field on the PivotTable data axis
     * of the source PivotTable appears on the chart when dropZonesVisible is set to true.
     */
    getDropZoneData() : boolean;
    /**
     * Specifies whether a control for each PivotTable field on the PivotTable data axis
     * of the source PivotTable appears on the chart when dropZonesVisible is set to true.
     * @param value - The value to set.
     */
    setDropZoneData(value: boolean) : void;
    /**
     * Specifies whether a control for each PivotTable field on the PivotTable column axis
     * of the source PivotTable appears on the chart when dropZonesVisible is set to true.
     */
    getDropZoneSeries() : boolean;
    /**
     * Specifies whether a control for each PivotTable field on the PivotTable column axis
     * of the source PivotTable appears on the chart when dropZonesVisible is set to true.
     * @param value - The value to set.
     */
    setDropZoneSeries(value: boolean) : void;
    /**
     * Specifies whether any pivot controls can appear on the pivot chart.
     */
    getDropZonesVisible() : boolean;
    /**
     * Specifies whether any pivot controls can appear on the pivot chart.
     * @param value - The value to set.
     */
    setDropZonesVisible(value: boolean) : void;
}

/**
 * Represents the persistence method to persist an ActiveX control.
 */
export enum ActiveXPersistenceType {
    /**
     * The data is stored as xml data.
     */
    PropertyBag = 0,
    /**
     * The data is stored as a storage binary data.
     */
    Storage = 1,
    /**
     * The data is stored as a stream binary data.
     */
    Stream = 2,
    /**
     * The data is stored as a streaminit binary data.
     */
    StreamInit = 3,
}

/**
 * Represents the symbol displayed on the drop button.
 */
export enum DropButtonStyle {
    /**
     * Displays a button with no symbol.
     */
    Plain = 0,
    /**
     * Displays a button with a down arrow.
     */
    Arrow = 1,
    /**
     * Displays a button with an ellipsis (...).
     */
    Ellipsis = 2,
    /**
     * Displays a button with a horizontal line like an underscore character.
     */
    Reduce = 3,
}

/**
 * Specifies when to show the drop button
 */
export enum ShowDropButtonType {
    /**
     * Never show the drop button.
     */
    Never = 0,
    /**
     * Show the drop button when the control has the focus.
     */
    Focus = 1,
    /**
     * Always show the drop button.
     */
    Always = 2,
}

/**
 * Represents the ActiveX control.
 */
export class ActiveXControl extends ActiveXControlBase {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: ActiveXControlBase);
    /**
     * Indicates whether the control can receive the focus and respond to user-generated events.
     */
    isEnabled() : boolean;
    /**
     * Indicates whether the control can receive the focus and respond to user-generated events.
     * @param value - The value to set.
     */
    setIsEnabled(value: boolean) : void;
    /**
     * Indicates whether data in the control is locked for editing.
     */
    isLocked() : boolean;
    /**
     * Indicates whether data in the control is locked for editing.
     * @param value - The value to set.
     */
    setIsLocked(value: boolean) : void;
    /**
     * Indicates whether the control is transparent.
     */
    isTransparent() : boolean;
    /**
     * Indicates whether the control is transparent.
     * @param value - The value to set.
     */
    setIsTransparent(value: boolean) : void;
    /**
     * Indicates whether the control will automatically resize to display its entire contents.
     */
    isAutoSize() : boolean;
    /**
     * Indicates whether the control will automatically resize to display its entire contents.
     * @param value - The value to set.
     */
    setIsAutoSize(value: boolean) : void;
    /**
     * Gets and sets the default run-time mode of the Input Method Editor for the control as it receives focus.
     */
    getIMEMode() : InputMethodEditorMode;
    /**
     * Gets and sets the default run-time mode of the Input Method Editor for the control as it receives focus.
     * @param value - The value to set.
     */
    setIMEMode(value: InputMethodEditorMode) : void;
    /**
     * Represents the font of the control.
     */
    getFont() : Font;
    /**
     * Represents how to align the text used by the control.
     */
    getTextAlign() : TextAlignmentType;
    /**
     * Represents how to align the text used by the control.
     * @param value - The value to set.
     */
    setTextAlign(value: TextAlignmentType) : void;
    /**
     * Gets and sets the binary data of the control.
     */
    getData() : number[];
}

/**
 * Represents the ActiveX control.
 */
export class ActiveXControlBase {
    /**
     * Gets the <see cref="Workbook"/> object.
     */
    getWorkbook() : Workbook;
    /**
     * Gets the type of the ActiveX control.
     */
    getType() : ControlType;
    /**
     * Gets and sets the width of the control in unit of points.
     */
    getWidth() : number;
    /**
     * Gets and sets the width of the control in unit of points.
     * @param value - The value to set.
     */
    setWidth(value: number) : void;
    /**
     * Gets and sets the height of the control in unit of points.
     */
    getHeight() : number;
    /**
     * Gets and sets the height of the control in unit of points.
     * @param value - The value to set.
     */
    setHeight(value: number) : void;
    /**
     * Gets and sets a custom icon to display as the mouse pointer for the control.
     */
    getMouseIcon() : number[];
    /**
     * Gets and sets a custom icon to display as the mouse pointer for the control.
     * @param value - The value to set.
     */
    setMouseIcon(value: number[]) : void;
    /**
     * Gets and sets the type of icon displayed as the mouse pointer for the control.
     */
    getMousePointer() : ControlMousePointerType;
    /**
     * Gets and sets the type of icon displayed as the mouse pointer for the control.
     * @param value - The value to set.
     */
    setMousePointer(value: ControlMousePointerType) : void;
    /**
     * Gets and sets the ole color of the foreground.
     * 
     * @remarks
     * Not applies to Image control.
     */
    getForeOleColor() : number;
    /**
     * Gets and sets the ole color of the foreground.
     * @param value - The value to set.
     * 
     * @remarks
     * Not applies to Image control.
     */
    setForeOleColor(value: number) : void;
    /**
     * Gets and sets the ole color of the background.
     */
    getBackOleColor() : number;
    /**
     * Gets and sets the ole color of the background.
     * @param value - The value to set.
     */
    setBackOleColor(value: number) : void;
    /**
     * Indicates whether this control is visible.
     */
    isVisible() : boolean;
    /**
     * Indicates whether this control is visible.
     * @param value - The value to set.
     */
    setIsVisible(value: boolean) : void;
    /**
     * Indicates whether to show a shadow.
     */
    getShadow() : boolean;
    /**
     * Indicates whether to show a shadow.
     * @param value - The value to set.
     */
    setShadow(value: boolean) : void;
    /**
     * Gets and sets the linked cell.
     */
    getLinkedCell() : string;
    /**
     * Gets and sets the linked cell.
     * @param value - The value to set.
     */
    setLinkedCell(value: string) : void;
    /**
     * Gets and sets the list fill range.
     */
    getListFillRange() : string;
    /**
     * Gets and sets the list fill range.
     * @param value - The value to set.
     */
    setListFillRange(value: string) : void;
    /**
     * Gets and sets the binary data of the control.
     */
    getData() : number[];
}

/**
 * Represents the border type of the ActiveX control.
 */
export enum ControlBorderType {
    /**
     * No border.
     */
    None = 0,
    /**
     * The single line.
     */
    Single = 1,
}

/**
 * Represents the default run-time mode of the Input Method Editor.
 */
export enum InputMethodEditorMode {
    /**
     * Does not control IME.
     */
    NoControl = 0,
    /**
     * IME on.
     */
    On = 1,
    /**
     * IME off. English mode.
     */
    Off = 2,
    /**
     * IME off.User can't turn on IME by keyboard.
     */
    Disable = 3,
    /**
     * IME on with Full-width hiragana mode.
     */
    Hiragana = 4,
    /**
     * IME on with Full-width katakana mode.
     */
    Katakana = 5,
    /**
     * IME on with Half-width katakana mode.
     */
    KatakanaHalf = 6,
    /**
     * IME on with Full-width Alphanumeric mode.
     */
    AlphaFull = 7,
    /**
     * IME on with Half-width Alphanumeric mode.
     */
    Alpha = 8,
    /**
     * IME on with Full-width hangul mode.
     */
    HangulFull = 9,
    /**
     * IME on with Half-width hangul mode.
     */
    Hangul = 10,
    /**
     * IME on with Full-width hanzi mode.
     */
    HanziFull = 11,
    /**
     * IME on with Half-width hanzi mode.
     */
    Hanzi = 12,
}

/**
 * Represents the position of the Caption relative to the control.
 */
export enum ControlCaptionAlignmentType {
    /**
     * The left of the control.
     */
    Left = 0,
    /**
     * The right of the control.
     */
    Right = 1,
}

/**
 * Represents a CheckBox ActiveX control.
 */
export class CheckBoxActiveXControl extends ActiveXControl {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: ActiveXControl);
    /**
     * Gets the type of the ActiveX control.
     */
    getType() : ControlType;
    /**
     * Gets and sets the group's name.
     */
    getGroupName() : string;
    /**
     * Gets and sets the group's name.
     * @param value - The value to set.
     */
    setGroupName(value: string) : void;
    /**
     * Gets and set the position of the Caption relative to the control.
     */
    getAlignment() : ControlCaptionAlignmentType;
    /**
     * Gets and set the position of the Caption relative to the control.
     * @param value - The value to set.
     */
    setAlignment(value: ControlCaptionAlignmentType) : void;
    /**
     * Indicates whether the contents of the control automatically wrap at the end of a line.
     */
    isWordWrapped() : boolean;
    /**
     * Indicates whether the contents of the control automatically wrap at the end of a line.
     * @param value - The value to set.
     */
    setIsWordWrapped(value: boolean) : void;
    /**
     * Gets and set the descriptive text that appears on a control.
     */
    getCaption() : string;
    /**
     * Gets and set the descriptive text that appears on a control.
     * @param value - The value to set.
     */
    setCaption(value: string) : void;
    /**
     * Gets and set the location of the control's picture relative to its caption.
     */
    getPicturePosition() : ControlPicturePositionType;
    /**
     * Gets and set the location of the control's picture relative to its caption.
     * @param value - The value to set.
     */
    setPicturePosition(value: ControlPicturePositionType) : void;
    /**
     * Gets and sets the special effect of the control.
     */
    getSpecialEffect() : ControlSpecialEffectType;
    /**
     * Gets and sets the special effect of the control.
     * @param value - The value to set.
     */
    setSpecialEffect(value: ControlSpecialEffectType) : void;
    /**
     * Gets and sets the data of the picture.
     */
    getPicture() : number[];
    /**
     * Gets and sets the data of the picture.
     * @param value - The value to set.
     */
    setPicture(value: number[]) : void;
    /**
     * Gets and sets the accelerator key for the control.
     */
    getAccelerator() : string;
    /**
     * Gets and sets the accelerator key for the control.
     * @param value - The value to set.
     */
    setAccelerator(value: string) : void;
    /**
     * Indicates if the control is checked or not.
     */
    getValue() : CheckValueType;
    /**
     * Indicates if the control is checked or not.
     * @param value - The value to set.
     */
    setValue(value: CheckValueType) : void;
    /**
     * Indicates how the specified control will display Null values.
     * 
     * @remarks
     * <list type="table">
     * <listheader>
     * <description>Setting</description>
     * <description>Description</description>
     * </listheader>
     * <item>
     * <description>True</description>
     * <description>The control will cycle through states for Yes, No, and Null values. The control appears dimmed (grayed) when its Value property is set to Null.</description>
     * </item>
     * <item>
     * <description>False</description>
     * <description>(Default) The control will cycle through states for Yes and No values. Null values display as if they were No values.</description>
     * </item>
     * </list>
     */
    isTripleState() : boolean;
    /**
     * Indicates how the specified control will display Null values.
     * @param value - The value to set.
     * 
     * @remarks
     * <list type="table">
     * <listheader>
     * <description>Setting</description>
     * <description>Description</description>
     * </listheader>
     * <item>
     * <description>True</description>
     * <description>The control will cycle through states for Yes, No, and Null values. The control appears dimmed (grayed) when its Value property is set to Null.</description>
     * </item>
     * <item>
     * <description>False</description>
     * <description>(Default) The control will cycle through states for Yes and No values. Null values display as if they were No values.</description>
     * </item>
     * </list>
     */
    setIsTripleState(value: boolean) : void;
}

/**
 * Represents a ComboBox ActiveX control.
 */
export class ComboBoxActiveXControl extends ActiveXControl {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: ActiveXControl);
    /**
     * Gets the type of the ActiveX control.
     */
    getType() : ControlType;
    /**
     * Gets and sets the maximum number of characters
     */
    getMaxLength() : number;
    /**
     * Gets and sets the maximum number of characters
     * @param value - The value to set.
     */
    setMaxLength(value: number) : void;
    /**
     * Gets and set the width in unit of points.
     */
    getListWidth() : number;
    /**
     * Gets and set the width in unit of points.
     * @param value - The value to set.
     */
    setListWidth(value: number) : void;
    /**
     * Represents how the Value property is determined for a ComboBox or ListBox
     * when the MultiSelect properties value (fmMultiSelectSingle).
     */
    getBoundColumn() : number;
    /**
     * Represents how the Value property is determined for a ComboBox or ListBox
     * when the MultiSelect properties value (fmMultiSelectSingle).
     * @param value - The value to set.
     */
    setBoundColumn(value: number) : void;
    /**
     * Represents the column in a ComboBox or ListBox to display to the user.
     */
    getTextColumn() : number;
    /**
     * Represents the column in a ComboBox or ListBox to display to the user.
     * @param value - The value to set.
     */
    setTextColumn(value: number) : void;
    /**
     * Represents the number of columns to display in a ComboBox or ListBox.
     */
    getColumnCount() : number;
    /**
     * Represents the number of columns to display in a ComboBox or ListBox.
     * @param value - The value to set.
     */
    setColumnCount(value: number) : void;
    /**
     * Represents the maximum number of rows to display in the list.
     */
    getListRows() : number;
    /**
     * Represents the maximum number of rows to display in the list.
     * @param value - The value to set.
     */
    setListRows(value: number) : void;
    /**
     * Indicates how a ListBox or ComboBox searches its list as the user types.
     */
    getMatchEntry() : ControlMatchEntryType;
    /**
     * Indicates how a ListBox or ComboBox searches its list as the user types.
     * @param value - The value to set.
     */
    setMatchEntry(value: ControlMatchEntryType) : void;
    /**
     * Specifies the symbol displayed on the drop button
     */
    getDropButtonStyle() : DropButtonStyle;
    /**
     * Specifies the symbol displayed on the drop button
     * @param value - The value to set.
     */
    setDropButtonStyle(value: DropButtonStyle) : void;
    /**
     * Specifies the symbol displayed on the drop button
     */
    getShowDropButtonTypeWhen() : ShowDropButtonType;
    /**
     * Specifies the symbol displayed on the drop button
     * @param value - The value to set.
     */
    setShowDropButtonTypeWhen(value: ShowDropButtonType) : void;
    /**
     * Gets and sets the visual appearance.
     */
    getListStyle() : ControlListStyle;
    /**
     * Gets and sets the visual appearance.
     * @param value - The value to set.
     */
    setListStyle(value: ControlListStyle) : void;
    /**
     * Gets and set the type of border used by the control.
     */
    getBorderStyle() : ControlBorderType;
    /**
     * Gets and set the type of border used by the control.
     * @param value - The value to set.
     */
    setBorderStyle(value: ControlBorderType) : void;
    /**
     * Gets and sets the ole color of the background.
     */
    getBorderOleColor() : number;
    /**
     * Gets and sets the ole color of the background.
     * @param value - The value to set.
     */
    setBorderOleColor(value: number) : void;
    /**
     * Gets and sets the special effect of the control.
     */
    getSpecialEffect() : ControlSpecialEffectType;
    /**
     * Gets and sets the special effect of the control.
     * @param value - The value to set.
     */
    setSpecialEffect(value: ControlSpecialEffectType) : void;
    /**
     * Indicates whether the user can type into the control.
     */
    isEditable() : boolean;
    /**
     * Indicates whether the user can type into the control.
     * @param value - The value to set.
     */
    setIsEditable(value: boolean) : void;
    /**
     * Indicates whether column headings are displayed.
     */
    getShowColumnHeads() : boolean;
    /**
     * Indicates whether column headings are displayed.
     * @param value - The value to set.
     */
    setShowColumnHeads(value: boolean) : void;
    /**
     * Indicates whether dragging and dropping is enabled for the control.
     */
    isDragBehaviorEnabled() : boolean;
    /**
     * Indicates whether dragging and dropping is enabled for the control.
     * @param value - The value to set.
     */
    setIsDragBehaviorEnabled(value: boolean) : void;
    /**
     * Specifies selection behavior when entering the control.
     * True specifies that the selection remains unchanged from last time the control was active.
     * False specifies that all the text in the control will be selected when entering the control.
     */
    getEnterFieldBehavior() : boolean;
    /**
     * Specifies selection behavior when entering the control.
     * True specifies that the selection remains unchanged from last time the control was active.
     * False specifies that all the text in the control will be selected when entering the control.
     * @param value - The value to set.
     */
    setEnterFieldBehavior(value: boolean) : void;
    /**
     * Specifies the basic unit used to extend a selection.
     * True specifies that the basic unit is a single character.
     * false specifies that the basic unit is a whole word.
     */
    isAutoWordSelected() : boolean;
    /**
     * Specifies the basic unit used to extend a selection.
     * True specifies that the basic unit is a single character.
     * false specifies that the basic unit is a whole word.
     * @param value - The value to set.
     */
    setIsAutoWordSelected(value: boolean) : void;
    /**
     * Indicates whether the user can select a line of text by clicking in the region to the left of the text.
     */
    getSelectionMargin() : boolean;
    /**
     * Indicates whether the user can select a line of text by clicking in the region to the left of the text.
     * @param value - The value to set.
     */
    setSelectionMargin(value: boolean) : void;
    /**
     * Gets and sets the value of the control.
     */
    getValue() : string;
    /**
     * Gets and sets the value of the control.
     * @param value - The value to set.
     */
    setValue(value: string) : void;
    /**
     * Indicates whether selected text in the control appears highlighted when the control does not have focus.
     */
    getHideSelection() : boolean;
    /**
     * Indicates whether selected text in the control appears highlighted when the control does not have focus.
     * @param value - The value to set.
     */
    setHideSelection(value: boolean) : void;
    /**
     * Gets and sets the width of the column.
     */
    getColumnWidths() : number;
    /**
     * Gets and sets the width of the column.
     * @param value - The value to set.
     */
    setColumnWidths(value: number) : void;
}

/**
 * Represents all type of ActiveX control.
 */
export enum ControlType {
    /**
     * Button
     */
    CommandButton = 0,
    /**
     * ComboBox
     */
    ComboBox = 1,
    /**
     * CheckBox
     */
    CheckBox = 2,
    /**
     * ListBox
     */
    ListBox = 3,
    /**
     * TextBox
     */
    TextBox = 4,
    /**
     * Spinner
     */
    SpinButton = 5,
    /**
     * RadioButton
     */
    RadioButton = 6,
    /**
     * Label
     */
    Label = 7,
    /**
     * Image
     */
    Image = 8,
    /**
     * ToggleButton
     */
    ToggleButton = 9,
    /**
     * ScrollBar
     */
    ScrollBar = 10,
    /**
     * ScrollBar
     * 
     * @remarks
     * Unsupported.
     */
    BarCode = 11,
    /**
     * Unknown
     */
    Unknown = 12,
}

/**
 * Represents a command button.
 */
export class CommandButtonActiveXControl extends ActiveXControl {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: ActiveXControl);
    /**
     * Gets the type of the ActiveX control.
     */
    getType() : ControlType;
    /**
     * Gets and set the descriptive text that appears on a control.
     */
    getCaption() : string;
    /**
     * Gets and set the descriptive text that appears on a control.
     * @param value - The value to set.
     */
    setCaption(value: string) : void;
    /**
     * Gets and set the location of the control's picture relative to its caption.
     */
    getPicturePosition() : ControlPicturePositionType;
    /**
     * Gets and set the location of the control's picture relative to its caption.
     * @param value - The value to set.
     */
    setPicturePosition(value: ControlPicturePositionType) : void;
    /**
     * Gets and sets the data of the picture.
     */
    getPicture() : number[];
    /**
     * Gets and sets the data of the picture.
     * @param value - The value to set.
     */
    setPicture(value: number[]) : void;
    /**
     * Gets and sets the accelerator key for the control.
     */
    getAccelerator() : string;
    /**
     * Gets and sets the accelerator key for the control.
     * @param value - The value to set.
     */
    setAccelerator(value: string) : void;
    /**
     * Indicates whether the control takes the focus when clicked.
     */
    getTakeFocusOnClick() : boolean;
    /**
     * Indicates whether the control takes the focus when clicked.
     * @param value - The value to set.
     */
    setTakeFocusOnClick(value: boolean) : void;
    /**
     * Indicates whether the contents of the control automatically wrap at the end of a line.
     */
    isWordWrapped() : boolean;
    /**
     * Indicates whether the contents of the control automatically wrap at the end of a line.
     * @param value - The value to set.
     */
    setIsWordWrapped(value: boolean) : void;
}

/**
 * Represents the image control.
 */
export class ImageActiveXControl extends ActiveXControl {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: ActiveXControl);
    /**
     * Gets the type of the ActiveX control.
     */
    getType() : ControlType;
    /**
     * Indicates whether the control will automatically resize to display its entire contents.
     */
    isAutoSize() : boolean;
    /**
     * Indicates whether the control will automatically resize to display its entire contents.
     * @param value - The value to set.
     */
    setIsAutoSize(value: boolean) : void;
    /**
     * Gets and sets the ole color of the background.
     */
    getBorderOleColor() : number;
    /**
     * Gets and sets the ole color of the background.
     * @param value - The value to set.
     */
    setBorderOleColor(value: number) : void;
    /**
     * Gets and set the type of border used by the control.
     */
    getBorderStyle() : ControlBorderType;
    /**
     * Gets and set the type of border used by the control.
     * @param value - The value to set.
     */
    setBorderStyle(value: ControlBorderType) : void;
    /**
     * Gets and sets how to display the picture.
     */
    getPictureSizeMode() : ControlPictureSizeMode;
    /**
     * Gets and sets how to display the picture.
     * @param value - The value to set.
     */
    setPictureSizeMode(value: ControlPictureSizeMode) : void;
    /**
     * Gets and sets the special effect of the control.
     */
    getSpecialEffect() : ControlSpecialEffectType;
    /**
     * Gets and sets the special effect of the control.
     * @param value - The value to set.
     */
    setSpecialEffect(value: ControlSpecialEffectType) : void;
    /**
     * Gets and sets the data of the picture.
     */
    getPicture() : number[];
    /**
     * Gets and sets the data of the picture.
     * @param value - The value to set.
     */
    setPicture(value: number[]) : void;
    /**
     * Gets and sets the alignment of the picture inside the Form or Image.
     */
    getPictureAlignment() : ControlPictureAlignmentType;
    /**
     * Gets and sets the alignment of the picture inside the Form or Image.
     * @param value - The value to set.
     */
    setPictureAlignment(value: ControlPictureAlignmentType) : void;
    /**
     * Indicates whether the picture is tiled across the background.
     */
    isTiled() : boolean;
    /**
     * Indicates whether the picture is tiled across the background.
     * @param value - The value to set.
     */
    setIsTiled(value: boolean) : void;
}

/**
 * Represents the label ActiveX control.
 */
export class LabelActiveXControl extends ActiveXControl {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: ActiveXControl);
    /**
     * Gets the type of the ActiveX control.
     */
    getType() : ControlType;
    /**
     * Gets and set the descriptive text that appears on a control.
     */
    getCaption() : string;
    /**
     * Gets and set the descriptive text that appears on a control.
     * @param value - The value to set.
     */
    setCaption(value: string) : void;
    /**
     * Gets and set the location of the control's picture relative to its caption.
     */
    getPicturePosition() : ControlPicturePositionType;
    /**
     * Gets and set the location of the control's picture relative to its caption.
     * @param value - The value to set.
     */
    setPicturePosition(value: ControlPicturePositionType) : void;
    /**
     * Gets and sets the ole color of the background.
     */
    getBorderOleColor() : number;
    /**
     * Gets and sets the ole color of the background.
     * @param value - The value to set.
     */
    setBorderOleColor(value: number) : void;
    /**
     * Gets and set the type of border used by the control.
     */
    getBorderStyle() : ControlBorderType;
    /**
     * Gets and set the type of border used by the control.
     * @param value - The value to set.
     */
    setBorderStyle(value: ControlBorderType) : void;
    /**
     * Gets and sets the special effect of the control.
     */
    getSpecialEffect() : ControlSpecialEffectType;
    /**
     * Gets and sets the special effect of the control.
     * @param value - The value to set.
     */
    setSpecialEffect(value: ControlSpecialEffectType) : void;
    /**
     * Gets and sets the data of the picture.
     */
    getPicture() : number[];
    /**
     * Gets and sets the data of the picture.
     * @param value - The value to set.
     */
    setPicture(value: number[]) : void;
    /**
     * Gets and sets the accelerator key for the control.
     */
    getAccelerator() : string;
    /**
     * Gets and sets the accelerator key for the control.
     * @param value - The value to set.
     */
    setAccelerator(value: string) : void;
    /**
     * Indicates whether the contents of the control automatically wrap at the end of a line.
     */
    isWordWrapped() : boolean;
    /**
     * Indicates whether the contents of the control automatically wrap at the end of a line.
     * @param value - The value to set.
     */
    setIsWordWrapped(value: boolean) : void;
}

/**
 * Represents a ListBox ActiveX control.
 */
export class ListBoxActiveXControl extends ActiveXControl {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: ActiveXControl);
    /**
     * Gets the type of the ActiveX control.
     */
    getType() : ControlType;
    /**
     * Indicates specifies whether the control has vertical scroll bars, horizontal scroll bars, both, or neither.
     */
    getScrollBars() : ControlScrollBarType;
    /**
     * Indicates specifies whether the control has vertical scroll bars, horizontal scroll bars, both, or neither.
     * @param value - The value to set.
     */
    setScrollBars(value: ControlScrollBarType) : void;
    /**
     * Gets and set the width in unit of points.
     */
    getListWidth() : number;
    /**
     * Gets and set the width in unit of points.
     * @param value - The value to set.
     */
    setListWidth(value: number) : void;
    /**
     * Represents how the Value property is determined for a ComboBox or ListBox
     * when the MultiSelect properties value (fmMultiSelectSingle).
     */
    getBoundColumn() : number;
    /**
     * Represents how the Value property is determined for a ComboBox or ListBox
     * when the MultiSelect properties value (fmMultiSelectSingle).
     * @param value - The value to set.
     */
    setBoundColumn(value: number) : void;
    /**
     * Represents the column in a ComboBox or ListBox to display to the user.
     */
    getTextColumn() : number;
    /**
     * Represents the column in a ComboBox or ListBox to display to the user.
     * @param value - The value to set.
     */
    setTextColumn(value: number) : void;
    /**
     * Represents the number of columns to display in a ComboBox or ListBox.
     */
    getColumnCount() : number;
    /**
     * Represents the number of columns to display in a ComboBox or ListBox.
     * @param value - The value to set.
     */
    setColumnCount(value: number) : void;
    /**
     * Indicates how a ListBox or ComboBox searches its list as the user types.
     */
    getMatchEntry() : ControlMatchEntryType;
    /**
     * Indicates how a ListBox or ComboBox searches its list as the user types.
     * @param value - The value to set.
     */
    setMatchEntry(value: ControlMatchEntryType) : void;
    /**
     * Gets and sets the visual appearance.
     */
    getListStyle() : ControlListStyle;
    /**
     * Gets and sets the visual appearance.
     * @param value - The value to set.
     */
    setListStyle(value: ControlListStyle) : void;
    /**
     * Indicates whether the control permits multiple selections.
     */
    getSelectionType() : SelectionType;
    /**
     * Indicates whether the control permits multiple selections.
     * @param value - The value to set.
     */
    setSelectionType(value: SelectionType) : void;
    /**
     * Gets and sets the value of the control.
     * 
     * @remarks
     * Only effects when <see cref="ListBoxActiveXControl.SelectionType"/> is SelectionType.Single;
     */
    getValue() : string;
    /**
     * Gets and sets the value of the control.
     * @param value - The value to set.
     * 
     * @remarks
     * Only effects when <see cref="ListBoxActiveXControl.SelectionType"/> is SelectionType.Single;
     */
    setValue(value: string) : void;
    /**
     * Gets and set the type of border used by the control.
     */
    getBorderStyle() : ControlBorderType;
    /**
     * Gets and set the type of border used by the control.
     * @param value - The value to set.
     */
    setBorderStyle(value: ControlBorderType) : void;
    /**
     * Gets and sets the ole color of the background.
     */
    getBorderOleColor() : number;
    /**
     * Gets and sets the ole color of the background.
     * @param value - The value to set.
     */
    setBorderOleColor(value: number) : void;
    /**
     * Gets and sets the special effect of the control.
     */
    getSpecialEffect() : ControlSpecialEffectType;
    /**
     * Gets and sets the special effect of the control.
     * @param value - The value to set.
     */
    setSpecialEffect(value: ControlSpecialEffectType) : void;
    /**
     * Indicates whether column headings are displayed.
     */
    getShowColumnHeads() : boolean;
    /**
     * Indicates whether column headings are displayed.
     * @param value - The value to set.
     */
    setShowColumnHeads(value: boolean) : void;
    /**
     * Indicates whether the control will only show complete lines of text without showing any partial lines.
     */
    getIntegralHeight() : boolean;
    /**
     * Indicates whether the control will only show complete lines of text without showing any partial lines.
     * @param value - The value to set.
     */
    setIntegralHeight(value: boolean) : void;
    /**
     * Gets and sets the width of the column.
     */
    getColumnWidths() : number;
    /**
     * Gets and sets the width of the column.
     * @param value - The value to set.
     */
    setColumnWidths(value: number) : void;
}

/**
 * Represents the visual appearance of the list in a ListBox or ComboBox.
 */
export enum ControlListStyle {
    /**
     * Displays a list in which the background of an item is highlighted when it is selected.
     */
    Plain = 0,
    /**
     * Displays a list in which an option button or a checkbox next to each entry displays the selection state of that item.
     */
    Option = 1,
}

/**
 * Represents how a ListBox or ComboBox searches its list as the user types.
 */
export enum ControlMatchEntryType {
    /**
     * The control searches for the next entry that starts with the character entered.
     * Repeatedly typing the same letter cycles through all entries beginning with that letter.
     */
    FirstLetter = 0,
    /**
     * As each character is typed, the control searches for an entry matching all characters entered.
     */
    Complete = 1,
    /**
     * The list will not be searched when characters are typed.
     */
    None = 2,
}

/**
 * Represents the type of icon displayed as the mouse pointer for the control.
 */
export enum ControlMousePointerType {
    /**
     * Standard pointer.
     */
    Default = 0,
    /**
     * Arrow.
     */
    Arrow = 1,
    /**
     * Cross-hair pointer.
     */
    Cross = 2,
    /**
     * I-beam.
     */
    IBeam = 3,
    /**
     * Double arrow pointing northeast and southwest.
     */
    SizeNESW = 6,
    /**
     * Double arrow pointing north and south.
     */
    SizeNS = 7,
    /**
     * Double arrow pointing northwest and southeast.
     */
    SizeNWSE = 8,
    /**
     * Double arrow pointing west and east.
     */
    SizeWE = 9,
    /**
     * Up arrow.
     */
    UpArrow = 10,
    /**
     * Hourglass.
     */
    HourGlass = 11,
    /**
     * "Not” symbol (circle with a diagonal line) on top of the object being dragged.
     */
    NoDrop = 12,
    /**
     * Arrow with an hourglass.
     */
    AppStarting = 13,
    /**
     * Arrow with a question mark.
     */
    Help = 14,
    /**
     * "Size-all” cursor (arrows pointing north, south, east, and west).
     */
    SizeAll = 15,
    /**
     * Uses the icon specified by the MouseIcon property.
     */
    Custom = 99,
}

/**
 * Represents the alignment of the picture inside the Form or Image.
 */
export enum ControlPictureAlignmentType {
    /**
     * The top left corner.
     */
    TopLeft = 0,
    /**
     * The top right corner.
     */
    TopRight = 1,
    /**
     * The center.
     */
    Center = 2,
    /**
     * The bottom left corner.
     */
    BottomLeft = 3,
    /**
     * The bottom right corner.
     */
    BottomRight = 4,
}

/**
 * Represents the location of the control's picture relative to its caption.
 */
export enum ControlPicturePositionType {
    /**
     * The picture appears to the left of the caption.
     * The caption is aligned with the top of the picture.
     */
    LeftTop = 131072,
    /**
     * The picture appears to the left of the caption.
     * The caption is centered relative to the picture.
     */
    LeftCenter = 327683,
    /**
     * The picture appears to the left of the caption.
     * The caption is aligned with the bottom of the picture.
     */
    LeftBottom = 524294,
    /**
     * The picture appears to the right of the caption.
     * The caption is aligned with the top of the picture.
     */
    RightTop = 2,
    /**
     * The picture appears to the right of the caption.
     * The caption is centered relative to the picture.
     */
    RightCenter = 196613,
    /**
     * The picture appears to the right of the caption.
     * The caption is aligned with the bottom of the picture.
     */
    RightBottom = 393224,
    /**
     * The picture appears above the caption.
     * The caption is aligned with the left edge of the picture.
     */
    AboveLeft = 393216,
    /**
     * The picture appears above the caption.
     * The caption is centered below the picture.
     */
    AboveCenter = 458753,
    /**
     * The picture appears above the caption.
     * The caption is aligned with the right edge of the picture.
     */
    AboveRight = 524290,
    /**
     * The picture appears below the caption.
     * The caption is aligned with the left edge of the picture.
     */
    BelowLeft = 6,
    /**
     * The picture appears below the caption.
     * The caption is centered above the picture.
     */
    BelowCenter = 65543,
    /**
     * The picture appears below the caption.
     * The caption is aligned with the right edge of the picture.
     */
    BelowRight = 131080,
    /**
     * The picture appears in the center of the control.
     * The caption is centered horizontally and vertically on top of the picture.
     */
    Center = 262148,
}

/**
 * Represents how to display the picture.
 */
export enum ControlPictureSizeMode {
    /**
     * Crops any part of the picture that is larger than the control's boundaries.
     */
    Clip = 0,
    /**
     * Stretches the picture to fill the control's area.
     * This setting distorts the picture in either the horizontal or vertical direction.
     */
    Stretch = 1,
    /**
     * Enlarges the picture, but does not distort the picture in either the horizontal or vertical direction.
     */
    Zoom = 3,
}

/**
 * Represents a RadioButton ActiveX control.
 */
export class RadioButtonActiveXControl extends ToggleButtonActiveXControl {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: ToggleButtonActiveXControl);
    /**
     * Gets the type of the ActiveX control.
     */
    getType() : ControlType;
    /**
     * Gets and sets the group's name.
     */
    getGroupName() : string;
    /**
     * Gets and sets the group's name.
     * @param value - The value to set.
     */
    setGroupName(value: string) : void;
    /**
     * Gets and set the position of the Caption relative to the control.
     */
    getAlignment() : ControlCaptionAlignmentType;
    /**
     * Gets and set the position of the Caption relative to the control.
     * @param value - The value to set.
     */
    setAlignment(value: ControlCaptionAlignmentType) : void;
    /**
     * Indicates whether the contents of the control automatically wrap at the end of a line.
     */
    isWordWrapped() : boolean;
    /**
     * Indicates whether the contents of the control automatically wrap at the end of a line.
     * @param value - The value to set.
     */
    setIsWordWrapped(value: boolean) : void;
}

/**
 * Represents the ScrollBar control.
 */
export class ScrollBarActiveXControl extends SpinButtonActiveXControl {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: SpinButtonActiveXControl);
    /**
     * Gets the type of the ActiveX control.
     */
    getType() : ControlType;
    /**
     * Gets and sets the amount by which the Position property changes
     */
    getLargeChange() : number;
    /**
     * Gets and sets the amount by which the Position property changes
     * @param value - The value to set.
     */
    setLargeChange(value: number) : void;
}

/**
 * Represents the type of scroll bar.
 */
export enum ControlScrollBarType {
    /**
     * Displays no scroll bars.
     */
    None = 0,
    /**
     * Displays a horizontal scroll bar.
     */
    Horizontal = 1,
    /**
     * Displays a vertical scroll bar.
     */
    BarsVertical = 2,
    /**
     * Displays both a horizontal and a vertical scroll bar.
     */
    BarsBoth = 3,
}

/**
 * Represents type of scroll orientation
 */
export enum ControlScrollOrientation {
    /**
     * Control is rendered horizontally when the control's width is greater than its height.
     * Control is rendered vertically otherwise.
     */
    Auto = 3,
    /**
     * Control is rendered vertically.
     */
    Vertical = 0,
    /**
     * Control is rendered horizontally.
     */
    Horizontal = 1,
}

/**
 * Represents the type of special effect.
 */
export enum ControlSpecialEffectType {
    /**
     * Flat
     */
    Flat = 0,
    /**
     * Raised
     */
    Raised = 1,
    /**
     * Sunken
     */
    Sunken = 2,
    /**
     * Etched
     */
    Etched = 3,
    /**
     * Bump
     */
    Bump = 6,
}

/**
 * Represents the SpinButton control.
 */
export class SpinButtonActiveXControl extends ActiveXControl {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: ActiveXControl);
    /**
     * Gets the type of the ActiveX control.
     */
    getType() : ControlType;
    /**
     * Gets and sets the minimum acceptable value.
     */
    getMin() : number;
    /**
     * Gets and sets the minimum acceptable value.
     * @param value - The value to set.
     */
    setMin(value: number) : void;
    /**
     * Gets and sets the maximum acceptable value.
     */
    getMax() : number;
    /**
     * Gets and sets the maximum acceptable value.
     * @param value - The value to set.
     */
    setMax(value: number) : void;
    /**
     * Gets and sets the value.
     */
    getPosition() : number;
    /**
     * Gets and sets the value.
     * @param value - The value to set.
     */
    setPosition(value: number) : void;
    /**
     * Gets and sets the amount by which the Position property changes
     */
    getSmallChange() : number;
    /**
     * Gets and sets the amount by which the Position property changes
     * @param value - The value to set.
     */
    setSmallChange(value: number) : void;
    /**
     * Gets and sets whether the SpinButton or ScrollBar is oriented vertically or horizontally.
     */
    getOrientation() : ControlScrollOrientation;
    /**
     * Gets and sets whether the SpinButton or ScrollBar is oriented vertically or horizontally.
     * @param value - The value to set.
     */
    setOrientation(value: ControlScrollOrientation) : void;
}

/**
 * Represents a text box ActiveX control.
 */
export class TextBoxActiveXControl extends ActiveXControl {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: ActiveXControl);
    /**
     * Gets the type of the ActiveX control.
     */
    getType() : ControlType;
    /**
     * Gets and set the type of border used by the control.
     */
    getBorderStyle() : ControlBorderType;
    /**
     * Gets and set the type of border used by the control.
     * @param value - The value to set.
     */
    setBorderStyle(value: ControlBorderType) : void;
    /**
     * Gets and sets the ole color of the background.
     */
    getBorderOleColor() : number;
    /**
     * Gets and sets the ole color of the background.
     * @param value - The value to set.
     */
    setBorderOleColor(value: number) : void;
    /**
     * Gets and sets the special effect of the control.
     */
    getSpecialEffect() : ControlSpecialEffectType;
    /**
     * Gets and sets the special effect of the control.
     * @param value - The value to set.
     */
    setSpecialEffect(value: ControlSpecialEffectType) : void;
    /**
     * Gets and sets the maximum number of characters
     */
    getMaxLength() : number;
    /**
     * Gets and sets the maximum number of characters
     * @param value - The value to set.
     */
    setMaxLength(value: number) : void;
    /**
     * Indicates specifies whether the control has vertical scroll bars, horizontal scroll bars, both, or neither.
     */
    getScrollBars() : ControlScrollBarType;
    /**
     * Indicates specifies whether the control has vertical scroll bars, horizontal scroll bars, both, or neither.
     * @param value - The value to set.
     */
    setScrollBars(value: ControlScrollBarType) : void;
    /**
     * Gets and sets a character to be displayed in place of the characters entered.
     */
    getPasswordChar() : string;
    /**
     * Gets and sets a character to be displayed in place of the characters entered.
     * @param value - The value to set.
     */
    setPasswordChar(value: string) : void;
    /**
     * Indicates whether the user can type into the control.
     */
    isEditable() : boolean;
    /**
     * Indicates whether the user can type into the control.
     * @param value - The value to set.
     */
    setIsEditable(value: boolean) : void;
    /**
     * Indicates whether the control will only show complete lines of text without showing any partial lines.
     */
    getIntegralHeight() : boolean;
    /**
     * Indicates whether the control will only show complete lines of text without showing any partial lines.
     * @param value - The value to set.
     */
    setIntegralHeight(value: boolean) : void;
    /**
     * Indicates whether dragging and dropping is enabled for the control.
     */
    isDragBehaviorEnabled() : boolean;
    /**
     * Indicates whether dragging and dropping is enabled for the control.
     * @param value - The value to set.
     */
    setIsDragBehaviorEnabled(value: boolean) : void;
    /**
     * Specifies the behavior of the ENTER key.
     * True specifies that pressing ENTER will create a new line.
     * False specifies that pressing ENTER will move the focus to the next object in the tab order.
     */
    getEnterKeyBehavior() : boolean;
    /**
     * Specifies the behavior of the ENTER key.
     * True specifies that pressing ENTER will create a new line.
     * False specifies that pressing ENTER will move the focus to the next object in the tab order.
     * @param value - The value to set.
     */
    setEnterKeyBehavior(value: boolean) : void;
    /**
     * Specifies selection behavior when entering the control.
     * True specifies that the selection remains unchanged from last time the control was active.
     * False specifies that all the text in the control will be selected when entering the control.
     */
    getEnterFieldBehavior() : boolean;
    /**
     * Specifies selection behavior when entering the control.
     * True specifies that the selection remains unchanged from last time the control was active.
     * False specifies that all the text in the control will be selected when entering the control.
     * @param value - The value to set.
     */
    setEnterFieldBehavior(value: boolean) : void;
    /**
     * Indicates whether tab characters are allowed in the text of the control.
     */
    getTabKeyBehavior() : boolean;
    /**
     * Indicates whether tab characters are allowed in the text of the control.
     * @param value - The value to set.
     */
    setTabKeyBehavior(value: boolean) : void;
    /**
     * Indicates whether selected text in the control appears highlighted when the control does not have focus.
     */
    getHideSelection() : boolean;
    /**
     * Indicates whether selected text in the control appears highlighted when the control does not have focus.
     * @param value - The value to set.
     */
    setHideSelection(value: boolean) : void;
    /**
     * Indicates whether the focus will automatically move to the next control when the user enters the maximum number of characters.
     */
    isAutoTab() : boolean;
    /**
     * Indicates whether the focus will automatically move to the next control when the user enters the maximum number of characters.
     * @param value - The value to set.
     */
    setIsAutoTab(value: boolean) : void;
    /**
     * Indicates whether the control can display more than one line of text.
     */
    isMultiLine() : boolean;
    /**
     * Indicates whether the control can display more than one line of text.
     * @param value - The value to set.
     */
    setIsMultiLine(value: boolean) : void;
    /**
     * Specifies the basic unit used to extend a selection.
     * True specifies that the basic unit is a single character.
     * false specifies that the basic unit is a whole word.
     */
    isAutoWordSelected() : boolean;
    /**
     * Specifies the basic unit used to extend a selection.
     * True specifies that the basic unit is a single character.
     * false specifies that the basic unit is a whole word.
     * @param value - The value to set.
     */
    setIsAutoWordSelected(value: boolean) : void;
    /**
     * Indicates whether the contents of the control automatically wrap at the end of a line.
     */
    isWordWrapped() : boolean;
    /**
     * Indicates whether the contents of the control automatically wrap at the end of a line.
     * @param value - The value to set.
     */
    setIsWordWrapped(value: boolean) : void;
    /**
     * Gets and set text of the control.
     */
    getText() : string;
    /**
     * Gets and set text of the control.
     * @param value - The value to set.
     */
    setText(value: string) : void;
    /**
     * Specifies the symbol displayed on the drop button
     */
    getDropButtonStyle() : DropButtonStyle;
    /**
     * Specifies the symbol displayed on the drop button
     * @param value - The value to set.
     */
    setDropButtonStyle(value: DropButtonStyle) : void;
    /**
     * Specifies the symbol displayed on the drop button
     */
    getShowDropButtonTypeWhen() : ShowDropButtonType;
    /**
     * Specifies the symbol displayed on the drop button
     * @param value - The value to set.
     */
    setShowDropButtonTypeWhen(value: ShowDropButtonType) : void;
}

/**
 * Represents a ToggleButton ActiveX control.
 */
export class ToggleButtonActiveXControl extends ActiveXControl {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: ActiveXControl);
    /**
     * Gets the type of the ActiveX control.
     */
    getType() : ControlType;
    /**
     * Gets and set the descriptive text that appears on a control.
     */
    getCaption() : string;
    /**
     * Gets and set the descriptive text that appears on a control.
     * @param value - The value to set.
     */
    setCaption(value: string) : void;
    /**
     * Gets and set the location of the control's picture relative to its caption.
     */
    getPicturePosition() : ControlPicturePositionType;
    /**
     * Gets and set the location of the control's picture relative to its caption.
     * @param value - The value to set.
     */
    setPicturePosition(value: ControlPicturePositionType) : void;
    /**
     * Gets and sets the special effect of the control.
     */
    getSpecialEffect() : ControlSpecialEffectType;
    /**
     * Gets and sets the special effect of the control.
     * @param value - The value to set.
     */
    setSpecialEffect(value: ControlSpecialEffectType) : void;
    /**
     * Gets and sets the data of the picture.
     */
    getPicture() : number[];
    /**
     * Gets and sets the data of the picture.
     * @param value - The value to set.
     */
    setPicture(value: number[]) : void;
    /**
     * Gets and sets the accelerator key for the control.
     */
    getAccelerator() : string;
    /**
     * Gets and sets the accelerator key for the control.
     * @param value - The value to set.
     */
    setAccelerator(value: string) : void;
    /**
     * Indicates if the control is checked or not.
     */
    getValue() : CheckValueType;
    /**
     * Indicates if the control is checked or not.
     * @param value - The value to set.
     */
    setValue(value: CheckValueType) : void;
    /**
     * Indicates how the specified control will display Null values.
     * 
     * @remarks
     * <list type="table">
     * <listheader>
     * <description>Setting</description>
     * <description>Description</description>
     * </listheader>
     * <item>
     * <description>True</description>
     * <description>The control will cycle through states for Yes, No, and Null values. The control appears dimmed (grayed) when its Value property is set to Null.</description>
     * </item>
     * <item>
     * <description>False</description>
     * <description>(Default) The control will cycle through states for Yes and No values. Null values display as if they were No values.</description>
     * </item>
     * </list>
     */
    isTripleState() : boolean;
    /**
     * Indicates how the specified control will display Null values.
     * @param value - The value to set.
     * 
     * @remarks
     * <list type="table">
     * <listheader>
     * <description>Setting</description>
     * <description>Description</description>
     * </listheader>
     * <item>
     * <description>True</description>
     * <description>The control will cycle through states for Yes, No, and Null values. The control appears dimmed (grayed) when its Value property is set to Null.</description>
     * </item>
     * <item>
     * <description>False</description>
     * <description>(Default) The control will cycle through states for Yes and No values. Null values display as if they were No values.</description>
     * </item>
     * </list>
     */
    setIsTripleState(value: boolean) : void;
}

/**
 * Unknow control.
 */
export class UnknownControl extends ActiveXControl {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: ActiveXControl);
    /**
     * Gets and sets the binary data of the control.
     */
    getData() : number[];
    /**
     * Gets the type of the ActiveX control.
     */
    getType() : ControlType;
    /**
     * Gets the related data.
     * @param relId - The relationship id.
     * @returns
     * Returns the related data.
     */
    getRelationshipData(relId: string) : number[];
}

/**
 * Provides helper functions about color.
 */
export class ColorHelper {
    /**
     * Convert OLE_COLOR.
     * @param oleColor - The value of OLE_COLOR.
     * @returns
     * The <see cref="Color"/> object.
     */
    static fromOleColor(oleColor: number) : Color;
    /**
     * Convert color to OLE_COLOR
     * @param color - The <see cref="Color"/> object.
     * @param workbook - 
     * @returns
     * The value of OLE_COLOR
     */
    static toOleColor(color: Color, workbook: Workbook) : number;
}

/**
 * Enumerates strategies for handling calculation precision.
 * Because of the precision issue of IEEE 754 Floating-Point Arithmetic, some "seemingly simple" formulas may not be calculated as the expected result.
 * Such as formula "=-0.45+0.43+0.02", when calculating operands by '+' operator directly, the result is not zero. For such kind of precision issue,
 * some special strategies may give the expected result.
 */
export enum CalculationPrecisionStrategy {
    /**
     * No strategy applied on calculation.
     * When calculating just use the original double value as operand and return the result directly.
     * Most efficient for performance and applicable for most cases.
     */
    None = 0,
    /**
     * Rounds the calculation result according with significant digits.
     */
    Round = 1,
    /**
     * Uses decimal as operands when possible.
     * Most inefficient for performance.
     */
    Decimal = 2,
}

/**
 * Represents options for calculation.
 */
export class CalculationOptions {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Indicates whether errors encountered while calculating formulas should be ignored.
     * The error may be unsupported function, external links, etc.
     * The default value is true.
     */
    getIgnoreError() : boolean;
    /**
     * Indicates whether errors encountered while calculating formulas should be ignored.
     * The error may be unsupported function, external links, etc.
     * The default value is true.
     * @param value - The value to set.
     */
    setIgnoreError(value: boolean) : void;
    /**
     * Indicates whether calculate the dependent cells recursively when calculating one cell and it depends on other cells.
     * The default value is true.
     */
    getRecursive() : boolean;
    /**
     * Indicates whether calculate the dependent cells recursively when calculating one cell and it depends on other cells.
     * The default value is true.
     * @param value - The value to set.
     */
    setRecursive(value: boolean) : void;
    /**
     * The custom formula calculation engine to extend the default calculation engine of Aspose.Cells.
     */
    getCustomEngine() : AbstractCalculationEngine;
    /**
     * The custom formula calculation engine to extend the default calculation engine of Aspose.Cells.
     * @param value - The value to set.
     */
    setCustomEngine(value: AbstractCalculationEngine) : void;
    /**
     * The stack size for calculating cells recursively. Default value is 200.
     * 
     * @remarks
     * When there are large amount of cells need to be calculated recursively in the dependency tree,
     * StackOverflowException may be caused in the calculation process.
     * If so, user should specify smaller value for this property.
     * For such situation, user should determine the proper value for this property according to the actual formulas and data.
     * However, too small value may cause performance degradation for the formula calculation and value less than 2
     * will make it impossible to calculate formula which depends on another one. So if the specified value is less than 2,
     * it will be reset to 2.
     */
    getCalcStackSize() : number;
    /**
     * The stack size for calculating cells recursively. Default value is 200.
     * @param value - The value to set.
     * 
     * @remarks
     * When there are large amount of cells need to be calculated recursively in the dependency tree,
     * StackOverflowException may be caused in the calculation process.
     * If so, user should specify smaller value for this property.
     * For such situation, user should determine the proper value for this property according to the actual formulas and data.
     * However, too small value may cause performance degradation for the formula calculation and value less than 2
     * will make it impossible to calculate formula which depends on another one. So if the specified value is less than 2,
     * it will be reset to 2.
     */
    setCalcStackSize(value: number) : void;
    /**
     * Specifies the strategy for processing precision of calculation.
     */
    getPrecisionStrategy() : CalculationPrecisionStrategy;
    /**
     * Specifies the strategy for processing precision of calculation.
     * @param value - The value to set.
     */
    setPrecisionStrategy(value: CalculationPrecisionStrategy) : void;
    /**
     * Specifies the data sources for external links used in formulas.
     * 
     * @remarks
     * Like <see cref="Workbook.UpdateLinkedDataSource(Workbook[])"/>, here you may specify
     * data sources for external links used in formulas to be calculated, especially those
     * used in INDIRECT function. For those external links used in INDIRECT function,
     * they are not taken as part of the external links of the workbook and cannot be updated
     * by <see cref="Workbook.UpdateLinkedDataSource(Workbook[])"/>.
     */
    getLinkedDataSources() : Workbook[];
    /**
     * Specifies the data sources for external links used in formulas.
     * @param value - The value to set.
     * 
     * @remarks
     * Like <see cref="Workbook.UpdateLinkedDataSource(Workbook[])"/>, here you may specify
     * data sources for external links used in formulas to be calculated, especially those
     * used in INDIRECT function. For those external links used in INDIRECT function,
     * they are not taken as part of the external links of the workbook and cannot be updated
     * by <see cref="Workbook.UpdateLinkedDataSource(Workbook[])"/>.
     */
    setLinkedDataSources(value: Workbook[]) : void;
    /**
     * Specifies the encoding used for encoding/decoding characters when calculating formulas.
     * For functions such as CHAR, CODE, the calculated result depends on the region settings and default charset of the environment.
     * With this property user can specify the proper encoding used for those function to get the expected result.
     */
    getCharacterEncoding() : EncodingType;
    /**
     * Specifies the encoding used for encoding/decoding characters when calculating formulas.
     * For functions such as CHAR, CODE, the calculated result depends on the region settings and default charset of the environment.
     * With this property user can specify the proper encoding used for those function to get the expected result.
     * @param value - The value to set.
     */
    setCharacterEncoding(value: EncodingType) : void;
}

/**
 * Represents a Custom XML Data Storage Part (custom XML data within a package).
 */
export class CustomXmlPart {
    /**
     * Gets or sets the XML content of this Custom XML Data Storage Part.
     */
    getData() : number[];
    /**
     * Gets or sets the XML content of this Custom XML Data Storage Part.
     * @param value - The value to set.
     */
    setData(value: number[]) : void;
    /**
     * Gets or sets the XML content of this Custom XML Schema Data Storage Part.
     */
    getSchemaData() : number[];
    /**
     * Gets or sets the XML content of this Custom XML Schema Data Storage Part.
     * @param value - The value to set.
     */
    setSchemaData(value: number[]) : void;
    /**
     * Gets and sets the id of the custom xml part.
     */
    getID() : string;
    /**
     * Gets and sets the id of the custom xml part.
     * @param value - The value to set.
     */
    setID(value: string) : void;
}

/**
 * Represents a Custom XML Data Storage Part (custom XML data within a package).
 */
export class CustomXmlPartCollection {
    /**
     * Gets an item at the specified index.
     * @param index - The index.
     */
    get(index: number) : CustomXmlPart;
    /**
     * Adds an item to the collection.
     * @param data - The XML content of this Custom XML Data Storage Part.
     * @param shemaData - The set of XML schemas that are associated with this custom XML part.
     */
    add(data: number[], shemaData: number[]) : number;
    /**
     * Gets an item by id.
     * @param id - Contains the GUID for the custom XML part.
     */
    selectByID(id: string) : CustomXmlPart;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * represents automatic fill.
 */
export class AutomaticFill {
}

/**
 * Represents this fill format should inherit the fill properties of the group.
 */
export class GroupFill {
}

/**
 * Represents no fill.
 */
export class NoneFill {
}

/**
 * Represent the signature line.
 */
export class SignatureLine {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets and sets the signer.
     */
    getSigner() : string;
    /**
     * Gets and sets the signer.
     * @param value - The value to set.
     */
    setSigner(value: string) : void;
    /**
     * Gets and sets the title of singer.
     */
    getTitle() : string;
    /**
     * Gets and sets the title of singer.
     * @param value - The value to set.
     */
    setTitle(value: string) : void;
    /**
     * Gets and sets the email of singer.
     */
    getEmail() : string;
    /**
     * Gets and sets the email of singer.
     * @param value - The value to set.
     */
    setEmail(value: string) : void;
    /**
     * Indicates whether it is a signature line.
     */
    isLine() : boolean;
    /**
     * Indicates whether it is a signature line.
     * @param value - The value to set.
     */
    setIsLine(value: boolean) : void;
    /**
     * Indicates whether comments could be attached.
     */
    getAllowComments() : boolean;
    /**
     * Indicates whether comments could be attached.
     * @param value - The value to set.
     */
    setAllowComments(value: boolean) : void;
    /**
     * Indicates whether show signed date.
     */
    getShowSignedDate() : boolean;
    /**
     * Indicates whether show signed date.
     * @param value - The value to set.
     */
    setShowSignedDate(value: boolean) : void;
    /**
     * Gets and sets the text shown to user at signing time.
     */
    getInstructions() : string;
    /**
     * Gets and sets the text shown to user at signing time.
     * @param value - The value to set.
     */
    setInstructions(value: string) : void;
}

/**
 * Represents automatic numbered bullet.
 */
export class AutoNumberedBulletValue extends BulletValue {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: BulletValue);
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets the type of the bullet.
     */
    getType() : BulletType;
    /**
     * Gets and sets the starting number of the bullet.
     */
    getStartAt() : number;
    /**
     * Gets and sets the starting number of the bullet.
     * @param value - The value to set.
     */
    setStartAt(value: number) : void;
    /**
     * Represents the scheme of automatic number.
     */
    getAutonumberScheme() : TextAutonumberScheme;
    /**
     * Represents the scheme of automatic number.
     * @param value - The value to set.
     */
    setAutonumberScheme(value: TextAutonumberScheme) : void;
}

/**
 * Represents the bullet points should be applied to a paragraph.
 */
export class Bullet {
    /**
     * Gets the value of bullet.
     */
    getBulletValue() : BulletValue;
    /**
     * Gets and sets the type of bullet.
     */
    getType() : BulletType;
    /**
     * Gets and sets the type of bullet.
     * @param value - The value to set.
     */
    setType(value: BulletType) : void;
    /**
     * Get and sets the name of the font.
     */
    getFontName() : string;
    /**
     * Get and sets the name of the font.
     * @param value - The value to set.
     */
    setFontName(value: string) : void;
}

/**
 * Represents the type of the bullet.
 */
export enum BulletType {
    /**
     * No bullet.
     */
    None = 0,
    /**
     * Character bullet.
     */
    Character = 1,
    /**
     * Image bullet.
     */
    Picture = 2,
    /**
     * Automatic numbered bullet.
     */
    AutoNumbered = 3,
}

/**
 * Represents the value of the bullet.
 */
export class BulletValue {
    /**
     * Gets the type of the bullet's value.
     */
    getType() : BulletType;
}

/**
 * Represents the character bullet.
 */
export class CharacterBulletValue extends BulletValue {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: BulletValue);
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets the type of the bullet.
     */
    getType() : BulletType;
    /**
     * Gets and sets character of the bullet.
     */
    getCharacter() : string;
    /**
     * Gets and sets character of the bullet.
     * @param value - The value to set.
     */
    setCharacter(value: string) : void;
}

/**
 * This specifies the shape of delimiters in the delimiter object.
 */
export enum EquationDelimiterShapeType {
    /**
     * The divider is centered around the entire height of its content.
     */
    Centered = 0,
    /**
     * The divider is altered to exactly match their contents' height.
     */
    Match = 1,
}

/**
 * Equation node type.
 * Notice:
 * (1)[1-99] Currently there is only one node in the scope, and its enumeration value is 1. The node it specifies is used to store mathematical text.
 * (2)[100-199] Indicates that the node is a component of some special function nodes.
 * (3)[200-] Indicates that the node has some special functions(Usually with 'Equation' suffix. 'EquationParagraph' is a special case.).
 */
export enum EquationNodeType {
    /**
     * UnKnow
     */
    UnKnow = 0,
    /**
     * specifies a node that stores math text
     */
    Text = 1,
    /**
     * Specifies a component of type 'Base'
     */
    Base = 100,
    /**
     * Specifies a component of type 'Denominator'
     */
    Denominator = 101,
    /**
     * Specifies a component of type 'Numerator'
     */
    Numerator = 102,
    /**
     * Specifies a component of type 'FunctionName'
     */
    FunctionName = 103,
    /**
     * Specifies a component of type 'Subscript'
     */
    Subscript = 104,
    /**
     * Specifies a component of type 'Superscript'
     */
    Superscript = 105,
    /**
     * Specifies a component of type 'Degree'
     */
    Degree = 106,
    /**
     * Specifies a component of type 'MatrixRow'.A single row of the matrix
     */
    MatrixRow = 107,
    /**
     * Specifies a mathematical paragraph(oMathPara).
     */
    EquationParagraph = 200,
    /**
     * Specifies an equation or mathematical expression(OMath).
     */
    MathematicalEquation = 201,
    /**
     * Specifies fractional equation
     */
    FractionEquation = 202,
    /**
     * Specifies function equation
     */
    FunctionEquation = 203,
    /**
     * Specifies delimiter equation
     */
    DelimiterEquation = 204,
    /**
     * Specifies n-ary operator equation
     */
    NaryEquation = 205,
    /**
     * Specifies the radical equation
     */
    RadicalEquation = 206,
    /**
     * Specifies superscript equation
     */
    SuperscriptEquation = 207,
    /**
     * Specifies subscript equation
     */
    SubscriptEquation = 208,
    /**
     * Specifies an equation with superscripts and subscripts to the right of the operands.
     */
    SubSupEquation = 209,
    /**
     * Specifies an equation with superscripts and subscripts to the left of the operands.
     */
    PreSubSupEquation = 210,
    /**
     * Specifies accent equation
     */
    AccentEquation = 211,
    /**
     * Specifies bar equation
     */
    BarEquation = 212,
    /**
     * Specifies border box equation
     */
    BorderBoxEquation = 213,
    /**
     * Specifies box equation
     */
    BoxEquation = 214,
    /**
     * Specifies Group-Character equation
     */
    GroupCharacterEquation = 215,
    /**
     * Specifies the Matrix equation,
     */
    MatrixEquation = 216,
}

/**
 * This specifies the display style of the fraction bar.
 */
export enum EquationFractionType {
    /**
     * This specifies that the numerator is above and the denominator below is separated by a bar in the middle.
     */
    Bar = 0,
    /**
     * This specifies that the numerator is above and the denominator below is not separated by a bar in the middle.
     */
    NoBar = 1,
    /**
     * This specifies that the numerator is on the left and the denominator is on the right, separated by a '/' in between.
     */
    Linear = 2,
    /**
     * This specifies that the numerator is on the upper left and the denominator is on the lower right, separated by a "/".
     */
    Skewed = 3,
}

/**
 * This specifies the default horizontal justification of equations in the document.
 */
export enum EquationHorizontalJustificationType {
    /**
     * Centered
     */
    Center = 0,
    /**
     * Centered as Group
     */
    CenterGroup = 1,
    /**
     * Left Justified
     */
    Left = 2,
    /**
     * Right Justified
     */
    Right = 3,
}

/**
 * Specifies the limit location on an operator.
 */
export enum EquationLimitLocationType {
    /**
     * Specifies that the limit is centered above or below the operator.
     */
    UndOvr = 0,
    /**
     * Specifies that the limit is on the right side of the operator.
     */
    SubSup = 1,
}

/**
 * This class specifies an accent equation, consisting of a base component and a combining diacritic.
 */
export class AccentEquationNode extends EquationNode {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: EquationNode);
    /**
     * This attribute specifies the type of combining diacritical mark attached to the base of the accent function. The default accent character is U+0302.
     * It is strongly recommended to use attribute AccentType to set accent character.
     * Use this property setting if you cannot find the character you need in a known type.
     * 
     * @remarks
     * It should be noted that this property only accepts one character, and if multiple characters are passed in, only the first character is accepted.
     */
    getAccentCharacter() : string;
    /**
     * This attribute specifies the type of combining diacritical mark attached to the base of the accent function. The default accent character is U+0302.
     * It is strongly recommended to use attribute AccentType to set accent character.
     * Use this property setting if you cannot find the character you need in a known type.
     * @param value - The value to set.
     * 
     * @remarks
     * It should be noted that this property only accepts one character, and if multiple characters are passed in, only the first character is accepted.
     */
    setAccentCharacter(value: string) : void;
    /**
     * Specify combining characters by type value.
     */
    getAccentCharacterType() : EquationCombiningCharacterType;
    /**
     * Specify combining characters by type value.
     * @param value - The value to set.
     */
    setAccentCharacterType(value: EquationCombiningCharacterType) : void;
}

/**
 * This class specifies the bar equation, consisting of a base argument and an overbar or underbar.
 */
export class BarEquationNode extends EquationNode {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: EquationNode);
    /**
     * This attribute specifies the position of the bar in the bar object
     */
    getBarPosition() : EquationCharacterPositionType;
    /**
     * This attribute specifies the position of the bar in the bar object
     * @param value - The value to set.
     */
    setBarPosition(value: EquationCharacterPositionType) : void;
}

/**
 * This class specifies the Border Box function, consisting of a border drawn around an equation.
 */
export class BorderBoxEquationNode extends EquationNode {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: EquationNode);
}

/**
 * This class specifies the box function, which is used to group components of an equation.
 */
export class BoxEquationNode extends EquationNode {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: EquationNode);
}

/**
 * This class specifies the delimiter equation, consisting of opening and closing delimiters (such as parentheses, braces, brackets, and vertical bars), and a component contained inside.
 * The delimiter may have more than one component, with a designated separator character between each component.
 */
export class DelimiterEquationNode extends EquationNode {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: EquationNode);
    /**
     * Delimiter beginning character.
     * 
     * @remarks
     * It should be noted that this property only accepts one character, and if multiple characters are passed in, only the first character is accepted.
     */
    getBeginChar() : string;
    /**
     * Delimiter beginning character.
     * @param value - The value to set.
     * 
     * @remarks
     * It should be noted that this property only accepts one character, and if multiple characters are passed in, only the first character is accepted.
     */
    setBeginChar(value: string) : void;
    /**
     * Delimiter ending character.
     * 
     * @remarks
     * It should be noted that this property only accepts one character, and if multiple characters are passed in, only the first character is accepted.
     */
    getEndChar() : string;
    /**
     * Delimiter ending character.
     * @param value - The value to set.
     * 
     * @remarks
     * It should be noted that this property only accepts one character, and if multiple characters are passed in, only the first character is accepted.
     */
    setEndChar(value: string) : void;
    /**
     * This property specifies the growth property of the delimiter at the document level.
     * When off, the delimiter will not grow to match the size of its component height.
     * When enabled, the delimiter grows vertically to match its component height.
     */
    getNaryGrow() : boolean;
    /**
     * This property specifies the growth property of the delimiter at the document level.
     * When off, the delimiter will not grow to match the size of its component height.
     * When enabled, the delimiter grows vertically to match its component height.
     * @param value - The value to set.
     */
    setNaryGrow(value: boolean) : void;
    /**
     * Delimiter separator character.
     * 
     * @remarks
     * It should be noted that this property only accepts one character, and if multiple characters are passed in, only the first character is accepted.
     */
    getSeparatorChar() : string;
    /**
     * Delimiter separator character.
     * @param value - The value to set.
     * 
     * @remarks
     * It should be noted that this property only accepts one character, and if multiple characters are passed in, only the first character is accepted.
     */
    setSeparatorChar(value: string) : void;
    /**
     * Specifies the shape of delimiters in the delimiter object.
     */
    getDelimiterShape() : EquationDelimiterShapeType;
    /**
     * Specifies the shape of delimiters in the delimiter object.
     * @param value - The value to set.
     */
    setDelimiterShape(value: EquationDelimiterShapeType) : void;
}

/**
 * Abstract class for deriving other equation nodes.
 */
export class EquationNode extends FontSetting {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: FontSetting);
    /**
     * Specifies the parent node of the current node
     */
    getParentNode() : EquationNode;
    /**
     * Specifies the parent node of the current node
     * @param value - The value to set.
     */
    setParentNode(value: EquationNode) : void;
    /**
     * Represents the type of the node.
     */
    getType() : TextNodeType;
    /**
     * Get the equation type of the current node
     */
    getEquationType() : EquationNodeType;
    /**
     * Insert a node of the specified type at the end of the child node list of the current node.
     * @param equationType - Types of Equation Nodes
     * @returns
     * If the specified type exists, the corresponding node is returned, and if the type does not exist, a node of unknown type is returned.
     */
    addChild(equationType: EquationNodeType) : EquationNode;
    /**
     * Inserts the specified node at the end of the current node's list of child nodes.
     * @param node - The specified node
     */
    addChild(node: EquationNode) : void;
    /**
     * Inserts a node of the specified type at the specified index position in the current node's child node list.
     * @param index - index value
     * @param equationType - Types of Equation Nodes
     * @returns
     * If the specified type exists, the corresponding node is returned, and if the type does not exist, a node of unknown type is returned.
     */
    insertChild(index: number, equationType: EquationNodeType) : EquationNode;
    /**
     * Inserts the specified node after the current node.
     * @param equationType - Types of Equation Nodes
     * @returns
     * If the specified type exists, the corresponding node is returned, and if the type does not exist, a node of unknown type is returned.
     */
    insertAfter(equationType: EquationNodeType) : EquationNode;
    /**
     * Inserts the specified node before the current node.
     * @param equationType - Types of Equation Nodes
     * @returns
     * If the specified type exists, the corresponding node is returned, and if the type does not exist, a node of unknown type is returned.
     */
    insertBefore(equationType: EquationNodeType) : EquationNode;
    /**
     * Returns the node at the specified index among the children of the current node.
     * @param index - Index of the node
     * @returns
     * Returns the corresponding node if the specified node exists, otherwise returns null.
     */
    getChild(index: number) : EquationNode;
    /**
     * Removes itself from the parent.
     */
    remove() : void;
    /**
     * Removes the specified node from the current node's children.
     * @param node - Node to be deleted.
     */
    removeChild(node: EquationNode) : void;
    /**
     * Removes the node at the specified index from the current node's children.
     * @param index - Index of the node
     */
    removeChild(index: number) : void;
    /**
     * Removes all the child nodes of the current node.
     */
    removeAllChildren() : void;
    /**
     * Create a node of the specified type.
     * @param equationType - Types of Equation Nodes
     * @param workbook - The workbook object associated with the equation
     * @param parent - The parent node where this node is located
     * @returns
     * If the specified type exists, the corresponding node is returned, and if the type does not exist, a node of unknown type is returned.
     */
    static createNode(equationType: EquationNodeType, workbook: Workbook, parent: EquationNode) : EquationNode;
}

/**
 * This class specifies a mathematical paragraph containing one or more MathEquationNode(OMath) elements.
 */
export class EquationNodeParagraph extends EquationNode {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: EquationNode);
    /**
     * This specifies justification of the math paragraph (a series of adjacent equations within the same paragraph). A math paragraph can be Left Justified, Right Justified, Centered, or Centered as Group. By default, the math paragraph is Centered as Group. This means that the equations can be aligned with respect to each other, but the entire group of equations is centered as a whole.
     */
    getJustification() : EquationHorizontalJustificationType;
    /**
     * This specifies justification of the math paragraph (a series of adjacent equations within the same paragraph). A math paragraph can be Left Justified, Right Justified, Centered, or Centered as Group. By default, the math paragraph is Centered as Group. This means that the equations can be aligned with respect to each other, but the entire group of equations is centered as a whole.
     * @param value - The value to set.
     */
    setJustification(value: EquationHorizontalJustificationType) : void;
}

/**
 * This class  specifies the fraction equation, consisting of a numerator and denominator separated by a fraction bar. The fraction bar can be horizontal or diagonal, depending on the fraction properties. The fraction equation is also used to represent the stack function, which places one element above another, with no fraction bar.
 */
export class FractionEquationNode extends EquationNode {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: EquationNode);
    /**
     * This specifies the type of fraction ; the default is 'Bar'.
     */
    getFractionType() : EquationFractionType;
    /**
     * This specifies the type of fraction ; the default is 'Bar'.
     * @param value - The value to set.
     */
    setFractionType(value: EquationFractionType) : void;
}

/**
 * This class specifies an n-ary operator equation consisting of an n-ary operator, a base (or operand), and optional upper and lower bounds.
 */
export class NaryEquationNode extends EquationNode {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: EquationNode);
    /**
     * Whether to display the lower bound
     */
    isHideSubscript() : boolean;
    /**
     * Whether to display the lower bound
     * @param value - The value to set.
     */
    setIsHideSubscript(value: boolean) : void;
    /**
     * Whether to display the upper bound
     */
    isHideSuperscript() : boolean;
    /**
     * Whether to display the upper bound
     * @param value - The value to set.
     */
    setIsHideSuperscript(value: boolean) : void;
    /**
     * This attribute specifies the location of limits in n-ary operators. Limits can be either centered above and below the n-ary operator, or positioned just to the right of the operator.
     */
    getLimitLocation() : EquationLimitLocationType;
    /**
     * This attribute specifies the location of limits in n-ary operators. Limits can be either centered above and below the n-ary operator, or positioned just to the right of the operator.
     * @param value - The value to set.
     */
    setLimitLocation(value: EquationLimitLocationType) : void;
    /**
     * an n-ary operator.e.g "∑".
     * It is strongly recommended to use attribute NaryOperatorType to set n-ary operator.
     * Use this property setting if you cannot find the character you need in a known type.
     * 
     * @remarks
     * It should be noted that this property only accepts one character, and if multiple characters are passed in, only the first character is accepted.
     */
    getNaryOperator() : string;
    /**
     * an n-ary operator.e.g "∑".
     * It is strongly recommended to use attribute NaryOperatorType to set n-ary operator.
     * Use this property setting if you cannot find the character you need in a known type.
     * @param value - The value to set.
     * 
     * @remarks
     * It should be noted that this property only accepts one character, and if multiple characters are passed in, only the first character is accepted.
     */
    setNaryOperator(value: string) : void;
    /**
     * an n-ary operator.e.g "∑"
     */
    getNaryOperatorType() : EquationMathematicalOperatorType;
    /**
     * an n-ary operator.e.g "∑"
     * @param value - The value to set.
     */
    setNaryOperatorType(value: EquationMathematicalOperatorType) : void;
    /**
     * This attribute specifies the growth property of n-ary operators at the document level. When off, n-ary operators such as integrals and summations do not grow to match the size of their operand height. When on, the n-ary operator grows vertically to match its operand height.
     */
    getNaryGrow() : boolean;
    /**
     * This attribute specifies the growth property of n-ary operators at the document level. When off, n-ary operators such as integrals and summations do not grow to match the size of their operand height. When on, the n-ary operator grows vertically to match its operand height.
     * @param value - The value to set.
     */
    setNaryGrow(value: boolean) : void;
}

/**
 * This class specifies the radical equation, consisting of an optional degree deg(EquationNodeType.Degree) and a base.
 */
export class RadicalEquationNode extends EquationNode {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: EquationNode);
    /**
     * Whether to hide the degree of radicals.
     */
    isDegHide() : boolean;
    /**
     * Whether to hide the degree of radicals.
     * @param value - The value to set.
     */
    setIsDegHide(value: boolean) : void;
}

/**
 * This class specifies the components of an equation or mathematical expression.
 * Different types of components combined into different equations.
 * For example, a fraction consists of two parts, a numerator component and a denominator component.
 * For more component types, please refer to 'EquationNodeType'.
 */
export class EquationComponentNode extends EquationNode {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: EquationNode);
}

/**
 * This class specifies an equation that can optionally be superscript or subscript.
 * There are four main forms of this equation, superscript，subscript，superscript and subscript placed to the left of the base, superscript and subscript placed to the right of the base.
 */
export class SubSupEquationNode extends EquationNode {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: EquationNode);
}

/**
 * Equation node class of unknown type
 */
export class UnknowEquationNode extends EquationNode {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: EquationNode);
}

/**
 * Represents the unit type of line space size.
 */
export enum LineSpaceSizeType {
    /**
     * Represents in unit of a percentage of the text size.
     */
    Percentage = 0,
    /**
     * Represents in unit of points.
     */
    Points = 1,
}

/**
 * Represents no bullet.
 */
export class NoneBulletValue extends BulletValue {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: BulletValue);
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets the type of the bullet's value.
     */
    getType() : BulletType;
}

/**
 * Represents the value of the image bullet.
 */
export class PictureBulletValue extends BulletValue {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: BulletValue);
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets the type of the bullet's value.
     */
    getType() : BulletType;
    /**
     * Gets and sets image data of the bullet.
     */
    getImageData() : number[];
    /**
     * Gets and sets image data of the bullet.
     * @param value - The value to set.
     */
    setImageData(value: number[]) : void;
}

/**
 * Represents all automatic number scheme.
 */
export enum TextAutonumberScheme {
    /**
     */
    None = 0,
    /**
     * (a), (b), (c), …
     */
    AlphaLcParenBoth = 1,
    /**
     * a), b), c), …
     */
    AlphaLcParenR = 2,
    /**
     * a., b., c., …
     */
    AlphaLcPeriod = 3,
    /**
     * (A), (B), (C), …
     */
    AlphaUcParenBoth = 4,
    /**
     * A), B), C), …
     */
    AlphaUcParenR = 5,
    /**
     * A., B., C., …
     */
    AlphaUcPeriod = 6,
    /**
     * Bidi Arabic 1 (AraAlpha) with ANSI minus symbol
     */
    Arabic1Minus = 7,
    /**
     * Bidi Arabic 2 (AraAbjad) with ANSI minus symbol
     */
    Arabic2Minus = 8,
    /**
     * Dbl-byte Arabic numbers w/ double-byte period
     */
    ArabicDbPeriod = 9,
    /**
     * Dbl-byte Arabic numbers
     */
    ArabicDbPlain = 10,
    /**
     * (1), (2), (3), …
     */
    ArabicParenBoth = 11,
    /**
     * 1), 2), 3), …
     */
    ArabicParenR = 12,
    /**
     * 1., 2., 3., …
     */
    ArabicPeriod = 13,
    /**
     * 1, 2, 3, …
     */
    ArabicPlain = 14,
    /**
     * Dbl-byte circle numbers (1-10 circle[0x2460-], 11-arabic numbers)
     */
    CircleNumDbPlain = 15,
    /**
     * Wingdings black circle numbers
     */
    CircleNumWdBlackPlain = 16,
    /**
     * Wingdings white circle numbers (0-10 circle[0x0080-],11- arabic numbers)
     */
    CircleNumWdWhitePlain = 17,
    /**
     * EA: Simplified Chinese w/ single-byte period
     */
    Ea1ChsPeriod = 18,
    /**
     * EA: Simplified Chinese (TypeA 1-99, TypeC 100-)
     */
    Ea1ChsPlain = 19,
    /**
     * EA: Traditional Chinese w/ single-byte period
     */
    Ea1ChtPeriod = 20,
    /**
     * EA: Traditional Chinese (TypeA 1-19, TypeC 20-)
     */
    Ea1ChtPlain = 21,
    /**
     * EA: Japanese w/ double-byte period
     */
    Ea1JpnChsDbPeriod = 22,
    /**
     * EA: Japanese/Korean w/ single-byte period
     */
    Ea1JpnKorPeriod = 23,
    /**
     * EA: Japanese/Korean (TypeC 1-)
     */
    Ea1JpnKorPlain = 24,
    /**
     * Bidi Hebrew 2 with ANSI minus symbol
     */
    Hebrew2Minus = 25,
    /**
     * Hindi alphabet period - consonants
     */
    HindiAlpha1Period = 26,
    /**
     * Hindi alphabet period - vowels
     */
    HindiAlphaPeriod = 27,
    /**
     * Hindi numerical parentheses - right
     */
    HindiNumParenR = 28,
    /**
     * Hindi numerical period
     */
    HindiNumPeriod = 29,
    /**
     * (i), (ii), (iii), …
     */
    RomanLcParenBoth = 30,
    /**
     * i), ii), iii), …
     */
    RomanLcParenR = 31,
    /**
     * i., ii., iii., …
     */
    RomanLcPeriod = 32,
    /**
     * (I), (II), (III), …
     */
    RomanUcParenBoth = 33,
    /**
     * I), II), III), …
     */
    RomanUcParenR = 34,
    /**
     * I., II., III., …
     */
    RomanUcPeriod = 35,
    /**
     * Thai alphabet parentheses - both
     */
    ThaiAlphaParenBoth = 36,
    /**
     * Thai alphabet parentheses - right
     */
    ThaiAlphaParenR = 37,
    /**
     * Thai alphabet period
     */
    ThaiAlphaPeriod = 38,
    /**
     * Thai numerical parentheses - both
     */
    ThaiNumParenBoth = 39,
    /**
     * Thai numerical parentheses - right
     */
    ThaiNumParenR = 40,
    /**
     * Thai numerical period
     */
    ThaiNumPeriod = 41,
}

/**
 * Represents a geometric shape.
 */
export class Geometry {
    /**
     * Gets a collection of shape adjust value
     */
    getShapeAdjustValues() : ShapeGuideCollection;
}

/**
 * Represents the different types of font alignment.
 */
export enum TextFontAlignType {
    /**
     * When the text flow is horizontal or simple vertical same as fontBaseline
     * but for other vertical modes same as fontCenter.
     */
    Automatic = 0,
    /**
     * The letters are anchored to the very bottom of a single line.
     */
    Bottom = 1,
    /**
     * The letters are anchored to the bottom baseline of a single line.
     */
    Baseline = 2,
    /**
     * The letters are anchored between the two baselines of a single line.
     */
    Center = 3,
    /**
     * The letters are anchored to the top baseline of a single line.
     */
    Top = 4,
}

/**
 * Represents the setting of shape's text alignment;
 */
export class ShapeTextAlignment {
    /**
     * Gets and sets the text wrapped type of the shape which contains text.
     */
    isTextWrapped() : boolean;
    /**
     * Gets and sets the text wrapped type of the shape which contains text.
     * @param value - The value to set.
     */
    setIsTextWrapped(value: boolean) : void;
    /**
     * Indicates whether rotating text with shape.
     */
    getRotateTextWithShape() : boolean;
    /**
     * Indicates whether rotating text with shape.
     * @param value - The value to set.
     */
    setRotateTextWithShape(value: boolean) : void;
    /**
     * Gets and sets the text vertical overflow type of the text box.
     */
    getTextVerticalOverflow() : TextOverflowType;
    /**
     * Gets and sets the text vertical overflow type of the text box.
     * @param value - The value to set.
     */
    setTextVerticalOverflow(value: TextOverflowType) : void;
    /**
     * Gets and sets the text horizontal overflow type of the text box.
     */
    getTextHorizontalOverflow() : TextOverflowType;
    /**
     * Gets and sets the text horizontal overflow type of the text box.
     * @param value - The value to set.
     */
    setTextHorizontalOverflow(value: TextOverflowType) : void;
    /**
     * Gets and sets the rotation of the shape.
     */
    getRotationAngle() : number;
    /**
     * Gets and sets the rotation of the shape.
     * @param value - The value to set.
     */
    setRotationAngle(value: number) : void;
    /**
     * Gets and sets the text direction.
     */
    getTextVerticalType() : TextVerticalType;
    /**
     * Gets and sets the text direction.
     * @param value - The value to set.
     */
    setTextVerticalType(value: TextVerticalType) : void;
    /**
     * Indicates whether the shape is locked when worksheet is protected.
     * 
     * @remarks
     * Only works when worksheet is protected.
     */
    isLockedText() : boolean;
    /**
     * Indicates whether the shape is locked when worksheet is protected.
     * @param value - The value to set.
     * 
     * @remarks
     * Only works when worksheet is protected.
     */
    setIsLockedText(value: boolean) : void;
    /**
     * Indicates if size of shape is adjusted automatically according to its content.
     */
    getAutoSize() : boolean;
    /**
     * Indicates if size of shape is adjusted automatically according to its content.
     * @param value - The value to set.
     */
    setAutoSize(value: boolean) : void;
    /**
     * Gets and set the transform type of text.
     */
    getTextShapeType() : AutoShapeType;
    /**
     * Gets and set the transform type of text.
     * @param value - The value to set.
     */
    setTextShapeType(value: AutoShapeType) : void;
    /**
     * Returns the top margin in unit of Points
     */
    getTopMarginPt() : number;
    /**
     * Returns the top margin in unit of Points
     * @param value - The value to set.
     */
    setTopMarginPt(value: number) : void;
    /**
     * Returns the bottom margin in unit of Points
     */
    getBottomMarginPt() : number;
    /**
     * Returns the bottom margin in unit of Points
     * @param value - The value to set.
     */
    setBottomMarginPt(value: number) : void;
    /**
     * Returns the left margin in unit of Points
     */
    getLeftMarginPt() : number;
    /**
     * Returns the left margin in unit of Points
     * @param value - The value to set.
     */
    setLeftMarginPt(value: number) : void;
    /**
     * Returns the right margin in unit of Points
     */
    getRightMarginPt() : number;
    /**
     * Returns the right margin in unit of Points
     * @param value - The value to set.
     */
    setRightMarginPt(value: number) : void;
    /**
     * Indicates whether the margin of the text frame is automatic.
     */
    isAutoMargin() : boolean;
    /**
     * Indicates whether the margin of the text frame is automatic.
     * @param value - The value to set.
     */
    setIsAutoMargin(value: boolean) : void;
    /**
     * Gets and sets the number of columns of text in the bounding rectangle.
     */
    getNumberOfColumns() : number;
    /**
     * Gets and sets the number of columns of text in the bounding rectangle.
     * @param value - The value to set.
     */
    setNumberOfColumns(value: number) : void;
    /**
     */
    getHashCode() : number;
}

/**
 * Represents the node type.
 */
export enum TextNodeType {
    /**
     * Represents the text node.
     */
    TextRun = 0,
    /**
     * Represents the text paragraph.
     */
    TextParagraph = 1,
    /**
     * Represents the equation text.
     */
    Equation = 2,
}

/**
 * Represents the text paragraph setting.
 */
export class TextParagraph extends FontSetting {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: FontSetting);
    /**
     * Gets the bullet.
     */
    getBullet() : Bullet;
    /**
     * Gets the type of text node.
     */
    getType() : TextNodeType;
    /**
     * Gets and sets the amount of vertical white space that will be used within a paragraph.
     */
    getLineSpaceSizeType() : LineSpaceSizeType;
    /**
     * Gets and sets the amount of vertical white space that will be used within a paragraph.
     * @param value - The value to set.
     */
    setLineSpaceSizeType(value: LineSpaceSizeType) : void;
    /**
     * Gets and sets the amount of vertical white space that will be used within a paragraph.
     */
    getLineSpace() : number;
    /**
     * Gets and sets the amount of vertical white space that will be used within a paragraph.
     * @param value - The value to set.
     */
    setLineSpace(value: number) : void;
    /**
     * Gets and sets the amount of vertical white space that will be present after a paragraph.
     */
    getSpaceAfterSizeType() : LineSpaceSizeType;
    /**
     * Gets and sets the amount of vertical white space that will be present after a paragraph.
     * @param value - The value to set.
     */
    setSpaceAfterSizeType(value: LineSpaceSizeType) : void;
    /**
     * Gets and sets the amount of vertical white space that will be present after a paragraph.
     */
    getSpaceAfter() : number;
    /**
     * Gets and sets the amount of vertical white space that will be present after a paragraph.
     * @param value - The value to set.
     */
    setSpaceAfter(value: number) : void;
    /**
     * Gets and sets the amount of vertical white space that will be present before a paragraph.
     */
    getSpaceBeforeSizeType() : LineSpaceSizeType;
    /**
     * Gets and sets the amount of vertical white space that will be present before a paragraph.
     * @param value - The value to set.
     */
    setSpaceBeforeSizeType(value: LineSpaceSizeType) : void;
    /**
     * Gets and sets the amount of vertical white space that will be present before a paragraph.
     */
    getSpaceBefore() : number;
    /**
     * Gets and sets the amount of vertical white space that will be present before a paragraph.
     * @param value - The value to set.
     */
    setSpaceBefore(value: number) : void;
    /**
     * Gets tab stop list.
     */
    getStops() : TextTabStopCollection;
    /**
     * Specifies whether a Latin word can be broken in half and wrapped onto the next line without a hyphen being added.
     */
    isLatinLineBreak() : boolean;
    /**
     * Specifies whether a Latin word can be broken in half and wrapped onto the next line without a hyphen being added.
     * @param value - The value to set.
     */
    setIsLatinLineBreak(value: boolean) : void;
    /**
     * Specifies whether an East Asian word can be broken in half and wrapped onto the next line without a hyphen being added.
     */
    isEastAsianLineBreak() : boolean;
    /**
     * Specifies whether an East Asian word can be broken in half and wrapped onto the next line without a hyphen being added.
     * @param value - The value to set.
     */
    setIsEastAsianLineBreak(value: boolean) : void;
    /**
     * Specifies whether punctuation is to be forcefully laid out on a line of text or put on a different line of text.
     */
    isHangingPunctuation() : boolean;
    /**
     * Specifies whether punctuation is to be forcefully laid out on a line of text or put on a different line of text.
     * @param value - The value to set.
     */
    setIsHangingPunctuation(value: boolean) : void;
    /**
     * Specifies the right margin of the paragraph.
     */
    getRightMargin() : number;
    /**
     * Specifies the right margin of the paragraph.
     * @param value - The value to set.
     */
    setRightMargin(value: number) : void;
    /**
     * Specifies the left margin of the paragraph.
     */
    getLeftMargin() : number;
    /**
     * Specifies the left margin of the paragraph.
     * @param value - The value to set.
     */
    setLeftMargin(value: number) : void;
    /**
     * Specifies the indent size that will be applied to the first line of text in the paragraph.
     */
    getFirstLineIndent() : number;
    /**
     * Specifies the indent size that will be applied to the first line of text in the paragraph.
     * @param value - The value to set.
     */
    setFirstLineIndent(value: number) : void;
    /**
     * Determines where vertically on a line of text the actual words are positioned. This deals
     * with vertical placement of the characters with respect to the baselines.
     */
    getFontAlignType() : TextFontAlignType;
    /**
     * Determines where vertically on a line of text the actual words are positioned. This deals
     * with vertical placement of the characters with respect to the baselines.
     * @param value - The value to set.
     */
    setFontAlignType(value: TextFontAlignType) : void;
    /**
     * Gets and sets the text horizontal alignment type of the paragraph.
     */
    getAlignmentType() : TextAlignmentType;
    /**
     * Gets and sets the text horizontal alignment type of the paragraph.
     * @param value - The value to set.
     */
    setAlignmentType(value: TextAlignmentType) : void;
    /**
     * Gets and sets the default size for a tab character within this paragraph.
     */
    getDefaultTabSize() : number;
    /**
     * Gets and sets the default size for a tab character within this paragraph.
     * @param value - The value to set.
     */
    setDefaultTabSize(value: number) : void;
    /**
     * Gets all text runs in this paragraph.
     * If this paragraph is empty, return paragraph itself.
     */
    getChildren() : FontSetting[];
}

/**
 * Represents the text tab alignment types.
 */
export enum TextTabAlignmentType {
    /**
     * The text at this tab stop is center aligned.
     */
    Center = 0,
    /**
     * At this tab stop, the decimals are lined up.
     */
    Decimal = 1,
    /**
     * The text at this tab stop is left aligned.
     */
    Left = 2,
    /**
     * The text at this tab stop is right aligned.
     */
    Right = 3,
}

/**
 * Represents tab stop.
 */
export class TextTabStop {
    /**
     * Specifies the alignment that is to be applied to text using this tab stop.
     */
    getTabAlignment() : TextTabAlignmentType;
    /**
     * Specifies the alignment that is to be applied to text using this tab stop.
     * @param value - The value to set.
     */
    setTabAlignment(value: TextTabAlignmentType) : void;
    /**
     * Specifies the position of the tab stop relative to the left margin.
     */
    getTabPosition() : number;
    /**
     * Specifies the position of the tab stop relative to the left margin.
     * @param value - The value to set.
     */
    setTabPosition(value: number) : void;
}

/**
 * Represents the list of all tab stops.
 */
export class TextTabStopCollection {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets <see cref="TextTabStop"/> by the index.
     * @param index - The index.
     */
    get(index: number) : TextTabStop;
    /**
     * Adds a tab stop.
     * @param tabAlignment - 
     * @param tabPosition - 
     */
    add(tabAlignment: TextTabAlignmentType, tabPosition: number) : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the text direct type.
 */
export enum TextVerticalType {
    /**
     * East Asian Vertical display.
     */
    Vertical = 0,
    /**
     * Horizontal text.
     */
    Horizontal = 1,
    /**
     * Displayed vertical and the text flows top down then LEFT to RIGHT
     */
    VerticalLeftToRight = 2,
    /**
     * Each line is 90 degrees rotated clockwise
     */
    Vertical90 = 3,
    /**
     * Each line is 270 degrees rotated clockwise
     */
    Vertical270 = 4,
    /**
     * Determines if all of the text is vertical
     */
    Stacked = 5,
    /**
     * Specifies that vertical WordArt should be shown from right to left rather than left to right.
     */
    StackedRightToLeft = 6,
}

/**
 * Specifies how to apply style for parsed values when converting string value to number or datetime.
 */
export enum TxtLoadStyleStrategy {
    /**
     * Does not set style for the parsed value.
     */
    None = 0,
    /**
     * Set the style as built-in number/datetime when the parsed value are plain numeric/datetime values.
     * 
     * @remarks
     * When ms excel parsing datetime or numeric values according to user's input(such as CSV file),
     * the formatting of those values may be changed, such as
     * leading/tailing zeros of number, year/month/day order of datetime, ...etc.
     * This type is for simulating ms excel's behavior.
     */
    BuiltIn = 1,
    /**
     * Set the exact custom format for the parsed value to make the formatted value be same with the original input one.
     */
    ExactFormat = 2,
}

/**
 * Represents a custom geometric shape.
 */
export class CustomGeometry extends Geometry {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Geometry);
    /**
     * Gets path collection information when shape is a NotPrimitive autoshape
     */
    getPaths() : ShapePathCollection;
}

/**
 * Encapsulates a shape guide specifies the presence of a shape guide that will be used to
 * govern the geometry of the specified shape
 */
export class ShapeGuide extends BaseShapeGuide {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: BaseShapeGuide);
    /**
     * Gets or sets value of this guide
     */
    getValue() : number;
    /**
     * Gets or sets value of this guide
     * @param value - The value to set.
     */
    setValue(value: number) : void;
}

/**
 * Encapsulates a collection of shape guide
 */
export class ShapeGuideCollection {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets a shape guide by index
     * @param index - 
     */
    get(index: number) : ShapeGuide;
    /**
     * Adds a shape guide.(Important: This feature is currently only available for Excel07 and above)
     * @param name - the name of adjust. It's as "adj(Used when there is only one adjustment value)", "adj1", "adj2", "adj3" and so on.
     * @param val - the value of adjust
     */
    add(name: string, val: number) : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents type of the property to be locked.
 */
export enum ShapeLockType {
    /**
     * Group
     */
    Group = 0,
    /**
     * AdjustHandles
     */
    AdjustHandles = 1,
    /**
     * Text
     */
    Text = 2,
    /**
     * Points
     */
    Points = 3,
    /**
     * Crop
     */
    Crop = 4,
    /**
     * Selection
     */
    Selection = 5,
    /**
     * Move
     */
    Move = 6,
    /**
     * AspectRatio
     */
    AspectRatio = 7,
    /**
     * Rotation
     */
    Rotation = 8,
    /**
     * Ungroup
     */
    Ungroup = 9,
    /**
     * Resize
     */
    Resize = 10,
    /**
     * ShapeType
     */
    ShapeType = 11,
    /**
     * Arrowhead
     */
    Arrowhead = 12,
}

/**
 * Represents a creation path consisting of a series of moves, lines and curves that when combined will form a geometric shape.
 */
export class ShapeSegmentPathCollection {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets <see cref="ShapeSegmentPath"/> object.
     * @param index - The index.
     * @returns
     * Returns a <see cref="ShapeSegmentPath"/> object.
     */
    get(index: number) : ShapeSegmentPath;
    /**
     * Add a segment path in creation path.
     * @param type - The path type.
     * @returns
     * Returns the position of <see cref="ShapeSegmentPath"/> object in the list.
     */
    add(type: ShapePathType) : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents an x-y coordinate within the path coordinate space.
 */
export class ShapePathPoint {
    /**
     * Gets and sets x coordinate for this position coordinate.
     */
    getX() : number;
    /**
     * Gets and sets x coordinate for this position coordinate.
     * @param value - The value to set.
     */
    setX(value: number) : void;
    /**
     * Gets y coordinate for this position coordinate.
     */
    getY() : number;
    /**
     * Gets y coordinate for this position coordinate.
     * @param value - The value to set.
     */
    setY(value: number) : void;
}

/**
 * Represents all shape path points.
 */
export class ShapePathPointCollection {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets shape path point by index.
     * @param index - The index
     * @returns
     * Returns <see cref="ShapePathPoint"/> object
     */
    get(index: number) : ShapePathPoint;
    /**
     * Adds a path point.
     * @param x - The x coordinate.
     * @param y - The y coordinate.
     */
    add(x: number, y: number) : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Specifies an external data connection
 */
export class ExternalConnection {
    /**
     * Gets the id of the connection.
     */
    getId() : number;
    /**
     * Gets the definition of power query formula.
     */
    getPowerQueryFormula() : PowerQueryFormula;
    /**
     * Gets or Sets the external connection DataSource type.
     */
    getType() : ConnectionDataSourceType;
    /**
     * Gets or Sets the external connection DataSource type.
     * @param value - The value to set.
     */
    setType(value: ConnectionDataSourceType) : void;
    /**
     * Used when the external data source is file-based. When a connection to such a data
     * source fails, the spreadsheet application attempts to connect directly to this file. May be
     * expressed in URI or system-specific file path notation.
     */
    getSourceFile() : string;
    /**
     * Used when the external data source is file-based. When a connection to such a data
     * source fails, the spreadsheet application attempts to connect directly to this file. May be
     * expressed in URI or system-specific file path notation.
     * @param value - The value to set.
     */
    setSourceFile(value: string) : void;
    /**
     * Identifier for Single Sign On (SSO) used for authentication between an intermediate
     * spreadsheetML server and the external data source.
     */
    getSSOId() : string;
    /**
     * Identifier for Single Sign On (SSO) used for authentication between an intermediate
     * spreadsheetML server and the external data source.
     * @param value - The value to set.
     */
    setSSOId(value: string) : void;
    /**
     * True if the password is to be saved as part of the connection string; otherwise, False.
     */
    getSavePassword() : boolean;
    /**
     * True if the password is to be saved as part of the connection string; otherwise, False.
     * @param value - The value to set.
     */
    setSavePassword(value: boolean) : void;
    /**
     * True if the external data fetched over the connection to populate a table is to be saved
     * with the workbook; otherwise, false.
     */
    getSaveData() : boolean;
    /**
     * True if the external data fetched over the connection to populate a table is to be saved
     * with the workbook; otherwise, false.
     * @param value - The value to set.
     */
    setSaveData(value: boolean) : void;
    /**
     * True if this connection should be refreshed when opening the file; otherwise, false.
     */
    getRefreshOnLoad() : boolean;
    /**
     * True if this connection should be refreshed when opening the file; otherwise, false.
     * @param value - The value to set.
     */
    setRefreshOnLoad(value: boolean) : void;
    /**
     * Specifies what the spreadsheet application should do when a connection fails.
     * The default value is ReConnectionMethodType.Required.
     */
    getReconnectionMethodType() : ReConnectionMethodType;
    /**
     * Specifies what the spreadsheet application should do when a connection fails.
     * The default value is ReConnectionMethodType.Required.
     * @param value - The value to set.
     */
    setReconnectionMethodType(value: ReConnectionMethodType) : void;
    /**
     * Indicates whether the spreadsheet application should always and only use the
     * connection information in the external connection file indicated by the odcFile attribute
     * when the connection is refreshed.  If false, then the spreadsheet application
     * should follow the procedure indicated by the reconnectionMethod attribute
     */
    getOnlyUseConnectionFile() : boolean;
    /**
     * Indicates whether the spreadsheet application should always and only use the
     * connection information in the external connection file indicated by the odcFile attribute
     * when the connection is refreshed.  If false, then the spreadsheet application
     * should follow the procedure indicated by the reconnectionMethod attribute
     * @param value - The value to set.
     */
    setOnlyUseConnectionFile(value: boolean) : void;
    /**
     * Specifies the full path to external connection file from which this connection was
     * created. If a connection fails during an attempt to refresh data, and reconnectionMethod=1,
     * then the spreadsheet application will try again using information from the external connection file
     * instead of the connection object embedded within the workbook.
     */
    getOdcFile() : string;
    /**
     * Specifies the full path to external connection file from which this connection was
     * created. If a connection fails during an attempt to refresh data, and reconnectionMethod=1,
     * then the spreadsheet application will try again using information from the external connection file
     * instead of the connection object embedded within the workbook.
     * @param value - The value to set.
     */
    setOdcFile(value: string) : void;
    /**
     * True if the connection has not been refreshed for the first time; otherwise, false.
     * This state can happen when the user saves the file before a query has finished returning.
     */
    isNew() : boolean;
    /**
     * True if the connection has not been refreshed for the first time; otherwise, false.
     * This state can happen when the user saves the file before a query has finished returning.
     * @param value - The value to set.
     */
    setIsNew(value: boolean) : void;
    /**
     * Specifies the name of the connection. Each connection must have a unique name.
     */
    getName() : string;
    /**
     * Specifies the name of the connection. Each connection must have a unique name.
     * @param value - The value to set.
     */
    setName(value: string) : void;
    /**
     * True when the spreadsheet application should make efforts to keep the connection
     * open. When false, the application should close the connection after retrieving the
     * information.
     */
    getKeepAlive() : boolean;
    /**
     * True when the spreadsheet application should make efforts to keep the connection
     * open. When false, the application should close the connection after retrieving the
     * information.
     * @param value - The value to set.
     */
    setKeepAlive(value: boolean) : void;
    /**
     * Specifies the number of minutes between automatic refreshes of the connection.
     */
    getRefreshInternal() : number;
    /**
     * Specifies the number of minutes between automatic refreshes of the connection.
     * @param value - The value to set.
     */
    setRefreshInternal(value: number) : void;
    /**
     * Specifies The unique identifier of this connection.
     */
    getConnectionId() : number;
    /**
     * Specifies the user description for this connection
     */
    getConnectionDescription() : string;
    /**
     * Specifies the user description for this connection
     * @param value - The value to set.
     */
    setConnectionDescription(value: string) : void;
    /**
     * Indicates whether the associated workbook connection has been deleted.  true if the
     * connection has been deleted; otherwise, false.
     */
    isDeleted() : boolean;
    /**
     * Indicates whether the associated workbook connection has been deleted.  true if the
     * connection has been deleted; otherwise, false.
     * @param value - The value to set.
     */
    setIsDeleted(value: boolean) : void;
    /**
     * Specifies the authentication method to be used when establishing (or re-establishing) the connection.
     */
    getCredentialsMethodType() : CredentialsMethodType;
    /**
     * Specifies the authentication method to be used when establishing (or re-establishing) the connection.
     * @param value - The value to set.
     */
    setCredentialsMethodType(value: CredentialsMethodType) : void;
    /**
     * Indicates whether the connection can be refreshed in the background (asynchronously).
     * true if preferred usage of the connection is to refresh asynchronously in the background;
     * false if preferred usage of the connection is to refresh synchronously in the foreground.
     */
    getBackgroundRefresh() : boolean;
    /**
     * Indicates whether the connection can be refreshed in the background (asynchronously).
     * true if preferred usage of the connection is to refresh asynchronously in the background;
     * false if preferred usage of the connection is to refresh synchronously in the foreground.
     * @param value - The value to set.
     */
    setBackgroundRefresh(value: boolean) : void;
    /**
     * Gets <see cref="ConnectionParameterCollection"/> for an ODBC or web query.
     */
    getParameters() : ConnectionParameterCollection;
}

/**
 * Specifies the <see cref="ExternalConnection"/> collection
 */
export class ExternalConnectionCollection {
    /**
     * Gets the <see cref="ExternalConnection"/> element at the specified index.
     * @param index - The zero based index of the element.
     * @returns
     * The element at the specified index.
     */
    get(index: number) : ExternalConnection;
    /**
     * Gets the <see cref="ExternalConnection"/> element with the specified name.
     * @param connectionName - the name of data connection
     * @returns
     * The element with the specified name.
     */
    get(connectionName: string) : ExternalConnection;
    /**
     * Gets the <see cref="ExternalConnection"/> element at the specified index.
     * @param value - The value to set.
     * @param index - The zero based index of the element.
     * @returns
     * The element at the specified index.
     */
    set(value: ExternalConnection, index: number) : void;
    /**
     * Gets the <see cref="ExternalConnection"/> element with the specified id.
     * @param connId - external connection id
     * @returns
     * The element with the specified id.
     */
    getExternalConnectionById(connId: number) : ExternalConnection;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Specifies all properties associated with an ODBC or OLE DB external data connection.
 */
export class DBConnection extends ExternalConnection {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: ExternalConnection);
    /**
     * The connection information string is used to make contact with an OLE DB or ODBC data source.
     */
    getConnectionInfo() : string;
    /**
     * The connection information string is used to make contact with an OLE DB or ODBC data source.
     * @param value - The value to set.
     */
    setConnectionInfo(value: string) : void;
    /**
     * Gets the definition of power query formula.
     */
    getPowerQueryFormula() : PowerQueryFormula;
    /**
     * Specifies the OLE DB command type.
     * 1. Query specifies a cube name
     * 2. Query specifies a SQL statement
     * 3. Query specifies a table name
     * 4. Query specifies that default information has been given, and it is up to the provider how to interpret.
     * 5. Query is against a web based List Data Provider.
     */
    getCommandType() : OLEDBCommandType;
    /**
     * Specifies the OLE DB command type.
     * 1. Query specifies a cube name
     * 2. Query specifies a SQL statement
     * 3. Query specifies a table name
     * 4. Query specifies that default information has been given, and it is up to the provider how to interpret.
     * 5. Query is against a web based List Data Provider.
     * @param value - The value to set.
     */
    setCommandType(value: OLEDBCommandType) : void;
    /**
     * The string containing the database command to pass to the data provider API that will
     * interact with the external source in order to retrieve data
     */
    getCommand() : string;
    /**
     * The string containing the database command to pass to the data provider API that will
     * interact with the external source in order to retrieve data
     * @param value - The value to set.
     */
    setCommand(value: string) : void;
    /**
     * Specifies a second command text string that is persisted when PivotTable server-based
     * page fields are in use.
     * For ODBC connections, serverCommand is usually a broader query than command (no
     * WHERE clause is present in the former). Based on these 2 commands(Command and ServerCommand),
     * parameter UI can be populated and parameterized queries can be constructed
     */
    getSeverCommand() : string;
    /**
     * Specifies a second command text string that is persisted when PivotTable server-based
     * page fields are in use.
     * For ODBC connections, serverCommand is usually a broader query than command (no
     * WHERE clause is present in the former). Based on these 2 commands(Command and ServerCommand),
     * parameter UI can be populated and parameterized queries can be constructed
     * @param value - The value to set.
     */
    setSeverCommand(value: string) : void;
}

/**
 * Specifies the properties for a web query source. A web query will retrieve data from HTML tables,
 * and can also supply HTTP "Get" parameters to be processed by the web server in generating the HTML by
 * including the parameters and parameter elements.
 */
export class WebQueryConnection extends ExternalConnection {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: ExternalConnection);
    /**
     * true if the web query source is XML (versus HTML), otherwise false.
     */
    isXml() : boolean;
    /**
     * true if the web query source is XML (versus HTML), otherwise false.
     * @param value - The value to set.
     */
    setIsXml(value: boolean) : void;
    /**
     * This flag exists for backward compatibility with older existing spreadsheet files, and is set
     * to true if this web query was created in Microsoft Excel 97.
     * This is an optional attribute that can be ignored.
     */
    isXl97() : boolean;
    /**
     * This flag exists for backward compatibility with older existing spreadsheet files, and is set
     * to true if this web query was created in Microsoft Excel 97.
     * This is an optional attribute that can be ignored.
     * @param value - The value to set.
     */
    setIsXl97(value: boolean) : void;
    /**
     * This flag exists for backward compatibility with older existing spreadsheet files, and is set
     * to true if this web query was refreshed in a spreadsheet application newer than or equal
     * to Microsoft Excel 2000.
     * This is an optional attribute that can be ignored.
     */
    isXl2000() : boolean;
    /**
     * This flag exists for backward compatibility with older existing spreadsheet files, and is set
     * to true if this web query was refreshed in a spreadsheet application newer than or equal
     * to Microsoft Excel 2000.
     * This is an optional attribute that can be ignored.
     * @param value - The value to set.
     */
    setIsXl2000(value: boolean) : void;
    /**
     * URL to use to refresh external data.
     */
    getUrl() : string;
    /**
     * URL to use to refresh external data.
     * @param value - The value to set.
     */
    setUrl(value: string) : void;
    /**
     * Flag indicating whether dates should be imported into cells in the worksheet as text rather than dates.
     */
    isTextDates() : boolean;
    /**
     * Flag indicating whether dates should be imported into cells in the worksheet as text rather than dates.
     * @param value - The value to set.
     */
    setIsTextDates(value: boolean) : void;
    /**
     * Flag indicating that XML source data should be imported instead of the HTML table itself.
     */
    isXmlSourceData() : boolean;
    /**
     * Flag indicating that XML source data should be imported instead of the HTML table itself.
     * @param value - The value to set.
     */
    setIsXmlSourceData(value: boolean) : void;
    /**
     * Returns or sets the string used with the post method of inputting data into a web server
     * to return data from a web query.
     */
    getPost() : string;
    /**
     * Returns or sets the string used with the post method of inputting data into a web server
     * to return data from a web query.
     * @param value - The value to set.
     */
    setPost(value: string) : void;
    /**
     * Flag indicating whether data contained within HTML PRE tags in the web page is
     * parsed into columns when you import the page into a query table.
     */
    isParsePre() : boolean;
    /**
     * Flag indicating whether data contained within HTML PRE tags in the web page is
     * parsed into columns when you import the page into a query table.
     * @param value - The value to set.
     */
    setIsParsePre(value: boolean) : void;
    /**
     * Flag indicating whether web queries should only work on HTML tables.
     */
    isHtmlTables() : boolean;
    /**
     * Flag indicating whether web queries should only work on HTML tables.
     * @param value - The value to set.
     */
    setIsHtmlTables(value: boolean) : void;
    /**
     * How to handle formatting from the HTML source when bringing web query data into the
     * worksheet. Relevant when sourceData is True.
     */
    getHtmlFormat() : HtmlFormatHandlingType;
    /**
     * How to handle formatting from the HTML source when bringing web query data into the
     * worksheet. Relevant when sourceData is True.
     * @param value - The value to set.
     */
    setHtmlFormat(value: HtmlFormatHandlingType) : void;
    /**
     * Flag indicating whether to parse all tables inside a PRE block with the same width settings
     * as the first row.
     */
    isSameSettings() : boolean;
    /**
     * Flag indicating whether to parse all tables inside a PRE block with the same width settings
     * as the first row.
     * @param value - The value to set.
     */
    setIsSameSettings(value: boolean) : void;
    /**
     * The URL of the user-facing web page showing the web query data. This URL is persisted
     * in the case that sourceData="true" and url has been redirected to reference an XML file.
     * Then the user-facing page can be shown in the UI, and the XML data can be retrieved
     * behind the scenes.
     */
    getEditWebPage() : string;
    /**
     * The URL of the user-facing web page showing the web query data. This URL is persisted
     * in the case that sourceData="true" and url has been redirected to reference an XML file.
     * Then the user-facing page can be shown in the UI, and the XML data can be retrieved
     * behind the scenes.
     * @param value - The value to set.
     */
    setEditWebPage(value: string) : void;
    /**
     * Flag indicating whether consecutive delimiters should be treated as just one delimiter.
     */
    isConsecutive() : boolean;
    /**
     * Flag indicating whether consecutive delimiters should be treated as just one delimiter.
     * @param value - The value to set.
     */
    setIsConsecutive(value: boolean) : void;
}

/**
 * Specifies external database source type
 */
export enum ConnectionDataSourceType {
    /**
     * ODBC-based source
     */
    ODBCBasedSource = 1,
    /**
     * DAO-based source
     */
    DAOBasedSource = 2,
    /**
     * File based database source
     */
    FileBasedDataBaseSource = 3,
    /**
     * Web query
     */
    WebQuery = 4,
    /**
     * OLE DB-based source
     */
    OLEDBBasedSource = 5,
    /**
     * Text-based source
     */
    TextBasedSource = 6,
    /**
     * ADO record set
     */
    ADORecordSet = 7,
    /**
     * DSP
     */
    DSP = 8,
    /**
     * OLE DB data source created by the Spreadsheet Data Model.
     */
    OLEDBDataModel = 100,
    /**
     * Data feed data source created by the Spreadsheet Data Model.
     */
    DataFeedDataModel = 101,
    /**
     * Worksheet data source created by the Spreadsheet Data Model.
     */
    WorksheetDataModel = 102,
    /**
     * Worksheet data source created by the Spreadsheet Data Model.
     * 
     * @remarks
     * NOTE: This member is now obsolete. Instead,
     * please use WorksheetDataModel enum.
     * This property will be removed 12 months later since September 2017.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use WorksheetDataModel enum instead.
     */
    Table = 102,
    /**
     * Text data source created by the Spreadsheet Data Model.
     */
    TextDataModel = 103,
    /**
     * Text data source created by the Spreadsheet Data Model.
     */
    Unknown = 255,
}

/**
 * Specifies properties about any parameters used with external data connections
 * Parameters are valid for ODBC and web queries.
 */
export class ConnectionParameter {
    /**
     * SQL data type of the parameter. Only valid for ODBC sources.
     */
    getSqlType() : SqlDataType;
    /**
     * SQL data type of the parameter. Only valid for ODBC sources.
     * @param value - The value to set.
     */
    setSqlType(value: SqlDataType) : void;
    /**
     * Flag indicating whether the query should automatically refresh when the contents of a
     * cell that provides the parameter value changes. If true, then external data is refreshed
     * using the new parameter value every time there's a change. If false, then external data
     * is only refreshed when requested by the user, or some other event triggers refresh (e.g., workbook opened).
     */
    getRefreshOnChange() : boolean;
    /**
     * Flag indicating whether the query should automatically refresh when the contents of a
     * cell that provides the parameter value changes. If true, then external data is refreshed
     * using the new parameter value every time there's a change. If false, then external data
     * is only refreshed when requested by the user, or some other event triggers refresh (e.g., workbook opened).
     * @param value - The value to set.
     */
    setRefreshOnChange(value: boolean) : void;
    /**
     * Prompt string for the parameter. Presented to the spreadsheet user along with input UI
     * to collect the parameter value before refreshing the external data. Used only when
     * parameterType = prompt.
     */
    getPrompt() : string;
    /**
     * Prompt string for the parameter. Presented to the spreadsheet user along with input UI
     * to collect the parameter value before refreshing the external data. Used only when
     * parameterType = prompt.
     * @param value - The value to set.
     */
    setPrompt(value: string) : void;
    /**
     * Type of parameter used.
     * If the parameterType=value, then the value from boolean, double, integer,
     * or string will be used.  In this case, it is expected that only one of
     * {boolean, double, integer, or string} will be specified.
     */
    getType() : ConnectionParameterType;
    /**
     * Type of parameter used.
     * If the parameterType=value, then the value from boolean, double, integer,
     * or string will be used.  In this case, it is expected that only one of
     * {boolean, double, integer, or string} will be specified.
     * @param value - The value to set.
     */
    setType(value: ConnectionParameterType) : void;
    /**
     * The name of the parameter.
     */
    getName() : string;
    /**
     * The name of the parameter.
     * @param value - The value to set.
     */
    setName(value: string) : void;
    /**
     * Cell reference indicating which cell's value to use for the query parameter. Used only when parameterType is cell.
     */
    getCellReference() : string;
    /**
     * Cell reference indicating which cell's value to use for the query parameter. Used only when parameterType is cell.
     * @param value - The value to set.
     */
    setCellReference(value: string) : void;
}

/**
 * Specifies the <see cref="ConnectionParameter"/> collection
 */
export class ConnectionParameterCollection {
    /**
     * Gets the <see cref="ConnectionParameter"/> element at the specified index.
     * @param index - The zero based index of the element.
     * @returns
     * The element at the specified index.
     */
    get(index: number) : ConnectionParameter;
    /**
     * Gets the <see cref="ConnectionParameter"/> element with the specified name.
     * @param connParamName - connection parameter name
     * @returns
     * The element with the specified name.
     */
    get(connParamName: string) : ConnectionParameter;
    /**
     * Gets the <see cref="ConnectionParameter"/> element at the specified index.
     * @param value - The value to set.
     * @param index - The zero based index of the element.
     * @returns
     * The element at the specified index.
     */
    set(value: ConnectionParameter, index: number) : void;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Specifies the parameter type of external connection
 */
export enum ConnectionParameterType {
    /**
     * Get the parameter value from a cell on each refresh.
     */
    Cell = 0,
    /**
     * Prompt the user on each refresh for a parameter value.
     */
    Prompt = 1,
    /**
     * Use a constant value on each refresh for the parameter value.
     */
    Value = 2,
}

/**
 * Specifies Credentials method used for server access.
 */
export enum CredentialsMethodType {
    /**
     * Integrated Authentication
     */
    Integrated = 0,
    /**
     * No Credentials
     */
    None = 1,
    /**
     * Prompt Credentials
     */
    Prompt = 2,
    /**
     * Stored Credentials
     */
    Stored = 3,
}

/**
 * Specifies the OLE DB command type.
 */
export enum OLEDBCommandType {
    /**
     * The command type is not specified.
     */
    None = 0,
    /**
     * Specifies a cube name
     * 
     * @remarks
     * unsupported
     */
    CubeName = 1,
    /**
     * Specifies a SQL statement
     */
    SqlStatement = 2,
    /**
     * Specifies a table name
     */
    TableName = 3,
    /**
     * Specifies that default information has been given, and it is up to the provider how to interpret.
     * 
     * @remarks
     * unsupported
     */
    DefaultInformation = 4,
    /**
     * Specifies a query which is against a web based List Data Provider.
     * 
     * @remarks
     * unsupported
     */
    WebBasedList = 5,
}

/**
 * Specifies what the spreadsheet application should do when a connection fails.
 */
export enum ReConnectionMethodType {
    /**
     * On refresh use the existing connection information and if it ends up being invalid
     * then get updated connection information, if available from the external connection file.
     */
    Required = 1,
    /**
     * On every refresh get updated connection information from the external connection file,
     * if available, and use that instead of the existing connection information.
     * In this case the data refresh will fail if the external connection file is unavailable.
     */
    Always = 2,
    /**
     * Never get updated connection information from the external connection file
     * even if it is available and even if the existing connection information is invalid
     */
    Never = 3,
}

/**
 * Specifies SQL data type of the parameter. Only valid for ODBC sources.
 */
export enum SqlDataType {
    /**
     * sql unsigned offset
     */
    SqlUnsignedOffset = -22,
    /**
     * sql signed offset
     */
    SqlSignedOffset = -20,
    /**
     * sql guid
     */
    SqlGUID = -11,
    /**
     * sql wide long variable char
     */
    SqlWLongVarchar = -10,
    /**
     * sql wide variable char
     */
    SqlWVarchar = -9,
    /**
     * sql wide char
     */
    SqlWChar = -8,
    /**
     * sql bit
     */
    SqlBit = -7,
    /**
     * sql tiny int
     */
    SqlTinyInt = -6,
    /**
     * sql big int
     */
    SqlBigInt = -5,
    /**
     * sql long variable binary
     */
    SqlLongVarBinary = -4,
    /**
     * sql variable binary
     */
    SqlVarBinary = -3,
    /**
     * sql binary
     */
    SqlBinary = -2,
    /**
     * sql long variable char
     */
    SqlLongVarChar = -1,
    /**
     * sql unknown type
     */
    SqlUnknownType = 0,
    /**
     * sql char
     */
    SqlChar = 1,
    /**
     * sql numeric
     */
    SqlNumeric = 2,
    /**
     * sql decimal
     */
    SqlDecimal = 3,
    /**
     * sql integer
     */
    SqlInteger = 4,
    /**
     * sql small int
     */
    SqlSmallInt = 5,
    /**
     * sql float
     */
    SqlFloat = 6,
    /**
     * sql real
     */
    SqlReal = 7,
    /**
     * sql double
     */
    SqlDouble = 8,
    /**
     * sql date type
     */
    SqlTypeDate = 9,
    /**
     * sql time type
     */
    SqlTypeTime = 10,
    /**
     * sql timestamp type
     */
    SqlTypeTimestamp = 11,
    /**
     * sql variable char
     */
    SqlVarChar = 12,
    /**
     * sql interval year
     */
    SqlIntervalYear = 101,
    /**
     * sql interval month
     */
    SqlIntervalMonth = 102,
    /**
     * sql interval day
     */
    SqlIntervalDay = 103,
    /**
     * sql interval hour
     */
    SqlIntervalHour = 104,
    /**
     * sql interval minute
     */
    SqlIntervalMinute = 105,
    /**
     * sql interval second
     */
    SqlIntervalSecond = 106,
    /**
     * sql interval year to month
     */
    SqlIntervalYearToMonth = 107,
    /**
     * sql interval day to hour
     */
    SqlIntervalDayToHour = 108,
    /**
     * sql interval day to minute
     */
    SqlIntervalDayToMinute = 109,
    /**
     * sql interval day to second
     */
    SqlIntervalDayToSecond = 110,
    /**
     * sql interval hour to minute
     */
    SqlIntervalHourToMinute = 111,
    /**
     * sql interval hour to second
     */
    SqlIntervalHourToSecond = 112,
    /**
     * sql interval minute to second
     */
    SqlIntervalMinuteToSecond = 113,
}

/**
 * Contains data returned by <see cref="FileFormatUtil"/> file format detection methods.
 */
export class FileFormatInfo {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets whether the file is protected by Microsoft Rights Management Server.
     */
    isProtectedByRMS() : boolean;
    /**
     * Returns true if the document is encrypted and requires a password to open.
     */
    isEncrypted() : boolean;
    /**
     * Gets the detected file format.
     */
    getFileFormatType() : FileFormatType;
    /**
     * Gets the detected load format.
     */
    getLoadFormat() : LoadFormat;
}

/**
 * Represents cells data handler for reading large spreadsheet files in light weight mode.
 * 
 * @remarks
 * When reading a workbook by this mode, <see cref="StartSheet(Worksheet)"/> will be checked when reading every worksheet in the workbook.
 * For one sheet, if <see cref="StartSheet(Worksheet)"/> gives true, then all data and properties of rows/cells of this sheet will be checked
 * and processed by the implementation of this interface. For every row, <see cref="StartRow(int)"/> will be called to check whether it need to be processed.
 * If a row needs to be processed, properties of this row will be read firstly and user can access its properties by <see cref="ProcessRow(Row)"/>.
 * if row's cells need to be processed too, then <see cref="ProcessRow(Row)"/> should returns true and then <see cref="StartCell(int)"/> will be
 * called for every existing cell in this row to check whether one cell need to be processed. If one cell needs to be processed,
 * then <see cref="ProcessCell(Cell)"/> will be called to process the cell by the implementation of this interface.
 * <br></br>
 * Please note, user should only operate on the values and properties of current Row/Cell object provided by corresponding method.
 * Because the cells data is read from the template file in streaming manner, most of other objects may be reset/update later
 * after cells data has been loaded. So when user operating other objects in this implementation,
 * those operations may be not able to affect the objects existing in the workbook. Or even worse, those operations may
 * cause inconsistent data in the workbook and then cause unpected issue or exception later.
 * So, for all other objects such as shapes, column width and styles, conditional formattings, ...etc.,
 * please do not operate them in any methods of this implementation.
 * Instead, please manage them after the workbook has been constructed.
 */
export interface LightCellsDataHandler {
    /**
     * Starts to process a worksheet.
     * @param sheet - the worksheet to read cells data.
     * @returns
     * whether this sheet's cells data needs to be processed. false to ignore this sheet.
     * 
     * @remarks
     * It will be called before reading cells data of a worksheet.
     */
    startSheet(sheet: Worksheet) : boolean;
    /**
     * Prepares to process a row.
     * @param rowIndex - the index of next row to be processed
     * @returns
     * whether this row(properties or cells data) needs to be processed. false to ignore this row and its cells and check the next row.
     */
    startRow(rowIndex: number) : boolean;
    /**
     * Starts to process one row.
     * @param row - Row object which is being processed currently.
     * @returns
     * whether this row's cells need to be processed. false to ignore all cells in this row.
     * 
     * @remarks
     * It will be called after row's properties such as height, style, ...etc. have been read. However, cells in this row has not been read yet.
     */
    processRow(row: Row) : boolean;
    /**
     * Prepares to process a cell.
     * @param columnIndex - column index of the cell to be processed
     * @returns
     * whether this cell needs to be processed. false to ignore the cell and check the next one until reach the end of cells data of current row
     * 
     * @remarks
     * It will be called when reaching an existing cell in current row. Current row is the row of last call of <see cref="ProcessRow(Row)"/>.
     */
    startCell(columnIndex: number) : boolean;
    /**
     * Starts to process one cell.
     * @param cell - Cell object which is being processed currently
     * @returns
     * whether this cell needs to be kept in cells model of current sheet.
     * Commonly it should be false so that all cells will not be kept in memory after being processed and then memory be saved.
     * For some special purpose such as user needs to access some cells later after the whole workbook having been processed,
     * user can make this method return true to keep those special cells in Cells model and access them later by APIs such as Cells[row, column].
     * However, keeping cells data in Cells model will requires more memory and if all cells are kept then reading template file
     * in LightCells mode will become same with reading it in normal way.
     * 
     * @remarks
     * It will be called after one cell's data has been read.
     */
    processCell(cell: Cell) : boolean;
}

/**
 * Represents the options to filter data when loading workbook from template.
 */
export enum LoadDataFilterOptions {
    /**
     * Load nothing for sheet data
     * 
     * @remarks
     * NOTE: This member is now obsolete and please use Structure instead.
     * This property will be removed 12 months later since December 2017.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use Structure instead.
     */
    None = 0,
    /**
     * Load all
     */
    All = 2147483647,
    /**
     * Load cells whose value is blank
     */
    CellBlank = 1,
    /**
     * Load cells whose value is string
     */
    CellString = 2,
    /**
     * Load cells whose value is numeric(including datetime)
     */
    CellNumeric = 4,
    /**
     * Load cells whose value is error
     */
    CellError = 8,
    /**
     * Load cells whose value is bool
     */
    CellBool = 16,
    /**
     * Load cells value(all value types) only
     */
    CellValue = 31,
    /**
     * Load cell formulas.
     * 
     * @remarks
     * Generally defined Name objects(DefinedNames) also need to be loaded when loading formulas because they may be referenced by formulas.
     * So Formula or CellData option should work with DefinedNames option together(Formula|DefinedNames or CellData|DefinedNames) for most scenarios.
     */
    Formula = 32,
    /**
     * Load cells data including values, formulas and formatting
     */
    CellData = 67108927,
    /**
     * Load charts
     */
    Chart = 256,
    /**
     * Load shapes
     * 
     * @remarks
     * NOTE: This member is now obsolete and please use Drawing instead.
     * This property will be removed 12 months later since November 2019.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use Drawing instead.
     */
    Shape = 402653696,
    /**
     * Drawing objects(including Chart, Picture, OleObject and all other drawing objects)
     */
    Drawing = 402653952,
    /**
     * Load merged cells
     */
    MergedArea = 1024,
    /**
     * Load conditional formatting
     */
    ConditionalFormatting = 2048,
    /**
     * Load data validations
     */
    DataValidation = 4096,
    /**
     * Load pivot tables
     */
    PivotTable = 8192,
    /**
     * Load tables
     */
    Table = 16384,
    /**
     * Load hyperlinks
     */
    Hyperlinks = 32768,
    /**
     * Load settings for worksheet
     */
    SheetSettings = 65536,
    /**
     * Load all data of worksheet, such as cells data, settings, objects, ...etc.
     */
    SheetData = 403701759,
    /**
     * Load settings for workbook
     */
    BookSettings = 1048576,
    /**
     * Load settings for workbook and worksheet
     */
    Settings = 1114112,
    /**
     * Load XmlMap
     */
    XmlMap = 2097152,
    /**
     * Load structure of the workbook
     */
    Structure = 4194304,
    /**
     * Load document properties
     */
    Document_Properties = 8388608,
    /**
     * Load defined Name objects
     */
    DefinedNames = 16777216,
    /**
     * Load VBA projects
     */
    VBA = 33554432,
    /**
     * Load styles for cell formatting
     */
    Style = 67108864,
    /**
     * Load pictures
     */
    Picture = 134217728,
    /**
     * Load OleObjects
     */
    OleObject = 268435456,
    /**
     * Load revision logs
     */
    Revision = 536870912,
}

/**
 * Fill format type.
 */
export enum FillType {
    /**
     * Represents automatic formatting type.
     */
    Automatic = 0,
    /**
     * Represents none formatting type.
     */
    None = 1,
    /**
     * Solid fill format.
     */
    Solid = 2,
    /**
     * Gradient fill format.
     */
    Gradient = 3,
    /**
     * Texture fill format(includes picture fill).
     */
    Texture = 4,
    /**
     * Pattern fill format.
     */
    Pattern = 5,
    /**
     * Inherit the fill properties of the group.
     */
    Group = 6,
}

/**
 * Encapsulates the object that represents solid fill format
 */
export class SolidFill {
    /**
     * Gets or sets the <see cref="System.Drawing.Color"/>.
     */
    getColor() : Color;
    /**
     * Gets or sets the <see cref="System.Drawing.Color"/>.
     * @param value - The value to set.
     */
    setColor(value: Color) : void;
    /**
     * Gets and sets the <see cref="CellsColor"/> object.
     */
    getCellsColor() : CellsColor;
    /**
     * Gets and sets the <see cref="CellsColor"/> object.
     * @param value - The value to set.
     */
    setCellsColor(value: CellsColor) : void;
    /**
     * Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
     */
    getTransparency() : number;
    /**
     * Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
     * @param value - The value to set.
     */
    setTransparency(value: number) : void;
    /**
     * Gets the hash code.
     */
    getHashCode() : number;
}

/**
 * Represents  the custom  icon of conditional formatting rule.
 */
export class ConditionalFormattingIcon {
    /**
     * Gets and sets the icon set type.
     */
    getType() : IconSetType;
    /**
     * Gets and sets the icon set type.
     * @param value - The value to set.
     */
    setType(value: IconSetType) : void;
    /**
     * Gets and sets the icon's index in the icon set.
     */
    getIndex() : number;
    /**
     * Gets and sets the icon's index in the icon set.
     * @param value - The value to set.
     */
    setIndex(value: number) : void;
    /**
     * Get the icon set data
     * @param type - icon's type
     * @param index - icon's index
     */
    static getIconImageData(type: IconSetType, index: number) : number[];
    /**
     * Gets the image data with the setting of cell.
     * @param cell - The setting of cell.
     * @returns
     * Returns the image data of icon.
     */
    getImageData(cell: Cell) : number[];
}

/**
 * Represents  a collection of <see cref="ConditionalFormattingIcon"/> objects.
 */
export class ConditionalFormattingIconCollection {
    /**
     * Gets the ConditionalFormattingIcon element at the specified index.
     * @param index - The zero based index of the element.
     * @returns
     * The element at the specified index.
     */
    get(index: number) : ConditionalFormattingIcon;
    /**
     * Adds <see cref="ConditionalFormattingIcon"/> object.
     * @param type - The value type.
     * @param index - The Index.
     * @returns
     * Returns the index of new object in the list.
     */
    add(type: IconSetType, index: number) : number;
    /**
     * Adds <see cref="ConditionalFormattingIcon"/> object.
     * @param cficon - Returns the index of new object in the list.
     */
    add(cficon: ConditionalFormattingIcon) : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Specifies the axis position for a range of cells with conditional formatting as data bars.
 */
export enum DataBarAxisPosition {
    /**
     * Display the axis at a variable position based on the ratio of the minimum negative value to the maximum positive value in the range.
     * Positive values are displayed in a left-to-right direction.
     * Negative values are displayed in a right-to-left direction.
     * When all values are positive or all values are negative, no axis is displayed.
     */
    Automatic = 0,
    /**
     * Display the axis at the midpoint of the cell regardless of the set of values in the range.
     * Positive values are displayed in a left-to-right direction.
     * Negative values are displayed in a right-to-left direction.
     */
    Midpoint = 1,
    /**
     * No axis is displayed, and both positive and negative values are displayed in the left-to-right direction.
     */
    None = 2,
}

/**
 * Represents the border of the data bars specified by a conditional formatting rule.
 */
export class DataBarBorder {
    /**
     * Gets or sets the border's color of data bars specified by a conditional formatting rule.
     */
    getColor() : Color;
    /**
     * Gets or sets the border's color of data bars specified by a conditional formatting rule.
     * @param value - The value to set.
     */
    setColor(value: Color) : void;
    /**
     * Gets or sets the border's type of data bars specified by a conditional formatting rule.
     */
    getType() : DataBarBorderType;
    /**
     * Gets or sets the border's type of data bars specified by a conditional formatting rule.
     * @param value - The value to set.
     */
    setType(value: DataBarBorderType) : void;
}

/**
 * Specifies the border type of a data bar.
 */
export enum DataBarBorderType {
    /**
     * The data bar has no border.
     */
    None = 0,
    /**
     * The data bar has a solid border.
     */
    Solid = 1,
}

/**
 * Specifies how a data bar is filled with color.
 */
export enum DataBarFillType {
    /**
     * The data bar is filled with solid color.
     */
    Solid = 0,
    /**
     * The data bar is filled with a color gradient.
     */
    Gradient = 1,
}

/**
 * Specifies whether to use the same border and fill color as positive data bars.
 */
export enum DataBarNegativeColorType {
    /**
     * Use the color specified in the Negative Value and Axis Setting dialog box
     * or by using the ColorType and BorderColorType properties of the NegativeBarFormat object.
     */
    Color = 0,
    /**
     * Use the same color as positive data bars.
     */
    SameAsPositive = 1,
}

/**
 * Represents the color settings of the data bars for negative values that are defined by a data bar conditional formatting rule.
 */
export class NegativeBarFormat {
    /**
     * Gets or sets a FormatColor object that you can use to specify the border color for negative data bars.
     */
    getBorderColor() : Color;
    /**
     * Gets or sets a FormatColor object that you can use to specify the border color for negative data bars.
     * @param value - The value to set.
     */
    setBorderColor(value: Color) : void;
    /**
     * Gets whether to use the same border color as positive data bars.
     */
    getBorderColorType() : DataBarNegativeColorType;
    /**
     * Gets whether to use the same border color as positive data bars.
     * @param value - The value to set.
     */
    setBorderColorType(value: DataBarNegativeColorType) : void;
    /**
     * Gets or sets a FormatColor object that you can use to specify the fill color for negative data bars.
     */
    getColor() : Color;
    /**
     * Gets or sets a FormatColor object that you can use to specify the fill color for negative data bars.
     * @param value - The value to set.
     */
    setColor(value: Color) : void;
    /**
     * Gets or sets whether to use the same fill color as positive data bars.
     */
    getColorType() : DataBarNegativeColorType;
    /**
     * Gets or sets whether to use the same fill color as positive data bars.
     * @param value - The value to set.
     */
    setColorType(value: DataBarNegativeColorType) : void;
}

/**
 * Represents identifier information.
 */
export class ContentTypeProperty {
    /**
     * Returns or sets the name of the object.
     */
    getName() : string;
    /**
     * Returns or sets the name of the object.
     * @param value - The value to set.
     */
    setName(value: string) : void;
    /**
     * Returns or sets the value of the content type property.
     */
    getValue() : string;
    /**
     * Returns or sets the value of the content type property.
     * @param value - The value to set.
     */
    setValue(value: string) : void;
    /**
     * Gets and sets the type of the property.
     */
    getType() : string;
    /**
     * Gets and sets the type of the property.
     * @param value - The value to set.
     */
    setType(value: string) : void;
    /**
     * Indicates whether the value could be empty.
     */
    isNillable() : boolean;
    /**
     * Indicates whether the value could be empty.
     * @param value - The value to set.
     */
    setIsNillable(value: boolean) : void;
}

/**
 * A collection of <see cref="ContentTypeProperty"/> objects that represent additional information.
 */
export class ContentTypePropertyCollection {
    /**
     * Gets the content type property by the specific index.
     * @param index - The index.
     * @returns
     * The content type property
     */
    get(index: number) : ContentTypeProperty;
    /**
     * Gets the content type property by the property name.
     * @param name - The property name.
     * @returns
     * The content type property
     */
    get(name: string) : ContentTypeProperty;
    /**
     * Adds content type property information.
     * @param name - The name of the content type property.
     * @param value - The value of the content type property.
     */
    add(name: string, value: string) : number;
    /**
     * Adds content type property information.
     * @param name - The name of the content type property.
     * @param value - The value of the content type property.
     * @param type - The type of the content type property.
     */
    add(name: string, value: string, type: string) : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the setting of deleting rows/columns.
 */
export class DeleteOptions {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Indicates if update references in other worksheets.
     */
    getUpdateReference() : boolean;
    /**
     * Indicates if update references in other worksheets.
     * @param value - The value to set.
     */
    setUpdateReference(value: boolean) : void;
}

/**
 * Represents the result of conditional formatting which applies to a cell.
 */
export class ConditionalFormattingResult {
    /**
     * Gets the conditional result style.
     */
    getConditionalStyle() : Style;
    /**
     * Gets the image of icon set.
     */
    getConditionalFormattingIcon() : ConditionalFormattingIcon;
    /**
     * Gets the DataBar object.
     */
    getConditionalFormattingDataBar() : DataBar;
    /**
     * Gets the ColorScale object.
     */
    getConditionalFormattingColorScale() : ColorScale;
    /**
     * Gets the display color of color scale.
     */
    getColorScaleResult() : Color;
}

/**
 * Represents PivotTable condition formatting rule type.
 */
export enum PivotConditionFormatRuleType {
    /**
     * Indicates that Top N conditional formatting is not evaluated
     */
    None = 0,
    /**
     * Indicates that Top N conditional formatting is
     * evaluated across the entire scope range.
     */
    All = 1,
    /**
     * Indicates that Top N conditional formatting is evaluated for each row.
     */
    Row = 2,
    /**
     * Indicates that Top N conditional formatting is
     * evaluated for each column.
     */
    Column = 3,
}

/**
 * Represents the collection of formats applied to PivotTable.
 */
export class PivotTableFormatCollection {
    /**
     * Gets the format by the index.
     * @param index - The index.
     */
    get(index: number) : PivotTableFormat;
    /**
     * Add a <see cref="PivotTableFormat"/>.
     * @returns
     * The index of new format.
     */
    add() : number;
    /**
     * Formats selected area.
     * @param axisType - The region of the PivotTable to which this rule applies.
     * @param fieldPosition - Position of the field within the axis to which this rule applies.
     * @param subtotalType - The subtotal filter type of the pivot field
     * @param selectionType - Indicates how to select data.
     * @param isGrandRow - Indicates whether selecting grand total rows.
     * @param isGrandColumn - Indicates whether selecting grand total columns.
     * @param style - The style which appies to the area of the pivot table.
     */
    formatArea(axisType: PivotFieldType, fieldPosition: number, subtotalType: PivotFieldSubtotalType, selectionType: PivotTableSelectionType, isGrandRow: boolean, isGrandColumn: boolean, style: Style) : PivotTableFormat;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the revision.
 */
export class Revision {
    /**
     * Represents the type of revision.
     */
    getType() : RevisionType;
    /**
     * Gets the worksheet.
     */
    getWorksheet() : Worksheet;
    /**
     * Gets the number of this revision.
     * 
     * @remarks
     * Zero means this revision does not contains id.
     */
    getId() : number;
}

/**
 * represents a revision record of information about a formatting change.
 */
export class RevisionAutoFormat extends Revision {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Revision);
    /**
     * Gets the type of the revision.
     */
    getType() : RevisionType;
    /**
     * Gets the location where the formatting was applied.
     */
    getCellArea() : CellArea;
}

/**
 * Represents a revision record of a cell comment change.
 */
export class RevisionCellComment extends Revision {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Revision);
    /**
     * Gets the type of revision.
     */
    getType() : RevisionType;
    /**
     * Gets the row index of the which contains a comment.
     */
    getRow() : number;
    /**
     * Gets the column index of the which contains a comment.
     */
    getColumn() : number;
    /**
     * Gets the name of the cell.
     */
    getCellName() : string;
    /**
     * Gets the name of the cell.
     * @param value - The value to set.
     */
    setCellName(value: string) : void;
    /**
     * Gets the action type of the revision.
     */
    getActionType() : RevisionActionType;
    /**
     * Indicates whether it's an  old comment.
     */
    isOldComment() : boolean;
    /**
     * Gets Length of the comment text added in this revision.
     */
    getOldLength() : number;
    /**
     * Gets Length of the comment before this revision was made.
     */
    getNewLength() : number;
}

/**
 * Represents a revision record on a cell(s) that moved.
 */
export class RevisionCellMove extends Revision {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Revision);
    /**
     * Represents the type of revision.
     */
    getType() : RevisionType;
    /**
     * Gets the source area.
     */
    getSourceArea() : CellArea;
    /**
     * Gets the destination area.
     */
    getDestinationArea() : CellArea;
    /**
     * Gets the source worksheet.
     */
    getSourceWorksheet() : Worksheet;
}

/**
 * Represents a revision record of information about a formatting change.
 */
export class RevisionFormat extends Revision {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Revision);
    /**
     * Gets the type of revision.
     */
    getType() : RevisionType;
    /**
     * The range to which this formatting was applied.
     */
    getAreas() : CellArea[];
    /**
     * Gets the applied style.
     */
    getStyle() : Style;
}

/**
 * Represents a revision record of a row/column insert/delete action.
 */
export class RevisionInsertDelete extends Revision {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Revision);
    /**
     * Represents the type of revision.
     */
    getType() : RevisionType;
    /**
     * Gets the inserting/deleting range.
     */
    getCellArea() : CellArea;
    /**
     * Gets the action type of this revision.
     */
    getActionType() : RevisionActionType;
    /**
     * Gets revision list by this operation.
     */
    getRevisions() : RevisionCollection;
}

/**
 * Represents a revision record of a sheet that was inserted.
 */
export class RevisionInsertSheet extends Revision {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Revision);
    /**
     * Gets the type of revision.
     */
    getType() : RevisionType;
    /**
     * Gets the action type of the revision.
     */
    getActionType() : RevisionActionType;
    /**
     * Gets the name of the worksheet.
     */
    getName() : string;
    /**
     * Gets the zero based position of the new sheet in the sheet tab bar.
     */
    getSheetPosition() : number;
}

/**
 * Represents a revision record which indicates that there was a merge conflict.
 */
export class RevisionMergeConflict extends Revision {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Revision);
    /**
     * Gets the type of revision.
     */
    getType() : RevisionType;
}

/**
 * Represents a revision of a query table field change.
 */
export class RevisionQueryTable extends Revision {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Revision);
    /**
     * Represents the type of the revision.
     */
    getType() : RevisionType;
    /**
     * Gets the location of the affected query table.
     */
    getCellArea() : CellArea;
    /**
     * Gets ID of the specific query table field that was removed.
     */
    getFieldId() : number;
}

/**
 * Represents the revision that changing cells.
 */
export class RevisionCellChange extends Revision {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Revision);
    /**
     * Represents the type of revision.
     */
    getType() : RevisionType;
    /**
     * Gets the name of the cell.
     */
    getCellName() : string;
    /**
     * Gets the row index of the cell.
     */
    getRow() : number;
    /**
     * Gets the column index of the cell.
     */
    getColumn() : number;
    /**
     * Indicates whether this cell is new formatted.
     */
    isNewFormatted() : boolean;
    /**
     * Indicates whether this cell is old formatted.
     */
    isOldFormatted() : boolean;
    /**
     * Gets the old formula.
     */
    getOldFormula() : string;
    /**
     * Gets the old formula.
     */
    getNewFormula() : string;
    /**
     * Gets the new style of the cell.
     */
    getNewStyle() : Style;
    /**
     * Gets the old style of the cell.
     */
    getOldStyle() : Style;
}

/**
 * Represents all revision logs.
 */
export class RevisionCollection {
    /**
     * Gets <see cref="Revision"/> by the index.
     * @param index - 
     */
    get(index: number) : Revision;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents a revision record of a defined name change.
 */
export class RevisionDefinedName extends Revision {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Revision);
    /**
     * Represents the type of revision.
     */
    getType() : RevisionType;
    /**
     * Gets the text of the defined name.
     */
    getText() : string;
    /**
     * Gets the old formula.
     */
    getOldFormula() : string;
    /**
     * Gets the formula.
     */
    getNewFormula() : string;
}

/**
 * Represents all revision logs.
 */
export class RevisionLogCollection {
    /**
     * Gets <see cref="RevisionLog"/> by index.
     * @param index - The index.
     * @returns
     * Returns <see cref="RevisionLog"/> object.
     */
    get(index: number) : RevisionLog;
    /**
     * Gets and sets the number of days the spreadsheet application will keep the change history for this workbook.
     */
    getDaysPreservingHistory() : number;
    /**
     * Gets and sets the number of days the spreadsheet application will keep the change history for this workbook.
     * @param value - The value to set.
     */
    setDaysPreservingHistory(value: number) : void;
    /**
     * Highlights changes of shared workbook.
     * @param options - Set the options for filtering which changes should be tracked.
     */
    highlightChanges(options: HighlightChangesOptions) : void;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the type of revision action.
 */
export enum RevisionActionType {
    /**
     * Add revision.
     */
    Add = 0,
    /**
     * Delete revision.
     */
    Delete = 1,
    /**
     * Column delete revision.
     */
    DeleteColumn = 2,
    /**
     * Row delete revision.
     */
    DeleteRow = 3,
    /**
     * Column insert revision.
     */
    InsertColumn = 4,
    /**
     * Row insert revision.
     */
    InsertRow = 5,
}

/**
 * Represents a revision record of adding or removing a custom view to the workbook
 */
export class RevisionCustomView extends Revision {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Revision);
    /**
     * Gets the type of revision.
     */
    getType() : RevisionType;
    /**
     * Gets the type of action.
     */
    getActionType() : RevisionActionType;
}

/**
 * Represents a list of specific changes that have taken place for this workbook.
 */
export class RevisionHeader {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets and sets rhe date and time when this set of revisions was saved.
     */
    getSavedTime() : Date;
    /**
     * Gets and sets rhe date and time when this set of revisions was saved.
     * @param value - The value to set.
     */
    setSavedTime(value: Date) : void;
    /**
     * Gets and sets the name of the user making the revision.
     */
    get_UserName() : string;
    /**
     * Gets and sets the name of the user making the revision.
     * @param value - The value to set.
     */
    setUserName(value: string) : void;
}

/**
 * Represents the revision log.
 */
export class RevisionLog {
    /**
     * Gets table that contains metadata about a list of specific changes that have taken place
     * for this workbook.
     */
    getMetadataTable() : RevisionHeader;
    /**
     * Gets all revisions in this log.
     */
    getRevisions() : RevisionCollection;
}

/**
 * Represents the revision type.
 */
export enum RevisionType {
    /**
     * Custom view.
     */
    CustomView = 0,
    /**
     * Defined name.
     */
    DefinedName = 1,
    /**
     * Cells change.
     */
    ChangeCells = 2,
    /**
     * Auto format.
     */
    AutoFormat = 3,
    /**
     * Merge conflict.
     */
    MergeConflict = 4,
    /**
     * Comment.
     */
    Comment = 5,
    /**
     * Format.
     */
    Format = 6,
    /**
     * Insert worksheet.
     */
    InsertSheet = 7,
    /**
     * Move cells.
     */
    MoveCells = 8,
    /**
     * Undo.
     */
    Undo = 9,
    /**
     * Query table.
     */
    QueryTable = 10,
    /**
     * Inserting or deleting.
     */
    InsertDelete = 11,
    /**
     * Rename worksheet.
     */
    RenameSheet = 12,
    /**
     * Unknown.
     */
    Unknown = 13,
}

/**
 * Represents a revision of renaming sheet.
 */
export class RevisionRenameSheet extends Revision {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Revision);
    /**
     * Represents the type of the revision.
     */
    getType() : RevisionType;
    /**
     * Gets the old name of the worksheet.
     */
    getOldName() : string;
    /**
     * Gets the new name of the worksheet.
     */
    getNewName() : string;
}

/**
 * Callback interface of warning.
 */
export interface IWarningCallback {
    /**
     * Our callback only needs to implement the "Warning" method.
     * @param warningInfo - warning info
     */
    warning(warningInfo: WarningInfo) : void;
}

/**
 * Represents the options for exporting html data.
 */
export enum HtmlExportDataOptions {
    /**
     * Export file to html which only contains table part.
     */
    Table = 1,
    /**
     * Export all the data to html.
     */
    All = 255,
}

/**
 * Represents the type of target attribute in HTML <a/> tag.
 */
export enum HtmlLinkTargetType {
    /**
     * Opens the linked document in a new window or tab
     */
    Blank = 0,
    /**
     * Opens the linked document in the parent frame
     */
    Parent = 1,
    /**
     * Opens the linked document in the same frame as it was clicked (this is default)
     */
    Self = 2,
    /**
     * Opens the linked document in the full body of the window
     */
    Top = 3,
}

/**
 * Specifies the type of using quotation marks for values in text format files.
 */
export enum TxtValueQuoteType {
    /**
     * All values that contain special characters such as quotation mark, separator character will be quoted.
     * Same with the behavior of ms excel for exporting text file.
     */
    Normal = 0,
    /**
     * All values will be quoted always.
     */
    Always = 1,
    /**
     * Only quote values when needed. Such as, if one value contains quotation mark but the quotation mark is not at the begin of this value, this value will not be quoted.
     */
    Minimum = 2,
    /**
     * All values will not be quoted. The exported text file with this type may not be read back correctly because the needed quotation marks being absent.
     */
    Never = 3,
}

/**
 * Represents two types of showing the hidden rows in html.
 */
export enum HtmlHiddenRowDisplayType {
    /**
     * Hidden the hidden rows in html page.
     */
    Hidden = 0,
    /**
     * Remove the hidden rows in html page.
     */
    Remove = 1,
}

/**
 * Represents two types of showing the hidden columns in html.
 */
export enum HtmlHiddenColDisplayType {
    /**
     * Hidden the hidden columns in html page.
     */
    Hidden = 0,
    /**
     * Remove the hidden columns in html page.
     */
    Remove = 1,
}

/**
 * Represents QueryTable information.
 */
export class QueryTable {
    /**
     * Gets the connection id of the query table.
     */
    getConnectionId() : number;
    /**
     * Gets the relate external connection.
     */
    getExternalConnection() : ExternalConnection;
    /**
     * Gets the name of querytable.
     */
    getName() : string;
    /**
     * Gets the range of the result.
     */
    getResultRange() : Range;
    /**
     * Returns or sets the PreserveFormatting of the object.
     */
    getPreserveFormatting() : boolean;
    /**
     * Returns or sets the PreserveFormatting of the object.
     * @param value - The value to set.
     */
    setPreserveFormatting(value: boolean) : void;
    /**
     * Returns or sets the AdjustColumnWidth of the object.
     */
    getAdjustColumnWidth() : boolean;
    /**
     * Returns or sets the AdjustColumnWidth of the object.
     * @param value - The value to set.
     */
    setAdjustColumnWidth(value: boolean) : void;
}

/**
 * A collection of <see cref="QueryTableCollection"/> objects that represent QueryTable collection information.
 */
export class QueryTableCollection {
    /**
     * Gets the querytable by the specific index.
     * @param index - The index.
     * @returns
     * The querytable
     */
    get(index: number) : QueryTable;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents an individual scenario.
 */
export class Scenario {
    /**
     * Gets and sets the comment of scenario.
     */
    getComment() : string;
    /**
     * Gets and sets the comment of scenario.
     * @param value - The value to set.
     */
    setComment(value: string) : void;
    /**
     * Gets and sets the name of scenario.
     */
    getName() : string;
    /**
     * Gets and sets the name of scenario.
     * @param value - The value to set.
     */
    setName(value: string) : void;
    /**
     * Gets name of user who last changed the scenario.
     */
    getUser() : string;
    /**
     * Indicates whether scenario is hidden.
     */
    isHidden() : boolean;
    /**
     * Indicates whether scenario is hidden.
     * @param value - The value to set.
     */
    setIsHidden(value: boolean) : void;
    /**
     * Indicates whether scenario is locked for editing when the sheet is protected.
     */
    isLocked() : boolean;
    /**
     * Indicates whether scenario is locked for editing when the sheet is protected.
     * @param value - The value to set.
     */
    setIsLocked(value: boolean) : void;
    /**
     * Gets the input cells of scenario.
     */
    getInputCells() : ScenarioInputCellCollection;
}

/**
 * Represents the list of scenarios.
 */
export class ScenarioCollection {
    /**
     * Gets the <see cref="Scenario"/> object by the index.
     * @param index - The specific index in the list.
     */
    get(index: number) : Scenario;
    /**
     * Gets and sets which scenario is selected.
     */
    getActiveIndex() : number;
    /**
     * Gets and sets which scenario is selected.
     * @param value - The value to set.
     */
    setActiveIndex(value: number) : void;
    /**
     * Indicates which scenario was last selected by the user to be run/shown.
     */
    getLastSelected() : number;
    /**
     * Indicates which scenario was last selected by the user to be run/shown.
     * @param value - The value to set.
     */
    setLastSelected(value: number) : void;
    /**
     * Adds a scenario.
     * @param name - The name of scenario.
     * @returns
     * The index in the list of scenarios.
     */
    add(name: string) : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents input cell for the scenario.
 */
export class ScenarioInputCell {
    /**
     * Gets and sets the row index of the input cell.
     */
    getRow() : number;
    /**
     * Gets and sets the column index of the input cell.
     */
    getColumn() : number;
    /**
     * Gets and sets the input cell address.
     */
    getName() : string;
    /**
     * Gets and sets value of the input cell.
     */
    getValue() : string;
    /**
     * Gets and sets value of the input cell.
     * @param value - The value to set.
     */
    setValue(value: string) : void;
    /**
     * Indicates whether input cell is deleted.
     */
    isDeleted() : boolean;
    /**
     * Indicates whether input cell is deleted.
     * @param value - The value to set.
     */
    setIsDeleted(value: boolean) : void;
}

/**
 * Represents the list of the scenario's input cells.
 */
export class ScenarioInputCellCollection {
    /**
     * Gets <see cref="ScenarioInputCell"/> by index in the list.
     * @param index - The specific index in the list
     * @returns
     * The <see cref="ScenarioInputCell"/> object
     */
    get(index: number) : ScenarioInputCell;
    /**
     * Adds an input cell.
     * @param row - The row index of input cell.
     * @param column - The column index of input cell.
     * @param value - The value of input cell.
     */
    add(row: number, column: number, value: string) : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represent summary description of slicer cache
 */
export class SlicerCache {
    /**
     * Returns or sets whether a slicer is participating in cross filtering with other slicers
     * that share the same slicer cache, and how cross filtering is displayed. Read/write
     */
    getCrossFilterType() : SlicerCacheCrossFilterType;
    /**
     * Returns or sets whether a slicer is participating in cross filtering with other slicers
     * that share the same slicer cache, and how cross filtering is displayed. Read/write
     * @param value - The value to set.
     */
    setCrossFilterType(value: SlicerCacheCrossFilterType) : void;
    /**
     * Returns whether the slicer associated with the specified slicer cache is based on an Non-OLAP data source. Read-only
     */
    getList() : boolean;
    /**
     * Returns a SlicerCacheItem collection that contains the collection of all items in the slicer cache. Read-only
     */
    getSlicerCacheItems() : SlicerCacheItemCollection;
    /**
     * Returns the name of the slicer cache.
     */
    getName() : string;
    /**
     * Returns the name of this slicer cache.
     */
    getSourceName() : string;
}

/**
 * Represent the type of SlicerCacheCrossFilterType
 */
export enum SlicerCacheCrossFilterType {
    /**
     * The table style element of the slicer style for slicer items
     * with no data is not applied to slicer items with no data, and slicer items
     * with no data are not sorted separately in the list of slicer items in the slicer view
     */
    None = 0,
    /**
     * The table style element of the slicer style for slicer items with
     * no data is applied to slicer items with no data, and slicer items
     * with no data are sorted at the bottom in the list of slicer items in the slicer view
     */
    ShowItemsWithDataAtTop = 1,
    /**
     * The table style element of the slicer style for slicer items with no data
     * is applied to slicer items with no data, and slicer items with no data
     * are not sorted separately in the list of slicer items in the slicer view.
     */
    ShowItemsWithNoData = 2,
}

/**
 * Specify the sort type of SlicerCacheItem
 */
export enum SlicerCacheItemSortType {
    /**
     * Original data order.
     */
    Natural = 0,
    /**
     * Ascending sort type
     */
    Ascending = 1,
    /**
     * Descending sort type
     */
    Descending = 2,
}

/**
 * Represent slicer data source item
 */
export class SlicerCacheItem {
    /**
     * Specifies whether the SlicerItem is selected or not.
     */
    getSelected() : boolean;
    /**
     * Specifies whether the SlicerItem is selected or not.
     * @param value - The value to set.
     */
    setSelected(value: boolean) : void;
    /**
     * Returns the label text for the slicer item. Read-only.
     */
    getValue() : string;
}

/**
 * Represent the collection of SlicerCacheItem
 */
export class SlicerCacheItemCollection {
    /**
     * Gets the SlicerCacheItem object by index.
     */
    get(index: number) : SlicerCacheItem;
    /**
     * Gets the count of the SlicerCacheItem.
     */
    getCount() : number;
}

/**
 * Specify the style of slicer view
 */
export enum SlicerStyleType {
    /**
     * built-in light style one
     */
    SlicerStyleLight1 = 0,
    /**
     * built-in light style two
     */
    SlicerStyleLight2 = 1,
    /**
     * built-in light style three
     */
    SlicerStyleLight3 = 2,
    /**
     * built-in light style four
     */
    SlicerStyleLight4 = 3,
    /**
     * built-in light style five
     */
    SlicerStyleLight5 = 4,
    /**
     * built-in light style six
     */
    SlicerStyleLight6 = 5,
    /**
     * built-in style other one
     */
    SlicerStyleOther1 = 6,
    /**
     * built-in style other two
     */
    SlicerStyleOther2 = 7,
    /**
     * built-in dark style one
     */
    SlicerStyleDark1 = 8,
    /**
     * built-in dark style tow
     */
    SlicerStyleDark2 = 9,
    /**
     * built-in dark style three
     */
    SlicerStyleDark3 = 10,
    /**
     * built-in dark style four
     */
    SlicerStyleDark4 = 11,
    /**
     * built-in dark style five
     */
    SlicerStyleDark5 = 12,
    /**
     * built-in dark style six
     */
    SlicerStyleDark6 = 13,
    /**
     * user-defined style, unsupported for now
     * 
     * @remarks
     * unsupported
     */
    Custom = 14,
}

/**
 * summary description of Slicer View
 */
export class Slicer {
    /**
     * Specifies the title of the current Slicer object.
     */
    getTitle() : string;
    /**
     * Specifies the title of the current Slicer object.
     * @param value - The value to set.
     */
    setTitle(value: string) : void;
    /**
     * Returns or sets the descriptive (alternative) text string of the Slicer object.
     */
    getAlternativeText() : string;
    /**
     * Returns or sets the descriptive (alternative) text string of the Slicer object.
     * @param value - The value to set.
     */
    setAlternativeText(value: string) : void;
    /**
     * Indicates whether the slicer object is printable.
     */
    isPrintable() : boolean;
    /**
     * Indicates whether the slicer object is printable.
     * @param value - The value to set.
     */
    setIsPrintable(value: boolean) : void;
    /**
     * Indicates whether the slicer shape is locked.
     */
    isLocked() : boolean;
    /**
     * Indicates whether the slicer shape is locked.
     * @param value - The value to set.
     */
    setIsLocked(value: boolean) : void;
    /**
     * Represents the way the drawing object is attached to the cells below it.
     * The property controls the placement of an object on a worksheet.
     */
    getPlacement() : PlacementType;
    /**
     * Represents the way the drawing object is attached to the cells below it.
     * The property controls the placement of an object on a worksheet.
     * @param value - The value to set.
     */
    setPlacement(value: PlacementType) : void;
    /**
     * Indicates whether locking aspect ratio.
     */
    getLockedAspectRatio() : boolean;
    /**
     * Indicates whether locking aspect ratio.
     * @param value - The value to set.
     */
    setLockedAspectRatio(value: boolean) : void;
    /**
     * Indicates whether the specified slicer can be moved or resized by using the user interface.
     */
    getLockedPosition() : boolean;
    /**
     * Indicates whether the specified slicer can be moved or resized by using the user interface.
     * @param value - The value to set.
     */
    setLockedPosition(value: boolean) : void;
    /**
     * Returns the SlicerCache object associated with the slicer. Read-only.
     */
    getSlicerCache() : SlicerCache;
    /**
     * Returns the <see cref="Worksheet"/> object which contains this slicer. Read-only.
     */
    getParent() : Worksheet;
    /**
     * Specify the type of Built-in slicer style
     * the default type is SlicerStyleLight1
     */
    getStyleType() : SlicerStyleType;
    /**
     * Specify the type of Built-in slicer style
     * the default type is SlicerStyleLight1
     * @param value - The value to set.
     */
    setStyleType(value: SlicerStyleType) : void;
    /**
     * Returns or sets the name of the specified slicer
     */
    getName() : string;
    /**
     * Returns or sets the name of the specified slicer
     * @param value - The value to set.
     */
    setName(value: string) : void;
    /**
     * Returns or sets the caption of the specified slicer.
     */
    getCaption() : string;
    /**
     * Returns or sets the caption of the specified slicer.
     * @param value - The value to set.
     */
    setCaption(value: string) : void;
    /**
     * Returns or sets whether the header that displays the slicer Caption is visible
     * the default value is true
     */
    getCaptionVisible() : boolean;
    /**
     * Returns or sets whether the header that displays the slicer Caption is visible
     * the default value is true
     * @param value - The value to set.
     */
    setCaptionVisible(value: boolean) : void;
    /**
     * Returns or sets the number of columns in the specified slicer.
     */
    getNumberOfColumns() : number;
    /**
     * Returns or sets the number of columns in the specified slicer.
     * @param value - The value to set.
     */
    setNumberOfColumns(value: number) : void;
    /**
     * Returns or sets the horizontal offset of slicer shape from its left column, in pixels.
     */
    getLeftPixel() : number;
    /**
     * Returns or sets the horizontal offset of slicer shape from its left column, in pixels.
     * @param value - The value to set.
     */
    setLeftPixel(value: number) : void;
    /**
     * Returns or sets the vertical offset of slicer shape from its top row, in pixels.
     */
    getTopPixel() : number;
    /**
     * Returns or sets the vertical offset of slicer shape from its top row, in pixels.
     * @param value - The value to set.
     */
    setTopPixel(value: number) : void;
    /**
     * Returns or sets the width of the specified slicer, in points.
     */
    getWidth() : number;
    /**
     * Returns or sets the width of the specified slicer, in points.
     * @param value - The value to set.
     */
    setWidth(value: number) : void;
    /**
     * Returns or sets the width of the specified slicer, in pixels.
     */
    getWidthPixel() : number;
    /**
     * Returns or sets the width of the specified slicer, in pixels.
     * @param value - The value to set.
     */
    setWidthPixel(value: number) : void;
    /**
     * Returns or sets the height of the specified slicer, in points.
     */
    getHeight() : number;
    /**
     * Returns or sets the height of the specified slicer, in points.
     * @param value - The value to set.
     */
    setHeight(value: number) : void;
    /**
     * Returns or sets the height of the specified slicer, in pixels.
     */
    getHeightPixel() : number;
    /**
     * Returns or sets the height of the specified slicer, in pixels.
     * @param value - The value to set.
     */
    setHeightPixel(value: number) : void;
    /**
     * Gets or sets the width in unit of pixels for each column of the slicer. 
     */
    getColumnWidthPixel() : number;
    /**
     * Gets or sets the width in unit of pixels for each column of the slicer. 
     * @param value - The value to set.
     */
    setColumnWidthPixel(value: number) : void;
    /**
     * Returns or sets the width, in points, of each column in the slicer.
     */
    getColumnWidth() : number;
    /**
     * Returns or sets the width, in points, of each column in the slicer.
     * @param value - The value to set.
     */
    setColumnWidth(value: number) : void;
    /**
     * Returns or sets the height, in pixels, of each row in the specified slicer.
     */
    getRowHeightPixel() : number;
    /**
     * Returns or sets the height, in pixels, of each row in the specified slicer.
     * @param value - The value to set.
     */
    setRowHeightPixel(value: number) : void;
    /**
     * Returns or sets the height, in points, of each row in the specified slicer.
     */
    getRowHeight() : number;
    /**
     * Returns or sets the height, in points, of each row in the specified slicer.
     * @param value - The value to set.
     */
    setRowHeight(value: number) : void;
    /**
     * Adds PivotTable connection.
     * @param pivot - The PivotTable object
     */
    addPivotConnection(pivot: PivotTable) : void;
    /**
     * Removes PivotTable connection.
     * @param pivot - The PivotTable object
     */
    removePivotConnection(pivot: PivotTable) : void;
    /**
     * Refreshing the slicer.Meanwhile, Refreshing and Calculating  relative PivotTables.
     */
    refresh() : void;
}

/**
 * Specifies the collection of all the Slicer objects on the specified worksheet.
 */
export class SlicerCollection {
    /**
     * Gets the Slicer by index.
     */
    get(index: number) : Slicer;
    /**
     * Gets the Slicer  by slicer's name.
     */
    get(name: string) : Slicer;
    /**
     * Remove the specified Slicer
     * @param slicer - The Slicer object
     */
    remove(slicer: Slicer) : void;
    /**
     * Deletes the Slicer at the specified index
     * @param index - The position index in Slicer collection
     */
    removeAt(index: number) : void;
    /**
     * Add a new Slicer using PivotTable as data source
     * @param pivot - PivotTable object
     * @param destCellName - The cell in the upper-left corner of the Slicer range.
     * @param baseFieldName - The name of PivotField in PivotTable.BaseFields
     * @returns
     * The new add Slicer index
     */
    add(pivot: PivotTable, destCellName: string, baseFieldName: string) : number;
    /**
     * Add a new Slicer using PivotTable as data source
     * @param pivot - PivotTable object
     * @param row - Row index of the cell in the upper-left corner of the Slicer range.
     * @param column - Column index of the cell in the upper-left corner of the Slicer range.
     * @param baseFieldName - The name of PivotField in PivotTable.BaseFields
     * @returns
     * The new add Slicer index
     */
    add(pivot: PivotTable, row: number, column: number, baseFieldName: string) : number;
    /**
     * Add a new Slicer using PivotTable as data source
     * @param pivot - PivotTable object
     * @param row - Row index of the cell in the upper-left corner of the Slicer range.
     * @param column - Column index of the cell in the upper-left corner of the Slicer range.
     * @param baseFieldIndex - The index of PivotField in PivotTable.BaseFields
     * @returns
     * The new add Slicer index
     */
    add(pivot: PivotTable, row: number, column: number, baseFieldIndex: number) : number;
    /**
     * Add a new Slicer using PivotTable as data source
     * @param pivot - PivotTable object
     * @param destCellName - The cell in the upper-left corner of the Slicer range.
     * @param baseFieldIndex - The index of PivotField in PivotTable.BaseFields
     * @returns
     * The new add Slicer index
     */
    add(pivot: PivotTable, destCellName: string, baseFieldIndex: number) : number;
    /**
     * Add a new Slicer using PivotTable as data source
     * @param pivot - PivotTable object
     * @param row - Row index of the cell in the upper-left corner of the Slicer range.
     * @param column - Column index of the cell in the upper-left corner of the Slicer range.
     * @param baseField - The PivotField in PivotTable.BaseFields
     * @returns
     * The new add Slicer index
     */
    add(pivot: PivotTable, row: number, column: number, baseField: PivotField) : number;
    /**
     * Add a new Slicer using PivotTable as data source
     * @param pivot - PivotTable object
     * @param destCellName - The cell in the upper-left corner of the Slicer range.
     * @param baseField - The PivotField in PivotTable.BaseFields
     * @returns
     * The new add Slicer index
     */
    add(pivot: PivotTable, destCellName: string, baseField: PivotField) : number;
    /**
     * Add a new Slicer using ListObjet as data source
     * @param table - ListObject object
     * @param index - The index of ListColumn in ListObject.ListColumns
     * @param destCellName - The cell in the upper-left corner of the Slicer range.
     * @returns
     * The new add Slicer index
     */
    add(table: ListObject, index: number, destCellName: string) : number;
    /**
     * Add a new Slicer using ListObjet as data source
     * @param table - ListObject object
     * @param listColumn - The ListColumn in ListObject.ListColumns
     * @param destCellName - The cell in the upper-left corner of the Slicer range.
     * @returns
     * The new add Slicer index
     */
    add(table: ListObject, listColumn: ListColumn, destCellName: string) : number;
    /**
     * Add a new Slicer using ListObjet as data source
     * @param table - ListObject object
     * @param listColumn - The ListColumn in ListObject.ListColumns
     * @param row - Row index of the cell in the upper-left corner of the Slicer range.
     * @param column - Column index of the cell in the upper-left corner of the Slicer range.
     * @returns
     * The new add Slicer index
     */
    add(table: ListObject, listColumn: ListColumn, row: number, column: number) : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents category type of cell's number formatting.
 */
export enum NumberCategoryType {
    /**
     * General
     */
    General = 0,
    /**
     * Text
     */
    Text = 1,
    /**
     * Number
     */
    Number = 2,
    /**
     * Date or Date and Time
     */
    Date = 3,
    /**
     * Time
     */
    Time = 4,
    /**
     * Fraction
     */
    Fraction = 5,
    /**
     * Scientific
     */
    Scientific = 6,
}

/**
 * This type specifies the cap types of the text.
 */
export enum TextCapsType {
    /**
     * None caps
     */
    None = 0,
    /**
     * Apply all caps on the text.
     */
    All = 1,
    /**
     * Apply small caps to the text.
     */
    Small = 2,
}

/**
 * This type specifies the strike type.
 */
export enum TextStrikeType {
    /**
     * A single strikethrough applied on the text.
     */
    Single = 0,
    /**
     * A double strikethrough applied on the text.
     */
    Double = 1,
    /**
     * No strike is applied to the text.
     */
    None = 2,
}

/**
 * Represents a list object on a worksheet.
 * The ListObject object is a member of the ListObjects collection.
 * The ListObjects collection contains all the list objects on a worksheet.
 */
export class ListObject {
    /**
     * Gets the start row of the range.
     */
    getStartRow() : number;
    /**
     * Gets the start column of the range.
     */
    getStartColumn() : number;
    /**
     * Gets the end  row of the range.
     */
    getEndRow() : number;
    /**
     * Gets the end column of the range.
     */
    getEndColumn() : number;
    /**
     * Gets ListColumns of the ListObject.
     */
    getListColumns() : ListColumnCollection;
    /**
     * Gets and sets whether this ListObject show header row.
     */
    getShowHeaderRow() : boolean;
    /**
     * Gets and sets whether this ListObject show header row.
     * @param value - The value to set.
     */
    setShowHeaderRow(value: boolean) : void;
    /**
     * Gets and sets whether this ListObject show total row.
     */
    getShowTotals() : boolean;
    /**
     * Gets and sets whether this ListObject show total row.
     * @param value - The value to set.
     */
    setShowTotals(value: boolean) : void;
    /**
     * Gets the data range of the ListObject.
     */
    getDataRange() : Range;
    /**
     * Gets the linked QueryTable.
     */
    getQueryTable() : QueryTable;
    /**
     * Gets the data source type of the table.
     */
    getDataSourceType() : TableDataSourceType;
    /**
     * Gets auto filter.
     */
    getAutoFilter() : AutoFilter;
    /**
     * Gets and sets the display name.
     */
    getDisplayName() : string;
    /**
     * Gets and sets the display name.
     * @param value - The value to set.
     */
    setDisplayName(value: string) : void;
    /**
     * Gets and sets the comment of the table.
     */
    getComment() : string;
    /**
     * Gets and sets the comment of the table.
     * @param value - The value to set.
     */
    setComment(value: string) : void;
    /**
     * Indicates whether the first column in the table should have the style applied.
     */
    getShowTableStyleFirstColumn() : boolean;
    /**
     * Indicates whether the first column in the table should have the style applied.
     * @param value - The value to set.
     */
    setShowTableStyleFirstColumn(value: boolean) : void;
    /**
     * Indicates whether the last column in the table should have the style applied.
     */
    getShowTableStyleLastColumn() : boolean;
    /**
     * Indicates whether the last column in the table should have the style applied.
     * @param value - The value to set.
     */
    setShowTableStyleLastColumn(value: boolean) : void;
    /**
     * Indicates whether row stripe formatting is applied.
     */
    getShowTableStyleRowStripes() : boolean;
    /**
     * Indicates whether row stripe formatting is applied.
     * @param value - The value to set.
     */
    setShowTableStyleRowStripes(value: boolean) : void;
    /**
     * Indicates whether column stripe formatting is applied.
     */
    getShowTableStyleColumnStripes() : boolean;
    /**
     * Indicates whether column stripe formatting is applied.
     * @param value - The value to set.
     */
    setShowTableStyleColumnStripes(value: boolean) : void;
    /**
     * Gets and the built-in table style.
     */
    getTableStyleType() : TableStyleType;
    /**
     * Gets and the built-in table style.
     * @param value - The value to set.
     */
    setTableStyleType(value: TableStyleType) : void;
    /**
     * Gets and sets the table style name.
     */
    getTableStyleName() : string;
    /**
     * Gets and sets the table style name.
     * @param value - The value to set.
     */
    setTableStyleName(value: string) : void;
    /**
     * Gets an <see cref="XmlMap"/> used for this list.
     */
    getXmlMap() : XmlMap;
    /**
     * Gets and sets the alternative text.
     */
    getAlternativeText() : string;
    /**
     * Gets and sets the alternative text.
     * @param value - The value to set.
     */
    setAlternativeText(value: string) : void;
    /**
     * Gets and sets the alternative description.
     */
    getAlternativeDescription() : string;
    /**
     * Gets and sets the alternative description.
     * @param value - The value to set.
     */
    setAlternativeDescription(value: string) : void;
    /**
     * Resize the range of the list object.
     * @param startRow - The start row index of the new range.
     * @param startColumn - The start column index of the new range.
     * @param endRow - The end row index of the new range.
     * @param endColumn - The end column index of the new range.
     * @param hasHeaders - Whether this table has headers.
     */
    resize(startRow: number, startColumn: number, endRow: number, endColumn: number, hasHeaders: boolean) : void;
    /**
     * Put the formula to the cell in the table.
     * @param rowOffset - The row offset in the table.
     * @param columnOffset - The column offset in the table.
     * @param formula - The formula of the cell.
     */
    putCellFormula(rowOffset: number, columnOffset: number, formula: string) : void;
    /**
     * Put the formula to the cell in the table.
     * @param rowOffset - The row offset in the table.
     * @param columnOffset - The column offset in the table.
     * @param formula - The formula of the cell.
     * @param isTotalsRowFormula - 
     */
    putCellFormula(rowOffset: number, columnOffset: number, formula: string, isTotalsRowFormula: boolean) : void;
    /**
     * Updates all list columns' name from the worksheet.
     * 
     * @remarks
     * The value of the cells in the header row of the table must be same as the name of the ListColumn;
     * Cell.PutValue do not auto modify the name of the ListColumn for performance.
     */
    updateColumnName() : void;
    /**
     * Filter the table.
     */
    filter() : AutoFilter;
    /**
     * Apply the table style to the range.
     */
    applyStyleToRange() : void;
    /**
     * Convert the table to range.
     */
    convertToRange() : void;
    /**
     * Convert the table to range.
     * @param options - the options when converting table to range.
     */
    convertToRange(options: TableToRangeOptions) : void;
}

/**
 * Represents how to update links to other workbooks when the workbook is opened.
 */
export enum UpdateLinksType {
    /**
     * Prompt user to update.
     */
    UserSet = 0,
    /**
     * Do not update, and do not prompt user.
     */
    Never = 1,
    /**
     * Always update.
     */
    Always = 2,
}

/**
 * Represents data validation.settings.
 */
export class Validation {
    /**
     * Represents the operator for the data validation.
     */
    getOperator() : OperatorType;
    /**
     * Represents the operator for the data validation.
     * @param value - The value to set.
     */
    setOperator(value: OperatorType) : void;
    /**
     * Represents the validation alert style.
     */
    getAlertStyle() : ValidationAlertType;
    /**
     * Represents the validation alert style.
     * @param value - The value to set.
     */
    setAlertStyle(value: ValidationAlertType) : void;
    /**
     * Represents the data validation type.
     */
    getType() : ValidationType;
    /**
     * Represents the data validation type.
     * @param value - The value to set.
     */
    setType(value: ValidationType) : void;
    /**
     * Represents the data validation input message.
     */
    getInputMessage() : string;
    /**
     * Represents the data validation input message.
     * @param value - The value to set.
     */
    setInputMessage(value: string) : void;
    /**
     * Represents the title of the data-validation input dialog box.
     */
    getInputTitle() : string;
    /**
     * Represents the title of the data-validation input dialog box.
     * @param value - The value to set.
     */
    setInputTitle(value: string) : void;
    /**
     * Represents the data validation error message.
     */
    getErrorMessage() : string;
    /**
     * Represents the data validation error message.
     * @param value - The value to set.
     */
    setErrorMessage(value: string) : void;
    /**
     * Represents the title of the data-validation error dialog box.
     */
    getErrorTitle() : string;
    /**
     * Represents the title of the data-validation error dialog box.
     * @param value - The value to set.
     */
    setErrorTitle(value: string) : void;
    /**
     * Indicates whether the data validation input message will be displayed whenever the user selects a cell in the data validation range.
     */
    getShowInput() : boolean;
    /**
     * Indicates whether the data validation input message will be displayed whenever the user selects a cell in the data validation range.
     * @param value - The value to set.
     */
    setShowInput(value: boolean) : void;
    /**
     * Indicates whether the data validation error message will be displayed whenever the user enters invalid data.
     */
    getShowError() : boolean;
    /**
     * Indicates whether the data validation error message will be displayed whenever the user enters invalid data.
     * @param value - The value to set.
     */
    setShowError(value: boolean) : void;
    /**
     * Indicates whether blank values are permitted by the range data validation.
     */
    getIgnoreBlank() : boolean;
    /**
     * Indicates whether blank values are permitted by the range data validation.
     * @param value - The value to set.
     */
    setIgnoreBlank(value: boolean) : void;
    /**
     * Indicates whether data validation displays a drop-down list that contains acceptable values.
     */
    getInCellDropDown() : boolean;
    /**
     * Indicates whether data validation displays a drop-down list that contains acceptable values.
     * @param value - The value to set.
     */
    setInCellDropDown(value: boolean) : void;
    /**
     * Gets all <see cref="CellArea"/> which contain the data validation settings.
     */
    getAreas() : CellArea[];
    /**
     * Gets the value or expression associated with this validation.
     * @param isR1C1 - Whether the formula needs to be formatted as R1C1.
     * @param isLocal - Whether the formula needs to be formatted by locale.
     * @returns
     * The value or expression associated with this validation.
     */
    getFormula1(isR1C1: boolean, isLocal: boolean) : string;
    /**
     * Gets the value or expression associated with this validation for specific cell.
     * @param isR1C1 - Whether the formula needs to be formatted as R1C1.
     * @param isLocal - Whether the formula needs to be formatted by locale.
     * @param row - The row index.
     * @param column - The column index.
     * @returns
     * The value or expression associated with this validation.
     */
    getFormula1(isR1C1: boolean, isLocal: boolean, row: number, column: number) : string;
    /**
     * Gets the value or expression associated with this validation.
     * @param isR1C1 - Whether the formula needs to be formatted as R1C1.
     * @param isLocal - Whether the formula needs to be formatted by locale.
     * @returns
     * The value or expression associated with this validation.
     */
    getFormula2(isR1C1: boolean, isLocal: boolean) : string;
    /**
     * Gets the value or expression associated with this validation for specific cell.
     * @param isR1C1 - Whether the formula needs to be formatted as R1C1.
     * @param isLocal - Whether the formula needs to be formatted by locale.
     * @param row - The row index.
     * @param column - The column index.
     * @returns
     * The value or expression associated with this validation.
     */
    getFormula2(isR1C1: boolean, isLocal: boolean, row: number, column: number) : string;
    /**
     * Sets the value or expression associated with this validation.
     * @param formula - The value or expression associated with this format condition.
     * @param isR1C1 - Whether the formula is R1C1 formula.
     * @param isLocal - Whether the formula is locale formatted.
     */
    setFormula1(formula: string, isR1C1: boolean, isLocal: boolean) : void;
    /**
     * Sets the value or expression associated with this validation.
     * @param formula - The value or expression associated with this format condition.
     * @param isR1C1 - Whether the formula is R1C1 formula.
     * @param isLocal - Whether the formula is locale formatted.
     */
    setFormula2(formula: string, isR1C1: boolean, isLocal: boolean) : void;
    /**
     * Applies the validation to the area.
     * @param cellArea - The area.
     * 
     * @remarks
     * It is equivalent to use <see cref="AddArea(Aspose.Cells.CellArea,bool,bool)"/>
     * with checking intersection and edge.
     */
    addArea(cellArea: CellArea) : void;
    /**
     * Applies the validation to the area.
     * @param cellArea - The area.
     * @param checkIntersection - Whether check the intersection of given area with existing validations' areas.         /// If one validation has been applied in given area(or part of it),         /// then the existing validation should be removed at first from given area.         /// Otherwise corruption may be caused for the generated Validations.         /// If user is sure that the added area does not intersect with any existing area,         /// this parameter can be set as false for performance consideration.
     * @param checkEdge - Whether check the edge of this validation's applied areas.         /// Validation's internal settings depend on the top-left one of its applied ranges,         /// so if given area will become the new top-left one of the applied ranges,         /// the internal settings should be changed and rebuilt, otherwise unexpected result may be caused.         /// If user is sure that the added area is not the top-left one,         /// this parameter can be set as false for performance consideration.
     * 
     * @remarks
     * In this method, we will remove all old validations in given area.
     * For the top-left one of Validation's applied ranges, firstly its StartRow is smallest,
     * secondly its StartColumn is the smallest one of those areas who have the same smallest StartRow.
     */
    addArea(cellArea: CellArea, checkIntersection: boolean, checkEdge: boolean) : void;
    /**
     * Applies the validation to given areas.
     * @param areas - The areas.
     * @param checkIntersection - Whether check the intersection of given area with existing validations' areas.         /// If one validation has been applied in given area(or part of it),         /// then the existing validation should be removed at first from given area.         /// Otherwise corruption may be caused for the generated Validations.         /// If user is sure that all the added areas do not intersect with any existing area,         /// this parameter can be set as false for performance consideration.
     * @param checkEdge - Whether check the edge of this validation's applied areas.         /// Validation's internal settings depend on the top-left one of its applied ranges,         /// so if one of given areas will become the new top-left one of the applied ranges,         /// the internal settings should be changed and rebuilt, otherwise unexpected result may be caused.         /// If user is sure that no one of those added areas is the top-left,         /// this parameter can be set as false for performance consideration.
     * 
     * @remarks
     * In this method, we will remove all old validations in given area.
     * For the top-left one of Validation's applied ranges, firstly its StartRow is smallest,
     * secondly its StartColumn is the smallest one of those areas who have the same smallest StartRow.
     */
    addAreas(areas: CellArea[], checkIntersection: boolean, checkEdge: boolean) : void;
    /**
     * Remove the validation settings in the range.
     * @param cellArea - the areas where this validation settings should be removed.
     */
    removeArea(cellArea: CellArea) : void;
    /**
     * Removes this validation from given areas.
     * @param areas - the areas where this validation settings should be removed.
     */
    removeAreas(areas: CellArea[]) : void;
    /**
     * Remove the validation settings in the cell.
     * @param row - The row index.
     * @param column - The column index.
     */
    removeACell(row: number, column: number) : void;
    /**
     * Copy validation.
     * @param source - The source validation.
     * @param copyOption - The copy option.
     */
    copy(source: Validation, copyOption: CopyOptions) : void;
}

/**
 * Represents the module in VBA project.
 */
export class VbaModule {
    /**
     * Gets and sets the name of Module.
     */
    getName() : string;
    /**
     * Gets and sets the name of Module.
     * @param value - The value to set.
     */
    setName(value: string) : void;
    /**
     * Gets the type of module.
     */
    getType() : VbaModuleType;
    /**
     * Gets and sets the codes of module.
     */
    getCodes() : string;
    /**
     * Gets and sets the codes of module.
     * @param value - The value to set.
     */
    setCodes(value: string) : void;
}

/**
 * Represents the list of <see cref="VbaModule"/>
 */
export class VbaModuleCollection {
    /**
     * Gets <see cref="VbaModule"/> in the list by the index.
     * @param index - The index.
     */
    get(index: number) : VbaModule;
    /**
     * Gets <see cref="VbaModule"/> in the list by the name.
     * @param name - The name of module.
     */
    get(name: string) : VbaModule;
    /**
     * @param name - 
     * @param data - 
     */
    addDesignerStorage(name: string, data: number[]) : void;
    /**
     * Represents the data of Designer.
     * 
     * @remarks
     * We do not support to parse them. Just only for copying.
     */
    getDesignerStorage(name: string) : number[];
    /**
     * Adds module for a worksheet.
     * @param sheet - The worksheet
     */
    add(sheet: Worksheet) : number;
    /**
     * Adds module.
     * @param type - The type of module.
     * @param name - The name of module.
     */
    add(type: VbaModuleType, name: string) : number;
    /**
     * Inser user form into VBA Project.
     * @param name - The name of user form
     * @param codes - The codes for the user form
     * @param designerStorage - the designer setting about the user form
     */
    addUserForm(name: string, codes: string, designerStorage: number[]) : number;
    /**
     * Removes module for a worksheet.
     * @param sheet - The worksheet
     */
    remove(sheet: Worksheet) : void;
    /**
     * Remove the module by the name
     * @param name - 
     */
    remove(name: string) : void;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the type of VBA module.
 */
export enum VbaModuleType {
    /**
     * Represents a procedural module.
     */
    Procedural = 0,
    /**
     * Represents a document module.
     */
    Document = 1,
    /**
     * Represents a class module.
     */
    Class = 2,
    /**
     * Represents a designer module.
     */
    Designer = 3,
}

/**
 * Represents the VBA project.
 */
export class VbaProject {
    /**
     * Indicates whether the signature of VBA project is valid or not.
     */
    isValidSigned() : boolean;
    /**
     * Gets certificate raw data if this VBA project is signed.
     */
    getCertRawData() : number[];
    /**
     * Gets and sets the encoding of VBA project.
     */
    getEncoding() : EncodingType;
    /**
     * Gets and sets the encoding of VBA project.
     * @param value - The value to set.
     */
    setEncoding(value: EncodingType) : void;
    /**
     * Gets and sets the name of the VBA project.
     */
    getName() : string;
    /**
     * Gets and sets the name of the VBA project.
     * @param value - The value to set.
     */
    setName(value: string) : void;
    /**
     * Indicates whether VBAcode is signed or not.
     */
    isSigned() : boolean;
    /**
     * Indicates whether this VBA project is protected.
     */
    isProtected() : boolean;
    /**
     * Indicates whether this VBA project is locked for viewing.
     */
    getIslockedForViewing() : boolean;
    /**
     * Gets all <see cref="VbaModule"/> objects.
     */
    getModules() : VbaModuleCollection;
    /**
     * Gets all references of VBA project.
     */
    getReferences() : VbaProjectReferenceCollection;
    /**
     * Sign this VBA project by a DigitalSignature
     * @param digitalSignature - DigitalSignature
     */
    sign(digitalSignature: DigitalSignature) : void;
    /**
     * Protects or unprotects this VBA project.
     * @param islockedForViewing - indicates whether locks project for viewing.
     * @param password - If the value is null, unprotects this VBA project, otherwise projects the this VBA project.
     * 
     * @remarks
     * If islockedForViewing is true, the password could not be null.
     */
    protect(islockedForViewing: boolean, password: string) : void;
    /**
     * Copy VBA project from other file.
     * @param source - 
     */
    copy(source: VbaProject) : void;
    /**
     * Validates protection password.
     * @param password - the password
     * @returns
     * Whether password is the protection password of this VBA project
     */
    validatePassword(password: string) : boolean;
}

/**
 * Represents the reference of VBA project.
 */
export class VbaProjectReference {
    /**
     * Gets the type of this reference.
     */
    getType() : VbaProjectReferenceType;
    /**
     * Gets and sets the name of the reference.
     */
    getName() : string;
    /**
     * Gets and sets the name of the reference.
     * @param value - The value to set.
     */
    setName(value: string) : void;
    /**
     * Gets and sets the Libid of the reference.
     */
    getLibid() : string;
    /**
     * Gets and sets the Libid of the reference.
     * @param value - The value to set.
     */
    setLibid(value: string) : void;
    /**
     * Gets and sets the twiddled Libid of the reference.
     * 
     * @remarks
     * Only for control reference.
     */
    getTwiddledlibid() : string;
    /**
     * Gets and sets the twiddled Libid of the reference.
     * @param value - The value to set.
     * 
     * @remarks
     * Only for control reference.
     */
    setTwiddledlibid(value: string) : void;
    /**
     * Gets and sets the extended Libid of the reference.
     * 
     * @remarks
     * Only for control reference.
     */
    getExtendedLibid() : string;
    /**
     * Gets and sets the extended Libid of the reference.
     * @param value - The value to set.
     * 
     * @remarks
     * Only for control reference.
     */
    setExtendedLibid(value: string) : void;
    /**
     * Gets and sets the referenced VBA project's identifier with an relative path.
     * 
     * @remarks
     * Only for project reference.
     */
    getRelativeLibid() : string;
    /**
     * Gets and sets the referenced VBA project's identifier with an relative path.
     * @param value - The value to set.
     * 
     * @remarks
     * Only for project reference.
     */
    setRelativeLibid(value: string) : void;
    /**
     * @param source - 
     */
    copy(source: VbaProjectReference) : void;
}

/**
 * Represents all references of VBA project.
 */
export class VbaProjectReferenceCollection {
    /**
     * Get the reference in the list by the index.
     * @param i - The index.
     */
    get(i: number) : VbaProjectReference;
    /**
     * Add a reference to an Automation type library.
     * @param name - The name of reference.
     * @param libid - The identifier of an Automation type library.
     */
    addRegisteredReference(name: string, libid: string) : number;
    /**
     * Add a reference to a twiddled type library and its extended type library.
     * @param name - The name of reference.
     * @param libid - The identifier of an Automation type library.
     * @param twiddledlibid - The identifier of a twiddled type library
     * @param extendedLibid - The identifier of an extended type library
     */
    addControlRefrernce(name: string, libid: string, twiddledlibid: string, extendedLibid: string) : number;
    /**
     * Adds a reference to an external VBA project.
     * @param name - The name of reference.
     * @param absoluteLibid - The referenced VBA project's identifier with an absolute path.
     * @param relativeLibid - The referenced VBA project's identifier with an relative path.
     */
    addProjectRefrernce(name: string, absoluteLibid: string, relativeLibid: string) : number;
    /**
     * Copies references from other VBA project.
     * @param source - The source references.
     */
    copy(source: VbaProjectReferenceCollection) : void;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the type of VBA project reference.
 */
export enum VbaProjectReferenceType {
    /**
     * Specifies a reference to an Automation type library.
     */
    Registered = 0,
    /**
     * Specifies a reference to a twiddled type library and its extended type library.
     */
    Control = 1,
    /**
     * Specifies a reference to an external VBA project.
     */
    Project = 2,
}

/**
 * Warning info
 */
export class WarningInfo {
    /**
     * Get warning type.
     */
    getWarningType() : WarningType;
    /**
     * Get description of warning info.
     */
    getDescription() : string;
}

/**
 * WaringType
 */
export enum WarningType {
    /**
     * Font substitution warning type
     * when a font has not been found, this warning type can be get.
     */
    FontSubstitution = 0,
    /**
     * Duplicate defined name is found in the file.
     */
    DuplicateDefinedName = 1,
    /**
     * Unsupported file format.
     */
    UnsupportedFileFormat = 2,
    /**
     * Invalid text of the defined name.
     */
    InvalidTextOfDefinedName = 3,
    /**
     * Invalid the font name.
     */
    InvalidFontName = 4,
    /**
     * Invalid autofilter range.
     */
    InvalidAutoFilterRange = 5,
    /**
     * The file is corrupted.
     */
    IO = 6,
    /**
     * Out of MS Excel limitation error.
     */
    Limitation = 7,
    /**
     * Invalid data.
     */
    InvalidData = 8,
    /**
     * Invalid formula.
     */
    Formula = 9,
    /**
     * Invalid operator.
     */
    InvalidOperator = 10,
}

/**
 * Specifies write protection settings for a workbook.
 */
export class WriteProtection {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets and sets the author.
     */
    getAuthor() : string;
    /**
     * Gets and sets the author.
     * @param value - The value to set.
     */
    setAuthor(value: string) : void;
    /**
     * Indicates if the Read Only Recommended option is selected.
     */
    getRecommendReadOnly() : boolean;
    /**
     * Indicates if the Read Only Recommended option is selected.
     * @param value - The value to set.
     */
    setRecommendReadOnly(value: boolean) : void;
    /**
     * Indicates whether this workbook is write protected.
     */
    isWriteProtected() : boolean;
    /**
     * Sets the protected password to modify the file.
     * 
     * @remarks
     */
    getPassword() : string;
    /**
     * Sets the protected password to modify the file.
     * @param value - The value to set.
     * 
     * @remarks
     */
    setPassword(value: string) : void;
    /**
     * Returns true if the specified password is the same as the write-protection password the file was protected with.
     * @param password - The specified password.
     */
    validatePassword(password: string) : boolean;
}

/**
 * Represents five types of html cross string.
 */
export enum HtmlCrossType {
    /**
     * Display like MS Excel,depends on the next cell.
     * If the next cell is null,the string will cross,or it will be truncated
     */
    Default = 0,
    /**
     * Display the string like MS Excel exporting html.
     */
    MSExport = 1,
    /**
     * Display HTML cross string, this performance for creating large html files will be more than ten times faster than setting the value to Default or FitToCell.
     */
    Cross = 2,
    /**
     * Display HTML cross string and hide the right string when the texts overlap.
     */
    CrossHideRight = 3,
    /**
     * Only displaying the string within the width of cell.
     */
    FitToCell = 4,
}

/**
 * Enumerates Bit Depth Type for tiff image.
 */
export enum ColorDepth {
    /**
     * Default value, not set value.
     */
    Default = 0,
    /**
     * 1 bit per pixel
     */
    Format1bpp = 1,
    /**
     * 4 bits per pixel
     */
    Format4bpp = 4,
    /**
     * 8 bits per pixel
     */
    Format8bpp = 8,
    /**
     * 24 bits per pixel
     */
    Format24bpp = 24,
    /**
     * 32 bits per pixel
     */
    Format32bpp = 32,
}

/**
 * DrawObject will be initialized and returned when rendering.
 */
export class DrawObject {
    /**
     * Indicates the Cell object when rendering.
     * All properties of cell can be accessed.
     */
    getCell() : Cell;
    /**
     * Indicates the Shape object when rendering.
     * All properties of shape can be accessed.
     */
    getShape() : Shape;
    /**
     * Indicates image bytes of rendered Chart, Shape when rendering.
     */
    getImageBytes() : number[];
    /**
     * Indicates the type of DrawObject.
     */
    getType() : DrawObjectEnum;
    /**
     * Indicates the page index of DrawObject.
     * Page index is based on zero.
     * One Sheet contains several pages when rendering.
     */
    getCurrentPage() : number;
    /**
     * Indicates total pages in current rendering.
     */
    getTotalPages() : number;
    /**
     * Indicates current sheet index of DrawObject.
     */
    getSheetIndex() : number;
}

/**
 * Indicate Cell or Image of DrawObject.
 */
export enum DrawObjectEnum {
    /**
     * Indicate DrawObject is an Image
     */
    Image = 0,
    /**
     * indicate DrawObject is an Cell
     */
    Cell = 1,
}

/**
 * Interface to get DrawObject and Bound when rendering.
 */
export abstract class DrawObjectEventHandler {
    /**
     * Implements this interface to get DrawObject and Bound when rendering.
     * @param drawObject - DrawObject will be initialized and returned when rendering
     * @param x - Left of DrawObject
     * @param y - Top of DrawObject
     * @param width - Width of DrawObject
     * @param height - Height of DrawObject
     */
    abstract draw(drawObject: DrawObject, x: number, y: number, width: number, height: number) : void;
}

/**
 * Enumerates grid line Type.
 */
export enum GridlineType {
    /**
     * Represents dotted line.
     */
    Dotted = 0,
    /**
     * Represents hair line.
     */
    Hair = 1,
}

/**
 * Allows to specify options when rendering worksheet to images, printing worksheet or rendering chart to image.
 */
export class ImageOrPrintOptions {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * If PrintWithStatusDialog = true , there will be a dialog that shows current print status.
     * else no such dialog will show.
     * @param value - The value to set.
     */
    setPrintWithStatusDialog(value: boolean) : void;
    /**
     * If PrintWithStatusDialog = true , there will be a dialog that shows current print status.
     * else no such dialog will show.
     */
    getPrintWithStatusDialog() : boolean;
    /**
     * Gets or sets the horizontal resolution for generated images, in dots per inch.
     * Applies generating image method except Emf format images.
     * 
     * @remarks
     * The default value is 96.
     */
    getHorizontalResolution() : number;
    /**
     * Gets or sets the horizontal resolution for generated images, in dots per inch.
     * Applies generating image method except Emf format images.
     * @param value - The value to set.
     * 
     * @remarks
     * The default value is 96.
     */
    setHorizontalResolution(value: number) : void;
    /**
     * Gets or sets the vertical  resolution for generated images, in dots per inch.
     * Applies generating image method except Emf format image.
     * 
     * @remarks
     * The default value is 96.
     */
    getVerticalResolution() : number;
    /**
     * Gets or sets the vertical  resolution for generated images, in dots per inch.
     * Applies generating image method except Emf format image.
     * @param value - The value to set.
     * 
     * @remarks
     * The default value is 96.
     */
    setVerticalResolution(value: number) : void;
    /**
     * Gets or sets the type of compression to apply only when saving pages to the <c>Tiff</c> format.
     * 
     * @remarks
     * Has effect only when saving to TIFF.
     * The default value is Lzw.
     */
    getTiffCompression() : TiffCompression;
    /**
     * Gets or sets the type of compression to apply only when saving pages to the <c>Tiff</c> format.
     * @param value - The value to set.
     * 
     * @remarks
     * Has effect only when saving to TIFF.
     * The default value is Lzw.
     */
    setTiffCompression(value: TiffCompression) : void;
    /**
     * Gets or sets bit depth to apply only when saving pages to the <c>Tiff</c> format.
     * 
     * @remarks
     * Has effect only when saving to TIFF.
     * If TiffCompression is set to CCITT3, CCITT4, this will not take effect, the bit depth of the generated tiff image will be always 1.
     */
    getTiffColorDepth() : ColorDepth;
    /**
     * Gets or sets bit depth to apply only when saving pages to the <c>Tiff</c> format.
     * @param value - The value to set.
     * 
     * @remarks
     * Has effect only when saving to TIFF.
     * If TiffCompression is set to CCITT3, CCITT4, this will not take effect, the bit depth of the generated tiff image will be always 1.
     */
    setTiffColorDepth(value: ColorDepth) : void;
    /**
     * Gets or sets method used while converting images to 1 bpp format
     * when <see cref="ImageType"/> is Tiff and <see cref="TiffCompression"/> is equal to Ccitt3 or Ccitt4.
     * 
     * @remarks
     * The default value is FloydSteinbergDithering.
     */
    getTiffBinarizationMethod() : ImageBinarizationMethod;
    /**
     * Gets or sets method used while converting images to 1 bpp format
     * when <see cref="ImageType"/> is Tiff and <see cref="TiffCompression"/> is equal to Ccitt3 or Ccitt4.
     * @param value - The value to set.
     * 
     * @remarks
     * The default value is FloydSteinbergDithering.
     */
    setTiffBinarizationMethod(value: ImageBinarizationMethod) : void;
    /**
     * Indicates which pages will not be printed.
     */
    getPrintingPage() : PrintingPageType;
    /**
     * Indicates which pages will not be printed.
     * @param value - The value to set.
     */
    setPrintingPage(value: PrintingPageType) : void;
    /**
     * Gets or sets a value determining the quality of the generated  images
     * to apply only when saving pages to the <c>Jpeg</c> format. The default value is 100
     * 
     * @remarks
     * Has effect only when saving to JPEG.
     * The value must be between 0 and 100.
     * The default value is 100.
     */
    getQuality() : number;
    /**
     * Gets or sets a value determining the quality of the generated  images
     * to apply only when saving pages to the <c>Jpeg</c> format. The default value is 100
     * @param value - The value to set.
     * 
     * @remarks
     * Has effect only when saving to JPEG.
     * The value must be between 0 and 100.
     * The default value is 100.
     */
    setQuality(value: number) : void;
    /**
     * Gets or sets the format of the generated images.
     * default value: PNG.
     */
    getImageType() : ImageType;
    /**
     * Gets or sets the format of the generated images.
     * default value: PNG.
     * @param value - The value to set.
     */
    setImageType(value: ImageType) : void;
    /**
     * If OnePagePerSheet is true , all content of one sheet will output to only one page in result.
     * The paper size of pagesetup will be invalid, and the other settings of pagesetup
     * will still take effect.
     */
    getOnePagePerSheet() : boolean;
    /**
     * If OnePagePerSheet is true , all content of one sheet will output to only one page in result.
     * The paper size of pagesetup will be invalid, and the other settings of pagesetup
     * will still take effect.
     * @param value - The value to set.
     */
    setOnePagePerSheet(value: boolean) : void;
    /**
     * If AllColumnsInOnePagePerSheet is true , all column content of one sheet will output to only one page in result.
     * The width of paper size of pagesetup will be invalid, and the other settings of pagesetup
     * will still take effect.
     */
    getAllColumnsInOnePagePerSheet() : boolean;
    /**
     * If AllColumnsInOnePagePerSheet is true , all column content of one sheet will output to only one page in result.
     * The width of paper size of pagesetup will be invalid, and the other settings of pagesetup
     * will still take effect.
     * @param value - The value to set.
     */
    setAllColumnsInOnePagePerSheet(value: boolean) : void;
    /**
     * Implements this interface to get DrawObject and Bound when rendering.
     */
    getDrawObjectEventHandler() : DrawObjectEventHandler;
    /**
     * Implements this interface to get DrawObject and Bound when rendering.
     * @param value - The value to set.
     */
    setDrawObjectEventHandler(value: DrawObjectEventHandler) : void;
    /**
     * Indicate the filename of embedded image in svg.
     * This should be full path with directory like "c:\\xpsEmbedded"
     */
    getEmbededImageNameInSvg() : string;
    /**
     * Indicate the filename of embedded image in svg.
     * This should be full path with directory like "c:\\xpsEmbedded"
     * @param value - The value to set.
     */
    setEmbededImageNameInSvg(value: string) : void;
    /**
     * if this property is true, the generated svg will fit to view port.
     */
    getSVGFitToViewPort() : boolean;
    /**
     * if this property is true, the generated svg will fit to view port.
     * @param value - The value to set.
     */
    setSVGFitToViewPort(value: boolean) : void;
    /**
     * If this property is true , one Area will be output, and no scale will take effect.
     */
    getOnlyArea() : boolean;
    /**
     * If this property is true , one Area will be output, and no scale will take effect.
     * @param value - The value to set.
     */
    setOnlyArea(value: boolean) : void;
    /**
     * Indicates if the background of generated image should be transparent.
     * 
     * @remarks
     * The default value is false. That means the background of the generated images is white.
     */
    getTransparent() : boolean;
    /**
     * Indicates if the background of generated image should be transparent.
     * @param value - The value to set.
     * 
     * @remarks
     * The default value is false. That means the background of the generated images is white.
     */
    setTransparent(value: boolean) : void;
    /**
     * Gets or sets warning callback.
     * @param value - The value to set.
     */
    setWarningCallback(value: IWarningCallback) : void;
    /**
     * Gets or sets warning callback.
     */
    getWarningCallback() : IWarningCallback;
    /**
     * Control/Indicate progress of page saving process.
     */
    getPageSavingCallback() : IPageSavingCallback;
    /**
     * Control/Indicate progress of page saving process.
     * @param value - The value to set.
     */
    setPageSavingCallback(value: IPageSavingCallback) : void;
    /**
     * Indicates whether to only substitute the font of character when the cell font is not compatibility for it.
     * @param value - The value to set.
     * 
     * @remarks
     * Default is false. We will try default font of Workbook and PdfSaveOption/system for cell font first.
     */
    setIsFontSubstitutionCharGranularity(value: boolean) : void;
    /**
     * Indicates whether to only substitute the font of character when the cell font is not compatibility for it.
     * 
     * @remarks
     * Default is false. We will try default font of Workbook and PdfSaveOption/system for cell font first.
     */
    isFontSubstitutionCharGranularity() : boolean;
    /**
     * Gets or sets the 0-based index of the first page to save.
     * @param value - The value to set.
     * 
     * @remarks
     * Default is 0.
     */
    setPageIndex(value: number) : void;
    /**
     * Gets or sets the 0-based index of the first page to save.
     * 
     * @remarks
     * Default is 0.
     */
    getPageIndex() : number;
    /**
     * Gets or sets the number of pages to save.
     * @param value - The value to set.
     * 
     * @remarks
     * Default is System.Int32.MaxValue which means all pages will be rendered.
     */
    setPageCount(value: number) : void;
    /**
     * Gets or sets the number of pages to save.
     * 
     * @remarks
     * Default is System.Int32.MaxValue which means all pages will be rendered.
     */
    getPageCount() : number;
    /**
     * Indicates whether to optimize the output elements.
     * 
     * @remarks
     * Default value is false.
     * Currently when this property is set to true, the following optimizations will be done:
     * 1. optimize the border lines.
     * 2. optimize the file size while rendering to Svg image.
     */
    isOptimized() : boolean;
    /**
     * Indicates whether to optimize the output elements.
     * @param value - The value to set.
     * 
     * @remarks
     * Default value is false.
     * Currently when this property is set to true, the following optimizations will be done:
     * 1. optimize the border lines.
     * 2. optimize the file size while rendering to Svg image.
     */
    setIsOptimized(value: boolean) : void;
    /**
     * When characters in the Excel are Unicode and not be set with correct font in cell style,
     * They may appear as block in pdf,image.
     * Set the DefaultFont such as MingLiu or MS Gothic to show these characters.
     * If this property is not set, Aspose.Cells will use system default font to show these unicode characters.
     */
    getDefaultFont() : string;
    /**
     * When characters in the Excel are Unicode and not be set with correct font in cell style,
     * They may appear as block in pdf,image.
     * Set the DefaultFont such as MingLiu or MS Gothic to show these characters.
     * If this property is not set, Aspose.Cells will use system default font to show these unicode characters.
     * @param value - The value to set.
     */
    setDefaultFont(value: string) : void;
    /**
     * When characters in the Excel are Unicode and not be set with correct font in cell style,
     * They may appear as block in pdf,image.
     * Set this to true to try to use workbook's default font to show these characters first.
     * 
     * @remarks
     * Default is true.
     */
    getCheckWorkbookDefaultFont() : boolean;
    /**
     * When characters in the Excel are Unicode and not be set with correct font in cell style,
     * They may appear as block in pdf,image.
     * Set this to true to try to use workbook's default font to show these characters first.
     * @param value - The value to set.
     * 
     * @remarks
     * Default is true.
     */
    setCheckWorkbookDefaultFont(value: boolean) : void;
    /**
     * Indicates whether to output a blank page when there is nothing to print.
     * 
     * @remarks
     * Default is false.
     */
    getOutputBlankPageWhenNothingToPrint() : boolean;
    /**
     * Indicates whether to output a blank page when there is nothing to print.
     * @param value - The value to set.
     * 
     * @remarks
     * Default is false.
     */
    setOutputBlankPageWhenNothingToPrint(value: boolean) : void;
    /**
     * Gets or sets gridline type.
     * 
     * @remarks
     * Default is Dotted type.
     */
    getGridlineType() : GridlineType;
    /**
     * Gets or sets gridline type.
     * @param value - The value to set.
     * 
     * @remarks
     * Default is Dotted type.
     */
    setGridlineType(value: GridlineType) : void;
    /**
     * Gets or sets displaying text type when the text width is larger than cell width.
     */
    getTextCrossType() : TextCrossType;
    /**
     * Gets or sets displaying text type when the text width is larger than cell width.
     * @param value - The value to set.
     */
    setTextCrossType(value: TextCrossType) : void;
    /**
     * Gets or sets default edit language.
     * 
     * @remarks
     * It may display/render different layouts for text paragraph when different edit languages is set.
     * Default is <see cref="Aspose.Cells.DefaultEditLanguage.Auto"/>.
     */
    getDefaultEditLanguage() : DefaultEditLanguage;
    /**
     * Gets or sets default edit language.
     * @param value - The value to set.
     * 
     * @remarks
     * It may display/render different layouts for text paragraph when different edit languages is set.
     * Default is <see cref="Aspose.Cells.DefaultEditLanguage.Auto"/>.
     */
    setDefaultEditLanguage(value: DefaultEditLanguage) : void;
    /**
     * Gets or sets the sheets to render. Default is all visible sheets in the workbook: <see cref="Aspose.Cells.Rendering.SheetSet.Visible"/>.
     * 
     * @remarks
     * The set is ignored when it is used in <see cref="SheetRender"/>
     */
    getSheetSet() : SheetSet;
    /**
     * Gets or sets the sheets to render. Default is all visible sheets in the workbook: <see cref="Aspose.Cells.Rendering.SheetSet.Visible"/>.
     * @param value - The value to set.
     * 
     * @remarks
     * The set is ignored when it is used in <see cref="SheetRender"/>
     */
    setSheetSet(value: SheetSet) : void;
    /**
     * Setting for rendering Emf metafile.
     * 
     * @remarks
     * EMF metafiles identified as "EMF+ Dual" can contain both EMF+ records and EMF records.
     * Either type of record can be used to render the image, only EMF+ records, or only EMF records.
     * When <see cref="Aspose.Cells.EmfRenderSetting.EmfPlusPrefer"/> is set, then EMF+ records will be parsed while rendering to image, otherwise only EMF records will be parsed.
     * Default value is <see cref="Aspose.Cells.EmfRenderSetting.EmfOnly"/>.
     * For the frameworks that depend on .Net System.Drawing.Common, this setting is ignored.
     */
    getEmfRenderSetting() : EmfRenderSetting;
    /**
     * Setting for rendering Emf metafile.
     * @param value - The value to set.
     * 
     * @remarks
     * EMF metafiles identified as "EMF+ Dual" can contain both EMF+ records and EMF records.
     * Either type of record can be used to render the image, only EMF+ records, or only EMF records.
     * When <see cref="Aspose.Cells.EmfRenderSetting.EmfPlusPrefer"/> is set, then EMF+ records will be parsed while rendering to image, otherwise only EMF records will be parsed.
     * Default value is <see cref="Aspose.Cells.EmfRenderSetting.EmfOnly"/>.
     * For the frameworks that depend on .Net System.Drawing.Common, this setting is ignored.
     */
    setEmfRenderSetting(value: EmfRenderSetting) : void;
    /**
     * Sets desired width and height of image.
     * @param desiredWidth - desired width in pixels
     * @param desiredHeight - desired height in pixels
     * @param keepAspectRatio - whether to keep aspect ratio of origin image
     */
    setDesiredSize(desiredWidth: number, desiredHeight: number, keepAspectRatio: boolean) : void;
}

/**
 * Control/Indicate progress of page saving process.
 */
export interface IPageSavingCallback {
    /**
     * Control/Indicate a page starts to be output.
     * @param args - Info for a page starts saving process.
     */
    pageStartSaving(args: PageStartSavingArgs) : void;
    /**
     * Control/Indicate a page ends to be output.
     * @param args - Info for a page ends saving process.
     */
    pageEndSaving(args: PageEndSavingArgs) : void;
}

/**
 * Info for a page ends saving process.
 */
export class PageEndSavingArgs extends PageSavingArgs {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: PageSavingArgs);
    /**
     * Gets or sets a value indicating whether having more pages to be output.
     * The default value is true.
     */
    getHasMorePages() : boolean;
    /**
     * Gets or sets a value indicating whether having more pages to be output.
     * The default value is true.
     * @param value - The value to set.
     */
    setHasMorePages(value: boolean) : void;
}

/**
 * Info for a page saving process.
 */
export class PageSavingArgs {
    /**
     * Current page index, zero based.
     */
    getPageIndex() : number;
    /**
     * Total page count.
     */
    getPageCount() : number;
}

/**
 * Info for a page starts saving process.
 */
export class PageStartSavingArgs extends PageSavingArgs {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: PageSavingArgs);
    /**
     * Gets or sets a value indicating whether the page should be output.
     * The default value is true.
     */
    isToOutput() : boolean;
    /**
     * Gets or sets a value indicating whether the page should be output.
     * The default value is true.
     * @param value - The value to set.
     */
    setIsToOutput(value: boolean) : void;
}

/**
 * Indicates which pages will not be printed.
 */
export enum PrintingPageType {
    /**
     * Prints all pages.
     */
    Default = 0,
    /**
     * Don't print the pages which the cells are blank.
     */
    IgnoreBlank = 1,
    /**
     * Don't print the pages which cells only contain styles.
     */
    IgnoreStyle = 2,
}

/**
 * Enumerates displaying text type when the text width is larger than cell width.
 */
export enum TextCrossType {
    /**
     * Display text like in Microsoft Excel.
     */
    Default = 1,
    /**
     * Display all the text by crossing other cells and keep text of crossed cells.
     */
    CrossKeep = 2,
    /**
     * Display all the text by crossing other cells and override text of crossed cells.
     */
    CrossOverride = 3,
    /**
     * Only display the text within the width of cell.
     */
    StrictInCell = 4,
}

/**
 * Specifies what type of compression to apply when saving images into TIFF format file.
 */
export enum TiffCompression {
    /**
     * Specifies no compression.
     */
    CompressionNone = 0,
    /**
     * Specifies the RLE compression scheme.
     */
    CompressionRle = 1,
    /**
     * Specifies the LZW compression scheme.
     */
    CompressionLZW = 2,
    /**
     * Specifies the CCITT3 compression scheme.
     */
    CompressionCCITT3 = 3,
    /**
     * Specifies the CCITT4 compression scheme.
     */
    CompressionCCITT4 = 4,
}

/**
 * Worksheet printing preview.
 */
export class SheetPrintingPreview {
    /**
     * The construct of SheetPrintingPreview
     * @param sheet - Indicate which spreadsheet to be printed.
     * @param options - ImageOrPrintOptions contains some property of output
     */
    constructor(sheet: Worksheet, options: ImageOrPrintOptions);
    /**
     * Evaluate the total page count of this worksheet
     */
    getEvaluatedPageCount() : number;
}

/**
 * Represents a worksheet render which can render worksheet to various images such as (BMP, PNG, JPEG, TIFF..)
 * The constructor of this class , must be used after modification of pagesetup, cell style.
 */
export class SheetRender {
    /**
     * the construct of SheetRender, need worksheet and ImageOrPrintOptions as params
     * @param worksheet - Indicate which spreadsheet to be rendered.
     * @param options - ImageOrPrintOptions contains some property of output image
     */
    constructor(worksheet: Worksheet, options: ImageOrPrintOptions);
    /**
     * Gets the total page count of current worksheet.
     */
    getPageCount() : number;
    /**
     * Gets calculated page scale of the sheet.
     * Returns the set scale if <see cref="PageSetup.Zoom"/> is set. Otherwise, returns the calculated scale according to <see cref="PageSetup.FitToPagesWide"/> and <see cref="PageSetup.FitToPagesTall"/>.
     */
    getPageScale() : number;
    /**
     * Get page size in inch of output image.
     * @param pageIndex - The page index is based on zero.
     * @returns
     * Page size of image, [0] for width and [1] for height
     */
    getPageSizeInch(pageIndex: number) : number[];
    /**
     * Render certain page to a file.
     * @param pageIndex - indicate which page is to be converted
     * @param fileName - filename of the output image
     */
    toImage(pageIndex: number, fileName: string) : void;
    /**
     * Render certain page to a stream.
     * @param pageIndex - indicate which page is to be converted
     * @returns
     * The result stream.
     */
    toImage(pageIndex: number) : Uint8Array;
    /**
     * Render whole worksheet as Tiff Image to stream.
     * @param stream - the stream of the output image
     */
    toTiff(stream: Uint8Array) : void;
    /**
     * Render whole worksheet as Tiff Image to a file.
     * @param filename - the filename of the output image
     */
    toTiff(filename: string) : void;
    /**
     * Releases resources created and used for rendering.
     */
    dispose() : void;
}

/**
 * Workbook printing preview.
 */
export class WorkbookPrintingPreview {
    /**
     * The construct of WorkbookPrintingPreview
     * @param workbook - Indicate which workbook to be printed.
     * @param options - ImageOrPrintOptions contains some property of output
     */
    constructor(workbook: Workbook, options: ImageOrPrintOptions);
    /**
     * Evaluate the total page count of this workbook
     */
    getEvaluatedPageCount() : number;
}

/**
 * Represents a Workbook render.
 * The constructor of this class , must be used after modification of pagesetup, cell style.
 * 
 * @remarks
 */
export class WorkbookRender {
    /**
     * The construct of WorkbookRender
     * @param workbook - Indicate which workbook to be rendered.
     * @param options - ImageOrPrintOptions contains some property of output image
     */
    constructor(workbook: Workbook, options: ImageOrPrintOptions);
    /**
     * Gets the total page count of workbook.
     */
    getPageCount() : number;
    /**
     * Get page size in inch of output image.
     * @param pageIndex - The page index is based on zero.
     * @returns
     * Page size of image, [0] for width and [1] for height
     */
    getPageSizeInch(pageIndex: number) : number[];
    /**
     * Render whole workbook as Tiff Image to stream.
     * @returns
     * The result stream.
     */
    toImage() : Uint8Array;
    /**
     * Render whole workbook as Tiff Image to a file.
     * @param filename - the filename of the output image
     */
    toImage(filename: string) : void;
    /**
     * Render certain page to a file.
     * @param pageIndex - indicate which page is to be converted
     * @param fileName - filename of the output image
     */
    toImage(pageIndex: number, fileName: string) : void;
    /**
     * Render certain page to a stream.
     * @param pageIndex - indicate which page is to be converted
     * @returns
     * The result stream.
     */
    toImage(pageIndex: number) : Uint8Array;
    /**
     * Releases resources created and used for rendering.
     */
    dispose() : void;
}

/**
 * Represents the options of inserting.
 */
export class InsertOptions {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     */
    getCopyFormatType() : CopyFormatType;
    /**
     * @param value - The value to set.
     */
    setCopyFormatType(value: CopyFormatType) : void;
    /**
     * Indicates if references in other worksheets will be updated.
     */
    getUpdateReference() : boolean;
    /**
     * Indicates if references in other worksheets will be updated.
     * @param value - The value to set.
     */
    setUpdateReference(value: boolean) : void;
}

/**
 * Represents fill formatting for a shape.
 */
export class MsoFillFormatHelper {
    /**
     * Gets and sets the fill fore color.
     */
    getForeColor() : Color;
    /**
     * Gets and sets the fill fore color.
     * @param value - The value to set.
     */
    setForeColor(value: Color) : void;
    /**
     * Returns or sets the degree of fore color of the specified fill as a value from 0.0 (opaque) through 1.0 (clear).
     */
    getForeColorTransparency() : number;
    /**
     * Returns or sets the degree of fore color of the specified fill as a value from 0.0 (opaque) through 1.0 (clear).
     * @param value - The value to set.
     */
    setForeColorTransparency(value: number) : void;
    /**
     * Gets and sets the file back color.
     */
    getBackColor() : Color;
    /**
     * Gets and sets the file back color.
     * @param value - The value to set.
     */
    setBackColor(value: Color) : void;
    /**
     * Gets and sets the Texture and Picture fill data.
     */
    getImageData() : number[];
    /**
     * Gets and sets the Texture and Picture fill data.
     * @param value - The value to set.
     */
    setImageData(value: number[]) : void;
    /**
     * Gets the texture fill type.
     */
    getTexture() : TextureType;
    /**
     * Indicates whether there is fill.
     */
    isVisible() : boolean;
    /**
     * Indicates whether there is fill.
     * @param value - The value to set.
     */
    setIsVisible(value: boolean) : void;
    /**
     * Sets the specified fill to a one-color gradient.
     * @param color - One gradient color.
     * @param degree - The gradient degree. Can be a value from 0.0 (dark) through 1.0 (light).
     * @param style - Gradient shading style.
     * @param variant - The gradient variant. Can be a value from 1 through 4, corresponding to one of the four variants on the Gradient tab in the Fill Effects dialog box. If style is GradientStyle.FromCenter, the Variant argument can only be 1 or 2.
     */
    setOneColorGradient(color: Color, degree: number, style: GradientStyleType, variant: number) : void;
}

/**
 * Represents all parameters' type or return value type of function.
 */
export enum ParameterType {
    /**
     */
    Reference = 0,
    /**
     */
    Value = 1,
    /**
     */
    Array = 2,
}

/**
 * Represents the options of importing data into cells.
 */
export class ImportTableOptions {
    /**
     * Creates the default importing options.
     */
    constructor();
    /**
     * Indicates whether apply the style of the grid view to cells.
     */
    getConvertGridStyle() : boolean;
    /**
     * Indicates whether apply the style of the grid view to cells.
     * @param value - The value to set.
     */
    setConvertGridStyle(value: boolean) : void;
    /**
     * Gets or sets a value that indicates whether the string value should be converted to numeric or date value.
     */
    getConvertNumericData() : boolean;
    /**
     * Gets or sets a value that indicates whether the string value should be converted to numeric or date value.
     * @param value - The value to set.
     */
    setConvertNumericData(value: boolean) : void;
    /**
     * Indicates whether new rows should be added for importing data records.
     */
    getInsertRows() : boolean;
    /**
     * Indicates whether new rows should be added for importing data records.
     * @param value - The value to set.
     */
    setInsertRows(value: boolean) : void;
    /**
     * Indicates whether shifting the first row down when inserting rows.
     */
    getShiftFirstRowDown() : boolean;
    /**
     * Indicates whether shifting the first row down when inserting rows.
     * @param value - The value to set.
     */
    setShiftFirstRowDown(value: boolean) : void;
    /**
     * Indicates whether field name should be imported.
     */
    isFieldNameShown() : boolean;
    /**
     * Indicates whether field name should be imported.
     * @param value - The value to set.
     */
    setIsFieldNameShown(value: boolean) : void;
    /**
     * Indicates whether exporting caption as field name
     * 
     * @remarks
     * Only works for DataTable.
     */
    getExportCaptionAsFieldName() : boolean;
    /**
     * Indicates whether exporting caption as field name
     * @param value - The value to set.
     * 
     * @remarks
     * Only works for DataTable.
     */
    setExportCaptionAsFieldName(value: boolean) : void;
    /**
     * Gets or sets date format string for cells with imported datetime values.
     */
    getDateFormat() : string;
    /**
     * Gets or sets date format string for cells with imported datetime values.
     * @param value - The value to set.
     */
    setDateFormat(value: string) : void;
    /**
     * Gets or sets the number formats
     */
    getNumberFormats() : string[];
    /**
     * Gets or sets the number formats
     * @param value - The value to set.
     */
    setNumberFormats(value: string[]) : void;
    /**
     * Indicates whether the data are formulas.
     */
    getIsFormulas() : boolean[];
    /**
     * Indicates whether the data are formulas.
     * @param value - The value to set.
     */
    setIsFormulas(value: boolean[]) : void;
    /**
     * Gets or sets total row count to import from data source. -1 means all rows of given data source.
     */
    getTotalRows() : number;
    /**
     * Gets or sets total row count to import from data source. -1 means all rows of given data source.
     * @param value - The value to set.
     */
    setTotalRows(value: number) : void;
    /**
     * Gets or sets total column count to import from data source. -1 means all rows of given data source.
     */
    getTotalColumns() : number;
    /**
     * Gets or sets total column count to import from data source. -1 means all rows of given data source.
     * @param value - The value to set.
     */
    setTotalColumns(value: number) : void;
    /**
     * Gets or sets the columns(0-based) to import from data source. null means all columns should be imported.
     */
    getColumnIndexes() : number[];
    /**
     * Gets or sets the columns(0-based) to import from data source. null means all columns should be imported.
     * @param value - The value to set.
     */
    setColumnIndexes(value: number[]) : void;
    /**
     * Indicates whether the value contains html tags.
     */
    isHtmlString() : boolean;
    /**
     * Indicates whether the value contains html tags.
     * @param value - The value to set.
     */
    setIsHtmlString(value: boolean) : void;
    /**
     * Indicates whether checking merged cells.
     */
    getCheckMergedCells() : boolean;
    /**
     * Indicates whether checking merged cells.
     * @param value - The value to set.
     */
    setCheckMergedCells(value: boolean) : void;
}

/**
 * Represents error bar display type.
 */
export enum ErrorBarDisplayType {
    /**
     * Both
     */
    Both = 0,
    /**
     * Minus
     */
    Minus = 1,
    /**
     * None
     */
    None = 2,
    /**
     * Plus
     */
    Plus = 3,
}

/**
 * Fill format set type.
 */
export enum FormatSetType {
    /**
     * No Fill format.
     */
    None = 0,
    /**
     * Gradient fill format.
     */
    IsGradientSet = 1,
    /**
     * Texture fill format.
     */
    IsTextureSet = 2,
    /**
     * Pattern fill format.
     */
    IsPatternSet = 3,
}

/**
 * Represents the gradient stop collection.
 */
export class GradientStopCollection {
    /**
     * Gets the gradient stop by the index.
     * @param index - The index.
     * @returns
     * The gradient stop.
     */
    get(index: number) : GradientStop;
    /**
     * Gets the gradient stop by the index.
     * @param value - The value to set.
     * @param index - The index.
     * @returns
     * The gradient stop.
     */
    set(value: GradientStop, index: number) : void;
    /**
     * Add a gradient stop.
     * @param position - The position of the stop,in unit of percentage.
     * @param color - The color of the stop.
     * @param alpha - The alpha of the color.
     */
    add(position: number, color: CellsColor, alpha: number) : void;
    /**
     * Add a gradient stop.
     * @param position - The position of the stop,in unit of percentage.
     * @param color - The color of the stop.
     * @param alpha - The alpha of the color.
     */
    add(position: number, color: Color, alpha: number) : void;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents data label position type.
 */
export enum LabelPositionType {
    /**
     * Applies only to bar, 2d/3d pie charts
     */
    Center = 0,
    /**
     * Applies only to bar, 2d/3d pie charts
     */
    InsideBase = 1,
    /**
     * Applies only to bar charts
     */
    InsideEnd = 2,
    /**
     * Applies only to bar, 2d/3d pie charts
     */
    OutsideEnd = 3,
    /**
     * Applies only to line charts
     */
    Above = 4,
    /**
     * Applies only to line charts
     */
    Below = 5,
    /**
     * Applies only to line charts
     */
    Left = 6,
    /**
     * Applies only to line charts
     */
    Right = 7,
    /**
     * Applies only to 2d/3d pie charts
     */
    BestFit = 8,
    /**
     * User moved the data labels, Only for reading chart from template file.
     */
    Moved = 9,
}

/**
 * Represents mirror type of texture fill
 */
export enum MirrorType {
    /**
     * None
     */
    None = 0,
    /**
     * Horizonal
     */
    Horizonal = 1,
    /**
     * Vertical
     */
    Vertical = 2,
    /**
     * Both
     */
    Both = 3,
}

/**
 * Represents picture format option
 */
export class PicFormatOption {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets or sets the picture fill type.
     */
    getType() : FillPictureType;
    /**
     * Gets or sets the picture fill type.
     * @param value - The value to set.
     */
    setType(value: FillPictureType) : void;
    /**
     * Gets or sets how many the picture stack and scale with.
     */
    getScale() : number;
    /**
     * Gets or sets how many the picture stack and scale with.
     * @param value - The value to set.
     */
    setScale(value: number) : void;
    /**
     * Gets or sets the left offset for stretching picture.
     */
    getLeft() : number;
    /**
     * Gets or sets the left offset for stretching picture.
     * @param value - The value to set.
     */
    setLeft(value: number) : void;
    /**
     * Gets or sets the top offset for stretching picture.
     */
    getTop() : number;
    /**
     * Gets or sets the top offset for stretching picture.
     * @param value - The value to set.
     */
    setTop(value: number) : void;
    /**
     * Gets or sets the bottom offset for stretching picture.
     */
    getBottom() : number;
    /**
     * Gets or sets the bottom offset for stretching picture.
     * @param value - The value to set.
     */
    setBottom(value: number) : void;
    /**
     * Gets or sets the right offset for stretching picture.
     */
    getRight() : number;
    /**
     * Gets or sets the right offset for stretching picture.
     * @param value - The value to set.
     */
    setRight(value: number) : void;
}

/**
 * Represents tile picture as texture.
 */
export class TilePicOption {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets or sets the X offset for tiling picture.
     */
    getOffsetX() : number;
    /**
     * Gets or sets the X offset for tiling picture.
     * @param value - The value to set.
     */
    setOffsetX(value: number) : void;
    /**
     * Gets or sets the Y offset for tiling picture.
     */
    getOffsetY() : number;
    /**
     * Gets or sets the Y offset for tiling picture.
     * @param value - The value to set.
     */
    setOffsetY(value: number) : void;
    /**
     * Gets or sets the X scale for tiling picture.
     */
    getScaleX() : number;
    /**
     * Gets or sets the X scale for tiling picture.
     * @param value - The value to set.
     */
    setScaleX(value: number) : void;
    /**
     * Gets or sets the Y scale for tiling picture.
     */
    getScaleY() : number;
    /**
     * Gets or sets the Y scale for tiling picture.
     * @param value - The value to set.
     */
    setScaleY(value: number) : void;
    /**
     * Gets or sets the mirror type for tiling.
     */
    getMirrorType() : MirrorType;
    /**
     * Gets or sets the mirror type for tiling.
     * @param value - The value to set.
     */
    setMirrorType(value: MirrorType) : void;
    /**
     * Gets or sets the alignment for tiling.
     */
    getAlignmentType() : RectangleAlignmentType;
    /**
     * Gets or sets the alignment for tiling.
     * @param value - The value to set.
     */
    setAlignmentType(value: RectangleAlignmentType) : void;
}

/**
 * Represents a creation path consisting of a series of moves, lines and curves that when combined will form a geometric shape.
 */
export class ShapePath {
    /**
     * Initializes a new instance of the <see cref="ShapePath"/> class.
     */
    constructor();
    /**
     * Gets <see cref="ShapeSegmentPathCollection"/> list
     */
    getPathSegementList() : ShapeSegmentPathCollection;
}

/**
 * Represents path collection information in NotPrimitive autoshape
 */
export class ShapePathCollection {
    /**
     * Gets a creation path.
     * @param index - The index.
     * @returns
     * Returns <see cref="ShapePath"/> object.
     */
    get(index: number) : ShapePath;
    /**
     * Gets the count of paths
     */
    getCount() : number;
    /**
     * Add a creation path.
     * @returns
     * Returns <see cref="ShapePath"/> object.
     */
    add() : number;
}

/**
 * Represents a segment path in a path of the freeform.
 */
export class ShapeSegmentPath {
    /**
     * Gets the path segment type
     */
    getType() : ShapePathType;
    /**
     * Gets the points in path segment
     */
    getPoints() : ShapePathPointCollection;
}

/**
 * Represents path segment type.
 */
export enum ShapePathType {
    /**
     * Straight line segment
     */
    LineTo = 0,
    /**
     * Cubic Bezier curve
     */
    CubicBezierCurveTo = 1,
    /**
     * Start a new path
     */
    MoveTo = 2,
    /**
     * If the starting POINT and the end POINT are not the same, a single
     * straight line is drawn to connect the starting POINT and ending POINT of the path.
     */
    Close = 3,
    /**
     * The end of the current path
     */
    End = 4,
    /**
     * Escape
     */
    Escape = 5,
    /**
     * An arc
     */
    ArcTo = 6,
    /**
     * Unknown
     */
    Unknown = 7,
}

/**
 * Represents all error check option.
 */
export class ErrorCheckOptionCollection {
    /**
     * Gets <see cref="ErrorCheckOption"/> object by the given index.
     * @param index - The index
     * @returns
     * Return <see cref="ErrorCheckOption"/> object
     */
    get(index: number) : ErrorCheckOption;
    /**
     * Add an error check option.
     */
    add() : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Error check setting applied on certain ranges.
 */
export class ErrorCheckOption {
    /**
     * Checks whether given error type will be checked.
     * @param errorCheckType - error type can be checked
     * @returns
     * return true if given error type will be checked(green triangle will be shown for cell if the check failed).
     */
    isErrorCheck(errorCheckType: ErrorCheckType) : boolean;
    /**
     * Sets whether given error type will be checked.
     * @param errorCheckType - error type can be checked.
     * @param isCheck - true if given error type needs to be checked(green triangle will be shown for cell if the check failed).
     */
    setErrorCheck(errorCheckType: ErrorCheckType, isCheck: boolean) : void;
    /**
     * Gets the count of ranges that influenced by this setting.
     * @returns
     * the count of ranges that influenced by this setting.
     */
    getCountOfRange() : number;
    /**
     * Adds one influenced range by this setting.
     * @param ca - the range to be added.
     * @returns
     * the index of the added range in the range list of this setting.
     */
    addRange(ca: CellArea) : number;
    /**
     * Gets the influenced range of this setting by given index.
     * @param index - the index of range
     * @returns
     * return influenced range at given index.
     */
    getRange(index: number) : CellArea;
    /**
     * Removes one range by given index.
     * @param index - the index of the range to be removed.
     */
    removeRange(index: number) : void;
}

/**
 * Represents all error check type.
 */
export enum ErrorCheckType {
    /**
     * Ignore errors when cells contain formulas that result in an error.
     */
    EvaluationError = 1,
    Calc = 1,
    /**
     * Ignore errors when formulas refer to empty cells.
     */
    EmptyCellRef = 2,
    /**
     * Ignore errors when numbers are formatted as text or are preceded by an apostrophe
     */
    NumberStoredAsText = 4,
    /**
     * Ignore errors when numbers are formatted as text or are preceded by an apostrophe
     * 
     * @remarks
     * NOTE: This member is now obsolete. Instead,
     * please use ErrorCheckType.NumberStoredAsText enum.
     * This method will be removed 12 months later since October 2023.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use ErrorCheckType.NumberStoredAsText instead.
     */
    TextNumber = 4,
    /**
     * Ignore errors when formulas omit certain cells in a region.
     */
    InconsistRange = 8,
    /**
     * Ignore errors when a formula in a region of your worksheet differs from other formulas in the same region.
     */
    InconsistFormula = 16,
    /**
     * Ignore errors when formulas contain text formatted cells with years represented as 2 digits.
     */
    TwoDigitTextYear = 32,
    /**
     * Ignore errors when formulas contain text formatted cells with years represented as 2 digits.
     * 
     * @remarks
     * NOTE: This member is now obsolete. Instead,
     * please use ErrorCheckType.TwoDigitTextYear enum.
     * This method will be removed 12 months later since October 2023.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use ErrorCheckType.TwoDigitTextYear instead.
     */
    TextDate = 32,
    /**
     * Ignore errors when unlocked cells contain formulas.
     */
    UnlockedFormula = 64,
    /**
     * Ignore errors when unlocked cells contain formulas.
     * 
     * @remarks
     * NOTE: This member is now obsolete. Instead,
     * please use ErrorCheckType.UnproctedFormula enum.
     * This method will be removed 12 months later since October 2023.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use ErrorCheckType.UnproctedFormula instead.
     */
    UnproctedFormula = 64,
    /**
     * Ignore errors when a cell's value in a Table does not comply with the Data Validation rules specified.
     */
    TableDataValidation = 128,
    /**
     * Ignore errors when a cell's value in a Table does not comply with the Data Validation rules specified.
     * 
     * @remarks
     * NOTE: This member is now obsolete. Instead,
     * please use ErrorCheckType.TableDataValidation enum.
     * This method will be removed 12 months later since October 2023.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use ErrorCheckType.TableDataValidation instead.
     */
    Validation = 128,
    /**
     * Ignore errors when cells contain a value different from a calculated column formula.
     */
    CalculatedColumn = 129,
}

/**
 * Represents all operator about the interrupt.
 */
export class InterruptMonitor {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Mark the monitor as requesting interruption
     */
    isInterruptionRequested() : boolean;
    /**
     * Interrupt the current operator.
     */
    interrupt() : void;
}

/**
 * Represents Data provider for saving large spreadsheet files in light weight mode.
 * 
 * @remarks
 * When saving a workbook by this mode, <see cref="StartSheet(int)"/> will be checked when saving every worksheet in the workbook.
 * For one sheet, if <see cref="StartSheet(int)"/> gives true, then all data and properties to be saved for rows/cells of this sheet
 * will be provided by the implementation of this interface.
 * In the first place, <see cref="NextRow()"/> will be called to get the next row index to be saved.
 * If a valid row index is returned(the row index must be in ascending order for the rows to be saved),
 * then a Row object representing this row will be provided by <see cref="StartRow(Row)"/> for the implementation to set its properties.
 * For one row, <see cref="NextCell()"/> will be checked firstly.
 * If a valid column index be returned(the column index must be in ascending order for all cells of current row),
 * then a Cell object representing this cell will be provided by <see cref="StartCell(Cell)"/> for implementation to set its data and properties.
 * After <see cref="StartCell(Cell)"/> the cell will be saved directly to the resultant spreadsheet file.
 * Then the next cell will be checked and processed.
 * <br></br>
 * Please note, user should only update values and properties for current Row/Cell object provided by corresponding method.
 * Because the cells data is written to the resultant file in streaming manner, most of other objects may have been written
 * to the resultant file, or have been gathered and written some global data for them. So when user updating other objects
 * while saving cells data, those operations may be not able to affect the saved data. Or even worse, those operations may
 * cause inconsistent data be save to the resultant file and finally make the file corrupted.
 * So, for all other objects such as shapes, column width and styles, conditional formattings, ...etc.,
 * please do not operate them in any methods of this implementation.
 * Instead, please manage them and adjust them to the final state before calling "Save" method of the Workbook.
 */
export interface LightCellsDataProvider {
    /**
     * Starts to save a worksheet.
     * @param sheetIndex - index of current sheet to be saved.
     * @returns
     * true if this provider will provide data for the given sheet; false if given sheet should use its normal data model(Cells).
     * 
     * @remarks
     * It will be called at the beginning of saving a worksheet during saving a workbook.
     * If the provider needs to refer to <i><code>sheetIndex</code></i> later
     * in startRow(Row) or startCell(Cell) method,
     * that is, if the process needs to know which worksheet is being processed,
     * the implementation should retain the <i><code>sheetIndex</code></i> value here.
     */
    startSheet(sheetIndex: number) : boolean;
    /**
     * Gets the next row to be saved.
     * @returns
     * the next row index to be saved. -1 means the end of current sheet data has been reached and no further row of current sheet to be saved.
     * 
     * @remarks
     * It will be called at the beginning of saving a row and its cells data(before <see cref="StartRow(Row)"/>).
     */
    nextRow() : number;
    /**
     * Starts to save data of one row.
     * @param row - Row object for implementation to fill data. Its row index is the returned value of latest call of <see cref="NextRow()"/>.         /// If the row has been initialized in the inner cells model, the existing row object will be used.         /// Otherwise a temporary Row object will be used for implementation to fill data.
     * 
     * @remarks
     * It will be called at the beginning of saving a row and its cells data.
     * If current row has some custom properties such as height, style, ...etc.,
     * implementation should set those properties to given Row object here.
     */
    startRow(row: Row) : void;
    /**
     * Gets next cell to be saved.
     * @returns
     * column index of the next cell to be saved. -1 means the end of current row data has been reached and no further cell of current row to be saved.
     * 
     * @remarks
     * It will be called at the beginning of saving one cell.
     */
    nextCell() : number;
    /**
     * Starts to save data of one cell.
     * @param cell - Cell object for implementation to fill data. Its column index is the returned value of latest call of <see cref="NextCell()"/>.         /// If the cell has been initialized in the inner cells model, the existed cell object will be used.         /// Otherwise a temporary Cell object will be used for implementation to fill data.
     * 
     * @remarks
     */
    startCell(cell: Cell) : void;
    /**
     * Checks whether the current string value of cell needs to be gathered into a global pool.
     * @returns
     * true if string value need to be gathered into a global pool for the resultant file.
     * 
     * @remarks
     * Gathering string values will take advantage only when there are many duplicated string values for the cells provided by this implementation.
     * In this situation gathering string will save much memory and generate smaller resultant file.
     * If there are many string values for the cells provided by LightCellsDataProvider but few of them are same,
     * gathering string will cost more memory and time and has no advantage for the resultant file.
     */
    isGatherString() : boolean;
}

/**
 * Represents the load file format.
 */
export enum LoadFormat {
    /**
     * Represents recognizing the format automatically.
     */
    Auto = 0,
    /**
     * Comma-Separated Values(CSV) text file.
     */
    Csv = 1,
    /**
     * Comma-Separated Values(CSV) text file.
     * NOTE: This member is now obsolete. Instead,
     * please use <see cref="Csv"/> property.
     * This property will be removed 6 months later since April 2021.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use LoadFormat.Csv instead.
     */
    CSV = 1,
    /**
     * Represents Office Open XML spreadsheetML workbook or template, with or without macros.
     */
    Xlsx = 6,
    /**
     * Tab-Separated Values(TSV) text file.
     */
    Tsv = 11,
    /**
     * Tab-Separated Values(TSV) text file.
     * NOTE: This member is now obsolete. Instead,
     * please use <see cref="Tsv"/> property.
     * This property will be removed 6 months later since April 2021.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use LoadFormat.Tsv instead.
     */
    TSV = 11,
    /**
     * Represents a tab delimited text file, same with <see cref="Tsv"/>.
     */
    TabDelimited = 11,
    /**
     * Represents a html file.
     */
    Html = 12,
    /**
     * Represents a mhtml file.
     */
    MHtml = 13,
    /**
     * Open Document Sheet(ODS) file.
     */
    Ods = 14,
    /**
     * Open Document Sheet(ODS) file.
     * NOTE: This member is now obsolete. Instead,
     * please use <see cref="Ods"/> property.
     * This property will be removed 6 months later since April 2021.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use LoadFormat.Ods instead.
     */
    ODS = 14,
    /**
     * Represents an Excel97-2003 xls file.
     */
    Excel97To2003 = 5,
    /**
     * Represents an Excel 2003 xml file.
     */
    SpreadsheetML = 15,
    /**
     * Represents an xlsb file.
     */
    Xlsb = 16,
    /**
     * Open Document Template Sheet(OTS) file.
     */
    Ots = 31,
    /**
     * Represents a numbers file.
     */
    Numbers = 56,
    /**
     * Represents OpenDocument Flat XML Spreadsheet (.fods) file format.
     */
    Fods = 59,
    /**
     * Represents OpenDocument Flat XML Spreadsheet (.fods) file format.
     * NOTE: This member is now obsolete. Instead,
     * please use <see cref="Fods"/> property.
     * This property will be removed 6 months later since April 2021.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use LoadFormat.Fods instead.
     */
    FODS = 59,
    /**
     * Represents StarOffice Calc Spreadsheet (.sxc) file format.
     */
    Sxc = 60,
    /**
     * Represents StarOffice Calc Spreadsheet (.sxc) file format.
     * NOTE: This member is now obsolete. Instead,
     * please use <see cref="Sxc"/> property.
     * This property will be removed 6 months later since April 2021.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use LoadFormat.Sxc instead.
     */
    SXC = 60,
    /**
     * Represents a simple xml file.
     */
    Xml = 51,
    /**
     * Reprents an EPUB file.
     */
    Epub = 52,
    /**
     * Represents an AZW3 file.
     */
    Azw3 = 53,
    /**
     * Represents unrecognized format, cannot be loaded.
     */
    Unknown = 255,
    /**
     * Image
     */
    Image = 254,
    /**
     * Json
     */
    Json = 513,
}

/**
 * Represents the options of loading the file.
 */
export class LoadOptions {
    /**
     * Creates an options of loading the file.
     */
    constructor();
    /**
     * Creates an options of loading the file.
     * @param loadFormat - The loading format.
     */
    constructor(loadFormat: LoadFormat);
    /**
     * Gets the load format.
     */
    getLoadFormat() : LoadFormat;
    /**
     * Gets and set the password of the workbook.
     */
    getPassword() : string;
    /**
     * Gets and set the password of the workbook.
     * @param value - The value to set.
     */
    setPassword(value: string) : void;
    /**
     * Indicates whether parsing the formula when reading the file.
     * 
     * @remarks
     * Only applies for Excel Xlsx, Xltx, Xltm and Xlsm file
     * because the formulas in the files are stored with a string formula.
     */
    getParsingFormulaOnOpen() : boolean;
    /**
     * Indicates whether parsing the formula when reading the file.
     * @param value - The value to set.
     * 
     * @remarks
     * Only applies for Excel Xlsx, Xltx, Xltm and Xlsm file
     * because the formulas in the files are stored with a string formula.
     */
    setParsingFormulaOnOpen(value: boolean) : void;
    /**
     * Indicates whether parsing pivot cached records when loading the file.
     * The default value is false.
     * 
     * @remarks
     * Only applies for Excel Xlsx, Xltx, Xltm , Xlsm and xlsb file
     */
    getParsingPivotCachedRecords() : boolean;
    /**
     * Indicates whether parsing pivot cached records when loading the file.
     * The default value is false.
     * @param value - The value to set.
     * 
     * @remarks
     * Only applies for Excel Xlsx, Xltx, Xltm , Xlsm and xlsb file
     */
    setParsingPivotCachedRecords(value: boolean) : void;
    /**
     * Gets or sets the user interface language of the Workbook version based on CountryCode that has saved the file.
     */
    getLanguageCode() : CountryCode;
    /**
     * Gets or sets the user interface language of the Workbook version based on CountryCode that has saved the file.
     * @param value - The value to set.
     */
    setLanguageCode(value: CountryCode) : void;
    /**
     * Gets or sets the system regional settings based on CountryCode at the time the file was loaded.
     * 
     * @remarks
     * If you do not want to use the region  saved in the file,
     * please reset it after reading the file.
     */
    getRegion() : CountryCode;
    /**
     * Gets or sets the system regional settings based on CountryCode at the time the file was loaded.
     * @param value - The value to set.
     * 
     * @remarks
     * If you do not want to use the region  saved in the file,
     * please reset it after reading the file.
     */
    setRegion(value: CountryCode) : void;
    /**
     * Gets the default style settings for initializing styles of the workbook
     */
    getDefaultStyleSettings() : DefaultStyleSettings;
    /**
     * Gets and sets the interrupt monitor.
     */
    getInterruptMonitor() : AbstractInterruptMonitor;
    /**
     * Gets and sets the interrupt monitor.
     * @param value - The value to set.
     */
    setInterruptMonitor(value: AbstractInterruptMonitor) : void;
    /**
     * Ignore the data which are not printed if directly printing the file
     * 
     * @remarks
     * Only for xlsx file.
     */
    getIgnoreNotPrinted() : boolean;
    /**
     * Ignore the data which are not printed if directly printing the file
     * @param value - The value to set.
     * 
     * @remarks
     * Only for xlsx file.
     */
    setIgnoreNotPrinted(value: boolean) : void;
    /**
     * Check whether data is valid in the template file.
     */
    getCheckDataValid() : boolean;
    /**
     * Check whether data is valid in the template file.
     * @param value - The value to set.
     */
    setCheckDataValid(value: boolean) : void;
    /**
     * Whether check restriction of excel file when user modify cells related objects.
     * For example, excel does not allow inputting string value longer than 32K.
     * When you input a value longer than 32K such as by Cell.PutValue(string), if this property is true, you will get an Exception.
     * If this property is false, we will accept your input string value as the cell's value so that later
     * you can output the complete string value for other file formats such as CSV.
     * However, if you have set such kind of value that is invalid for excel file format,
     * you should not save the workbook as excel file format later. Otherwise there may be unexpected error for the generated excel file.
     */
    getCheckExcelRestriction() : boolean;
    /**
     * Whether check restriction of excel file when user modify cells related objects.
     * For example, excel does not allow inputting string value longer than 32K.
     * When you input a value longer than 32K such as by Cell.PutValue(string), if this property is true, you will get an Exception.
     * If this property is false, we will accept your input string value as the cell's value so that later
     * you can output the complete string value for other file formats such as CSV.
     * However, if you have set such kind of value that is invalid for excel file format,
     * you should not save the workbook as excel file format later. Otherwise there may be unexpected error for the generated excel file.
     * @param value - The value to set.
     */
    setCheckExcelRestriction(value: boolean) : void;
    /**
     * Whether keep the unparsed data in memory for the Workbook when it is loaded from template file. Default is true.
     * 
     * @remarks
     * For scenarios that user only needs to read some contents from template file and does not need to save the workbook back,
     * set this property as false may improve performance, especially when using it together with some kind of LoadFilter,
     */
    getKeepUnparsedData() : boolean;
    /**
     * Whether keep the unparsed data in memory for the Workbook when it is loaded from template file. Default is true.
     * @param value - The value to set.
     * 
     * @remarks
     * For scenarios that user only needs to read some contents from template file and does not need to save the workbook back,
     * set this property as false may improve performance, especially when using it together with some kind of LoadFilter,
     */
    setKeepUnparsedData(value: boolean) : void;
    /**
     * The filter to denote how to load data.
     */
    getLoadFilter() : LoadFilter;
    /**
     * The filter to denote how to load data.
     * @param value - The value to set.
     */
    setLoadFilter(value: LoadFilter) : void;
    /**
     * The data handler for processing cells data when reading template file.
     */
    getLightCellsDataHandler() : LightCellsDataHandler;
    /**
     * The data handler for processing cells data when reading template file.
     * @param value - The value to set.
     */
    setLightCellsDataHandler(value: LightCellsDataHandler) : void;
    /**
     * Gets or sets the memory usage options.
     */
    getMemorySetting() : MemorySetting;
    /**
     * Gets or sets the memory usage options.
     * @param value - The value to set.
     */
    setMemorySetting(value: MemorySetting) : void;
    /**
     * Gets or sets warning callback.
     * @param value - The value to set.
     */
    setWarningCallback(value: IWarningCallback) : void;
    /**
     * Gets or sets warning callback.
     */
    getWarningCallback() : IWarningCallback;
    /**
     * Gets and sets the auto fitter options
     * 
     * @remarks
     * Only for xlsx ,spreadsheetML file now.
     */
    getAutoFitterOptions() : AutoFitterOptions;
    /**
     * Gets and sets the auto fitter options
     * @param value - The value to set.
     * 
     * @remarks
     * Only for xlsx ,spreadsheetML file now.
     */
    setAutoFitterOptions(value: AutoFitterOptions) : void;
    /**
     * Indicates whether auto filtering the data when loading the files.
     * 
     * @remarks
     * Sometimes although autofilter is set, the corresponding rows is not hidden in the file.
     * Now only works for SpreadSheetML file.
     */
    getAutoFilter() : boolean;
    /**
     * Indicates whether auto filtering the data when loading the files.
     * @param value - The value to set.
     * 
     * @remarks
     * Sometimes although autofilter is set, the corresponding rows is not hidden in the file.
     * Now only works for SpreadSheetML file.
     */
    setAutoFilter(value: boolean) : void;
    /**
     * Gets and sets individual font configs.
     * Only works for the <see cref="Workbook"/> which uses this <see cref="LoadOptions"/> to load.
     */
    getFontConfigs() : IndividualFontConfigs;
    /**
     * Gets and sets individual font configs.
     * Only works for the <see cref="Workbook"/> which uses this <see cref="LoadOptions"/> to load.
     * @param value - The value to set.
     */
    setFontConfigs(value: IndividualFontConfigs) : void;
    /**
     * Indicates whether ignoring useless shapes.
     * 
     * @remarks
     * Only works for xlsx,xlsb, and xlsm files.
     * There are many overlapping identical shapes which are useless in some files,
     * we can ingore them when loading files.
     */
    getIgnoreUselessShapes() : boolean;
    /**
     * Indicates whether ignoring useless shapes.
     * @param value - The value to set.
     * 
     * @remarks
     * Only works for xlsx,xlsb, and xlsm files.
     * There are many overlapping identical shapes which are useless in some files,
     * we can ingore them when loading files.
     */
    setIgnoreUselessShapes(value: boolean) : void;
    /**
     * Indicates whether preserve those spaces and line breaks that are padded between formula tokens
     * while getting and setting formulas.
     * Default value is false.
     * 
     * @remarks
     * After loading workbook from template file with this option, <see cref="FormulaSettings.PreservePaddingSpaces"/>
     * will be set to the same value with this property.
     */
    getPreservePaddingSpacesInFormula() : boolean;
    /**
     * Indicates whether preserve those spaces and line breaks that are padded between formula tokens
     * while getting and setting formulas.
     * Default value is false.
     * @param value - The value to set.
     * 
     * @remarks
     * After loading workbook from template file with this option, <see cref="FormulaSettings.PreservePaddingSpaces"/>
     * will be set to the same value with this property.
     */
    setPreservePaddingSpacesInFormula(value: boolean) : void;
    /**
     * Sets the default print paper size from default printer's setting.
     * @param type - The default paper size.
     * 
     * @remarks
     * If there is no setting about paper size,MS Excel will use default printer's setting.
     */
    setPaperSize(type: PaperSizeType) : void;
}

/**
 * Represents the options for loading text file.
 */
export class TxtLoadOptions extends AbstractTextLoadOptions {
    /**
     * Creates the options for loading text file.
     * 
     * @remarks
     * The default load file type is CSV .
     */
    constructor();
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: AbstractTextLoadOptions);
    /**
     * Creates the options for loading text file.
     * @param loadFormat - The loading format
     */
    constructor(loadFormat: LoadFormat);
    /**
     * Gets and sets character separator of text file.
     */
    getSeparator() : string;
    /**
     * Gets and sets character separator of text file.
     * @param value - The value to set.
     */
    setSeparator(value: string) : void;
    /**
     * Gets and sets a string value as separator.
     */
    getSeparatorString() : string;
    /**
     * Gets and sets a string value as separator.
     * @param value - The value to set.
     */
    setSeparatorString(value: string) : void;
    /**
     * True means that the file contains several encoding.
     */
    isMultiEncoded() : boolean;
    /**
     * True means that the file contains several encoding.
     * @param value - The value to set.
     */
    setIsMultiEncoded(value: boolean) : void;
    /**
     * Indicates whether the text is formula if it starts with "=".
     */
    getHasFormula() : boolean;
    /**
     * Indicates whether the text is formula if it starts with "=".
     * @param value - The value to set.
     */
    setHasFormula(value: boolean) : void;
    /**
     * Whether there is text qualifier for cell value. Default is true.
     */
    getHasTextQualifier() : boolean;
    /**
     * Whether there is text qualifier for cell value. Default is true.
     * @param value - The value to set.
     */
    setHasTextQualifier(value: boolean) : void;
    /**
     * Specifies the text qualifier for cell values. Default qualifier is '"'.
     * 
     * @remarks
     * When setting this property, <see cref="HasTextQualifier"/> will become true automatically.
     */
    getTextQualifier() : string;
    /**
     * Specifies the text qualifier for cell values. Default qualifier is '"'.
     * @param value - The value to set.
     * 
     * @remarks
     * When setting this property, <see cref="HasTextQualifier"/> will become true automatically.
     */
    setTextQualifier(value: string) : void;
    /**
     * Whether consecutive delimiters should be treated as one.
     */
    getTreatConsecutiveDelimitersAsOne() : boolean;
    /**
     * Whether consecutive delimiters should be treated as one.
     * @param value - The value to set.
     */
    setTreatConsecutiveDelimitersAsOne(value: boolean) : void;
    /**
     * Indicates whether the leading single quote sign should be taken as part of the value of one cell.
     * Default is true. If it is false, the leading single quote will be removed from corresponding cell's value
     * and <see cref="Style.QuotePrefix"/> will be set as true for the cell.
     */
    getTreatQuotePrefixAsValue() : boolean;
    /**
     * Indicates whether the leading single quote sign should be taken as part of the value of one cell.
     * Default is true. If it is false, the leading single quote will be removed from corresponding cell's value
     * and <see cref="Style.QuotePrefix"/> will be set as true for the cell.
     * @param value - The value to set.
     */
    setTreatQuotePrefixAsValue(value: boolean) : void;
    /**
     * Whether extends data to next sheet when the rows or columns of data exceed limit.
     * Default is false.
     * 
     * @remarks
     * If this property is true, extra data will be put into next sheet behind current one
     * (if current sheet is the last one, new sheet will be appended to current workbook).
     * If this property is false, the data exceeding limit will be ignored.
     */
    getExtendToNextSheet() : boolean;
    /**
     * Whether extends data to next sheet when the rows or columns of data exceed limit.
     * Default is false.
     * @param value - The value to set.
     * 
     * @remarks
     * If this property is true, extra data will be put into next sheet behind current one
     * (if current sheet is the last one, new sheet will be appended to current workbook).
     * If this property is false, the data exceeding limit will be ignored.
     */
    setExtendToNextSheet(value: boolean) : void;
    /**
     * The count of header rows to be repeated for extended sheets.
     * 
     * @remarks
     * The header rows specified by this property will be duplicated for those extended sheets.
     * This property only takes effect when <see cref="ExtendToNextSheet"/> is true.
     */
    getHeaderRowsCount() : number;
    /**
     * The count of header rows to be repeated for extended sheets.
     * @param value - The value to set.
     * 
     * @remarks
     * The header rows specified by this property will be duplicated for those extended sheets.
     * This property only takes effect when <see cref="ExtendToNextSheet"/> is true.
     */
    setHeaderRowsCount(value: number) : void;
    /**
     * The count of header columns to be repeated for extended sheets.
     * 
     * @remarks
     * The header columns specified by this property will be duplicated for those extended sheets.
     * This property only takes effect when <see cref="ExtendToNextSheet"/> is true.
     */
    getHeaderColumnsCount() : number;
    /**
     * The count of header columns to be repeated for extended sheets.
     * @param value - The value to set.
     * 
     * @remarks
     * The header columns specified by this property will be duplicated for those extended sheets.
     * This property only takes effect when <see cref="ExtendToNextSheet"/> is true.
     */
    setHeaderColumnsCount(value: number) : void;
    /**
     * The maximum count of rows to be imported for one sheet.
     * 
     * @remarks
     * Those rows exceeding this limit will be ignored
     * or extended to next sheet according to <see cref="ExtendToNextSheet"/>.
     * This count includes the header rows(<see cref="HeaderRowsCount"/>).
     * The maximum allowed value of it is the row limit of corresponding file format, such as for xlsx file it 1048576.
     * If this property has not been specified or the specified value is not positive, then the maximum limit will be used too.
     */
    getMaxRowCount() : number;
    /**
     * The maximum count of rows to be imported for one sheet.
     * @param value - The value to set.
     * 
     * @remarks
     * Those rows exceeding this limit will be ignored
     * or extended to next sheet according to <see cref="ExtendToNextSheet"/>.
     * This count includes the header rows(<see cref="HeaderRowsCount"/>).
     * The maximum allowed value of it is the row limit of corresponding file format, such as for xlsx file it 1048576.
     * If this property has not been specified or the specified value is not positive, then the maximum limit will be used too.
     */
    setMaxRowCount(value: number) : void;
    /**
     * The maximum count of columns to be imported for one sheet.
     * 
     * @remarks
     * Those columns exceeding this limit will be ignored
     * or extended to next sheet according to <see cref="ExtendToNextSheet"/>.
     * This count includes the header columns(<see cref="HeaderColumnsCount"/>).
     * The maximum value of it is the column limit of corresponding file format, such as for xlsx file it 16384.
     * If this property has not been specified or the specified value is not positive, then the maximum limit will be used too.
     */
    getMaxColumnCount() : number;
    /**
     * The maximum count of columns to be imported for one sheet.
     * @param value - The value to set.
     * 
     * @remarks
     * Those columns exceeding this limit will be ignored
     * or extended to next sheet according to <see cref="ExtendToNextSheet"/>.
     * This count includes the header columns(<see cref="HeaderColumnsCount"/>).
     * The maximum value of it is the column limit of corresponding file format, such as for xlsx file it 16384.
     * If this property has not been specified or the specified value is not positive, then the maximum limit will be used too.
     */
    setMaxColumnCount(value: number) : void;
}

/**
 * Represents PivotTable condition formatting scope type.
 */
export enum PivotConditionFormatScopeType {
    /**
     * Indicates that conditional formatting is applied to the selected data fields.
     */
    Data = 0,
    /**
     * Indicates that conditional formatting is applied to the selected PivotTable field intersections.
     */
    Field = 1,
    /**
     * Indicates that conditional formatting is applied to the selected cells.
     */
    Selection = 2,
}

/**
 * Represents a PivotFilter in PivotFilter Collection.
 */
export class PivotFilter {
    /**
     * Gets the autofilter of the pivot filter.
     */
    getAutoFilter() : AutoFilter;
    /**
     * Gets the autofilter type of the pivot filter.
     */
    getFilterType() : PivotFilterType;
    /**
     * Gets the field index of the pivot filter.
     */
    getFieldIndex() : number;
    /**
     * Gets the string value1 of the label pivot filter.
     */
    getValue1() : string;
    /**
     * Gets the string value1 of the label pivot filter.
     * @param value - The value to set.
     */
    setValue1(value: string) : void;
    /**
     * Gets the string value2 of the label pivot filter.
     */
    getValue2() : string;
    /**
     * Gets the string value2 of the label pivot filter.
     * @param value - The value to set.
     */
    setValue2(value: string) : void;
    /**
     * Gets the measure field index of the pivot filter.
     */
    getMeasureFldIndex() : number;
    /**
     * Gets the measure field index of the pivot filter.
     * @param value - The value to set.
     */
    setMeasureFldIndex(value: number) : void;
    /**
     * Gets the member property field index of the pivot filter.
     */
    getMemberPropertyFieldIndex() : number;
    /**
     * Gets the member property field index of the pivot filter.
     * @param value - The value to set.
     */
    setMemberPropertyFieldIndex(value: number) : void;
    /**
     * Gets the name of the pivot filter.
     */
    getName() : string;
    /**
     * Gets the name of the pivot filter.
     * @param value - The value to set.
     */
    setName(value: string) : void;
    /**
     * Gets the Evaluation Order of the pivot filter.
     */
    getEvaluationOrder() : number;
    /**
     * Gets the Evaluation Order of the pivot filter.
     * @param value - The value to set.
     */
    setEvaluationOrder(value: number) : void;
}

/**
 * Represents a collection of all the PivotFilter objects
 */
export class PivotFilterCollection {
    /**
     * Gets the pivotfilter object at the specific index.
     */
    get(index: number) : PivotFilter;
    /**
     * Adds a PivotFilter Object to the specific type
     * @param fieldIndex - the PivotField index
     * @param type - the PivotFilter type
     * @returns
     * the index of  the PivotFilter Object in this PivotFilterCollection.
     */
    add(fieldIndex: number, type: PivotFilterType) : number;
    /**
     * Clear PivotFilter from the specific PivotField
     * @param fieldIndex - the PivotField index
     */
    clearFilter(fieldIndex: number) : void;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents PivotTable Filter type.
 */
export enum PivotFilterType {
    /**
     * Indicates the "begins with" filter for field captions.
     */
    CaptionBeginsWith = 0,
    /**
     * Indicates the "is between" filter for field captions.
     */
    CaptionBetween = 1,
    /**
     * Indicates the "contains" filter for field captions.
     */
    CaptionContains = 2,
    /**
     * Indicates the "ends with" filter for field captions.
     */
    CaptionEndsWith = 3,
    /**
     * Indicates the "equal" filter for field captions.
     */
    CaptionEqual = 4,
    /**
     * Indicates the "is greater than" filter for field captions.
     */
    CaptionGreaterThan = 5,
    /**
     * Indicates the "is greater than or equal to" filter for field captions.
     */
    CaptionGreaterThanOrEqual = 6,
    /**
     * Indicates the "is less than" filter for field captions.
     */
    CaptionLessThan = 7,
    /**
     * Indicates the "is less than or equal to" filter for field captions.
     */
    CaptionLessThanOrEqual = 8,
    /**
     * Indicates the "does not begin with" filter for field captions.
     */
    CaptionNotBeginsWith = 9,
    /**
     * Indicates the "is not between" filter for field captions.
     */
    CaptionNotBetween = 10,
    /**
     * Indicates the "does not contain" filter for field captions.
     */
    CaptionNotContains = 11,
    /**
     * Indicates the "does not end with" filter for field captions.
     */
    CaptionNotEndsWith = 12,
    /**
     * Indicates the "not equal" filter for field captions.
     */
    CaptionNotEqual = 13,
    /**
     * Indicates the "count" filter.
     */
    Count = 14,
    /**
     * Indicates the "between" filter for date values.
     */
    DateBetween = 15,
    /**
     * Indicates the "equals" filter for date values.
     */
    DateEqual = 16,
    /**
     * Indicates the "newer than" filter for date values.
     */
    DateNewerThan = 17,
    /**
     * Indicates the "newer than or equal to" filter for date values.
     */
    DateNewerThanOrEqual = 18,
    /**
     * Indicates the "not between" filter for date values.
     */
    DateNotBetween = 19,
    /**
     * Indicates the "does not equal" filter for date values.
     */
    DateNotEqual = 20,
    /**
     * Indicates the "older than" filter for date values.
     */
    DateOlderThan = 21,
    /**
     * Indicates the "older than or equal to" filter for date values.
     */
    DateOlderThanOrEqual = 22,
    /**
     * Indicates the "last month" filter for date values.
     */
    LastMonth = 23,
    /**
     * Indicates the "last quarter" filter for date values.
     */
    LastQuarter = 24,
    /**
     * Indicates the "last week" filter for date values.
     */
    LastWeek = 25,
    /**
     * Indicates the "last year" filter for date values.
     */
    LastYear = 26,
    /**
     * Indicates the "January" filter for date values.
     */
    M1 = 27,
    /**
     * Indicates the "February" filter for date values.
     */
    M2 = 28,
    /**
     * Indicates the "March" filter for date values.
     */
    M3 = 29,
    /**
     * Indicates the "April" filter for date values.
     */
    M4 = 30,
    /**
     * Indicates the "May" filter for date values.
     */
    M5 = 31,
    /**
     * Indicates the "June" filter for date values.
     */
    M6 = 32,
    /**
     * Indicates the "July" filter for date values.
     */
    M7 = 33,
    /**
     * Indicates the "August" filter for date values.
     */
    M8 = 34,
    /**
     * Indicates the "September" filter for date values.
     */
    M9 = 35,
    /**
     * Indicates the "October" filter for date values.
     */
    M10 = 36,
    /**
     * Indicates the "November" filter for date values.
     */
    M11 = 37,
    /**
     * Indicates the "December" filter for date values.
     */
    M12 = 38,
    /**
     * Indicates the "next month" filter for date values.
     */
    NextMonth = 39,
    /**
     * Indicates the "next quarter" for date values.
     */
    NextQuarter = 40,
    /**
     * Indicates the "next week" for date values.
     */
    NextWeek = 41,
    /**
     * Indicates the "next year" filter for date values.
     */
    NextYear = 42,
    /**
     * Indicates the "percent" filter for numeric values.
     */
    Percent = 43,
    /**
     * Indicates the "first quarter" filter for date values.
     */
    Q1 = 44,
    /**
     * Indicates the "second quarter" filter for date values.
     */
    Q2 = 45,
    /**
     * Indicates the "third quarter" filter for date values.
     */
    Q3 = 46,
    /**
     * Indicates the "fourth quarter" filter for date values.
     */
    Q4 = 47,
    /**
     * Indicates the "sum" filter for numeric values.
     */
    Sum = 48,
    /**
     * Indicates the "this month" filter for date values.
     */
    ThisMonth = 49,
    /**
     * Indicates the "this quarter" filter for date values.
     */
    ThisQuarter = 50,
    /**
     * Indicates the "this week" filter for date values.
     */
    ThisWeek = 51,
    /**
     * Indicate the "this year" filter for date values.
     */
    ThisYear = 52,
    /**
     * Indicates the "today" filter for date values.
     */
    Today = 53,
    /**
     * Indicates the "tomorrow" filter for date values.
     */
    Tomorrow = 54,
    /**
     * Indicates the PivotTable filter is unknown to the application.
     */
    Unknown = 55,
    /**
     * Indicates the "Value between" filter for text and numeric values.
     */
    ValueBetween = 56,
    /**
     * Indicates the "value equal" filter for text and numeric values.
     */
    ValueEqual = 57,
    /**
     * Indicates the "value greater than" filter for text and numeric values.
     */
    ValueGreaterThan = 58,
    /**
     * Indicates the "value greater than or equal to" filter for text and numeric values.
     */
    ValueGreaterThanOrEqual = 59,
    /**
     * Indicates the "value less than" filter for text and numeric values.
     */
    ValueLessThan = 60,
    /**
     * Indicates the "value less than or equal to" filter for text and numeric values.
     */
    ValueLessThanOrEqual = 61,
    /**
     * Indicates the "value not between" filter for text and numeric values.
     */
    ValueNotBetween = 62,
    /**
     * Indicates the "value not equal" filter for text and numeric values.
     */
    ValueNotEqual = 63,
    /**
     * Indicates the "year-to-date" filter for date values.
     */
    YearToDate = 64,
    /**
     * Indicates the "yesterday" filter for date values.
     */
    Yesterday = 65,
}

/**
 * Represents a PivotTable Format Condition in PivotFormatCondition Collection.
 */
export class PivotFormatCondition {
    /**
     * Get and set scope type for the pivot table condition format .
     */
    getScopeType() : PivotConditionFormatScopeType;
    /**
     * Get and set scope type for the pivot table condition format .
     * @param value - The value to set.
     */
    setScopeType(value: PivotConditionFormatScopeType) : void;
    /**
     * Get and set rule type for the pivot table condition format .
     */
    getRuleType() : PivotConditionFormatRuleType;
    /**
     * Get and set rule type for the pivot table condition format .
     * @param value - The value to set.
     */
    setRuleType(value: PivotConditionFormatRuleType) : void;
    /**
     * Get formatconditions for the pivot table condition format .
     */
    getFormatConditions() : FormatConditionCollection;
    /**
     * Adds PivotTable conditional format limit in the data fields.
     * @param fieldName - The name of PivotField.
     */
    addDataAreaCondition(fieldName: string) : void;
    /**
     * Adds PivotTable conditional format limit in the data fields.
     * @param dataField - The PivotField in the data fields.
     */
    addDataAreaCondition(dataField: PivotField) : void;
    /**
     * Adds PivotTable conditional format limit in the row fields.
     * @param fieldName - The name of PivotField.
     */
    addRowAreaCondition(fieldName: string) : void;
    /**
     * Adds PivotTable conditional format limit in the row fields.
     * @param rowField - The PivotField in the row fields.
     */
    addRowAreaCondition(rowField: PivotField) : void;
    /**
     * Adds PivotTable conditional format limit in the column fields.
     * @param fieldName - The name of PivotField.
     */
    addColumnAreaCondition(fieldName: string) : void;
    /**
     * Adds PivotTable conditional format limit in the column fields.
     * @param columnField - The PivotField in the column fields.
     */
    addColumnAreaCondition(columnField: PivotField) : void;
    /**
     * Sets conditional areas of PivotFormatCondition object.
     */
    setConditionalAreas() : void;
}

/**
 * Represents PivotTable Format Conditions.
 */
export class PivotFormatConditionCollection {
    /**
     * Gets the pivot FormatCondition object at the specific index.
     * @returns
     * pivot FormatCondition object.
     */
    get(index: number) : PivotFormatCondition;
    /**
     * Adds a pivot FormatCondition to the collection.
     * @returns
     * pivot FormatCondition object index.
     * 
     * @remarks
     * not supported
     */
    add() : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents number of items to retain per field.
 */
export enum PivotMissingItemLimitType {
    /**
     * The default number of unique items per PivotField allowed.
     */
    Automatic = 0,
    /**
     * The maximum number of unique items per PivotField allowed (>32,500).
     */
    Max = 1,
    /**
     * No unique items per PivotField allowed.
     */
    None = 2,
}

/**
 * Represents the options of saving dif file.
 */
export class DifSaveOptions extends SaveOptions {
    /**
     * Creates the options for saving DIF file.
     */
    constructor();
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: SaveOptions);
}

/**
 * Represents image save options.
 * For advanced usage, please use <see cref="WorkbookRender"/> or <see cref="SheetRender"/>.
 */
export class ImageSaveOptions extends SaveOptions {
    /**
     * Creates the options for saving image file.
     * 
     * @remarks
     * The default type is Tiff.
     */
    constructor();
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: SaveOptions);
    /**
     * Creates the options for saving image file.
     * @param saveFormat - The file format.         /// It should be one of following types: <see cref="SaveFormat.Tiff"/>, <see cref="SaveFormat.Svg"/>,         /// <see cref="SaveFormat.Bmp"/>, <see cref="SaveFormat.Png"/>, <see cref="SaveFormat.Jpg"/>,         /// <see cref="SaveFormat.Emf"/> or <see cref="SaveFormat.Gif"/>,         /// otherwise the saved format will be set as <see cref="SaveFormat.Tiff"/> automatically.
     */
    constructor(saveFormat: SaveFormat);
    /**
     * Additional image creation options.
     * 
     * @remarks
     * For advanced usage, please use <see cref="WorkbookRender"/> or <see cref="SheetRender"/>.
     */
    getImageOrPrintOptions() : ImageOrPrintOptions;
}

/**
 * Sorted value type.
 */
export enum SortOnType {
    /**
     * Sorts by cells' value.
     */
    Value = 0,
    /**
     * Sorts by cells' color.
     */
    CellColor = 1,
    /**
     * Sorts by cells' font color.
     */
    FontColor = 2,
    /**
     * Sorts by conditional icon.
     */
    Icon = 3,
}

/**
 * Describes a collection of CFValueObject.
 * Use only for icon sets.
 */
export class ConditionalFormattingValueCollection {
    /**
     * Get the CFValueObject element at the specified index.
     * @param index - The zero based index of the element.
     * @returns
     * The element at the specified index.
     */
    get(index: number) : ConditionalFormattingValue;
    /**
     * Adds <see cref="ConditionalFormattingValue"/> object.
     * @param type - The value type.
     * @param value - The value.
     * @returns
     * Returns the index of new object in the list.
     */
    add(type: FormatConditionValueType, value: string) : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Condition value type.
 */
export enum FormatConditionValueType {
    /**
     * The minimum/ midpoint / maximum value for the
     * gradient is determined by a formula.
     */
    Formula = 0,
    /**
     * Indicates that the maximum value in the range shall be
     * used as the maximum value for the gradient.
     */
    Max = 1,
    /**
     * Indicates that the minimum value in the range shall be
     * used as the minimum value for the gradient.
     */
    Min = 2,
    /**
     * Indicates that the minimum / midpoint / maximum
     * value for the gradient is specified by a constant
     * numeric value.
     */
    Number = 3,
    /**
     * Value indicates a percentage between the minimum
     * and maximum values in the range shall be used as the
     * minimum / midpoint / maximum value for the gradient.
     */
    Percent = 4,
    /**
     * Value indicates a percentile ranking in the range shall
     * be used as the minimum / midpoint / maximum value
     * for the gradient.
     */
    Percentile = 5,
    /**
     * Indicates that the Automatic maximum value in the range shall be
     * used as the Automatic maximum value for the gradient.
     */
    AutomaticMax = 6,
    /**
     * Indicates that the Automatic minimum value in the range shall be
     * used as the Automatic minimum value for the gradient.
     */
    AutomaticMin = 7,
}

/**
 * Icon set type for conditional formatting.
 * The threshold values for triggering the different icons within a set are
 * configurable, and the icon order is reversible.
 */
export enum IconSetType {
    /**
     * 3 arrows icon set.
     */
    Arrows3 = 0,
    /**
     * 3 gray arrows icon set.
     */
    ArrowsGray3 = 1,
    /**
     * 3 flags icon set.
     */
    Flags3 = 2,
    /**
     * 3 signs icon set.
     */
    Signs3 = 3,
    /**
     * 3 symbols icon set (circled).
     */
    Symbols3 = 4,
    /**
     * 3 Symbols icon set (uncircled).
     */
    Symbols32 = 5,
    /**
     * 3 traffic lights icon set (unrimmed).
     */
    TrafficLights31 = 6,
    /**
     * 3 traffic lights icon set with thick black border.
     */
    TrafficLights32 = 7,
    /**
     * 4 arrows icon set.
     */
    Arrows4 = 8,
    /**
     * 4 gray arrows icon set.
     */
    ArrowsGray4 = 9,
    /**
     * 4 ratings icon set.
     */
    Rating4 = 10,
    /**
     * 4 'red to black' icon set.
     */
    RedToBlack4 = 11,
    /**
     * 4 traffic lights icon set.
     */
    TrafficLights4 = 12,
    /**
     * 5 arrows icon set.
     */
    Arrows5 = 13,
    /**
     * 5 gray arrows icon set.
     */
    ArrowsGray5 = 14,
    /**
     * 5 quarters icon set.
     */
    Quarters5 = 15,
    /**
     * 5 rating icon set.
     */
    Rating5 = 16,
    /**
     * 3 stars set
     */
    Stars3 = 17,
    /**
     * 5 boxes set
     */
    Boxes5 = 18,
    /**
     * 3 triangles set
     */
    Triangles3 = 19,
    /**
     * None
     */
    None = 20,
    /**
     * CustomSet.
     * This element is read-only.
     */
    CustomSet = 21,
    /**
     * 3 smilies.
     * Only for .ods.
     */
    Smilies3 = 22,
    /**
     * 3 color smilies.
     * Only for .ods.
     */
    ColorSmilies3 = 23,
}

/**
 * Used in a FormatConditionType.TimePeriod conditional formatting rule.
 * These are dynamic time periods, which change based on
 * the date the conditional formatting is refreshed / applied.
 */
export enum TimePeriodType {
    /**
     * Today's date.
     */
    Today = 0,
    /**
     * Yesterday's date.
     */
    Yesterday = 1,
    /**
     * Tomorrow's date.
     */
    Tomorrow = 2,
    /**
     * A date in the last seven days.
     */
    Last7Days = 3,
    /**
     * A date occurring in this calendar month.
     */
    ThisMonth = 4,
    /**
     * A date occurring in the last calendar month.
     */
    LastMonth = 5,
    /**
     * A date occurring in the next calendar month.
     */
    NextMonth = 6,
    /**
     * A date occurring this week.
     */
    ThisWeek = 7,
    /**
     * A date occurring last week.
     */
    LastWeek = 8,
    /**
     * A date occurring next week.
     */
    NextWeek = 9,
    /**
     * A date occurring this year.
     * Only for .ods.
     */
    ThisYear = 10,
    /**
     * A date occurring last year.
     * Only for .ods.
     */
    LastYear = 11,
    /**
     * A date occurring next year.
     * Only for .ods.
     */
    NextYear = 12,
}

/**
 * Describe the Top10 conditional formatting rule.
 * This conditional formatting rule highlights cells whose
 * values fall in the top N or bottom N bracket, as specified.
 */
export class Top10 {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Get or set whether a "top/bottom n" rule is a "top/bottom n percent" rule.
     * Default value is false.
     */
    isPercent() : boolean;
    /**
     * Get or set whether a "top/bottom n" rule is a "top/bottom n percent" rule.
     * Default value is false.
     * @param value - The value to set.
     */
    setIsPercent(value: boolean) : void;
    /**
     * Get or set whether a "top/bottom n" rule is a "bottom n" rule.
     * Default value is false.
     */
    isBottom() : boolean;
    /**
     * Get or set whether a "top/bottom n" rule is a "bottom n" rule.
     * Default value is false.
     * @param value - The value to set.
     */
    setIsBottom(value: boolean) : void;
    /**
     * Get or set the value of "n" in a "top/bottom n" conditional formatting rule.
     * If IsPercent is true, the value must between 0 and 100.
     * Otherwise it must between 0 and 1000.
     * Default value is 10.
     */
    getRank() : number;
    /**
     * Get or set the value of "n" in a "top/bottom n" conditional formatting rule.
     * If IsPercent is true, the value must between 0 and 100.
     * Otherwise it must between 0 and 1000.
     * Default value is 10.
     * @param value - The value to set.
     */
    setRank(value: number) : void;
}

/**
 * The content disposition type.
 */
export enum ContentDisposition {
    /**
     */
    Inline = 0,
    /**
     */
    Attachment = 1,
}

/**
 * Signature in file.
 */
export class DigitalSignature {
    /**
     * Constructor of DigitalSignature.
     * @param rawData - A byte array containing data from an X.509 certificate.
     * @param password - The password required to access the X.509 certificate data.
     * @param comments - The purpose to signature.
     * @param signTime - The utc time when the document was signed.
     */
    constructor(rawData: number[], password: string, comments: string, signTime: Date);
    /**
     * Constructor of DigitalSignature.
     * @param fileName - The name of a certificate file.
     * @param password - The password required to access the X.509 certificate data.
     * @param comments - The purpose to signature.
     * @param signTime - The utc time when the document was signed.
     */
    constructor(fileName: string, password: string, comments: string, signTime: Date);
    /**
     * The purpose to signature.
     */
    getComments() : string;
    /**
     * The purpose to signature.
     * @param value - The value to set.
     */
    setComments(value: string) : void;
    /**
     * The time when the document was signed.
     */
    getSignTime() : Date;
    /**
     * The time when the document was signed.
     * @param value - The value to set.
     */
    setSignTime(value: Date) : void;
    /**
     * Specifies the text of actual signature in the digital signature.
     * Default value is Empty.
     */
    getText() : string;
    /**
     * Specifies the text of actual signature in the digital signature.
     * Default value is Empty.
     * @param value - The value to set.
     */
    setText(value: string) : void;
    /**
     * Specifies an image for the digital signature.
     * Default value is null.
     */
    getImage() : number[];
    /**
     * Specifies an image for the digital signature.
     * Default value is null.
     * @param value - The value to set.
     */
    setImage(value: number[]) : void;
    /**
     * If this digital signature is valid and the document has not been tampered with,
     * this value will be true.
     */
    isValid() : boolean;
    /**
     * XAdES type.
     * Default value is None(XAdES is off).
     */
    getXAdESType() : XAdESType;
    /**
     * XAdES type.
     * Default value is None(XAdES is off).
     * @param value - The value to set.
     */
    setXAdESType(value: XAdESType) : void;
}

/**
 * Provides a collection of digital signatures attached to a document.
 */
export class DigitalSignatureCollection {
    /**
     * The constructor of DigitalSignatureCollection.
     */
    constructor();
    /**
     * Add one signature to DigitalSignatureCollection.
     * @param digitalSignature - Digital signature in collection.
     */
    add(digitalSignature: DigitalSignature) : void;
    /**
     * Get the enumerator for DigitalSignatureCollection,
     * this enumerator allows iteration over the collection
     * @returns
     * The enumerator to iteration.
     */
    getEnumerator() : DigitalSignatureEnumerator;
}

/**
 * Options for encrypting and access permissions for a PDF document.
 * PDF/A does not allow security setting.
 */
export class PdfSecurityOptions {
    /**
     * The constructor of PdfSecurityOptions
     */
    constructor();
    /**
     * Gets or sets the user password required for opening the encrypted PDF document.
     * 
     * @remarks
     * <p>The owner password or user password will be required to open an encrypted PDF document for viewing.</p>
     * <p>The user password can be null or empty string, in this case no password will be required from the user when opening the PDF document.</p>
     * <p>Opening the document with the correct owner password allows full access to the document.</p>
     * <p>Opening the document with the correct user password (or opening a document that does not have a user password)
     * allows limited access as the permissions specified.</p>
     */
    getUserPassword() : string;
    /**
     * Gets or sets the user password required for opening the encrypted PDF document.
     * @param value - The value to set.
     * 
     * @remarks
     * <p>The owner password or user password will be required to open an encrypted PDF document for viewing.</p>
     * <p>The user password can be null or empty string, in this case no password will be required from the user when opening the PDF document.</p>
     * <p>Opening the document with the correct owner password allows full access to the document.</p>
     * <p>Opening the document with the correct user password (or opening a document that does not have a user password)
     * allows limited access as the permissions specified.</p>
     */
    setUserPassword(value: string) : void;
    /**
     * Gets or sets the owner password for the encrypted PDF document.
     * 
     * @remarks
     * The owner password allows the user to open an encrypted PDF document without any access restrictions specified.
     */
    getOwnerPassword() : string;
    /**
     * Gets or sets the owner password for the encrypted PDF document.
     * @param value - The value to set.
     * 
     * @remarks
     * The owner password allows the user to open an encrypted PDF document without any access restrictions specified.
     */
    setOwnerPassword(value: string) : void;
    /**
     * Indicates whether to allow to print the document.
     * 
     * @remarks
     * Possibly not at the highest quality level,
     * depending on whether <see cref="FullQualityPrintPermission"/> is also set.
     */
    getPrintPermission() : boolean;
    /**
     * Indicates whether to allow to print the document.
     * @param value - The value to set.
     * 
     * @remarks
     * Possibly not at the highest quality level,
     * depending on whether <see cref="FullQualityPrintPermission"/> is also set.
     */
    setPrintPermission(value: boolean) : void;
    /**
     * Indicates whether to allow to modify the contents of the document by operations other than those controlled
     * by <see cref="AnnotationsPermission"/>, <see cref="FillFormsPermission"/> and <see cref="AssembleDocumentPermission"/>.
     */
    getModifyDocumentPermission() : boolean;
    /**
     * Indicates whether to allow to modify the contents of the document by operations other than those controlled
     * by <see cref="AnnotationsPermission"/>, <see cref="FillFormsPermission"/> and <see cref="AssembleDocumentPermission"/>.
     * @param value - The value to set.
     */
    setModifyDocumentPermission(value: boolean) : void;
    /**
     * Indicates whether to allow to add or modify text annotations, fill in interactive form fields.
     * 
     * @remarks
     * if <see cref="ModifyDocumentPermission"/> is also set, create or modify interactive form fields (including signature fields).
     */
    getAnnotationsPermission() : boolean;
    /**
     * Indicates whether to allow to add or modify text annotations, fill in interactive form fields.
     * @param value - The value to set.
     * 
     * @remarks
     * if <see cref="ModifyDocumentPermission"/> is also set, create or modify interactive form fields (including signature fields).
     */
    setAnnotationsPermission(value: boolean) : void;
    /**
     * Indicates whether to allow to fill in existing interactive form fields (including signature fields),
     * even if <see cref="ModifyDocumentPermission"/> is clear.
     */
    getFillFormsPermission() : boolean;
    /**
     * Indicates whether to allow to fill in existing interactive form fields (including signature fields),
     * even if <see cref="ModifyDocumentPermission"/> is clear.
     * @param value - The value to set.
     */
    setFillFormsPermission(value: boolean) : void;
    /**
     * Indicates whether to allow to copy or otherwise extract text and graphics from the document
     * by operations other than that controlled by <see cref="AccessibilityExtractContent"/>.
     */
    getExtractContentPermission() : boolean;
    /**
     * Indicates whether to allow to copy or otherwise extract text and graphics from the document
     * by operations other than that controlled by <see cref="AccessibilityExtractContent"/>.
     * @param value - The value to set.
     */
    setExtractContentPermission(value: boolean) : void;
    /**
     * Indicates whether to allow to extract text and graphics (in support of accessibility to users with disabilities or for other purposes).
     */
    getAccessibilityExtractContent() : boolean;
    /**
     * Indicates whether to allow to extract text and graphics (in support of accessibility to users with disabilities or for other purposes).
     * @param value - The value to set.
     */
    setAccessibilityExtractContent(value: boolean) : void;
    /**
     * Indicates whether to allow to assemble the document (insert, rotate, or delete pages and create bookmarks or thumbnail images),
     * even if <see cref="ModifyDocumentPermission"/> is clear.
     */
    getAssembleDocumentPermission() : boolean;
    /**
     * Indicates whether to allow to assemble the document (insert, rotate, or delete pages and create bookmarks or thumbnail images),
     * even if <see cref="ModifyDocumentPermission"/> is clear.
     * @param value - The value to set.
     */
    setAssembleDocumentPermission(value: boolean) : void;
    /**
     * Indicates whether to allow to print the document to a representation from
     * which a faithful digital copy of the PDF content could be generated.
     * 
     * @remarks
     * When it is clear (and <see cref="PrintPermission"/> is set), printing is limited to a low level
     * representation of the appearance, possibly of degraded quality.
     */
    getFullQualityPrintPermission() : boolean;
    /**
     * Indicates whether to allow to print the document to a representation from
     * which a faithful digital copy of the PDF content could be generated.
     * @param value - The value to set.
     * 
     * @remarks
     * When it is clear (and <see cref="PrintPermission"/> is set), printing is limited to a low level
     * representation of the appearance, possibly of degraded quality.
     */
    setFullQualityPrintPermission(value: boolean) : void;
}

/**
 * Represents the command type of header and footer.
 */
export enum HeaderFooterCommandType {
    /**
     * The text.
     */
    Text = 0,
    /**
     * Current page number
     */
    CurrentPage = 1,
    /**
     * Page count
     */
    Pagecount = 2,
    /**
     * Current date
     */
    CurrentDate = 3,
    /**
     * Current time
     */
    CurrentTime = 4,
    /**
     * Sheet name
     */
    SheetName = 5,
    /**
     * File name without path
     */
    FileName = 6,
    /**
     * File path without file name
     */
    FilePath = 7,
    /**
     * Picture
     */
    Picture = 8,
}

/**
 * Represents the key of the data sorter.
 */
export class DataSorterKey {
    /**
     * Indicates the order of sorting.
     */
    getOrder() : SortOrder;
    /**
     * Gets the sorted column index(absolute position, column A is 0, B is 1, ...).
     */
    getIndex() : number;
    /**
     * Represents the type of sorting.
     */
    getType() : SortOnType;
    /**
     * Represents the icon set type.
     * 
     * @remarks
     * Only takes effect when <see cref="Type"/> is <see cref="SortOnType.Icon"/>.
     */
    getIconSetType() : IconSetType;
    /**
     * Represents the id of the icon set type.
     * 
     * @remarks
     * Only takes effect when <see cref="Type"/> is <see cref="SortOnType.Icon"/>.
     */
    getIconId() : number;
    /**
     * Gets the sorted color.
     * 
     * @remarks
     * Only takes effect when <see cref="Type"/> is <see cref="SortOnType.CellColor"/> or <see cref="SortOnType.FontColor"/>.
     */
    getColor() : Color;
}

/**
 * Represents the light rig direction type.
 */
export enum LightRigDirectionType {
    /**
     * Bottom
     */
    Bottom = 0,
    /**
     * Bottom left.
     */
    BottomLeft = 1,
    /**
     * Bottom Right.
     */
    BottomRight = 2,
    /**
     * Left.
     */
    Left = 3,
    /**
     * Right.
     */
    Right = 4,
    /**
     * Top.
     */
    Top = 5,
    /**
     * Top left.
     */
    TopLeft = 6,
    /**
     * Top Right.
     */
    TopRight = 7,
}

/**
 * Enumerates the line end width of the shape border line.
 */
export enum MsoArrowheadLength {
    /**
     * Short line end length
     */
    Short = 0,
    /**
     * Medium line end length
     */
    Medium = 1,
    /**
     * Long line end length
     */
    Long = 2,
}

/**
 * Enumerates the line end width of the shape border line.
 */
export enum MsoArrowheadWidth {
    /**
     * Short line end width.
     */
    Narrow = 0,
    /**
     * Medium line end width.
     */
    Medium = 1,
    /**
     * Wide line end width.
     */
    Wide = 2,
}

/**
 * Represents the way the text vertical or horizontal overflow.
 */
export enum TextOverflowType {
    /**
     * Pay attention to top and bottom barriers.
     * Provide no indication that there is text which is not visible.
     */
    Clip = 0,
    /**
     * Pay attention to top and bottom barriers.
     * Use an ellipsis to denote that there is text which is not visible.
     * Only for vertical overflow.
     */
    Ellipsis = 1,
    /**
     * Overflow the text and pay no attention to top and bottom barriers.
     */
    Overflow = 2,
}

/**
 * Provides utility methods for converting file format enums to strings or file extensions and back.
 */
export class FileFormatUtil {
    /**
     * Detects and returns the information about a format of an excel stored in a stream.
     * @param stream - 
     * @returns
     * A <see cref="FileFormatInfo"/> object that contains the detected information.
     */
    static detectFileFormat(stream: Uint8Array) : FileFormatInfo;
    /**
     * Detects and returns the information about a format of an excel stored in a stream.
     * @param stream - 
     * @param password - The password for encrypted ooxml files.
     * @returns
     * Returns whether the password is corrected.
     */
    static verifyPassword(stream: Uint8Array, password: string) : boolean;
    /**
     * Converting file format to save format.
     * @param format - The file format type.
     */
    static fileFormatToSaveFormat(format: FileFormatType) : SaveFormat;
    /**
     * Converts a file name extension into a SaveFormat value.
     * @param extension - The file extension. Can be with or without a leading dot. Case-insensitive.
     * 
     * @remarks
     * If the extension cannot be recognized, returns <see cref="SaveFormat.Unknown"/>.
     */
    static extensionToSaveFormat(extension: string) : SaveFormat;
    /**
     * Returns true if the extension is .xlt, .xltX, .xltm,.ots.
     * @param extension - 
     */
    static isTemplateFormat(extension: string) : boolean;
    /**
     * Converts a load format enumerated value into a file extension.
     * @param loadFormat - The loaded file format.
     * @returns
     * The returned extension is a lower-case string with a leading dot.
     * 
     * @remarks
     * If it can not be converted, returns null.
     */
    static loadFormatToExtension(loadFormat: LoadFormat) : string;
    /**
     * Converts a LoadFormat value to a SaveFormat value if possible.
     * @param loadFormat - The load format.
     * @returns
     * The save format.
     */
    static loadFormatToSaveFormat(loadFormat: LoadFormat) : SaveFormat;
    /**
     * Converts a save format enumerated value into a file extension.
     * @param format - The save format.
     * @returns
     * The returned extension is a lower-case string with a leading dot.
     */
    static saveFormatToExtension(format: SaveFormat) : string;
    /**
     * Converts a SaveFormat value to a LoadFormat value if possible.
     * @param saveFormat - The save format.
     * @returns
     * The load format
     */
    static saveFormatToLoadFormat(saveFormat: SaveFormat) : LoadFormat;
}

/**
 * Represents the paste special type.
 */
export enum PasteType {
    /**
     * Copies all data of the range.
     */
    All = 0,
    /**
     * It works as "All" behavior of MS Excel.
     */
    Default = 1,
    /**
     * Copies all data of the range without the range.
     */
    AllExceptBorders = 2,
    /**
     * It works as "All except borders" behavior of MS Excel.
     */
    DefaultExceptBorders = 3,
    /**
     * Only copies the widths of the range.
     */
    ColumnWidths = 4,
    /**
     * Only copies the heights of the range.
     */
    RowHeights = 5,
    /**
     */
    Comments = 6,
    /**
     */
    Formats = 7,
    /**
     */
    Formulas = 8,
    /**
     */
    FormulasAndNumberFormats = 9,
    /**
     */
    Validation = 10,
    /**
     */
    Values = 11,
    /**
     */
    ValuesAndFormats = 12,
    /**
     */
    ValuesAndNumberFormats = 13,
}

/**
 * Represents a collection of all the PivotField objects
 * in the PivotTable's specific PivotFields type.
 */
export class PivotFieldCollection {
    /**
     * Gets the PivotField Object at the specific index.
     */
    get(index: number) : PivotField;
    /**
     * Gets the PivotField Object of the specific name.
     */
    get(name: string) : PivotField;
    /**
     * Gets the PivotFields type.
     */
    getType() : PivotFieldType;
    /**
     * Gets the count of the pivotFields.
     */
    getCount() : number;
    /**
     * Gets an enumerator over the elements in this collection in proper sequence.
     * @returns
     * enumerator
     */
    getEnumerator() : PivotFieldEnumerator;
    /**
     * Adds a PivotField Object to the specific type PivotFields.
     * @param baseFieldIndex - field index in the base PivotFields.
     * @returns
     * the index of  the PivotField Object in this PivotFields.
     */
    addByBaseIndex(baseFieldIndex: number) : number;
    /**
     * Adds a PivotField Object to the specific type PivotFields.
     * @param pivotField - a PivotField Object.
     * @returns
     * the index of  the PivotField Object in this PivotFields.
     */
    add(pivotField: PivotField) : number;
    /**
     * clear all fields of PivotFieldCollection
     */
    clear() : void;
    /**
     * Moves the PivotField from current position to destination position
     * @param currPos - Current position of PivotField based on zero
     * @param destPos - Destination position of PivotField based on zero
     */
    move(currPos: number, destPos: number) : void;
}

/**
 * Represents data display format in the PivotTable data field.
 */
export enum PivotFieldDataDisplayFormat {
    /**
     * Represents normal display format.
     */
    Normal = 0,
    /**
     * Represents difference from display format.
     */
    DifferenceFrom = 1,
    /**
     * Represents percentage of display format.
     */
    PercentageOf = 2,
    /**
     * Represents percentage difference from  display format.
     */
    PercentageDifferenceFrom = 3,
    /**
     * Represents running total in display format.
     */
    RunningTotalIn = 4,
    /**
     * Represents percentage of row display format.
     */
    PercentageOfRow = 5,
    /**
     * Represents percentage of column display format.
     */
    PercentageOfColumn = 6,
    /**
     * Represents percentage of total display format.
     */
    PercentageOfTotal = 7,
    /**
     * Represents index display format.
     */
    Index = 8,
    /**
     * Represents percentage of parent row total display format.
     */
    PercentageOfParentRowTotal = 9,
    /**
     * Represents percentage of parent column total display format.
     */
    PercentageOfParentColumnTotal = 10,
    /**
     * Represents percentage of parent total display format.
     */
    PercentageOfParentTotal = 11,
    /**
     * Represents percentage of running total in display format.
     */
    PercentageOfRunningTotalIn = 12,
    /**
     * Represents smallest to largest display format.
     */
    RankSmallestToLargest = 13,
    /**
     * Represents largest to smallest display format.
     */
    RankLargestToSmallest = 14,
}

/**
 * Summary description for PivotFieldSubtotalType.
 */
export enum PivotFieldSubtotalType {
    /**
     * Represents None subtotal type.
     */
    None = 0,
    /**
     * Represents Automatic subtotal type.
     */
    Automatic = 1,
    /**
     * Represents Sum subtotal type.
     */
    Sum = 2,
    /**
     * Represents Count subtotal type.
     */
    Count = 4,
    /**
     * Represents Average subtotal type.
     */
    Average = 8,
    /**
     * Represents Max subtotal type.
     */
    Max = 16,
    /**
     * Represents Min subtotal type.
     */
    Min = 32,
    /**
     * Represents Product subtotal type.
     */
    Product = 64,
    /**
     * Represents Count Nums subtotal type.
     */
    CountNums = 128,
    /**
     * Represents Stdev subtotal type.
     */
    Stdev = 256,
    /**
     * Represents Stdevp subtotal type.
     */
    Stdevp = 512,
    /**
     * Represents Var subtotal type.
     */
    Var = 1024,
    /**
     * Represents Varp subtotal type.
     */
    Varp = 2048,
}

/**
 * Represents PivotTable field type.
 */
export enum PivotFieldType {
    /**
     * Presents base pivot field type.
     */
    Undefined = 0,
    /**
     * Presents row pivot field type.
     */
    Row = 1,
    /**
     * Presents column pivot field type.
     */
    Column = 2,
    /**
     * Presents page pivot field type.
     */
    Page = 4,
    /**
     * Presents data pivot field type.
     */
    Data = 8,
}

/**
 * Represents group by type.
 */
export enum PivotGroupByType {
    /**
     * Group by numbers.
     * 
     * @remarks
     * NOTE: This method is now obsolete. Instead,
     * please use PivotGroupByType.Numbers enum.
     * This method will be removed 12 months later since October 2023.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use  PivotGroupByType.Numbers instead.
     */
    RangeOfValues = 0,
    /**
     * Group by numbers.
     */
    Numbers = 0,
    /**
     * Presents Seconds groupby type.
     */
    Seconds = 1,
    /**
     * Presents Minutes groupby type.
     */
    Minutes = 2,
    /**
     * Presents Hours groupby type.
     */
    Hours = 3,
    /**
     * Presents Days groupby type.
     */
    Days = 4,
    /**
     * Presents Months groupby type.
     */
    Months = 5,
    /**
     * Presents Quarters groupby type.
     */
    Quarters = 6,
    /**
     * Presents Years groupby type.
     */
    Years = 7,
}

/**
 * Represents a item in a PivotField report.
 */
export class PivotItem {
    /**
     * Gets and Sets whether the pivot item is hidden.
     */
    isHidden() : boolean;
    /**
     * Gets and Sets whether the pivot item is hidden.
     * @param value - The value to set.
     */
    setIsHidden(value: boolean) : void;
    /**
     * Specifying the position index in all the PivotItems,not the PivotItems under the same parent node.
     */
    getPosition() : number;
    /**
     * Specifying the position index in all the PivotItems,not the PivotItems under the same parent node.
     * @param value - The value to set.
     */
    setPosition(value: number) : void;
    /**
     * Specifying the position index in the PivotItems under the same parent node.
     */
    getPositionInSameParentNode() : number;
    /**
     * Specifying the position index in the PivotItems under the same parent node.
     * @param value - The value to set.
     */
    setPositionInSameParentNode(value: number) : void;
    /**
     * Gets and Sets whether the pivot item hides detail.
     */
    isHideDetail() : boolean;
    /**
     * Gets and Sets whether the pivot item hides detail.
     * @param value - The value to set.
     */
    setIsHideDetail(value: boolean) : void;
    /**
     * Indicates whether this pivot item is a calculated formula item.
     */
    isFormula() : boolean;
    /**
     * Indicates whether this pivot item is a calculated formula item.
     * @param value - The value to set.
     */
    setIsFormula(value: boolean) : void;
    /**
     * Indicates whether the item is removed from the data source.
     * 
     * @remarks
     * True means this value has benn removed from the data source.
     */
    isMissing() : boolean;
    /**
     * Gets the name of the pivot item.
     */
    getName() : string;
    /**
     * Gets the index of the pivot item in cache field.
     */
    getIndex() : number;
    /**
     * Gets the index of the pivot item in cache field.
     * @param value - The value to set.
     */
    setIndex(value: number) : void;
    /**
     * Moves the item up or down
     * @param count - The number of moving up or down.         /// Move the item up if this is less than zero;         /// Move the item down if this is greater than zero.
     * @param isSameParent - Specifying whether moving operation is in the same parent node or not
     */
    move(count: number, isSameParent: boolean) : void;
    /**
     * Gets the string value of the pivot item
     * If the value is null, it will return ""
     */
    getStringValue() : string;
    /**
     * Gets the double value of the pivot item
     * If the value is null or not number ,it will return 0
     */
    getDoubleValue() : number;
    /**
     * Gets the date time value of the pivot item
     * If the value is null ,it will return DateTime.MinValue
     */
    getDateTimeValue() : Date;
}

/**
 * Represents a collection of all the PivotItem objects in the PivotField's
 */
export class PivotItemCollection {
    /**
     * Gets the PivotItem Object at the specific index.
     */
    get(index: number) : PivotItem;
    /**
     * Gets the PivotItem Object of the specific name.
     */
    get(itemValue: string) : PivotItem;
    /**
     * Gets the count of the pivot items.
     */
    getCount() : number;
    /**
     * Gets an enumerator over the elements in this collection in proper sequence.
     * @returns
     * enumerator
     */
    getEnumerator() : PivotItemEnumerator;
    /**
     * Directly changes the orders of the two items.
     * @param sourceIndex - The current index
     * @param destIndex - The dest index
     */
    changeitemsOrder(sourceIndex: number, destIndex: number) : void;
}

/**
 * Represents base item Next/Previous/All position in the base field .
 * 
 * @remarks
 * NOTE: This enum is now obsolete. Instead,
 * please use PivotItemPositionType enum instead.
 * This method will be removed 12 months later since June 2024.
 * Aspose apologizes for any inconvenience you may have experienced.
 * @deprecated
 * Use PivotItemPositionType enum instead.
 */
export enum PivotItemPosition {
    /**
     * Represents the previous pivot item in the PivotField.
     */
    Previous = 0,
    /**
     * Represents the next pivot item in the PivotField.
     */
    Next = 1,
    /**
     * Shows values as the different format based the index of pivot item in the PivotField.
     * 
     * @remarks
     * Only for getting.
     */
    Custom = 2,
}

/**
 * Represents the pivot page field items
 * if the pivot table data source is consolidation ranges.
 * It only can contain up to 4 fields.
 */
export class PivotPageFields {
    /**
     * Represents the pivot page field items.
     */
    constructor();
    /**
     * Gets the number of page fields.
     */
    getPageFieldCount() : number;
    /**
     * Adds a page field.
     * @param pageItems - Page field item label
     */
    addPageField(pageItems: string[]) : void;
    /**
     * Sets which item label in each page field to use to identify the data range.
     * The pageItemIndex.Length must be equal to PageFieldCount, so please add the page field first.
     * @param rangeIndex - The consolidation data range index.
     * @param pageItemIndex - The page item index in the each page field. 		/// pageItemIndex[2] = 1 means the second item in the third field to use to identify this range. 		/// pageItemIndex[1] = -1 means no item in the second field to use to identify this range  		/// and MS will auto create "blank" item in the second field  to identify this range. 		
     */
    addIdentify(rangeIndex: number, pageItemIndex: number[]) : void;
}

/**
 * Represents PivotTable auto format type.
 */
export enum PivotTableAutoFormatType {
    /**
     * Represents None format type.
     */
    None = 0,
    /**
     * Represents Classic auto format type.
     */
    Classic = 1,
    /**
     * Represents Report1 format type.
     */
    Report1 = 2,
    /**
     * Represents Report2 format type.
     */
    Report2 = 3,
    /**
     * Represents Report3 format type.
     */
    Report3 = 4,
    /**
     * Represents Report4 format type.
     */
    Report4 = 5,
    /**
     * Represents Report5 format type.
     */
    Report5 = 6,
    /**
     * Represents Report6 format type.
     */
    Report6 = 7,
    /**
     * Represents Report7 format type.
     */
    Report7 = 8,
    /**
     * Represents Report8 format type.
     */
    Report8 = 9,
    /**
     * Represents Report9 format type.
     */
    Report9 = 10,
    /**
     * Represents Report10 format type.
     */
    Report10 = 11,
    /**
     * Represents Table1 format type.
     */
    Table1 = 12,
    /**
     * Represents Table2 format type.
     */
    Table2 = 13,
    /**
     * Represents Table3 format type.
     */
    Table3 = 14,
    /**
     * Represents Table4 format type.
     */
    Table4 = 15,
    /**
     * Represents Table5 format type.
     */
    Table5 = 16,
    /**
     * Represents Table6 format type.
     */
    Table6 = 17,
    /**
     * Represents Table7 format type.
     */
    Table7 = 18,
    /**
     * Represents Table8 format type.
     */
    Table8 = 19,
    /**
     * Represents Table9 format type.
     */
    Table9 = 20,
    /**
     * Represents Table10 format type.
     */
    Table10 = 21,
}

/**
 * Represents the collection of all the PivotTable objects on the specified worksheet.
 */
export class PivotTableCollection {
    /**
     * Gets the PivotTable report by index.
     */
    get(index: number) : PivotTable;
    /**
     * Gets the PivotTable report by pivottable's name.
     */
    get(name: string) : PivotTable;
    /**
     * Gets the PivotTable report by pivottable's position.
     */
    get(row: number, column: number) : PivotTable;
    /**
     * Performs application-defined tasks associated with freeing, releasing, or
     * resetting unmanaged resources.
     */
    dispose() : void;
    /**
     * Adds a new PivotTable cache to a PivotCaches collection.
     * @param sourceData - The data for the new PivotTable cache.
     * @param destCellName - The cell in the upper-left corner of the PivotTable report's destination range.
     * @param tableName - The name of the new PivotTable report.
     * @returns
     * The new added cache index.
     */
    add(sourceData: string, destCellName: string, tableName: string) : number;
    /**
     * Adds a new PivotTable cache to a PivotCaches collection.
     * @param sourceData - The data for the new PivotTable cache.
     * @param destCellName - The cell in the upper-left corner of the PivotTable report's destination range.
     * @param tableName - The name of the new PivotTable report.
     * @param useSameSource - Indicates whether using same data source when another existing pivot table has used this data source.         /// If the property is true, it will save memory.
     * @returns
     * The new added cache index.
     */
    add(sourceData: string, destCellName: string, tableName: string, useSameSource: boolean) : number;
    /**
     * Adds a new PivotTable cache to a PivotCaches collection.
     * @param sourceData - The data cell range for the new PivotTable.Example : Sheet1!A1:C8
     * @param row - Row index of the cell in the upper-left corner of the PivotTable report's destination range.
     * @param column - Column index of the cell in the upper-left corner of the PivotTable report's destination range.
     * @param tableName - The name of the new PivotTable report.
     * @returns
     * The new added cache index.
     */
    add(sourceData: string, row: number, column: number, tableName: string) : number;
    /**
     * Adds a new PivotTable cache to a PivotCaches collection.
     * @param sourceData - The data cell range for the new PivotTable.Example : Sheet1!A1:C8
     * @param row - Row index of the cell in the upper-left corner of the PivotTable report's destination range.
     * @param column - Column index of the cell in the upper-left corner of the PivotTable report's destination range.
     * @param tableName - The name of the new PivotTable report.
     * @param useSameSource - Indicates whether using same data source when another existing pivot table has used this data source.         /// If the property is true, it will save memory.
     * @returns
     * The new added cache index.
     */
    add(sourceData: string, row: number, column: number, tableName: string, useSameSource: boolean) : number;
    /**
     * Adds a new PivotTable Object to the collection from another PivotTable.
     * @param pivotTable - The source pivotTable.
     * @param destCellName - The cell in the upper-left corner of the PivotTable report's destination range.
     * @param tableName - The name of the new PivotTable report.
     * @returns
     * The new added PivotTable index.
     */
    add(pivotTable: PivotTable, destCellName: string, tableName: string) : number;
    /**
     * Adds a new PivotTable Object to the collection from another PivotTable.
     * @param pivotTable - The source pivotTable.
     * @param row - Row index of the cell in the upper-left corner of the PivotTable report's destination range.
     * @param column - Column index of the cell in the upper-left corner of the PivotTable report's destination range.
     * @param tableName - The name of the new PivotTable report.
     * @returns
     * The new added PivotTable index.
     */
    add(pivotTable: PivotTable, row: number, column: number, tableName: string) : number;
    /**
     * Adds a new PivotTable Object to the collection with multiple consolidation ranges as data source.
     * @param sourceData - The multiple consolidation ranges,such as {"Sheet1!A1:C8","Sheet2!A1:B8"}
     * @param isAutoPage - Whether auto create a single page field.         /// If true,the following param pageFields will be ignored.
     * @param pageFields - The pivot page field items.
     * @param destCellName - destCellName The name of the new PivotTable report.
     * @param tableName - the name of the new PivotTable report.
     * @returns
     * The new added PivotTable index.
     */
    add(sourceData: string[], isAutoPage: boolean, pageFields: PivotPageFields, destCellName: string, tableName: string) : number;
    /**
     * Adds a new PivotTable Object to the collection with multiple consolidation ranges as data source.
     * @param sourceData - The multiple consolidation ranges,such as {"Sheet1!A1:C8","Sheet2!A1:B8"}
     * @param isAutoPage - Whether auto create a single page field.         /// If true,the following param pageFields will be ignored
     * @param pageFields - The pivot page field items.
     * @param row - Row index of the cell in the upper-left corner of the PivotTable report's destination range.
     * @param column - Column index of the cell in the upper-left corner of the PivotTable report's destination range.
     * @param tableName - The name of the new PivotTable report.
     * @returns
     * The new added PivotTable index.
     */
    add(sourceData: string[], isAutoPage: boolean, pageFields: PivotPageFields, row: number, column: number, tableName: string) : number;
    /**
     * Clear all pivot tables.
     */
    clear() : void;
    /**
     * Deletes the specified PivotTable and delete the PivotTable data
     * @param pivotTable - PivotTable object
     */
    remove(pivotTable: PivotTable) : void;
    /**
     * Deletes the specified PivotTable
     * @param pivotTable - PivotTable object
     * @param keepData - Whether to keep the PivotTable data
     */
    remove(pivotTable: PivotTable, keepData: boolean) : void;
    /**
     * Deletes the PivotTable at the specified index and delete the PivotTable data
     * @param index - the position index in PivotTable collection
     */
    removeAt(index: number) : void;
    /**
     * Deletes the PivotTable at the specified index
     * @param index - the position index in PivotTable collection
     * @param keepData - Whether to keep the PivotTable data
     */
    removeAt(index: number, keepData: boolean) : void;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the pivot table style type.
 */
export enum PivotTableStyleType {
    /**
     */
    None = 0,
    /**
     */
    PivotTableStyleLight1 = 1,
    /**
     */
    PivotTableStyleLight2 = 2,
    /**
     */
    PivotTableStyleLight3 = 3,
    /**
     */
    PivotTableStyleLight4 = 4,
    /**
     */
    PivotTableStyleLight5 = 5,
    /**
     */
    PivotTableStyleLight6 = 6,
    /**
     */
    PivotTableStyleLight7 = 7,
    /**
     */
    PivotTableStyleLight8 = 8,
    /**
     */
    PivotTableStyleLight9 = 9,
    /**
     */
    PivotTableStyleLight10 = 10,
    /**
     */
    PivotTableStyleLight11 = 11,
    /**
     */
    PivotTableStyleLight12 = 12,
    /**
     */
    PivotTableStyleLight13 = 13,
    /**
     */
    PivotTableStyleLight14 = 14,
    /**
     */
    PivotTableStyleLight15 = 15,
    /**
     */
    PivotTableStyleLight16 = 16,
    /**
     */
    PivotTableStyleLight17 = 17,
    /**
     */
    PivotTableStyleLight18 = 18,
    /**
     */
    PivotTableStyleLight19 = 19,
    /**
     */
    PivotTableStyleLight20 = 20,
    /**
     */
    PivotTableStyleLight21 = 21,
    /**
     */
    PivotTableStyleLight22 = 22,
    /**
     */
    PivotTableStyleLight23 = 23,
    /**
     */
    PivotTableStyleLight24 = 24,
    /**
     */
    PivotTableStyleLight25 = 25,
    /**
     */
    PivotTableStyleLight26 = 26,
    /**
     */
    PivotTableStyleLight27 = 27,
    /**
     */
    PivotTableStyleLight28 = 28,
    /**
     */
    PivotTableStyleMedium1 = 29,
    /**
     */
    PivotTableStyleMedium2 = 30,
    /**
     */
    PivotTableStyleMedium3 = 31,
    /**
     */
    PivotTableStyleMedium4 = 32,
    /**
     */
    PivotTableStyleMedium5 = 33,
    /**
     */
    PivotTableStyleMedium6 = 34,
    /**
     */
    PivotTableStyleMedium7 = 35,
    /**
     */
    PivotTableStyleMedium8 = 36,
    /**
     */
    PivotTableStyleMedium9 = 37,
    /**
     */
    PivotTableStyleMedium10 = 38,
    /**
     */
    PivotTableStyleMedium11 = 39,
    /**
     */
    PivotTableStyleMedium12 = 40,
    /**
     */
    PivotTableStyleMedium13 = 41,
    /**
     */
    PivotTableStyleMedium14 = 42,
    /**
     */
    PivotTableStyleMedium15 = 43,
    /**
     */
    PivotTableStyleMedium16 = 44,
    /**
     */
    PivotTableStyleMedium17 = 45,
    /**
     */
    PivotTableStyleMedium18 = 46,
    /**
     */
    PivotTableStyleMedium19 = 47,
    /**
     */
    PivotTableStyleMedium20 = 48,
    /**
     */
    PivotTableStyleMedium21 = 49,
    /**
     */
    PivotTableStyleMedium22 = 50,
    /**
     */
    PivotTableStyleMedium23 = 51,
    /**
     */
    PivotTableStyleMedium24 = 52,
    /**
     */
    PivotTableStyleMedium25 = 53,
    /**
     */
    PivotTableStyleMedium26 = 54,
    /**
     */
    PivotTableStyleMedium27 = 55,
    /**
     */
    PivotTableStyleMedium28 = 56,
    /**
     */
    PivotTableStyleDark1 = 57,
    /**
     */
    PivotTableStyleDark2 = 58,
    /**
     */
    PivotTableStyleDark3 = 59,
    /**
     */
    PivotTableStyleDark4 = 60,
    /**
     */
    PivotTableStyleDark5 = 61,
    /**
     */
    PivotTableStyleDark6 = 62,
    /**
     */
    PivotTableStyleDark7 = 63,
    /**
     */
    PivotTableStyleDark8 = 64,
    /**
     */
    PivotTableStyleDark9 = 65,
    /**
     */
    PivotTableStyleDark10 = 66,
    /**
     */
    PivotTableStyleDark11 = 67,
    /**
     */
    PivotTableStyleDark12 = 68,
    /**
     */
    PivotTableStyleDark13 = 69,
    /**
     */
    PivotTableStyleDark14 = 70,
    /**
     */
    PivotTableStyleDark15 = 71,
    /**
     */
    PivotTableStyleDark16 = 72,
    /**
     */
    PivotTableStyleDark17 = 73,
    /**
     */
    PivotTableStyleDark18 = 74,
    /**
     */
    PivotTableStyleDark19 = 75,
    /**
     */
    PivotTableStyleDark20 = 76,
    /**
     */
    PivotTableStyleDark21 = 77,
    /**
     */
    PivotTableStyleDark22 = 78,
    /**
     */
    PivotTableStyleDark23 = 79,
    /**
     */
    PivotTableStyleDark24 = 80,
    /**
     */
    PivotTableStyleDark25 = 81,
    /**
     */
    PivotTableStyleDark26 = 82,
    /**
     */
    PivotTableStyleDark27 = 83,
    /**
     */
    PivotTableStyleDark28 = 84,
    /**
     */
    Custom = 85,
}

/**
 * Represents the filter of <see cref="PivotArea"/> for <see cref="PivotTable"/>.
 */
export class PivotAreaFilter {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Indicates whether this field has selection.
     * Only works when the PivotTable is in Outline view.
     */
    getSelected() : boolean;
    /**
     * Indicates whether this field has selection.
     * Only works when the PivotTable is in Outline view.
     * @param value - The value to set.
     */
    setSelected(value: boolean) : void;
    /**
     * Gets which subtotal is set for this filter.
     * @param subtotalType - The subtotal function type.
     */
    isSubtotalSet(subtotalType: PivotFieldSubtotalType) : boolean;
    /**
     * Subtotal for the filter.
     * @param subtotalType - The subtotal function.
     * @param shown - Indicates if showing this subtotal data.
     */
    setSubtotals(subtotalType: PivotFieldSubtotalType, shown: boolean) : void;
}

/**
 * Represents the format defined in the PivotTable.
 */
export class PivotTableFormat {
    /**
     * Gets the pivot area.
     */
    getPivotArea() : PivotArea;
    /**
     * Gets the formatted style.
     */
    getStyle() : Style;
    /**
     * Sets the style of the pivot area.
     * @param style - 
     */
    setStyle(style: Style) : void;
}

/**
 * Presents the selected area of the PivotTable.
 */
export class PivotArea {
    /**
     * Presents the selected area of the PivotTable.
     * @param table - 
     */
    constructor(table: PivotTable);
    /**
     * Gets all filters for this PivotArea.
     */
    getFilters() : PivotAreaFilterCollection;
    /**
     * Indicates whether only the data values (in the data area of the view) for an item
     * selection are selected and does not include the item labels.
     */
    getOnlyData() : boolean;
    /**
     * Indicates whether only the data values (in the data area of the view) for an item
     * selection are selected and does not include the item labels.
     * @param value - The value to set.
     */
    setOnlyData(value: boolean) : void;
    /**
     * Indicates whether only the data labels for an item selection are selected.
     */
    getOnlyLabel() : boolean;
    /**
     * Indicates whether only the data labels for an item selection are selected.
     * @param value - The value to set.
     */
    setOnlyLabel(value: boolean) : void;
    /**
     * Indicates whether the row grand total is included.
     */
    isRowGrandIncluded() : boolean;
    /**
     * Indicates whether the row grand total is included.
     * @param value - The value to set.
     */
    setIsRowGrandIncluded(value: boolean) : void;
    /**
     * Indicates whether the column grand total is included.
     */
    isColumnGrandIncluded() : boolean;
    /**
     * Indicates whether the column grand total is included.
     * @param value - The value to set.
     */
    setIsColumnGrandIncluded(value: boolean) : void;
    /**
     * Gets and sets the region of the PivotTable to which this rule applies.
     */
    getAxisType() : PivotFieldType;
    /**
     * Gets and sets the region of the PivotTable to which this rule applies.
     * @param value - The value to set.
     */
    setAxisType(value: PivotFieldType) : void;
    /**
     * Gets and sets the type of selection rule.
     */
    getRuleType() : PivotAreaType;
    /**
     * Gets and sets the type of selection rule.
     * @param value - The value to set.
     */
    setRuleType(value: PivotAreaType) : void;
    /**
     * Indicates whether the rule refers to an area that is in outline mode.
     */
    isOutline() : boolean;
    /**
     * Indicates whether the rule refers to an area that is in outline mode.
     * @param value - The value to set.
     */
    setIsOutline(value: boolean) : void;
    /**
     * Select the area with filters.
     * @param axisType - The region of the PivotTable to which this rule applies.
     * @param fieldPosition - Position of the field within the axis to which this rule applies.
     * @param selectionType - Specifies what can be selected in a PivotTable during a structured selection.
     */
    select(axisType: PivotFieldType, fieldPosition: number, selectionType: PivotTableSelectionType) : void;
}

/**
 * Describe the ColorScale conditional formatting rule.
 * This conditional formatting rule creates a gradated color scale on the cells.
 */
export class ColorScale {
    /**
     * Indicates whether conditional formatting is 3 color scale.
     */
    getIs3ColorScale() : boolean;
    /**
     * Indicates whether conditional formatting is 3 color scale.
     * @param value - The value to set.
     */
    setIs3ColorScale(value: boolean) : void;
    /**
     * Get or set this ColorScale's min value object.
     * Cannot set null or CFValueObject with type FormatConditionValueType.Max to it.
     */
    getMinCfvo() : ConditionalFormattingValue;
    /**
     * Get or set this ColorScale's mid value object.
     * Cannot set CFValueObject with type FormatConditionValueType.Max or FormatConditionValueType.Min to it.
     */
    getMidCfvo() : ConditionalFormattingValue;
    /**
     * Get or set this ColorScale's max value object.
     * Cannot set null or CFValueObject with type FormatConditionValueType.Min to it.
     */
    getMaxCfvo() : ConditionalFormattingValue;
    /**
     * Get or set the gradient color for the minimum value in the range.
     */
    getMinColor() : Color;
    /**
     * Get or set the gradient color for the minimum value in the range.
     * @param value - The value to set.
     */
    setMinColor(value: Color) : void;
    /**
     * Get or set the gradient color for the middle value in the range.
     */
    getMidColor() : Color;
    /**
     * Get or set the gradient color for the middle value in the range.
     * @param value - The value to set.
     */
    setMidColor(value: Color) : void;
    /**
     * Get or set the gradient color for the maximum value in the range.
     */
    getMaxColor() : Color;
    /**
     * Get or set the gradient color for the maximum value in the range.
     * @param value - The value to set.
     */
    setMaxColor(value: Color) : void;
}

/**
 * Describes the values of the interpolation points in a gradient scale, dataBar or iconSet.
 */
export class ConditionalFormattingValue {
    /**
     * Get or set the type of this conditional formatting value object.
     * Setting the type to FormatConditionValueType.Min or FormatConditionValueType.Max
     * will auto set "Value" to null.
     */
    getType() : FormatConditionValueType;
    /**
     * Get or set the type of this conditional formatting value object.
     * Setting the type to FormatConditionValueType.Min or FormatConditionValueType.Max
     * will auto set "Value" to null.
     * @param value - The value to set.
     */
    setType(value: FormatConditionValueType) : void;
    /**
     * Get or set the Greater Than Or Equal flag.
     * Use only for icon sets, determines whether this threshold value uses
     * the greater than or equal to operator.
     * 'false' indicates 'greater than' is used instead of 'greater than or equal to'.
     * Default value is true.
     */
    isGTE() : boolean;
    /**
     * Get or set the Greater Than Or Equal flag.
     * Use only for icon sets, determines whether this threshold value uses
     * the greater than or equal to operator.
     * 'false' indicates 'greater than' is used instead of 'greater than or equal to'.
     * Default value is true.
     * @param value - The value to set.
     */
    setIsGTE(value: boolean) : void;
}

/**
 * Describe the DataBar conditional formatting rule.
 * This conditional formatting rule displays a gradated
 * data bar in the range of cells.
 */
export class DataBar {
    /**
     * Gets the color of the axis for cells with conditional formatting as data bars.
     */
    getAxisColor() : Color;
    /**
     * Gets the color of the axis for cells with conditional formatting as data bars.
     * @param value - The value to set.
     */
    setAxisColor(value: Color) : void;
    /**
     * Gets or sets the position of the axis of the data bars specified by a conditional formatting rule.
     */
    getAxisPosition() : DataBarAxisPosition;
    /**
     * Gets or sets the position of the axis of the data bars specified by a conditional formatting rule.
     * @param value - The value to set.
     */
    setAxisPosition(value: DataBarAxisPosition) : void;
    /**
     * Gets or sets how a data bar is filled with color.
     */
    getBarFillType() : DataBarFillType;
    /**
     * Gets or sets how a data bar is filled with color.
     * @param value - The value to set.
     */
    setBarFillType(value: DataBarFillType) : void;
    /**
     * Gets or sets the direction the databar is displayed.
     */
    getDirection() : TextDirectionType;
    /**
     * Gets or sets the direction the databar is displayed.
     * @param value - The value to set.
     */
    setDirection(value: TextDirectionType) : void;
    /**
     * Gets an object that specifies the border of a data bar.
     */
    getBarBorder() : DataBarBorder;
    /**
     * Gets the NegativeBarFormat object associated with a data bar conditional formatting rule.
     */
    getNegativeBarFormat() : NegativeBarFormat;
    /**
     * Get or set this DataBar's min value object.
     * Cannot set null or CFValueObject with type FormatConditionValueType.Max to it.
     */
    getMinCfvo() : ConditionalFormattingValue;
    /**
     * Get or set this DataBar's max value object.
     * Cannot set null or CFValueObject with type FormatConditionValueType.Min to it.
     */
    getMaxCfvo() : ConditionalFormattingValue;
    /**
     * Get or set this DataBar's Color.
     */
    getColor() : Color;
    /**
     * Get or set this DataBar's Color.
     * @param value - The value to set.
     */
    setColor(value: Color) : void;
    /**
     * Represents the min length of data bar .
     */
    getMinLength() : number;
    /**
     * Represents the min length of data bar .
     * @param value - The value to set.
     */
    setMinLength(value: number) : void;
    /**
     * Represents the max length of data bar .
     */
    getMaxLength() : number;
    /**
     * Represents the max length of data bar .
     * @param value - The value to set.
     */
    setMaxLength(value: number) : void;
    /**
     * Get or set the flag indicating whether to show the values of the cells on which this data bar is applied.
     * Default value is true.
     */
    getShowValue() : boolean;
    /**
     * Get or set the flag indicating whether to show the values of the cells on which this data bar is applied.
     * Default value is true.
     * @param value - The value to set.
     */
    setShowValue(value: boolean) : void;
    /**
     * Render data bar in cell to image byte array.
     * @param cell - Indicate the data bar in which cell to be rendered
     * @param imgOpts - ImageOrPrintOptions contains some property of output image
     */
    toImage(cell: Cell, imgOpts: ImageOrPrintOptions) : number[];
}

/**
 * Describe the IconSet conditional formatting rule.
 * This conditional formatting rule applies icons to cells
 * according to their values.
 */
export class IconSet {
    /**
     * Get the<see cref="ConditionalFormattingIcon"/> from the collection
     */
    getCfIcons() : ConditionalFormattingIconCollection;
    /**
     * Get the CFValueObjects instance.
     */
    getCfvos() : ConditionalFormattingValueCollection;
    /**
     * Get or Set the icon set type to display.
     * Setting the type will auto check if the current Cfvos's count is
     * accord with the new type. If not accord, old Cfvos will be cleaned and
     * default Cfvos will be added.
     */
    getType() : IconSetType;
    /**
     * Get or Set the icon set type to display.
     * Setting the type will auto check if the current Cfvos's count is
     * accord with the new type. If not accord, old Cfvos will be cleaned and
     * default Cfvos will be added.
     * @param value - The value to set.
     */
    setType(value: IconSetType) : void;
    /**
     * Indicates whether the icon set is custom.
     * Default value is false.
     */
    isCustom() : boolean;
    /**
     * Get or set the flag indicating whether to show the values of the cells on which this icon set is applied.
     * Default value is true.
     */
    getShowValue() : boolean;
    /**
     * Get or set the flag indicating whether to show the values of the cells on which this icon set is applied.
     * Default value is true.
     * @param value - The value to set.
     */
    setShowValue(value: boolean) : void;
    /**
     * Get or set the flag indicating whether to reverses the default order of the icons in this icon set.
     * Default value is false.
     */
    getReverse() : boolean;
    /**
     * Get or set the flag indicating whether to reverses the default order of the icons in this icon set.
     * Default value is false.
     * @param value - The value to set.
     */
    setReverse(value: boolean) : void;
}

/**
 * A specified range to be allowed to edit when the sheet protection is ON.
 */
export class ProtectedRange {
    /**
     * Gets the Range title. This is used as a descriptor, not as a named range definition.
     */
    getName() : string;
    /**
     * Gets the Range title. This is used as a descriptor, not as a named range definition.
     * @param value - The value to set.
     */
    setName(value: string) : void;
    /**
     * Gets the <see cref="CellArea"/> object represents the cell area to be protected.
     */
    getCellArea() : CellArea;
    /**
     * Indicates whether the worksheets is protected with password.
     */
    isProtectedWithPassword() : boolean;
    /**
     * Represents the password to protect the range.
     */
    getPassword() : string;
    /**
     * Represents the password to protect the range.
     * @param value - The value to set.
     */
    setPassword(value: string) : void;
    /**
     * The security descriptor defines user accounts who may edit this range without providing a password to access the range.
     */
    getSecurityDescriptor() : string;
    /**
     * The security descriptor defines user accounts who may edit this range without providing a password to access the range.
     * @param value - The value to set.
     */
    setSecurityDescriptor(value: string) : void;
    /**
     * Gets all referred areas.
     * @returns
     * Returns all referred areas.
     */
    getAreas() : CellArea[];
    /**
     * Adds a referred area to this
     * @param startRow - The start row.
     * @param startColumn - The start column.
     * @param endRow - The end row.
     * @param endColumn - The end column.
     */
    addArea(startRow: number, startColumn: number, endRow: number, endColumn: number) : void;
}

/**
 * Encapsulates a collection of <see cref="ProtectedRange"/> objects.
 */
export class ProtectedRangeCollection {
    /**
     * Gets the <see cref="ProtectedRange"/> element at the specified index.
     * @param index - The zero based index of the element.
     * @returns
     * The element at the specified index.
     */
    get(index: number) : ProtectedRange;
    /**
     * Adds a <see cref="ProtectedRange"/> item to the collection.
     * @param name - Range title. This is used as a descriptor, not as a named range definition.
     * @param startRow - Start row index of the range.
     * @param startColumn - Start column index of the range.
     * @param endRow - End row index of the range.
     * @param endColumn - End column index of the range.
     * @returns
     * object index.
     */
    add(name: string, startRow: number, startColumn: number, endRow: number, endColumn: number) : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents filtering the range by color.
 */
export class ColorFilter {
    /**
     * Constructs from an IObject convertible to this.
     * @param obj - The object.
     */
    constructor(obj: IObject);
    /**
     * Whether filter by the cell's fill color.
     * 
     * @remarks
     * True: cell's fill color; False: cell's font color.
     */
    getFilterByFillColor() : boolean;
    /**
     * Whether filter by the cell's fill color.
     * @param value - The value to set.
     * 
     * @remarks
     * True: cell's fill color; False: cell's font color.
     */
    setFilterByFillColor(value: boolean) : void;
    /**
     * Gets the color of this filter.
     * @param sheets - 
     */
    getColor(sheets: WorksheetCollection) : Color;
}

/**
 * Represents the custom filter.
 */
export class CustomFilter {
    /**
     * Gets and sets the filter operator type.
     */
    getFilterOperatorType() : FilterOperatorType;
    /**
     * Gets and sets the filter operator type.
     * @param value - The value to set.
     */
    setFilterOperatorType(value: FilterOperatorType) : void;
}

/**
 * Represents the custom filters.
 */
export class CustomFilterCollection {
    /**
     * Constructs new instance.
     */
    constructor();
    /**
     * Constructs from an IObject convertible to this.
     * @param obj - The object.
     */
    constructor(obj: IObject);
    /**
     * Gets the custom filter in the specific index.
     * @param index - The index.
     */
    get(index: number) : CustomFilter;
    /**
     * Indicates whether the two criteria have an "and" relationship.
     */
    getAnd() : boolean;
    /**
     * Indicates whether the two criteria have an "and" relationship.
     * @param value - The value to set.
     */
    setAnd(value: boolean) : void;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the datetime's group setting.
 */
export class DateTimeGroupItem {
    /**
     * Constructs from an IObject convertible to this.
     * @param obj - The object.
     */
    constructor(obj: IObject);
    /**
     * @param type - 
     * @param year - 
     * @param month - 
     * @param day - 
     * @param hour - 
     * @param minute - 
     * @param second - 
     */
    constructor(type: DateTimeGroupingType, year: number, month: number, day: number, hour: number, minute: number, second: number);
    /**
     * Gets the min value.
     */
    getMinValue() : Date;
    /**
     * Gets and sets the group type.
     */
    getDateTimeGroupingType() : DateTimeGroupingType;
    /**
     * Gets and sets the group type.
     * @param value - The value to set.
     */
    setDateTimeGroupingType(value: DateTimeGroupingType) : void;
    /**
     * Gets and sets the year of the grouped date time.
     */
    getYear() : number;
    /**
     * Gets and sets the year of the grouped date time.
     * @param value - The value to set.
     */
    setYear(value: number) : void;
    /**
     * Gets and sets the month of the grouped date time.
     */
    getMonth() : number;
    /**
     * Gets and sets the month of the grouped date time.
     * @param value - The value to set.
     */
    setMonth(value: number) : void;
    /**
     * Gets and sets the day of the grouped date time.
     */
    getDay() : number;
    /**
     * Gets and sets the day of the grouped date time.
     * @param value - The value to set.
     */
    setDay(value: number) : void;
    /**
     * Gets and sets the hour of the grouped date time.
     */
    getHour() : number;
    /**
     * Gets and sets the hour of the grouped date time.
     * @param value - The value to set.
     */
    setHour(value: number) : void;
    /**
     * Gets and sets the minute of the grouped date time.
     */
    getMinute() : number;
    /**
     * Gets and sets the minute of the grouped date time.
     * @param value - The value to set.
     */
    setMinute(value: number) : void;
    /**
     * Gets and sets the second of the grouped date time.
     */
    getSecond() : number;
    /**
     * Gets and sets the second of the grouped date time.
     * @param value - The value to set.
     */
    setSecond(value: number) : void;
}

/**
 * Specifies how to group dateTime values.
 */
export enum DateTimeGroupingType {
    /**
     * Group by day.
     */
    Day = 0,
    /**
     * Group by hour.
     */
    Hour = 1,
    /**
     * Group by Minute.
     */
    Minute = 2,
    /**
     * Group by Month.
     */
    Month = 3,
    /**
     * Group by Second.
     */
    Second = 4,
    /**
     * Group by Year.
     */
    Year = 5,
}

/**
 * Represents the dynamic filter.
 */
export class DynamicFilter {
    /**
     * Constructs from an IObject convertible to this.
     * @param obj - The object.
     */
    constructor(obj: IObject);
    /**
     * Gets and sets the dynamic filter type.
     */
    getDynamicFilterType() : DynamicFilterType;
    /**
     * Gets and sets the dynamic filter type.
     * @param value - The value to set.
     */
    setDynamicFilterType(value: DynamicFilterType) : void;
}

/**
 * Dynamic filter type.
 */
export enum DynamicFilterType {
    /**
     * Shows values that are above average.
     */
    AboveAverage = 0,
    /**
     * Shows values that are below average.
     */
    BelowAverage = 1,
    /**
     * Shows last month's dates.
     */
    LastMonth = 2,
    /**
     * Shows last quarter's dates.
     */
    LastQuarter = 3,
    /**
     * Shows last week's dates.
     */
    LastWeek = 4,
    /**
     * Shows last year's dates.
     */
    LastYear = 5,
    /**
     * Shows the dates that are in January, regardless of year.
     */
    January = 6,
    /**
     * Shows the dates that are in October, regardless of year.
     */
    October = 7,
    /**
     * Shows the dates that are in November, regardless of year.
     */
    November = 8,
    /**
     * Shows the dates that are in December, regardless of year.
     */
    December = 9,
    /**
     * Shows the dates that are in February, regardless of year.
     */
    February = 10,
    /**
     * Shows the dates that are in March, regardless of year.
     */
    March = 11,
    /**
     * Shows the dates that are in April, regardless of year.
     */
    April = 12,
    /**
     * Shows the dates that are in May, regardless of year.
     */
    May = 13,
    /**
     * Shows the dates that are in June, regardless of year.
     */
    June = 14,
    /**
     * Shows the dates that are in July, regardless of year.
     */
    July = 15,
    /**
     * Shows the dates that are in August, regardless of year.
     */
    August = 16,
    /**
     * Shows the dates that are in September, regardless of year.
     */
    September = 17,
    /**
     * Shows next month's dates.
     */
    NextMonth = 18,
    /**
     * Shows next quarter's dates.
     */
    NextQuarter = 19,
    /**
     * Shows next week's dates.
     */
    NextWeek = 20,
    /**
     * Shows next year's dates.
     */
    NextYear = 21,
    /**
     * None.
     */
    None = 22,
    /**
     * Shows the dates that are in the 1st quarter, regardless of year.
     */
    Quarter1 = 23,
    /**
     * Shows the dates that are in the 2nd quarter, regardless of year.
     */
    Quarter2 = 24,
    /**
     * Shows the dates that are in the 3rd quarter, regardless of year.
     */
    Quarter3 = 25,
    /**
     * Shows the dates that are in the 4th quarter, regardless of year.
     */
    Quarter4 = 26,
    /**
     * Shows this month's dates.
     */
    ThisMonth = 27,
    /**
     * Shows this quarter's dates.
     */
    ThisQuarter = 28,
    /**
     * Shows this week's dates.
     */
    ThisWeek = 29,
    /**
     * Shows this year's dates.
     */
    ThisYear = 30,
    /**
     * Shows today's dates.
     */
    Today = 31,
    /**
     * Shows tomorrow's dates.
     */
    Tomorrow = 32,
    /**
     * Shows the dates between the beginning of the year and today, inclusive.
     */
    YearToDate = 33,
    /**
     * Shows yesterday's dates.
     */
    Yesterday = 34,
}

/**
 * Represents the multiple filter collection.
 */
export class MultipleFilterCollection {
    /**
     * Constructs one new instance.
     */
    constructor();
    /**
     * Constructs from an IObject convertible to this.
     * @param obj - The object.
     */
    constructor(obj: IObject);
    /**
     * Indicates whether to filter by blank.
     */
    getMatchBlank() : boolean;
    /**
     * Indicates whether to filter by blank.
     * @param value - The value to set.
     */
    setMatchBlank(value: boolean) : void;
    /**
     * Adds string filter.
     * @param filter - The filter data.
     */
    add(filter: string) : void;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * The filter type.
 */
export enum FilterType {
    /**
     * Filter by fill color of the cell.
     */
    ColorFilter = 0,
    /**
     * Custom filter type.
     */
    CustomFilters = 1,
    /**
     * Dynamic filter type.
     */
    DynamicFilter = 2,
    /**
     * When multiple values are chosen to filter by, or when a group of date values are chosen to filter by,
     * this element groups those criteria together.
     */
    MultipleFilters = 3,
    /**
     * Filter by icon of conditional formatting.
     */
    IconFilter = 4,
    /**
     * Top 10 filter.
     */
    Top10 = 5,
    /**
     * No filter.
     */
    None = 6,
}

/**
 * Represents icon filter.
 */
export class IconFilter {
    /**
     * Constructs from an IObject convertible to this.
     * @param obj - The object.
     */
    constructor(obj: IObject);
    /**
     * Gets and sets which icon set is used in the filter criteria.
     */
    getIconSetType() : IconSetType;
    /**
     * Gets and sets which icon set is used in the filter criteria.
     * @param value - The value to set.
     */
    setIconSetType(value: IconSetType) : void;
    /**
     * Gets and sets Zero-based index of an icon in an icon set.
     */
    getIconId() : number;
    /**
     * Gets and sets Zero-based index of an icon in an icon set.
     * @param value - The value to set.
     */
    setIconId(value: number) : void;
}

/**
 * Represents the top 10 filter.
 */
export class Top10Filter {
    /**
     * Constructs from an IObject convertible to this.
     * @param obj - The object.
     */
    constructor(obj: IObject);
    /**
     * Indicates whether it's top filter.
     */
    isTop() : boolean;
    /**
     * Indicates whether it's top filter.
     * @param value - The value to set.
     */
    setIsTop(value: boolean) : void;
    /**
     * Indicates whether the items is percent.
     */
    isPercent() : boolean;
    /**
     * Indicates whether the items is percent.
     * @param value - The value to set.
     */
    setIsPercent(value: boolean) : void;
    /**
     * Gets and sets the items of the filter.
     */
    getItems() : number;
    /**
     * Gets and sets the items of the filter.
     * @param value - The value to set.
     */
    setItems(value: number) : void;
}

/**
 * Represents all auto fitter options.
 */
export class AutoFitterOptions {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets or sets default edit language.
     * 
     * @remarks
     * It may display/render different layouts for text paragraph when different edit languages is set.
     * Default is <see cref="Aspose.Cells.DefaultEditLanguage.Auto"/>.
     */
    getDefaultEditLanguage() : DefaultEditLanguage;
    /**
     * Gets or sets default edit language.
     * @param value - The value to set.
     * 
     * @remarks
     * It may display/render different layouts for text paragraph when different edit languages is set.
     * Default is <see cref="Aspose.Cells.DefaultEditLanguage.Auto"/>.
     */
    setDefaultEditLanguage(value: DefaultEditLanguage) : void;
    /**
     * Gets and set the type of auto fitting row height of merged cells.
     * 
     * @remarks
     * Excel defaults to ignore merged cells when fitting the row height, so Aspose.Cells works as MS Excel default.
     * Please set this type to change the way of auto fitting row height of merged cells.
     */
    getAutoFitMergedCellsType() : AutoFitMergedCellsType;
    /**
     * Gets and set the type of auto fitting row height of merged cells.
     * @param value - The value to set.
     * 
     * @remarks
     * Excel defaults to ignore merged cells when fitting the row height, so Aspose.Cells works as MS Excel default.
     * Please set this type to change the way of auto fitting row height of merged cells.
     */
    setAutoFitMergedCellsType(value: AutoFitMergedCellsType) : void;
    /**
     * Indicates whether only fit the rows which height are not customed.
     */
    getOnlyAuto() : boolean;
    /**
     * Indicates whether only fit the rows which height are not customed.
     * @param value - The value to set.
     */
    setOnlyAuto(value: boolean) : void;
    /**
     * Ignores the hidden rows/columns.
     */
    getIgnoreHidden() : boolean;
    /**
     * Ignores the hidden rows/columns.
     * @param value - The value to set.
     */
    setIgnoreHidden(value: boolean) : void;
    /**
     * Gets and sets the max row height(in unit of Point) when autofitting rows.
     */
    getMaxRowHeight() : number;
    /**
     * Gets and sets the max row height(in unit of Point) when autofitting rows.
     * @param value - The value to set.
     */
    setMaxRowHeight(value: number) : void;
    /**
     * Gets and sets the type of auto fitting wrapped text.
     */
    getAutoFitWrappedTextType() : AutoFitWrappedTextType;
    /**
     * Gets and sets the type of auto fitting wrapped text.
     * @param value - The value to set.
     */
    setAutoFitWrappedTextType(value: AutoFitWrappedTextType) : void;
    /**
     * Gets and sets the formatted strategy.
     * 
     * @remarks
     * The default value is CellStyle for performance.
     */
    getFormatStrategy() : CellValueFormatStrategy;
    /**
     * Gets and sets the formatted strategy.
     * @param value - The value to set.
     * 
     * @remarks
     * The default value is CellStyle for performance.
     */
    setFormatStrategy(value: CellValueFormatStrategy) : void;
    /**
     * Indicates whether fit for rendering purpose.
     */
    getForRendering() : boolean;
    /**
     * Indicates whether fit for rendering purpose.
     * @param value - The value to set.
     */
    setForRendering(value: boolean) : void;
}

/**
 * Allowing user to set PDF conversion's Compatibility
 */
export enum PdfCompliance {
    /**
     * Pdf format compatible with PDF 1.4
     * 
     * @remarks
     * NOTE: This member is now obsolete. Instead,
     * please use <see cref="Pdf14"/> property.
     * This property will be removed 6 months later since November 2023.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use PdfCompliance.Pdf14 instead.
     */
    None = 0,
    /**
     * Pdf format compatible with PDF 1.4
     */
    Pdf14 = 0,
    /**
     * Pdf format compatible with PDF 1.5
     */
    Pdf15 = 3,
    /**
     * Pdf format compatible with PDF 1.6
     */
    Pdf16 = 4,
    /**
     * Pdf format compatible with PDF 1.7
     */
    Pdf17 = 5,
    /**
     * Pdf format compatible with PDF/A-1b(ISO 19005-1)
     */
    PdfA1b = 1,
    /**
     * Pdf format compatible with PDF/A-1a(ISO 19005-1)
     */
    PdfA1a = 2,
    /**
     * Pdf format compatible with PDF/A-2b(ISO 19005-2)
     */
    PdfA2b = 6,
    /**
     * Pdf format compatible with PDF/A-2u(ISO 19005-2)
     */
    PdfA2u = 7,
    /**
     * Pdf format compatible with PDF/A-2a(ISO 19005-2)
     */
    PdfA2a = 8,
    /**
     * Pdf format compatible with PDF/A-3b(ISO 19005-3)
     */
    PdfA3b = 9,
    /**
     * Pdf format compatible with PDF/A-3u(ISO 19005-3)
     */
    PdfA3u = 10,
    /**
     * Pdf format compatible with PDF/A-3a(ISO 19005-3)
     */
    PdfA3a = 11,
}

/**
 * Represents the directory  type of the file name.
 */
export enum DirectoryType {
    /**
     * Represents an MS-DOS drive letter. It is followed by the drive letter.
     * Or UNC file names, such as \\server\share\myfile.xls
     */
    Volume = 0,
    /**
     * Indicates that the source workbook is on the same drive as the dependent workbook (the drive letter is omitted)
     */
    SameVolume = 1,
    /**
     * Indicates that the source workbook is in a subdirectory of the current directory.
     */
    DownDirectory = 2,
    /**
     * Indicates that the source workbook is in the parent directory of the current directory.
     */
    UpDirectory = 3,
}

/**
 * Represents a preset light right that can be applied to a shape
 */
export enum LightRigType {
    /**
     * Balanced
     */
    Balanced = 0,
    /**
     * Bright room
     */
    BrightRoom = 1,
    /**
     * Chilly
     */
    Chilly = 2,
    /**
     * Contrasting
     */
    Contrasting = 3,
    /**
     * Flat
     */
    Flat = 4,
    /**
     * Flood
     */
    Flood = 5,
    /**
     * Freezing
     */
    Freezing = 6,
    /**
     * Glow
     */
    Glow = 7,
    /**
     * Harsh
     */
    Harsh = 8,
    /**
     * LegacyFlat1
     */
    LegacyFlat1 = 9,
    /**
     * LegacyFlat2
     */
    LegacyFlat2 = 10,
    /**
     * LegacyFlat3
     */
    LegacyFlat3 = 11,
    /**
     * LegacyFlat4
     */
    LegacyFlat4 = 12,
    /**
     * LegacyHarsh1
     */
    LegacyHarsh1 = 13,
    /**
     * LegacyHarsh2
     */
    LegacyHarsh2 = 14,
    /**
     * LegacyHarsh3
     */
    LegacyHarsh3 = 15,
    /**
     * LegacyHarsh4
     */
    LegacyHarsh4 = 16,
    /**
     * LegacyNormal1
     */
    LegacyNormal1 = 17,
    /**
     * LegacyNormal2
     */
    LegacyNormal2 = 18,
    /**
     * LegacyNormal3
     */
    LegacyNormal3 = 19,
    /**
     * LegacyNormal4
     */
    LegacyNormal4 = 20,
    /**
     * Morning
     */
    Morning = 21,
    /**
     * Soft
     */
    Soft = 22,
    /**
     * Sunrise
     */
    Sunrise = 23,
    /**
     * Sunset
     */
    Sunset = 24,
    /**
     * Three point
     */
    ThreePoint = 25,
    /**
     * Two point
     */
    TwoPoint = 26,
    /**
     * No light rig.
     */
    None = 27,
}

/**
 * Represents the options for saving html file.
 */
export class HtmlSaveOptions extends SaveOptions {
    /**
     * Creates options for saving html file.
     */
    constructor();
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: SaveOptions);
    /**
     * Creates options for saving htm file.
     * @param saveFormat - The file format.         /// It should be one of following types: <see cref="SaveFormat.Html"/>, <see cref="SaveFormat.MHtml"/>,         /// or <see cref="SaveFormat.XHtml"/>,         /// otherwise the saved format will be set as <see cref="SaveFormat.Html"/> automatically.
     */
    constructor(saveFormat: SaveFormat);
    /**
     * Indicate whether exporting those not visible shapes
     * 
     * @remarks
     * The default values is false.
     */
    getIgnoreInvisibleShapes() : boolean;
    /**
     * Indicate whether exporting those not visible shapes
     * @param value - The value to set.
     * 
     * @remarks
     * The default values is false.
     */
    setIgnoreInvisibleShapes(value: boolean) : void;
    /**
     * The title of the html page.
     * Only for saving to html stream.
     */
    getPageTitle() : string;
    /**
     * The title of the html page.
     * Only for saving to html stream.
     * @param value - The value to set.
     */
    setPageTitle(value: string) : void;
    /**
     * The directory that the attached files will be saved to.
     * Only for saving to html stream.
     */
    getAttachedFilesDirectory() : string;
    /**
     * The directory that the attached files will be saved to.
     * Only for saving to html stream.
     * @param value - The value to set.
     */
    setAttachedFilesDirectory(value: string) : void;
    /**
     * Specify the Url prefix of attached files such as image in the html file.
     * Only for saving to html stream.
     */
    getAttachedFilesUrlPrefix() : string;
    /**
     * Specify the Url prefix of attached files such as image in the html file.
     * Only for saving to html stream.
     * @param value - The value to set.
     */
    setAttachedFilesUrlPrefix(value: string) : void;
    /**
     * Specify the default font name for exporting html, the default font will be used  when the font of style is not existing,
     * If this property is null, Aspose.Cells will use universal font which have the same family with the original font,
     * the default value is null.
     */
    getDefaultFontName() : string;
    /**
     * Specify the default font name for exporting html, the default font will be used  when the font of style is not existing,
     * If this property is null, Aspose.Cells will use universal font which have the same family with the original font,
     * the default value is null.
     * @param value - The value to set.
     */
    setDefaultFontName(value: string) : void;
    /**
     * Indicates whether to add a generic font to CSS font-family.
     * The default value is true
     */
    getAddGenericFont() : boolean;
    /**
     * Indicates whether to add a generic font to CSS font-family.
     * The default value is true
     * @param value - The value to set.
     */
    setAddGenericFont(value: boolean) : void;
    /**
     * Indicates if zooming in or out the html via worksheet zoom level when saving file to html, the default value is false.
     */
    getWorksheetScalable() : boolean;
    /**
     * Indicates if zooming in or out the html via worksheet zoom level when saving file to html, the default value is false.
     * @param value - The value to set.
     */
    setWorksheetScalable(value: boolean) : void;
    /**
     * Indicates if exporting comments when saving file to html, the default value is false.
     */
    isExportComments() : boolean;
    /**
     * Indicates if exporting comments when saving file to html, the default value is false.
     * @param value - The value to set.
     */
    setIsExportComments(value: boolean) : void;
    /**
     * Represents type of exporting comments to html files.
     */
    getExportCommentsType() : PrintCommentsType;
    /**
     * Represents type of exporting comments to html files.
     * @param value - The value to set.
     */
    setExportCommentsType(value: PrintCommentsType) : void;
    /**
     * Indicates if disable Downlevel-revealed conditional comments when exporting file to html, the default value is false.
     */
    getDisableDownlevelRevealedComments() : boolean;
    /**
     * Indicates if disable Downlevel-revealed conditional comments when exporting file to html, the default value is false.
     * @param value - The value to set.
     */
    setDisableDownlevelRevealedComments(value: boolean) : void;
    /**
     * Indicates whether exporting image files to temp directory.
     * Only for saving to html stream.
     */
    isExpImageToTempDir() : boolean;
    /**
     * Indicates whether exporting image files to temp directory.
     * Only for saving to html stream.
     * @param value - The value to set.
     */
    setIsExpImageToTempDir(value: boolean) : void;
    /**
     * Indicates whether using scalable unit to describe the image width
     * when using scalable unit to describe the column width.
     * The default value is true.
     */
    getImageScalable() : boolean;
    /**
     * Indicates whether using scalable unit to describe the image width
     * when using scalable unit to describe the column width.
     * The default value is true.
     * @param value - The value to set.
     */
    setImageScalable(value: boolean) : void;
    /**
     * Indicates whether exporting column width in unit of scale to html.
     * The default value is false.
     */
    getWidthScalable() : boolean;
    /**
     * Indicates whether exporting column width in unit of scale to html.
     * The default value is false.
     * @param value - The value to set.
     */
    setWidthScalable(value: boolean) : void;
    /**
     * Indicates whether exporting the single tab when the file only has one worksheet.
     * The default value is false.
     */
    getExportSingleTab() : boolean;
    /**
     * Indicates whether exporting the single tab when the file only has one worksheet.
     * The default value is false.
     * @param value - The value to set.
     */
    setExportSingleTab(value: boolean) : void;
    /**
     * Specifies whether images are saved in Base64 format to HTML, MHTML or EPUB.
     * 
     * @remarks
     * When this property is set to true image data is exported directly on the
     * img elements and separate files are not created.
     */
    getExportImagesAsBase64() : boolean;
    /**
     * Specifies whether images are saved in Base64 format to HTML, MHTML or EPUB.
     * @param value - The value to set.
     * 
     * @remarks
     * When this property is set to true image data is exported directly on the
     * img elements and separate files are not created.
     */
    setExportImagesAsBase64(value: boolean) : void;
    /**
     * Indicates if only exporting the active worksheet to html file.
     * If true then only the active worksheet will be exported to html file;
     * If false then the whole workbook will be exported to html file.
     * The default value is false.
     */
    getExportActiveWorksheetOnly() : boolean;
    /**
     * Indicates if only exporting the active worksheet to html file.
     * If true then only the active worksheet will be exported to html file;
     * If false then the whole workbook will be exported to html file.
     * The default value is false.
     * @param value - The value to set.
     */
    setExportActiveWorksheetOnly(value: boolean) : void;
    /**
     * Indicates if only exporting the print area to html file. The default value is false.
     */
    getExportPrintAreaOnly() : boolean;
    /**
     * Indicates if only exporting the print area to html file. The default value is false.
     * @param value - The value to set.
     */
    setExportPrintAreaOnly(value: boolean) : void;
    /**
     * Gets or Sets the exporting CellArea of current active Worksheet.
     * If you set this attribute, the print area of current active Worksheet will be omitted.
     * Only the specified area will be exported when saving the file to html.
     */
    getExportArea() : CellArea;
    /**
     * Gets or Sets the exporting CellArea of current active Worksheet.
     * If you set this attribute, the print area of current active Worksheet will be omitted.
     * Only the specified area will be exported when saving the file to html.
     * @param value - The value to set.
     */
    setExportArea(value: CellArea) : void;
    /**
     * Indicates whether html tag(such as <c>&lt;div&gt;&lt;/div&gt;</c>) in cell should be parsed as cell value or preserved as it is.
     * The default value is true.
     */
    getParseHtmlTagInCell() : boolean;
    /**
     * Indicates whether html tag(such as <c>&lt;div&gt;&lt;/div&gt;</c>) in cell should be parsed as cell value or preserved as it is.
     * The default value is true.
     * @param value - The value to set.
     */
    setParseHtmlTagInCell(value: boolean) : void;
    /**
     * Indicates if a cross-cell string will be displayed in the same way as MS Excel when saving an Excel file in html format.
     * By default the value is Default, so, for cross-cell strings, there is little difference between the html files created by Aspose.Cells and MS Excel.
     * But the performance for creating large html files,setting the value to Cross would be several times faster than setting it to Default or Fit2Cell.
     */
    getHtmlCrossStringType() : HtmlCrossType;
    /**
     * Indicates if a cross-cell string will be displayed in the same way as MS Excel when saving an Excel file in html format.
     * By default the value is Default, so, for cross-cell strings, there is little difference between the html files created by Aspose.Cells and MS Excel.
     * But the performance for creating large html files,setting the value to Cross would be several times faster than setting it to Default or Fit2Cell.
     * @param value - The value to set.
     */
    setHtmlCrossStringType(value: HtmlCrossType) : void;
    /**
     * Hidden column(the width of this column is 0) in excel,before save this into html format,
     * if HtmlHiddenColDisplayType is "Remove",the hidden column would not been output,
     * if the value is "Hidden", the column would been output,but was hidden,the default value is "Hidden"
     */
    getHiddenColDisplayType() : HtmlHiddenColDisplayType;
    /**
     * Hidden column(the width of this column is 0) in excel,before save this into html format,
     * if HtmlHiddenColDisplayType is "Remove",the hidden column would not been output,
     * if the value is "Hidden", the column would been output,but was hidden,the default value is "Hidden"
     * @param value - The value to set.
     */
    setHiddenColDisplayType(value: HtmlHiddenColDisplayType) : void;
    /**
     * Hidden row(the height of this row is 0) in excel,before save this into html format,
     * if HtmlHiddenRowDisplayType is "Remove",the hidden row would not been output,
     * if the value is "Hidden", the row would been output,but was hidden,the default value is "Hidden"
     */
    getHiddenRowDisplayType() : HtmlHiddenRowDisplayType;
    /**
     * Hidden row(the height of this row is 0) in excel,before save this into html format,
     * if HtmlHiddenRowDisplayType is "Remove",the hidden row would not been output,
     * if the value is "Hidden", the row would been output,but was hidden,the default value is "Hidden"
     * @param value - The value to set.
     */
    setHiddenRowDisplayType(value: HtmlHiddenRowDisplayType) : void;
    /**
     * If not set,use Encoding.UTF8 as default enconding type.
     */
    getEncoding() : EncodingType;
    /**
     * If not set,use Encoding.UTF8 as default enconding type.
     * @param value - The value to set.
     */
    setEncoding(value: EncodingType) : void;
    /**
     * Gets or sets the IFilePathProvider for exporting Worksheet to html separately.
     */
    getFilePathProvider() : IFilePathProvider;
    /**
     * Gets or sets the IFilePathProvider for exporting Worksheet to html separately.
     * @param value - The value to set.
     */
    setFilePathProvider(value: IFilePathProvider) : void;
    /**
     * Get the ImageOrPrintOptions object before exporting
     */
    getImageOptions() : ImageOrPrintOptions;
    /**
     * Indicates whether save the html as single file.
     * The default value is false.
     * 
     * @remarks
     * If there are multiple worksheets or other required resources such as pictures in the workbook,
     * commonly those worksheets and other resources need to be saved into separate files.
     * For some scenarios, user maybe need to get only one resultant file such as for the convenience of transferring.
     * If so, user may set this property as true.
     */
    getSaveAsSingleFile() : boolean;
    /**
     * Indicates whether save the html as single file.
     * The default value is false.
     * @param value - The value to set.
     * 
     * @remarks
     * If there are multiple worksheets or other required resources such as pictures in the workbook,
     * commonly those worksheets and other resources need to be saved into separate files.
     * For some scenarios, user maybe need to get only one resultant file such as for the convenience of transferring.
     * If so, user may set this property as true.
     */
    setSaveAsSingleFile(value: boolean) : void;
    /**
     * Indicates whether showing all sheets when saving  as a single html file.
     * 
     * @remarks
     * Only works when <see cref="SaveAsSingleFile"/> is True.
     */
    getShowAllSheets() : boolean;
    /**
     * Indicates whether showing all sheets when saving  as a single html file.
     * @param value - The value to set.
     * 
     * @remarks
     * Only works when <see cref="SaveAsSingleFile"/> is True.
     */
    setShowAllSheets(value: boolean) : void;
    /**
     * Indicates whether exporting page headers.
     * 
     * @remarks
     * Only works when <see cref="SaveAsSingleFile"/> is True.
     */
    getExportPageHeaders() : boolean;
    /**
     * Indicates whether exporting page headers.
     * @param value - The value to set.
     * 
     * @remarks
     * Only works when <see cref="SaveAsSingleFile"/> is True.
     */
    setExportPageHeaders(value: boolean) : void;
    /**
     * Indicates whether exporting page headers.
     * 
     * @remarks
     * Only works when <see cref="SaveAsSingleFile"/> is True.
     */
    getExportPageFooters() : boolean;
    /**
     * Indicates whether exporting page headers.
     * @param value - The value to set.
     * 
     * @remarks
     * Only works when <see cref="SaveAsSingleFile"/> is True.
     */
    setExportPageFooters(value: boolean) : void;
    /**
     * Indicating if exporting the hidden worksheet content.The default value is true.
     */
    getExportHiddenWorksheet() : boolean;
    /**
     * Indicating if exporting the hidden worksheet content.The default value is true.
     * @param value - The value to set.
     */
    setExportHiddenWorksheet(value: boolean) : void;
    /**
     * Indicating if html or mht file is presentation preference.
     * The default value is false.
     * if you want to get more beautiful presentation,please set the value to true.
     */
    getPresentationPreference() : boolean;
    /**
     * Indicating if html or mht file is presentation preference.
     * The default value is false.
     * if you want to get more beautiful presentation,please set the value to true.
     * @param value - The value to set.
     */
    setPresentationPreference(value: boolean) : void;
    /**
     * Gets and sets the prefix of the css name,the default value is "".
     */
    getCellCssPrefix() : string;
    /**
     * Gets and sets the prefix of the css name,the default value is "".
     * @param value - The value to set.
     */
    setCellCssPrefix(value: string) : void;
    /**
     * Gets and sets the prefix of the type css name such as tr,col,td and so on, they are contained in the table element
     * which has the specific TableCssId attribute. The default value is "".
     */
    getTableCssId() : string;
    /**
     * Gets and sets the prefix of the type css name such as tr,col,td and so on, they are contained in the table element
     * which has the specific TableCssId attribute. The default value is "".
     * @param value - The value to set.
     */
    setTableCssId(value: string) : void;
    /**
     * Indicating whether using full path link in sheet00x.htm,filelist.xml and tabstrip.htm.
     * The default value is false.
     */
    isFullPathLink() : boolean;
    /**
     * Indicating whether using full path link in sheet00x.htm,filelist.xml and tabstrip.htm.
     * The default value is false.
     * @param value - The value to set.
     */
    setIsFullPathLink(value: boolean) : void;
    /**
     * Indicating whether export the worksheet css separately.The default value is false.
     */
    getExportWorksheetCSSSeparately() : boolean;
    /**
     * Indicating whether export the worksheet css separately.The default value is false.
     * @param value - The value to set.
     */
    setExportWorksheetCSSSeparately(value: boolean) : void;
    /**
     * Indicating whether exporting the similar border style when the border style is not supported by browsers.
     * If you want to import the html or mht file to excel, please keep the default value.
     * The default value is false.
     */
    getExportSimilarBorderStyle() : boolean;
    /**
     * Indicating whether exporting the similar border style when the border style is not supported by browsers.
     * If you want to import the html or mht file to excel, please keep the default value.
     * The default value is false.
     * @param value - The value to set.
     */
    setExportSimilarBorderStyle(value: boolean) : void;
    /**
     * Indicates whether merging empty TD element forcedly when exporting file to html.
     * The size of html file will be reduced significantly after setting value to true. The default value is false.
     * If you want to import the html file to excel or export perfect grid lines when saving file to html,
     * please keep the default value.
     * @deprecated
     * Use HtmlSaveOptions.MergeEmptyTdType instead.
     */
    getMergeEmptyTdForcely() : boolean;
    /**
     * Indicates whether merging empty TD element forcedly when exporting file to html.
     * The size of html file will be reduced significantly after setting value to true. The default value is false.
     * If you want to import the html file to excel or export perfect grid lines when saving file to html,
     * please keep the default value.
     * @param value - The value to set.
     * @deprecated
     * Use HtmlSaveOptions.MergeEmptyTdType instead.
     */
    setMergeEmptyTdForcely(value: boolean) : void;
    /**
     * The option to merge contiguous empty cells(empty td elements)
     * The default value is MergeEmptyTdType.Default.
     */
    getMergeEmptyTdType() : MergeEmptyTdType;
    /**
     * The option to merge contiguous empty cells(empty td elements)
     * The default value is MergeEmptyTdType.Default.
     * @param value - The value to set.
     */
    setMergeEmptyTdType(value: MergeEmptyTdType) : void;
    /**
     * Indicates whether exporting excel coordinate of nonblank cells when saving file to html. The default value is false.
     * If you want to import the output html to excel, please keep the default value.
     */
    getExportCellCoordinate() : boolean;
    /**
     * Indicates whether exporting excel coordinate of nonblank cells when saving file to html. The default value is false.
     * If you want to import the output html to excel, please keep the default value.
     * @param value - The value to set.
     */
    setExportCellCoordinate(value: boolean) : void;
    /**
     * Indicates whether exporting extra headings when the length of text is longer than max display column.
     * The default value is false. If you want to import the html file to excel, please keep the default value.
     */
    getExportExtraHeadings() : boolean;
    /**
     * Indicates whether exporting extra headings when the length of text is longer than max display column.
     * The default value is false. If you want to import the html file to excel, please keep the default value.
     * @param value - The value to set.
     */
    setExportExtraHeadings(value: boolean) : void;
    /**
     * Indicates whether exports sheet's row and column headings when saving to HTML files.
     * 
     * @remarks
     * The default value is false.
     */
    getExportRowColumnHeadings() : boolean;
    /**
     * Indicates whether exports sheet's row and column headings when saving to HTML files.
     * @param value - The value to set.
     * 
     * @remarks
     * The default value is false.
     */
    setExportRowColumnHeadings(value: boolean) : void;
    /**
     * Indicates whether exporting formula when saving file to html. The default value is true.
     * If you want to import the output html to excel, please keep the default value.
     */
    getExportFormula() : boolean;
    /**
     * Indicates whether exporting formula when saving file to html. The default value is true.
     * If you want to import the output html to excel, please keep the default value.
     * @param value - The value to set.
     */
    setExportFormula(value: boolean) : void;
    /**
     * Indicates whether adding tooltip text when the data can't be fully displayed.
     * The default value is false.
     */
    getAddTooltipText() : boolean;
    /**
     * Indicates whether adding tooltip text when the data can't be fully displayed.
     * The default value is false.
     * @param value - The value to set.
     */
    setAddTooltipText(value: boolean) : void;
    /**
     * Indicating whether exporting the gridlines.The default value is false.
     */
    getExportGridLines() : boolean;
    /**
     * Indicating whether exporting the gridlines.The default value is false.
     * @param value - The value to set.
     */
    setExportGridLines(value: boolean) : void;
    /**
     * Indicating whether exporting bogus bottom row data. The default value is true.If you want to import the html or mht file
     * to excel, please keep the default value.
     */
    getExportBogusRowData() : boolean;
    /**
     * Indicating whether exporting bogus bottom row data. The default value is true.If you want to import the html or mht file
     * to excel, please keep the default value.
     * @param value - The value to set.
     */
    setExportBogusRowData(value: boolean) : void;
    /**
     * Indicating whether excludes unused styles.
     * For the generated html files, excluding unused styles can make the file size smaller
     * without affecting the visual effects. So the default value of this property is true.
     * If user needs to keep all styles in the workbook for the generated html(such as the scenario that user
     * needs to restore the workbook from the generated html later), please set this property as false.
     */
    getExcludeUnusedStyles() : boolean;
    /**
     * Indicating whether excludes unused styles.
     * For the generated html files, excluding unused styles can make the file size smaller
     * without affecting the visual effects. So the default value of this property is true.
     * If user needs to keep all styles in the workbook for the generated html(such as the scenario that user
     * needs to restore the workbook from the generated html later), please set this property as false.
     * @param value - The value to set.
     */
    setExcludeUnusedStyles(value: boolean) : void;
    /**
     * Indicating whether exporting document properties.The default value is true.If you want to import
     * the html or mht file to excel, please keep the default value.
     */
    getExportDocumentProperties() : boolean;
    /**
     * Indicating whether exporting document properties.The default value is true.If you want to import
     * the html or mht file to excel, please keep the default value.
     * @param value - The value to set.
     */
    setExportDocumentProperties(value: boolean) : void;
    /**
     * Indicating whether exporting worksheet properties.The default value is true.If you want to import
     * the html or mht file to excel, please keep the default value.
     */
    getExportWorksheetProperties() : boolean;
    /**
     * Indicating whether exporting worksheet properties.The default value is true.If you want to import
     * the html or mht file to excel, please keep the default value.
     * @param value - The value to set.
     */
    setExportWorksheetProperties(value: boolean) : void;
    /**
     * Indicating whether exporting workbook properties.The default value is true.If you want to import
     * the html or mht file to excel, please keep the default value.
     */
    getExportWorkbookProperties() : boolean;
    /**
     * Indicating whether exporting workbook properties.The default value is true.If you want to import
     * the html or mht file to excel, please keep the default value.
     * @param value - The value to set.
     */
    setExportWorkbookProperties(value: boolean) : void;
    /**
     * Indicating whether exporting frame scripts and document properties. The default value is true.If you want to import the html or mht file
     * to excel, please keep the default value.
     */
    getExportFrameScriptsAndProperties() : boolean;
    /**
     * Indicating whether exporting frame scripts and document properties. The default value is true.If you want to import the html or mht file
     * to excel, please keep the default value.
     * @param value - The value to set.
     */
    setExportFrameScriptsAndProperties(value: boolean) : void;
    /**
     * Indicating the rule of exporting html file data.The default value is All.
     */
    getExportDataOptions() : HtmlExportDataOptions;
    /**
     * Indicating the rule of exporting html file data.The default value is All.
     * @param value - The value to set.
     */
    setExportDataOptions(value: HtmlExportDataOptions) : void;
    /**
     * Indicating the type of target attribute in <c>&lt;a&gt;</c> link. The default value is HtmlLinkTargetType.Parent.
     */
    getLinkTargetType() : HtmlLinkTargetType;
    /**
     * Indicating the type of target attribute in <c>&lt;a&gt;</c> link. The default value is HtmlLinkTargetType.Parent.
     * @param value - The value to set.
     */
    setLinkTargetType(value: HtmlLinkTargetType) : void;
    /**
     * Indicating whether the output HTML is compatible with IE browser.
     * The defalut value is false
     */
    isIECompatible() : boolean;
    /**
     * Indicating whether the output HTML is compatible with IE browser.
     * The defalut value is false
     * @param value - The value to set.
     */
    setIsIECompatible(value: boolean) : void;
    /**
     * Indicating whether show the whole formatted data of cell when overflowing the column.
     * If true then ignore the column width and the whole data of cell will be exported.
     * If false then the data will be exported same as Excel.
     * The default value is false.
     */
    getFormatDataIgnoreColumnWidth() : boolean;
    /**
     * Indicating whether show the whole formatted data of cell when overflowing the column.
     * If true then ignore the column width and the whole data of cell will be exported.
     * If false then the data will be exported same as Excel.
     * The default value is false.
     * @param value - The value to set.
     */
    setFormatDataIgnoreColumnWidth(value: boolean) : void;
    /**
     * Indicates whether to calculate formulas before saving html file.
     * 
     * @remarks
     * The default value is false.
     */
    getCalculateFormula() : boolean;
    /**
     * Indicates whether to calculate formulas before saving html file.
     * @param value - The value to set.
     * 
     * @remarks
     * The default value is false.
     */
    setCalculateFormula(value: boolean) : void;
    /**
     * Indicates whether JavaScript is compatible with browsers that do not support JavaScript.
     * The default value is true.
     */
    isJsBrowserCompatible() : boolean;
    /**
     * Indicates whether JavaScript is compatible with browsers that do not support JavaScript.
     * The default value is true.
     * @param value - The value to set.
     */
    setIsJsBrowserCompatible(value: boolean) : void;
    /**
     * Indicates whether the output HTML is compatible with mobile devices.
     * The default value is false.
     */
    isMobileCompatible() : boolean;
    /**
     * Indicates whether the output HTML is compatible with mobile devices.
     * The default value is false.
     * @param value - The value to set.
     */
    setIsMobileCompatible(value: boolean) : void;
    /**
     * Gets or sets the additional css styles for the formatter.
     * Only works when <see cref="SaveAsSingleFile"/> is True.
     * <example>
     * CssStyles="body { padding: 5px }";
     * </example>
     */
    getCssStyles() : string;
    /**
     * Gets or sets the additional css styles for the formatter.
     * Only works when <see cref="SaveAsSingleFile"/> is True.
     * <example>
     * CssStyles="body { padding: 5px }";
     * </example>
     * @param value - The value to set.
     */
    setCssStyles(value: string) : void;
    /**
     * Indicates whether to hide overflow text when the cell format is set to wrap text.
     * The default value is false
     */
    getHideOverflowWrappedText() : boolean;
    /**
     * Indicates whether to hide overflow text when the cell format is set to wrap text.
     * The default value is false
     * @param value - The value to set.
     */
    setHideOverflowWrappedText(value: boolean) : void;
    /**
     * Indicates whether the table borders are collapsed.
     * The default value is true.
     */
    isBorderCollapsed() : boolean;
    /**
     * Indicates whether the table borders are collapsed.
     * The default value is true.
     * @param value - The value to set.
     */
    setIsBorderCollapsed(value: boolean) : void;
}

/**
 * Represents a smart tag.
 */
export class SmartTag {
    /**
     * Indicates whether the smart tag is deleted.
     */
    getDeleted() : boolean;
    /**
     * Indicates whether the smart tag is deleted.
     * @param value - The value to set.
     */
    setDeleted(value: boolean) : void;
    /**
     * Gets and set the properties of the smart tag.
     */
    getProperties() : SmartTagPropertyCollection;
    /**
     * Gets and set the properties of the smart tag.
     * @param value - The value to set.
     */
    setProperties(value: SmartTagPropertyCollection) : void;
    /**
     * Gets the namespace URI of the smart tag.
     */
    getUri() : string;
    /**
     * Gets the name of the smart tag.
     */
    getName() : string;
    /**
     * Change the name and  the namespace URI of the smart tag.
     * @param uri - The namespace URI of the smart tag.
     * @param name - The name of the smart tag.
     */
    setLink(uri: string, name: string) : void;
}

/**
 * Represents all smart tags in the cell.
 */
export class SmartTagCollection {
    /**
     * Gets a <see cref="SmartTag"/> object at the specific index
     * @param index - The index.
     * @returns
     * returns a <see cref="SmartTag"/> object.
     */
    get(index: number) : SmartTag;
    /**
     * Gets the row of the cell smart tags.
     */
    getRow() : number;
    /**
     * Gets the column of the cell smart tags.
     */
    getColumn() : number;
    /**
     * Adds a smart tag.
     * @param uri - Specifies the namespace URI of the smart tag
     * @param name - Specifies the name of the smart tag.
     * @returns
     * The index of smart tag in the list.
     */
    add(uri: string, name: string) : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the options of the smart tag.
 */
export class SmartTagOptions {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Indicates whether saving smart tags with the workbook.
     */
    getEmbedSmartTags() : boolean;
    /**
     * Indicates whether saving smart tags with the workbook.
     * @param value - The value to set.
     */
    setEmbedSmartTags(value: boolean) : void;
    /**
     * Represents the show type of smart tag.
     */
    getShowType() : SmartTagShowType;
    /**
     * Represents the show type of smart tag.
     * @param value - The value to set.
     */
    setShowType(value: SmartTagShowType) : void;
}

/**
 * Represents all <see cref="SmartTagCollection"/> object in the worksheet.
 */
export class SmartTagSetting {
    /**
     * Gets a <see cref="SmartTagCollection"/> object by the index.
     * @param index - The index of the <see cref="SmartTagCollection"/> object in the list.
     */
    get(index: number) : SmartTagCollection;
    /**
     * Gets the <see cref="SmartTagCollection"/> object of the cell.
     * @param row - The row index of the cell.
     * @param column - The column index of the cell
     * @returns
     * Returns the <see cref="SmartTagCollection"/> object of the cell.
     * Returns null if there is no any smart tags on the cell.
     */
    get(row: number, column: number) : SmartTagCollection;
    /**
     * Gets the <see cref="SmartTagCollection"/> object of the cell.
     * @param cellName - The name of the cell.
     * @returns
     * Returns the <see cref="SmartTagCollection"/> object of the cell.
     * Returns null if there is no any smart tags on the cell.
     */
    get(cellName: string) : SmartTagCollection;
    /**
     * Adds a <see cref="SmartTagCollection"/> object to a cell.
     * @param row - The row of the cell.
     * @param column - The column of the cell.
     * @returns
     * Returns index of a <see cref="SmartTagCollection"/> object in the worksheet.
     */
    add(row: number, column: number) : number;
    /**
     * Add a cell smart tags.
     * @param cellName - The name of the cell.
     */
    add(cellName: string) : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the property of the cell smart tag.
 */
export class SmartTagProperty {
    /**
     * Gets and sets the name of the property.
     */
    getName() : string;
    /**
     * Gets and sets the name of the property.
     * @param value - The value to set.
     */
    setName(value: string) : void;
    /**
     * Gets and sets the value of the property.
     */
    getValue() : string;
    /**
     * Gets and sets the value of the property.
     * @param value - The value to set.
     */
    setValue(value: string) : void;
}

/**
 * Represents all properties of cell smart tag.
 */
export class SmartTagPropertyCollection {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Gets a <see cref="SmartTagProperty"/> object.
     * @param index - The index
     * @returns
     * Returns a <see cref="SmartTagProperty"/> object.
     */
    get(index: number) : SmartTagProperty;
    /**
     * Gets a <see cref="SmartTagProperty"/> object by the name of the property.
     * @param name - The name of the property.
     * @returns
     * Returns a <see cref="SmartTagProperty"/> object.
     */
    get(name: string) : SmartTagProperty;
    /**
     * Adds a property of cell's smart tag.
     * @param name - The name of the property
     * @param value - The value of the property.
     * @returns
     * return <see cref="SmartTagProperty"/>
     */
    add(name: string, value: string) : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the show type of the smart tag.
 */
export enum SmartTagShowType {
    /**
     * Indicates that smart tags are enabled and shown
     */
    All = 0,
    /**
     * Indicates that the smart tags are enabled but the indicator not be shown.
     */
    NoSmartTagIndicator = 1,
    /**
     * Indicates that smart tags are disabled and not displayed.
     */
    None = 2,
}

/**
 * Represents the options of saving ods file.
 */
export class OdsSaveOptions extends SaveOptions {
    /**
     * Creates the options of saving ods file.
     */
    constructor();
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: SaveOptions);
    /**
     * Creates the options of saving ods file.
     * @param saveFormat - The file format.         /// It should be <see cref="SaveFormat.Ods"/>, <see cref="SaveFormat.Ots"/>,         /// <see cref="SaveFormat.Fods"/> or <see cref="SaveFormat.Sxc"/>,         /// otherwise the saved format will be set as <see cref="SaveFormat.Ods"/> automatically.
     */
    constructor(saveFormat: SaveFormat);
    /**
     * Gets and sets the generator of the ods file.
     */
    getGeneratorType() : OdsGeneratorType;
    /**
     * Gets and sets the generator of the ods file.
     * @param value - The value to set.
     */
    setGeneratorType(value: OdsGeneratorType) : void;
    /**
     * Indicates whether the ods file should be saved as ODF format version 1.1. Default is false.
     * 
     * @remarks
     * NOTE: This member is now obsolete. Instead,
     * please use OdsSaveOptions.OdfStrictVersion property.
     * This method will be removed 12 months later since February 2024.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use OdsSaveOptions.OdfStrictVersion property instead.
     */
    isStrictSchema11() : boolean;
    /**
     * Indicates whether the ods file should be saved as ODF format version 1.1. Default is false.
     * @param value - The value to set.
     * 
     * @remarks
     * NOTE: This member is now obsolete. Instead,
     * please use OdsSaveOptions.OdfStrictVersion property.
     * This method will be removed 12 months later since February 2024.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use OdsSaveOptions.OdfStrictVersion property instead.
     */
    setIsStrictSchema11(value: boolean) : void;
    /**
     * Gets and sets the ODF version.
     */
    getOdfStrictVersion() : OpenDocumentFormatVersionType;
    /**
     * Gets and sets the ODF version.
     * @param value - The value to set.
     */
    setOdfStrictVersion(value: OpenDocumentFormatVersionType) : void;
}

/**
 * Represents the paste special options.
 */
export class PasteOptions {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * The paste special type.
     */
    getPasteType() : PasteType;
    /**
     * The paste special type.
     * @param value - The value to set.
     */
    setPasteType(value: PasteType) : void;
    /**
     * Indicates whether skips blank cells.
     */
    getSkipBlanks() : boolean;
    /**
     * Indicates whether skips blank cells.
     * @param value - The value to set.
     */
    setSkipBlanks(value: boolean) : void;
    /**
     * True means only copying visible cells.
     */
    getOnlyVisibleCells() : boolean;
    /**
     * True means only copying visible cells.
     * @param value - The value to set.
     */
    setOnlyVisibleCells(value: boolean) : void;
    /**
     * True to transpose rows and columns when the range is pasted. The default value is False.
     */
    getTranspose() : boolean;
    /**
     * True to transpose rows and columns when the range is pasted. The default value is False.
     * @param value - The value to set.
     */
    setTranspose(value: boolean) : void;
    /**
     * Gets and sets the operation type when pasting range.
     */
    getOperationType() : PasteOperationType;
    /**
     * Gets and sets the operation type when pasting range.
     * @param value - The value to set.
     */
    setOperationType(value: PasteOperationType) : void;
    /**
     * Ingore links to the original file.
     */
    getIgnoreLinksToOriginalFile() : boolean;
    /**
     * Ingore links to the original file.
     * @param value - The value to set.
     */
    setIgnoreLinksToOriginalFile(value: boolean) : void;
}

/**
 * Represents the options for saving pdf file.
 */
export class PdfSaveOptions extends PaginatedSaveOptions {
    /**
     * Creates the options for saving pdf file.
     */
    constructor();
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: PaginatedSaveOptions);
    /**
     * True to embed true type fonts.
     * Affects only ASCII characters 32-127.
     * Fonts for character codes greater than 127 are always embedded.
     * Fonts are always embedded for PDF/A-1a, PDF/A-1b standard.
     * Default is true.
     */
    getEmbedStandardWindowsFonts() : boolean;
    /**
     * True to embed true type fonts.
     * Affects only ASCII characters 32-127.
     * Fonts for character codes greater than 127 are always embedded.
     * Fonts are always embedded for PDF/A-1a, PDF/A-1b standard.
     * Default is true.
     * @param value - The value to set.
     */
    setEmbedStandardWindowsFonts(value: boolean) : void;
    /**
     * Gets and sets the <see cref ="PdfBookmarkEntry">PdfBookmarkEntry</see> object.
     */
    getBookmark() : PdfBookmarkEntry;
    /**
     * Gets and sets the <see cref ="PdfBookmarkEntry">PdfBookmarkEntry</see> object.
     * @param value - The value to set.
     */
    setBookmark(value: PdfBookmarkEntry) : void;
    /**
     * Gets or sets the PDF standards compliance level for output documents.
     * 
     * @remarks
     * Default is Pdf17.
     */
    getCompliance() : PdfCompliance;
    /**
     * Gets or sets the PDF standards compliance level for output documents.
     * @param value - The value to set.
     * 
     * @remarks
     * Default is Pdf17.
     */
    setCompliance(value: PdfCompliance) : void;
    /**
     * Set this options, when security is need in xls2pdf result.
     */
    getSecurityOptions() : PdfSecurityOptions;
    /**
     * Set this options, when security is need in xls2pdf result.
     * @param value - The value to set.
     */
    setSecurityOptions(value: PdfSecurityOptions) : void;
    /**
     * Indicates whether to calculate formulas before saving pdf file.
     * 
     * @remarks
     * The default value is false.
     */
    getCalculateFormula() : boolean;
    /**
     * Indicates whether to calculate formulas before saving pdf file.
     * @param value - The value to set.
     * 
     * @remarks
     * The default value is false.
     */
    setCalculateFormula(value: boolean) : void;
    /**
     * Indicate the compression algorithm
     */
    getPdfCompression() : PdfCompressionCore;
    /**
     * Indicate the compression algorithm
     * @param value - The value to set.
     */
    setPdfCompression(value: PdfCompressionCore) : void;
    /**
     * Gets and sets the time of generating the pdf document.
     * 
     * @remarks
     * if it is not be set, it will be the time of generating the pdf.
     */
    getCreatedTime() : Date;
    /**
     * Gets and sets the time of generating the pdf document.
     * @param value - The value to set.
     * 
     * @remarks
     * if it is not be set, it will be the time of generating the pdf.
     */
    setCreatedTime(value: Date) : void;
    /**
     * Gets and sets producer of generated pdf document.
     * 
     * @remarks
     * If the value is null, or a valid LICENSE is not set, string Aspose.Cells vVERSION will be used.
     */
    getProducer() : string;
    /**
     * Gets and sets producer of generated pdf document.
     * @param value - The value to set.
     * 
     * @remarks
     * If the value is null, or a valid LICENSE is not set, string Aspose.Cells vVERSION will be used.
     */
    setProducer(value: string) : void;
    /**
     * Gets and sets pdf optimization type.
     * 
     * @remarks
     * Default value is <see cref="PdfOptimizationType.Standard"/>
     */
    getOptimizationType() : PdfOptimizationType;
    /**
     * Gets and sets pdf optimization type.
     * @param value - The value to set.
     * 
     * @remarks
     * Default value is <see cref="PdfOptimizationType.Standard"/>
     */
    setOptimizationType(value: PdfOptimizationType) : void;
    /**
     * Gets or sets a value determining the way <see cref="CustomDocumentPropertyCollection"/> are exported to PDF file. Default value is None.
     */
    getCustomPropertiesExport() : PdfCustomPropertiesExport;
    /**
     * Gets or sets a value determining the way <see cref="CustomDocumentPropertyCollection"/> are exported to PDF file. Default value is None.
     * @param value - The value to set.
     */
    setCustomPropertiesExport(value: PdfCustomPropertiesExport) : void;
    /**
     * Indicates whether to export document structure.
     */
    getExportDocumentStructure() : boolean;
    /**
     * Indicates whether to export document structure.
     * @param value - The value to set.
     */
    setExportDocumentStructure(value: boolean) : void;
    /**
     * Indicates whether the window's title bar should display the document title.
     * 
     * @remarks
     * If false, the title bar should instead display the name of the PDF file.
     * Default value is false.
     */
    getDisplayDocTitle() : boolean;
    /**
     * Indicates whether the window's title bar should display the document title.
     * @param value - The value to set.
     * 
     * @remarks
     * If false, the title bar should instead display the name of the PDF file.
     * Default value is false.
     */
    setDisplayDocTitle(value: boolean) : void;
    /**
     * Gets or sets embedded font encoding in pdf.
     * 
     * @remarks
     * Default value is <see cref="PdfFontEncoding.Identity"/>
     */
    getFontEncoding() : PdfFontEncoding;
    /**
     * Gets or sets embedded font encoding in pdf.
     * @param value - The value to set.
     * 
     * @remarks
     * Default value is <see cref="PdfFontEncoding.Identity"/>
     */
    setFontEncoding(value: PdfFontEncoding) : void;
    /**
     * Gets or sets watermark to output.
     */
    getWatermark() : RenderingWatermark;
    /**
     * Gets or sets watermark to output.
     * @param value - The value to set.
     */
    setWatermark(value: RenderingWatermark) : void;
    /**
     * Indicates whether to embed attachment for Ole objects in Excel.
     * 
     * @remarks
     * Default value is false. The value must be false when PDF/A compliance is set or pdf encryption is enabled.
     */
    getEmbedAttachments() : boolean;
    /**
     * Indicates whether to embed attachment for Ole objects in Excel.
     * @param value - The value to set.
     * 
     * @remarks
     * Default value is false. The value must be false when PDF/A compliance is set or pdf encryption is enabled.
     */
    setEmbedAttachments(value: boolean) : void;
    /**
     * Sets desired PPI(pixels per inch) of resample images and jpeg quality.
     * All images will be converted to JPEG with the specified quality setting,
     * and images that are greater than the specified PPI (pixels per inch) will be resampled.
     * @param desiredPPI - Desired pixels per inch. 220 high quality. 150 screen quality. 96 email quality.
     * @param jpegQuality - 0 - 100% JPEG quality.
     */
    setImageResample(desiredPPI: number, jpegQuality: number) : void;
}

/**
 * Represents a bevel of a shape
 */
export class Bevel {
    /**
     * Gets and sets the width of the bevel, or how far into the shape it is applied.
     * In unit of Points.
     */
    getWidth() : number;
    /**
     * Gets and sets the width of the bevel, or how far into the shape it is applied.
     * In unit of Points.
     * @param value - The value to set.
     */
    setWidth(value: number) : void;
    /**
     * Gets and sets the height of the bevel, or how far above the shape it is applied.
     * In unit of Points.
     */
    getHeight() : number;
    /**
     * Gets and sets the height of the bevel, or how far above the shape it is applied.
     * In unit of Points.
     * @param value - The value to set.
     */
    setHeight(value: number) : void;
    /**
     * Gets and sets the preset bevel type.
     */
    getType() : BevelPresetType;
    /**
     * Gets and sets the preset bevel type.
     * @param value - The value to set.
     */
    setType(value: BevelPresetType) : void;
}

/**
 * Represents a preset for a type of bevel which can be applied to a shape in 3D.
 */
export enum BevelType {
    /**
     * No bevel
     */
    None = 0,
    /**
     * Angle
     */
    Angle = 1,
    /**
     * Art deco
     */
    ArtDeco = 2,
    /**
     * Circle
     */
    Circle = 3,
    /**
     * Convex
     */
    Convex = 4,
    /**
     * Cool slant
     */
    CoolSlant = 5,
    /**
     * Cross
     */
    Cross = 6,
    /**
     * Divot
     */
    Divot = 7,
    /**
     * Hard edge
     */
    HardEdge = 8,
    /**
     * Relaxed inset
     */
    RelaxedInset = 9,
    /**
     * Riblet
     */
    Riblet = 10,
    /**
     * Slope
     */
    Slope = 11,
    /**
     * Soft round
     */
    SoftRound = 12,
}

/**
 * This class specifies the 3D shape properties for a chart element or shape.
 */
export class Format3D {
    /**
     * Gets the <see cref="Bevel"/> object that holds the properties associated with defining a bevel on the top or front face of a shape.
     */
    getTopBevel() : Bevel;
    /**
     * Gets and sets the material type which is combined with the lighting properties to give the final look and feel of a shape.
     * Default value is PresetMaterialType.WarmMatte.
     */
    getSurfaceMaterialType() : PresetMaterialType;
    /**
     * Gets and sets the material type which is combined with the lighting properties to give the final look and feel of a shape.
     * Default value is PresetMaterialType.WarmMatte.
     * @param value - The value to set.
     */
    setSurfaceMaterialType(value: PresetMaterialType) : void;
    /**
     * Gets and sets the lighting type which is to be applied to the scene of the shape.
     * Default value is LightRigType.ThreePoint.
     */
    getSurfaceLightingType() : LightRigType;
    /**
     * Gets and sets the lighting type which is to be applied to the scene of the shape.
     * Default value is LightRigType.ThreePoint.
     * @param value - The value to set.
     */
    setSurfaceLightingType(value: LightRigType) : void;
    /**
     * Gets and sets the lighting angle. Range from 0 to 359.9 degrees.
     */
    getLightingAngle() : number;
    /**
     * Gets and sets the lighting angle. Range from 0 to 359.9 degrees.
     * @param value - The value to set.
     */
    setLightingAngle(value: number) : void;
    /**
     * Indicates if the shape has top bevel data.
     */
    hasTopBevelData() : boolean;
}

/**
 * This class specifies a glow effect, in which a color blurred outline
 * is added outside the edges of the object.
 */
export class GlowEffect {
    /**
     * Gets the color of the glow effect.
     */
    getColor() : CellsColor;
    /**
     * Gets the color of the glow effect.
     * @param value - The value to set.
     */
    setColor(value: CellsColor) : void;
    /**
     * Gets and sets the radius of the glow, in unit of points.
     */
    getSize() : number;
    /**
     * Gets and sets the radius of the glow, in unit of points.
     * @param value - The value to set.
     */
    setSize(value: number) : void;
    /**
     * Gets and sets the degree of transparency of the glow effect. Range from 0.0 (opaque) to 1.0 (clear).
     */
    getTransparency() : number;
    /**
     * Gets and sets the degree of transparency of the glow effect. Range from 0.0 (opaque) to 1.0 (clear).
     * @param value - The value to set.
     */
    setTransparency(value: number) : void;
}

/**
 * Represent different algorithmic methods for setting all camera properties, including position.
 */
export enum PresetCameraType {
    /**
     */
    IsometricBottomDown = 0,
    /**
     */
    IsometricBottomUp = 1,
    /**
     */
    IsometricLeftDown = 2,
    /**
     */
    IsometricLeftUp = 3,
    /**
     */
    IsometricOffAxis1Left = 4,
    /**
     */
    IsometricOffAxis1Right = 5,
    /**
     */
    IsometricOffAxis1Top = 6,
    /**
     */
    IsometricOffAxis2Left = 7,
    /**
     */
    IsometricOffAxis2Right = 8,
    /**
     */
    IsometricOffAxis2Top = 9,
    /**
     */
    IsometricOffAxis3Bottom = 10,
    /**
     */
    IsometricOffAxis3Left = 11,
    /**
     */
    IsometricOffAxis3Right = 12,
    /**
     */
    IsometricOffAxis4Bottom = 13,
    /**
     */
    IsometricOffAxis4Left = 14,
    /**
     */
    IsometricOffAxis4Right = 15,
    /**
     */
    IsometricRightDown = 16,
    /**
     */
    IsometricRightUp = 17,
    /**
     */
    IsometricTopDown = 18,
    /**
     */
    IsometricTopUp = 19,
    /**
     */
    LegacyObliqueBottom = 20,
    /**
     */
    LegacyObliqueBottomLeft = 21,
    /**
     */
    LegacyObliqueBottomRight = 22,
    /**
     */
    LegacyObliqueFront = 23,
    /**
     */
    LegacyObliqueLeft = 24,
    /**
     */
    LegacyObliqueRight = 25,
    /**
     */
    LegacyObliqueTop = 26,
    /**
     */
    LegacyObliqueTopLeft = 27,
    /**
     */
    LegacyObliqueTopRight = 28,
    /**
     */
    LegacyPerspectiveBottom = 29,
    /**
     */
    LegacyPerspectiveBottomLeft = 30,
    /**
     */
    LegacyPerspectiveBottomRight = 31,
    /**
     */
    LegacyPerspectiveFront = 32,
    /**
     */
    LegacyPerspectiveLeft = 33,
    /**
     */
    LegacyPerspectiveRight = 34,
    /**
     */
    LegacyPerspectiveTop = 35,
    /**
     */
    LegacyPerspectiveTopLeft = 36,
    /**
     */
    LegacyPerspectiveTopRight = 37,
    /**
     */
    ObliqueBottom = 38,
    /**
     */
    ObliqueBottomLeft = 39,
    /**
     */
    ObliqueBottomRight = 40,
    /**
     */
    ObliqueLeft = 41,
    /**
     */
    ObliqueRight = 42,
    /**
     */
    ObliqueTop = 43,
    /**
     */
    ObliqueTopLeft = 44,
    /**
     */
    ObliqueTopRight = 45,
    /**
     */
    OrthographicFront = 46,
    /**
     */
    PerspectiveAbove = 47,
    /**
     */
    PerspectiveAboveLeftFacing = 48,
    /**
     */
    PerspectiveAboveRightFacing = 49,
    /**
     */
    PerspectiveBelow = 50,
    /**
     */
    PerspectiveContrastingLeftFacing = 51,
    /**
     */
    PerspectiveContrastingRightFacing = 52,
    /**
     */
    PerspectiveFront = 53,
    /**
     */
    PerspectiveHeroicExtremeLeftFacing = 54,
    /**
     */
    PerspectiveHeroicExtremeRightFacing = 55,
    /**
     */
    PerspectiveHeroicLeftFacing = 56,
    /**
     */
    PerspectiveHeroicRightFacing = 57,
    /**
     */
    PerspectiveLeft = 58,
    /**
     */
    PerspectiveRelaxed = 59,
    /**
     */
    PerspectiveRelaxedModerately = 60,
    /**
     */
    PerspectiveRight = 61,
}

/**
 * Represents preset shadow type.
 */
export enum PresetShadowType {
    /**
     * No shadow.
     */
    NoShadow = 0,
    /**
     * Custom shadow.
     */
    Custom = 1,
    /**
     * Outer shadow offset diagonal bottom right.
     */
    OffsetDiagonalBottomRight = 2,
    /**
     * Outer shadow offset bottom.
     */
    OffsetBottom = 3,
    /**
     * Outer shadow offset diagonal bottom left.
     */
    OffsetDiagonalBottomLeft = 4,
    /**
     * Outer shadow offset right.
     */
    OffsetRight = 5,
    /**
     * Outer shadow offset center.
     */
    OffsetCenter = 6,
    /**
     * Outer shadow offset left.
     */
    OffsetLeft = 7,
    /**
     * Outer shadow offset diagonal top right.
     */
    OffsetDiagonalTopRight = 8,
    /**
     * Outer shadow offset top.
     */
    OffsetTop = 9,
    /**
     * Outer shadow offset diagonal top left.
     */
    OffsetDiagonalTopLeft = 10,
    /**
     * Inner shadow inside diagonal top Left.
     */
    InsideDiagonalTopLeft = 11,
    /**
     * Inner shadow inside top.
     */
    InsideTop = 12,
    /**
     * Inner shadow inside diagonal top right.
     */
    InsideDiagonalTopRight = 13,
    /**
     * Inner shadow inside left.
     */
    InsideLeft = 14,
    /**
     * Inner shadow inside center.
     */
    InsideCenter = 15,
    /**
     * Inner shadow inside right.
     */
    InsideRight = 16,
    /**
     * Inner shadow inside diagonal bottom left.
     */
    InsideDiagonalBottomLeft = 17,
    /**
     * Inner shadow inside bottom.
     */
    InsideBottom = 18,
    /**
     * Inner shadow inside diagonal bottom right.
     */
    InsideDiagonalBottomRight = 19,
    /**
     * Outer shadow perspective diagonal upper left.
     */
    PerspectiveDiagonalUpperLeft = 20,
    /**
     * Outer shadow perspective diagonal upper right.
     */
    PerspectiveDiagonalUpperRight = 21,
    /**
     * Outer shadow below.
     */
    Below = 22,
    /**
     * Outer shadow perspective diagonal lower left.
     */
    PerspectiveDiagonalLowerLeft = 23,
    /**
     * Outer shadow perspective diagonal lower right.
     */
    PerspectiveDiagonalLowerRight = 24,
}

/**
 * This class specifies a reflection effect.
 */
export class ReflectionEffect {
    /**
     * Gets and sets the preset reflection effect.
     */
    getType() : ReflectionEffectType;
    /**
     * Gets and sets the preset reflection effect.
     * @param value - The value to set.
     */
    setType(value: ReflectionEffectType) : void;
    /**
     * Gets and sets the degree of the starting reflection transparency as a value from 0.0 (opaque) through 1.0 (clear).
     */
    getTransparency() : number;
    /**
     * Gets and sets the degree of the starting reflection transparency as a value from 0.0 (opaque) through 1.0 (clear).
     * @param value - The value to set.
     */
    setTransparency(value: number) : void;
    /**
     * Gets and sets the end position (along the alpha gradient ramp) of the end alpha value,in unit of percentage
     */
    getSize() : number;
    /**
     * Gets and sets the end position (along the alpha gradient ramp) of the end alpha value,in unit of percentage
     * @param value - The value to set.
     */
    setSize(value: number) : void;
    /**
     * Gets and sets the blur radius,in unit of points.
     */
    getBlur() : number;
    /**
     * Gets and sets the blur radius,in unit of points.
     * @param value - The value to set.
     */
    setBlur(value: number) : void;
    /**
     * Gets and sets the direction of the alpha gradient ramp relative to the shape itself.
     */
    getDirection() : number;
    /**
     * Gets and sets the direction of the alpha gradient ramp relative to the shape itself.
     * @param value - The value to set.
     */
    setDirection(value: number) : void;
    /**
     * Gets and sets how far to distance the shadow,in unit of points.
     */
    getDistance() : number;
    /**
     * Gets and sets how far to distance the shadow,in unit of points.
     * @param value - The value to set.
     */
    setDistance(value: number) : void;
    /**
     * Gets and sets the direction to offset the reflection.
     */
    getFadeDirection() : number;
    /**
     * Gets and sets the direction to offset the reflection.
     * @param value - The value to set.
     */
    setFadeDirection(value: number) : void;
    /**
     * Gets and sets if the reflection should rotate with the shape.
     */
    getRotWithShape() : boolean;
    /**
     * Gets and sets if the reflection should rotate with the shape.
     * @param value - The value to set.
     */
    setRotWithShape(value: boolean) : void;
}

/**
 * This class specifies the shadow effect of the chart element or shape.
 */
export class ShadowEffect {
    /**
     * Gets and sets the preset shadow type of the shadow.
     */
    getPresetType() : PresetShadowType;
    /**
     * Gets and sets the preset shadow type of the shadow.
     * @param value - The value to set.
     */
    setPresetType(value: PresetShadowType) : void;
    /**
     * Gets and sets the color of the shadow.
     */
    getColor() : CellsColor;
    /**
     * Gets and sets the color of the shadow.
     * @param value - The value to set.
     */
    setColor(value: CellsColor) : void;
    /**
     * Gets and sets the degree of transparency of the shadow. Range from 0.0 (opaque) to 1.0 (clear).
     */
    getTransparency() : number;
    /**
     * Gets and sets the degree of transparency of the shadow. Range from 0.0 (opaque) to 1.0 (clear).
     * @param value - The value to set.
     */
    setTransparency(value: number) : void;
    /**
     * Gets and sets the size of the shadow. Range from 0 to 2.0.
     * Meaningless in inner shadow.
     */
    getSize() : number;
    /**
     * Gets and sets the size of the shadow. Range from 0 to 2.0.
     * Meaningless in inner shadow.
     * @param value - The value to set.
     */
    setSize(value: number) : void;
    /**
     * Gets and sets the blur of the shadow. Range from 0 to 100 points.
     */
    getBlur() : number;
    /**
     * Gets and sets the blur of the shadow. Range from 0 to 100 points.
     * @param value - The value to set.
     */
    setBlur(value: number) : void;
    /**
     * Gets and sets the lighting angle. Range from 0 to 359.9 degrees.
     */
    getAngle() : number;
    /**
     * Gets and sets the lighting angle. Range from 0 to 359.9 degrees.
     * @param value - The value to set.
     */
    setAngle(value: number) : void;
    /**
     * Gets and sets the distance of the shadow. Range from 0 to 200 points.
     */
    getDistance() : number;
    /**
     * Gets and sets the distance of the shadow. Range from 0 to 200 points.
     * @param value - The value to set.
     */
    setDistance(value: number) : void;
}

/**
 * Describes surface appearance of a shape.
 */
export enum PresetMaterialType {
    /**
     * Clear
     */
    Clear = 0,
    /**
     * Dark edge
     */
    DarkEdge = 1,
    /**
     * Flat
     */
    Flat = 2,
    /**
     * Legacy matte
     */
    LegacyMatte = 3,
    /**
     * Legacy metal
     */
    LegacyMetal = 4,
    /**
     * Legacy plastic
     */
    LegacyPlastic = 5,
    /**
     * Legacy wireframe
     */
    LegacyWireframe = 6,
    /**
     * Matte
     */
    Matte = 7,
    /**
     * Metal
     */
    Metal = 8,
    /**
     * Plastic
     */
    Plastic = 9,
    /**
     * Powder
     */
    Powder = 10,
    /**
     * Soft edge
     */
    SoftEdge = 11,
    /**
     * Soft metal
     */
    SoftMetal = 12,
    /**
     * Translucent powder
     */
    TranslucentPowder = 13,
    /**
     * Warm matte
     */
    WarmMatte = 14,
}

/**
 * Represents how to position two rectangles relative to each other.
 */
export enum RectangleAlignmentType {
    /**
     * Bottom
     */
    Bottom = 0,
    /**
     * BottomLeft
     */
    BottomLeft = 1,
    /**
     * BottomRight
     */
    BottomRight = 2,
    /**
     * Center
     */
    Center = 3,
    /**
     * Left
     */
    Left = 4,
    /**
     * Right
     */
    Right = 5,
    /**
     * Top
     */
    Top = 6,
    /**
     * TopLeft
     */
    TopLeft = 7,
    /**
     * TopRight
     */
    TopRight = 8,
}

/**
 * This class specifies the visual shape properties for a chart element or shape.
 */
export class ShapePropertyCollection {
    /**
     * Represents a <see cref="GlowEffect"/> object that specifies glow effect for the chart element or shape.
     */
    getGlowEffect() : GlowEffect;
    /**
     * Represents a <see cref="Format3D"/> object that specifies 3D shape properties for the chart element or shape.
     */
    getFormat3D() : Format3D;
    /**
     * Gets and sets the radius of blur to apply to the edges, in unit of points.
     */
    getSoftEdgeRadius() : number;
    /**
     * Gets and sets the radius of blur to apply to the edges, in unit of points.
     * @param value - The value to set.
     */
    setSoftEdgeRadius(value: number) : void;
    /**
     * Represents a <see cref="ShadowEffect"/> object that specifies shadow effect for the chart element or shape.
     */
    getShadowEffect() : ShadowEffect;
    /**
     * Clears the glow effect of the shape.
     */
    clearGlowEffect() : void;
    /**
     * Indicates if the shape has glow effect data.
     */
    hasGlowEffect() : boolean;
    /**
     * Indicates if the shape has 3d format data.
     */
    hasFormat3D() : boolean;
    /**
     * Clears the 3D shape properties of the shape.
     */
    clearFormat3D() : void;
    /**
     * Clears the shadow effect of the chart element or shape.
     */
    clearShadowEffect() : void;
    /**
     * Indicates if the shape has shadow effect data.
     */
    hasShadowEffect() : boolean;
}

/**
 * Represents the scheme type of the font.
 */
export enum FontSchemeType {
    /**
     * None
     */
    None = 0,
    /**
     * Major scheme.
     */
    Major = 1,
    /**
     * Minor scheme.
     * 
     * @remarks
     * The font's name will be automatically changed with the language.
     */
    Minor = 2,
}

/**
 * Represents all referred cells and areas.
 */
export class ReferredAreaCollection {
    /**
     * @param index - 
     */
    get(index: number) : ReferredArea;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the format in which the workbook is saved.
 */
export enum SaveFormat {
    /**
     * Comma-Separated Values(CSV) text file.
     */
    Csv = 1,
    /**
     * Comma-Separated Values(CSV) text file.
     * NOTE: This member is now obsolete. Instead,
     * please use <see cref="Csv"/> property.
     * This property will be removed 6 months later since April 2021.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use SaveFormat.Csv instead.
     */
    CSV = 1,
    /**
     * Represents an xlsx file.
     */
    Xlsx = 6,
    /**
     * Represents an xlsm file which enable macros.
     */
    Xlsm = 7,
    /**
     * Represents an xltx file.
     */
    Xltx = 8,
    /**
     * Represents an xltm file which enable macros.
     */
    Xltm = 9,
    /**
     * Represents an xltm file which enable addin macros.
     */
    Xlam = 10,
    /**
     * Tab-Separated Values(TSV) text file.
     */
    Tsv = 11,
    /**
     * Tab-Separated Values(TSV) text file.
     * NOTE: This member is now obsolete. Instead,
     * please use <see cref="Tsv"/> property.
     * This property will be removed 6 months later since April 2021.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use FileFormatType.Tsv instead.
     */
    TSV = 11,
    /**
     * Represents a tab delimited text file, same with <see cref="Tsv"/>.
     */
    TabDelimited = 11,
    /**
     * Represents a html file.
     */
    Html = 12,
    /**
     * Represents a mhtml file.
     */
    MHtml = 17,
    /**
     * Open Document Sheet(ODS) file.
     */
    Ods = 14,
    /**
     * Open Document Sheet(ODS) file.
     * NOTE: This member is now obsolete. Instead,
     * please use <see cref="Ods"/> property.
     * This property will be removed 6 months later since April 2021.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use SaveFormat.Ods instead.
     */
    ODS = 14,
    /**
     * Represents an Excel97-2003 xls file.
     */
    Excel97To2003 = 5,
    /**
     * Represents an Excel 2003 xml file.
     */
    SpreadsheetML = 15,
    /**
     * Represents an xlsb file.
     */
    Xlsb = 16,
    /**
     * If saving the file to the disk,the file format accords to the extension of the file name.
     * If saving the file to the stream, the file format is xlsx.
     */
    Auto = 0,
    /**
     * Represents unrecognized format, cannot be saved.
     */
    Unknown = 255,
    /**
     * Represents a Pdf file.
     */
    Pdf = 13,
    /**
     * XPS (XML Paper Specification) format.
     */
    Xps = 20,
    /**
     * XPS (XML Paper Specification) format.
     * NOTE: This member is now obsolete. Instead,
     * please use <see cref="Xps"/> property.
     * This property will be removed 6 months later since April 2021.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use SaveFormat.Xps instead.
     */
    XPS = 20,
    /**
     * Represents a TIFF file.
     */
    Tiff = 21,
    /**
     * Represents a TIFF file.
     * NOTE: This member is now obsolete. Instead,
     * please use <see cref="Tiff"/> property.
     * This property will be removed 6 months later since April 2021.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use SaveFormat.Tiff instead.
     */
    TIFF = 21,
    /**
     * SVG file.
     */
    Svg = 28,
    /**
     * SVG file.
     * NOTE: This member is now obsolete. Instead,
     * please use <see cref="Svg"/> property.
     * This property will be removed 6 months later since April 2021.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use SaveFormat.Svg instead.
     */
    SVG = 28,
    /**
     * Data Interchange Format.
     */
    Dif = 30,
    /**
     * Open Document Template Sheet(OTS) file.
     */
    Ots = 31,
    /**
     * Excel 97-2003 template file.
     */
    Xlt = 32,
    /**
     * Represents a simple xml file.
     */
    Xml = 51,
    /**
     * Represents a numbers file.
     * 
     * @remarks
     * Not supported.
     */
    Numbers = 56,
    /**
     * Represents markdown document.
     */
    Markdown = 57,
    /**
     * Represents OpenDocument Flat XML Spreadsheet (.fods) file format.
     */
    Fods = 59,
    /**
     * Represents OpenDocument Flat XML Spreadsheet (.fods) file format.
     * NOTE: This member is now obsolete. Instead,
     * please use <see cref="Fods"/> property.
     * This property will be removed 6 months later since April 2021.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use SaveFormat.Fods instead.
     */
    FODS = 59,
    /**
     * Represents StarOffice Calc Spreadsheet (.sxc) file format.
     */
    Sxc = 60,
    /**
     * Represents StarOffice Calc Spreadsheet (.sxc) file format.
     * NOTE: This member is now obsolete. Instead,
     * please use <see cref="Sxc"/> property.
     * This property will be removed 6 months later since April 2021.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use SaveFormat.Sxc instead.
     */
    SXC = 60,
    /**
     * Represents .pptx file.
     */
    Pptx = 61,
    /**
     * Represents .docx file.
     */
    Docx = 62,
    /**
     * Windows Enhanced Metafile.
     */
    Emf = 258,
    /**
     * JPEG JFIF.
     */
    Jpg = 261,
    /**
     * Portable Network Graphics.
     */
    Png = 262,
    /**
     * Windows Bitmap
     */
    Bmp = 263,
    /**
     * Gif
     */
    Gif = 322,
    /**
     * Json
     */
    Json = 513,
    /**
     * Sql
     */
    SqlScript = 514,
    /**
     * Rrepesents XHtml file.
     */
    XHtml = 771,
    /**
     * Represents Epub file.
     */
    Epub = 772,
    /**
     * Represents Azw3 file.
     */
    Azw3 = 773,
}

/**
 * A sparkline represents a tiny chart or graphic in a worksheet cell that provides a visual representation of data.
 */
export class Sparkline {
    /**
     * Represents the data range of the sparkline.
     */
    getDataRange() : string;
    /**
     * Represents the data range of the sparkline.
     * @param value - The value to set.
     */
    setDataRange(value: string) : void;
    /**
     * Gets the row index of the sparkline.
     */
    getRow() : number;
    /**
     * Gets the column index of the sparkline.
     */
    getColumn() : number;
    /**
     * Converts a sparkline to an image.
     * @param fileName - The image file name.
     * @param options - The image options
     */
    toImage(fileName: string, options: ImageOrPrintOptions) : void;
    /**
     * Converts a sparkline to an image.
     * @param options - The image options.
     * @returns
     * The result stream.
     */
    toImage(options: ImageOrPrintOptions) : Uint8Array;
}

/**
 * Represents the minimum and maximum value types for the sparkline vertical axis.
 */
export enum SparklineAxisMinMaxType {
    /**
     * Automatic for each sparkline.
     */
    AutoIndividual = 0,
    /**
     * Same for all sparklines in the group.
     */
    Group = 1,
    /**
     * Custom value for sparkline.
     */
    Custom = 2,
}

/**
 * Encapsulates a collection of <see cref="Sparkline"/> objects.
 */
export class SparklineCollection {
    /**
     * Gets the <see cref="Sparkline"/> element at the specified index.
     * @param index - The zero based index of the element.
     * @returns
     * The element at the specified index.
     */
    get(index: number) : Sparkline;
    /**
     * Add a sparkline.
     * @param dataRange - Specifies the new data range of the sparkline.
     * @param row - The row index of the location.
     * @param column - The column index of the location.
     */
    add(dataRange: string, row: number, column: number) : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * <see cref="Sparkline"/> is organized into sparkline group. A SparklineGroup contains a variable number of sparkline items.
 * A sparkline group specifies the type, display settings and axis settings for the sparklines.
 */
export class SparklineGroup {
    /**
     * Gets and sets the preset style type of the sparkline group.
     */
    getPresetStyle() : SparklinePresetStyleType;
    /**
     * Gets and sets the preset style type of the sparkline group.
     * @param value - The value to set.
     */
    setPresetStyle(value: SparklinePresetStyleType) : void;
    /**
     * Gets the collection of <see cref="Sparkline"/> object.
     */
    getSparklines() : SparklineCollection;
    /**
     * Indicates the sparkline type of the sparkline group.
     */
    getType() : SparklineType;
    /**
     * Indicates the sparkline type of the sparkline group.
     * @param value - The value to set.
     */
    setType(value: SparklineType) : void;
    /**
     * Indicates how to plot empty cells.
     */
    getPlotEmptyCellsType() : PlotEmptyCellsType;
    /**
     * Indicates how to plot empty cells.
     * @param value - The value to set.
     */
    setPlotEmptyCellsType(value: PlotEmptyCellsType) : void;
    /**
     * Indicates whether to show data in hidden rows and columns.
     */
    getDisplayHidden() : boolean;
    /**
     * Indicates whether to show data in hidden rows and columns.
     * @param value - The value to set.
     */
    setDisplayHidden(value: boolean) : void;
    /**
     * Indicates whether to highlight the highest points of data in the sparkline group.
     */
    getShowHighPoint() : boolean;
    /**
     * Indicates whether to highlight the highest points of data in the sparkline group.
     * @param value - The value to set.
     */
    setShowHighPoint(value: boolean) : void;
    /**
     * Gets and sets the color of the highest points of data in the sparkline group.
     */
    getHighPointColor() : CellsColor;
    /**
     * Gets and sets the color of the highest points of data in the sparkline group.
     * @param value - The value to set.
     */
    setHighPointColor(value: CellsColor) : void;
    /**
     * Indicates whether to highlight the lowest points of data in the sparkline group.
     */
    getShowLowPoint() : boolean;
    /**
     * Indicates whether to highlight the lowest points of data in the sparkline group.
     * @param value - The value to set.
     */
    setShowLowPoint(value: boolean) : void;
    /**
     * Gets and sets the color of the lowest points of data in the sparkline group.
     */
    getLowPointColor() : CellsColor;
    /**
     * Gets and sets the color of the lowest points of data in the sparkline group.
     * @param value - The value to set.
     */
    setLowPointColor(value: CellsColor) : void;
    /**
     * Indicates whether to highlight the negative values on the sparkline group with a different color or marker.
     */
    getShowNegativePoints() : boolean;
    /**
     * Indicates whether to highlight the negative values on the sparkline group with a different color or marker.
     * @param value - The value to set.
     */
    setShowNegativePoints(value: boolean) : void;
    /**
     * Gets and sets the color of the negative values on the sparkline group.
     */
    getNegativePointsColor() : CellsColor;
    /**
     * Gets and sets the color of the negative values on the sparkline group.
     * @param value - The value to set.
     */
    setNegativePointsColor(value: CellsColor) : void;
    /**
     * Indicates whether to highlight the first point of data in the sparkline group.
     */
    getShowFirstPoint() : boolean;
    /**
     * Indicates whether to highlight the first point of data in the sparkline group.
     * @param value - The value to set.
     */
    setShowFirstPoint(value: boolean) : void;
    /**
     * Gets and sets the color of the first point of data in the sparkline group.
     */
    getFirstPointColor() : CellsColor;
    /**
     * Gets and sets the color of the first point of data in the sparkline group.
     * @param value - The value to set.
     */
    setFirstPointColor(value: CellsColor) : void;
    /**
     * Indicates whether to highlight the last point of data in the sparkline group.
     */
    getShowLastPoint() : boolean;
    /**
     * Indicates whether to highlight the last point of data in the sparkline group.
     * @param value - The value to set.
     */
    setShowLastPoint(value: boolean) : void;
    /**
     * Gets and sets the color of the last point of data in the sparkline group.
     */
    getLastPointColor() : CellsColor;
    /**
     * Gets and sets the color of the last point of data in the sparkline group.
     * @param value - The value to set.
     */
    setLastPointColor(value: CellsColor) : void;
    /**
     * Indicates whether to highlight each point in each line sparkline in the sparkline group.
     */
    getShowMarkers() : boolean;
    /**
     * Indicates whether to highlight each point in each line sparkline in the sparkline group.
     * @param value - The value to set.
     */
    setShowMarkers(value: boolean) : void;
    /**
     * Gets and sets the color of points in each line sparkline in the sparkline group.
     */
    getMarkersColor() : CellsColor;
    /**
     * Gets and sets the color of points in each line sparkline in the sparkline group.
     * @param value - The value to set.
     */
    setMarkersColor(value: CellsColor) : void;
    /**
     * Gets and sets the color of the sparklines in the sparkline group.
     */
    getSeriesColor() : CellsColor;
    /**
     * Gets and sets the color of the sparklines in the sparkline group.
     * @param value - The value to set.
     */
    setSeriesColor(value: CellsColor) : void;
    /**
     * Indicates whether the plot data is right to left.
     */
    getPlotRightToLeft() : boolean;
    /**
     * Indicates whether the plot data is right to left.
     * @param value - The value to set.
     */
    setPlotRightToLeft(value: boolean) : void;
    /**
     * Gets and sets the line weight in each line sparkline in the sparkline group, in the unit of points.
     */
    getLineWeight() : number;
    /**
     * Gets and sets the line weight in each line sparkline in the sparkline group, in the unit of points.
     * @param value - The value to set.
     */
    setLineWeight(value: number) : void;
    /**
     * Gets and sets the color of the horizontal axis in the sparkline group.
     */
    getHorizontalAxisColor() : CellsColor;
    /**
     * Gets and sets the color of the horizontal axis in the sparkline group.
     * @param value - The value to set.
     */
    setHorizontalAxisColor(value: CellsColor) : void;
    /**
     * Indicates whether to show the sparkline horizontal axis.
     * The horizontal axis appears if the sparkline has data that crosses the zero axis.
     */
    getShowHorizontalAxis() : boolean;
    /**
     * Indicates whether to show the sparkline horizontal axis.
     * The horizontal axis appears if the sparkline has data that crosses the zero axis.
     * @param value - The value to set.
     */
    setShowHorizontalAxis(value: boolean) : void;
    /**
     * Represents the range that contains the date values for the sparkline data.
     */
    getHorizontalAxisDateRange() : string;
    /**
     * Represents the range that contains the date values for the sparkline data.
     * @param value - The value to set.
     */
    setHorizontalAxisDateRange(value: string) : void;
    /**
     * Represents the vertical axis maximum value type.
     */
    getVerticalAxisMaxValueType() : SparklineAxisMinMaxType;
    /**
     * Represents the vertical axis maximum value type.
     * @param value - The value to set.
     */
    setVerticalAxisMaxValueType(value: SparklineAxisMinMaxType) : void;
    /**
     * Gets and sets the custom maximum value for the vertical axis.
     */
    getVerticalAxisMaxValue() : number;
    /**
     * Gets and sets the custom maximum value for the vertical axis.
     * @param value - The value to set.
     */
    setVerticalAxisMaxValue(value: number) : void;
    /**
     * Represents the vertical axis minimum value type.
     */
    getVerticalAxisMinValueType() : SparklineAxisMinMaxType;
    /**
     * Represents the vertical axis minimum value type.
     * @param value - The value to set.
     */
    setVerticalAxisMinValueType(value: SparklineAxisMinMaxType) : void;
    /**
     * Gets and sets the custom minimum value for the vertical axis.
     */
    getVerticalAxisMinValue() : number;
    /**
     * Gets and sets the custom minimum value for the vertical axis.
     * @param value - The value to set.
     */
    setVerticalAxisMinValue(value: number) : void;
    /**
     * Resets the data range and location range of the sparkline group.
     * This method will clear original sparkline items in the group and creates new sparkline items for the new ranges.
     * @param dataRange - Specifies the new data range of the sparkline group.
     * @param isVertical - Specifies whether to plot the sparklines from the new data range by row or by column.
     * @param locationRange - Specifies where the sparklines to be placed.
     */
    resetRanges(dataRange: string, isVertical: boolean, locationRange: CellArea) : void;
}

/**
 * Encapsulates a collection of <see cref="SparklineGroup"/> objects.
 */
export class SparklineGroupCollection {
    /**
     * Gets the <see cref="SparklineGroup"/> element at the specified index.
     * @param index - The zero based index of the element.
     * @returns
     * The element at the specified index.
     */
    get(index: number) : SparklineGroup;
    /**
     * Adds an <see cref="SparklineGroup"/> with a <see cref="Sparkline"/> to the collection.
     * @param type - Specifies the type of the Sparkline group.
     * @returns
     * <see cref="SparklineGroup"/> object index.
     */
    add(type: SparklineType) : number;
    /**
     * Adds an <see cref="SparklineGroup"/> with <see cref="Sparkline"/> to the collection.
     * @param type - Specifies the type of the Sparkline group.
     * @param dataRange - Specifies the data range of the sparkline group.
     * @param isVertical - Specifies whether to plot the sparklines from the data range by row or by column.
     * @param locationRange - Specifies where the sparklines to be placed.
     * @returns
     * <see cref="SparklineGroup"/> object index.
     */
    add(type: SparklineType, dataRange: string, isVertical: boolean, locationRange: CellArea) : number;
    /**
     * Clears the sparklines that is inside an area of cells.
     * @param cellArea - Specifies the area of cells
     */
    clearSparklines(cellArea: CellArea) : void;
    /**
     * Clears the sparkline groups that overlaps an area of cells.
     * @param cellArea - Specifies the area of cells
     */
    clearSparklineGroups(cellArea: CellArea) : void;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the preset style types for sparkline.
 */
export enum SparklinePresetStyleType {
    /**
     * Style 1
     */
    Style1 = 0,
    /**
     * Style 2
     */
    Style2 = 1,
    /**
     * Style 3
     */
    Style3 = 2,
    /**
     * Style 4
     */
    Style4 = 3,
    /**
     * Style 5
     */
    Style5 = 4,
    /**
     * Style 6
     */
    Style6 = 5,
    /**
     * Style 7
     */
    Style7 = 6,
    /**
     * Style 8
     */
    Style8 = 7,
    /**
     * Style 9
     */
    Style9 = 8,
    /**
     * Style 10
     */
    Style10 = 9,
    /**
     * Style 11
     */
    Style11 = 10,
    /**
     * Style 12
     */
    Style12 = 11,
    /**
     * Style 13
     */
    Style13 = 12,
    /**
     * Style 14
     */
    Style14 = 13,
    /**
     * Style 15
     */
    Style15 = 14,
    /**
     * Style 16
     */
    Style16 = 15,
    /**
     * Style 17
     */
    Style17 = 16,
    /**
     * Style 18
     */
    Style18 = 17,
    /**
     * Style 19
     */
    Style19 = 18,
    /**
     * Style 20
     */
    Style20 = 19,
    /**
     * Style 21
     */
    Style21 = 20,
    /**
     * Style 22
     */
    Style22 = 21,
    /**
     * Style 23
     */
    Style23 = 22,
    /**
     * Style 24
     */
    Style24 = 23,
    /**
     * Style 25
     */
    Style25 = 24,
    /**
     * Style 26
     */
    Style26 = 25,
    /**
     * Style 27
     */
    Style27 = 26,
    /**
     * Style 28
     */
    Style28 = 27,
    /**
     * Style 29
     */
    Style29 = 28,
    /**
     * Style 30
     */
    Style30 = 29,
    /**
     * Style 31
     */
    Style31 = 30,
    /**
     * Style 32
     */
    Style32 = 31,
    /**
     * Style 33
     */
    Style33 = 32,
    /**
     * Style 34
     */
    Style34 = 33,
    /**
     * Style 35
     */
    Style35 = 34,
    /**
     * Style 36
     */
    Style36 = 35,
    /**
     * No preset style.
     */
    Custom = 36,
}

/**
 * Represents the sparkline types.
 */
export enum SparklineType {
    /**
     * Line sparkline.
     */
    Line = 0,
    /**
     * Column sparkline.
     */
    Column = 1,
    /**
     * Win/Loss sparkline.
     */
    Stacked = 2,
}

/**
 * Represents the options for saving Excel 2003 spreadml file.
 */
export class SpreadsheetML2003SaveOptions extends SaveOptions {
    /**
     * Creates the options for saving Excel 2003 spreadml file.
     */
    constructor();
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: SaveOptions);
    /**
     * Causes child elements to be indented.
     * 
     * @remarks
     * The default value is true.
     * If the value is false, it will reduce the size of the xml file
     */
    isIndentedFormatting() : boolean;
    /**
     * Causes child elements to be indented.
     * @param value - The value to set.
     * 
     * @remarks
     * The default value is true.
     * If the value is false, it will reduce the size of the xml file
     */
    setIsIndentedFormatting(value: boolean) : void;
    /**
     * Limit as xls, the max row index is 65535 and the max column index is 255.
     */
    getLimitAsXls() : boolean;
    /**
     * Limit as xls, the max row index is 65535 and the max column index is 255.
     * @param value - The value to set.
     */
    setLimitAsXls(value: boolean) : void;
    /**
     * The default value is false, it means that column index  will be ignored if the cell is contiguous to the previous cell.
     */
    getExportColumnIndexOfCell() : boolean;
    /**
     * The default value is false, it means that column index  will be ignored if the cell is contiguous to the previous cell.
     * @param value - The value to set.
     */
    setExportColumnIndexOfCell(value: boolean) : void;
}

/**
 * Represents all built-in style types.
 */
export enum BuiltinStyleType {
    /**
     */
    TwentyPercentAccent1 = 30,
    /**
     */
    TwentyPercentAccent2 = 34,
    /**
     */
    TwentyPercentAccent3 = 38,
    /**
     */
    TwentyPercentAccent4 = 42,
    /**
     */
    TwentyPercentAccent5 = 46,
    /**
     */
    TwentyPercentAccent6 = 50,
    /**
     */
    FortyPercentAccent1 = 31,
    /**
     */
    FortyPercentAccent2 = 35,
    /**
     */
    FortyPercentAccent3 = 39,
    /**
     */
    FortyPercentAccent4 = 43,
    /**
     */
    FortyPercentAccent5 = 47,
    /**
     */
    FortyPercentAccent6 = 51,
    /**
     */
    SixtyPercentAccent1 = 32,
    /**
     */
    SixtyPercentAccent2 = 36,
    /**
     */
    SixtyPercentAccent3 = 40,
    /**
     */
    SixtyPercentAccent4 = 44,
    /**
     */
    SixtyPercentAccent5 = 48,
    /**
     */
    SixtyPercentAccent6 = 52,
    /**
     */
    Accent1 = 29,
    /**
     */
    Accent2 = 33,
    /**
     */
    Accent3 = 37,
    /**
     */
    Accent4 = 41,
    /**
     */
    Accent5 = 45,
    /**
     */
    Accent6 = 49,
    /**
     */
    Bad = 27,
    /**
     */
    Calculation = 22,
    /**
     */
    CheckCell = 23,
    /**
     */
    Comma = 3,
    /**
     */
    Comma1 = 6,
    /**
     */
    Currency = 4,
    /**
     */
    Currency1 = 7,
    /**
     */
    ExplanatoryText = 53,
    /**
     */
    Good = 26,
    /**
     */
    Header1 = 16,
    /**
     */
    Header2 = 17,
    /**
     */
    Header3 = 18,
    /**
     */
    Header4 = 19,
    /**
     */
    Hyperlink = 8,
    /**
     */
    FollowedHyperlink = 9,
    /**
     */
    Input = 20,
    /**
     */
    LinkedCell = 24,
    /**
     */
    Neutral = 28,
    /**
     */
    Normal = 0,
    /**
     */
    Note = 10,
    /**
     */
    Output = 21,
    /**
     */
    Percent = 5,
    /**
     */
    Title = 15,
    /**
     */
    Total = 25,
    /**
     */
    WarningText = 11,
    /**
     */
    RowLevel = 1,
    /**
     */
    ColumnLevel = 2,
}

/**
 * Represents all types of color.
 */
export class CellsColor {
    /**
     * Gets and set the color which should apply to cell or shape.
     * 
     * @remarks
     * The expression of the color of the cell and the shape is different.
     * For example: the theme color with same tint value will be not same in the cell and the shape.
     */
    isShapeColor() : boolean;
    /**
     * Gets and set the color which should apply to cell or shape.
     * @param value - The value to set.
     * 
     * @remarks
     * The expression of the color of the cell and the shape is different.
     * For example: the theme color with same tint value will be not same in the cell and the shape.
     */
    setIsShapeColor(value: boolean) : void;
    /**
     * The color type.
     */
    getType() : ColorType;
    /**
     * Gets the theme color. Only applies for theme color type.
     */
    getThemeColor() : ThemeColor;
    /**
     * Gets the theme color. Only applies for theme color type.
     * @param value - The value to set.
     */
    setThemeColor(value: ThemeColor) : void;
    /**
     * Gets and sets the color index in the color palette. Only applies of indexed color.
     */
    getColorIndex() : number;
    /**
     * Gets and sets the color index in the color palette. Only applies of indexed color.
     * @param value - The value to set.
     */
    setColorIndex(value: number) : void;
    /**
     * Gets and sets the RGB color.
     */
    getColor() : Color;
    /**
     * Gets and sets the RGB color.
     * @param value - The value to set.
     */
    setColor(value: Color) : void;
    /**
     * Gets and sets the color from a 32-bit ARGB value.
     */
    getArgb() : number;
    /**
     * Gets and sets the color from a 32-bit ARGB value.
     * @param value - The value to set.
     */
    setArgb(value: number) : void;
    /**
     * Gets and sets transparency as a value from 0.0 (opaque) through 1.0 (clear).
     */
    getTransparency() : number;
    /**
     * Gets and sets transparency as a value from 0.0 (opaque) through 1.0 (clear).
     * @param value - The value to set.
     */
    setTransparency(value: number) : void;
    /**
     * Set the tint of the shape color
     * @param tint - 
     */
    setTintOfShapeColor(tint: number) : void;
}

/**
 * Represents the axis type.
 */
export enum AxisType {
    /**
     * Category axis
     */
    Category = 0,
    /**
     * Value axis
     */
    Value = 1,
    /**
     * Series axis
     */
    Series = 2,
}

/**
 * Represents the category axis type.
 */
export enum CategoryType {
    /**
     * AutomaticScale
     */
    AutomaticScale = 0,
    /**
     * CategoryScale
     */
    CategoryScale = 1,
    /**
     * TimeScale
     */
    TimeScale = 2,
}

/**
 * Represents the axis cross type.
 */
export enum CrossType {
    /**
     * Microsoft Excel sets the axis crossing point.
     */
    Automatic = 0,
    /**
     * The axis crosses at the maximum value.
     */
    Maximum = 1,
    /**
     * The axis crosses at the minimum value.
     */
    Minimum = 2,
    /**
     * The axis crosses at the custom value.
     */
    Custom = 3,
}

/**
 * Encapsulates the object that represents the plot area in a chart.
 */
export class PlotArea extends ChartFrame {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: ChartFrame);
    /**
     * Gets or gets the x coordinate of the upper left corner of plot-area bounding box in units of 1/4000 of the chart area.
     * 
     * @remarks
     * <p>The plot-area bounding box includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If the value is not created by MS Excel, please call Chart.Calculate() method before calling this method. </p>
     * <p>The <b>X</b>, <b>Y</b>, <b>Width</b> and <b>Height</b> of <b>PlotArea</b> represents the plot-area
     * bounding box that includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If you want to get actual size of plot area, you should call <b>InnerX</b>, <b>InnerY</b>, <b>InnerWidth</b> and
     * <b>InnerHeight</b> properties.</p>
     * <p>For excel 2007 or latter, the default value is zero. you should call get the value after calling Chart.Calculate().</p>
     */
    getX() : number;
    /**
     * Gets or gets the x coordinate of the upper left corner of plot-area bounding box in units of 1/4000 of the chart area.
     * @param value - The value to set.
     * 
     * @remarks
     * <p>The plot-area bounding box includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If the value is not created by MS Excel, please call Chart.Calculate() method before calling this method. </p>
     * <p>The <b>X</b>, <b>Y</b>, <b>Width</b> and <b>Height</b> of <b>PlotArea</b> represents the plot-area
     * bounding box that includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If you want to get actual size of plot area, you should call <b>InnerX</b>, <b>InnerY</b>, <b>InnerWidth</b> and
     * <b>InnerHeight</b> properties.</p>
     * <p>For excel 2007 or latter, the default value is zero. you should call get the value after calling Chart.Calculate().</p>
     */
    setX(value: number) : void;
    /**
     * Gets or gets the y coordinate of the upper top corner  of plot-area bounding box in units of 1/4000 of the chart area.
     * 
     * @remarks
     * <p>The plot-area bounding box includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If the value is not created by MS Excel, please call Chart.Calculate() method before calling this method. </p>
     * <p>The <b>X</b>, <b>Y</b>, <b>Width</b> and <b>Height</b> of <b>PlotArea</b> represents the plot-area
     * bounding box that includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If you want to get actual size of plot area, you should call <b>InnerX</b>, <b>InnerY</b>, <b>InnerWidth</b> and
     * <b>InnerHeight</b> properties.</p>
     * <p>For excel 2007 or latter, the default value is zero. you should call get the value after calling Chart.Calculate().</p>
     */
    getY() : number;
    /**
     * Gets or gets the y coordinate of the upper top corner  of plot-area bounding box in units of 1/4000 of the chart area.
     * @param value - The value to set.
     * 
     * @remarks
     * <p>The plot-area bounding box includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If the value is not created by MS Excel, please call Chart.Calculate() method before calling this method. </p>
     * <p>The <b>X</b>, <b>Y</b>, <b>Width</b> and <b>Height</b> of <b>PlotArea</b> represents the plot-area
     * bounding box that includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If you want to get actual size of plot area, you should call <b>InnerX</b>, <b>InnerY</b>, <b>InnerWidth</b> and
     * <b>InnerHeight</b> properties.</p>
     * <p>For excel 2007 or latter, the default value is zero. you should call get the value after calling Chart.Calculate().</p>
     */
    setY(value: number) : void;
    /**
     * Gets or sets the height of plot-area bounding box in units of 1/4000 of the chart area.
     * 
     * @remarks
     * <p>The plot-area bounding box includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If the value is not created by MS Excel, please call Chart.Calculate() method before calling this method. </p>
     * <p>The <b>X</b>, <b>Y</b>, <b>Width</b> and <b>Height</b> of <b>PlotArea</b> represents the plot-area
     * bounding box that includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If you want to get actual size of plot area, you should call <b>InnerX</b>, <b>InnerY</b>, <b>InnerWidth</b> and
     * <b>InnerHeight</b> properties.</p>
     * <p>For excel 2007 or latter, the default value is zero. you should call get the value after calling Chart.Calculate().</p>
     */
    getHeight() : number;
    /**
     * Gets or sets the height of plot-area bounding box in units of 1/4000 of the chart area.
     * @param value - The value to set.
     * 
     * @remarks
     * <p>The plot-area bounding box includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If the value is not created by MS Excel, please call Chart.Calculate() method before calling this method. </p>
     * <p>The <b>X</b>, <b>Y</b>, <b>Width</b> and <b>Height</b> of <b>PlotArea</b> represents the plot-area
     * bounding box that includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If you want to get actual size of plot area, you should call <b>InnerX</b>, <b>InnerY</b>, <b>InnerWidth</b> and
     * <b>InnerHeight</b> properties.</p>
     * <p>For excel 2007 or latter, the default value is zero. you should call get the value after calling Chart.Calculate().</p>
     */
    setHeight(value: number) : void;
    /**
     * Gets or sets the width of plot-area bounding box in units of 1/4000 of the chart area.
     * 
     * @remarks
     * <p>The plot-area bounding box includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If the value is not created by MS Excel, please call Chart.Calculate() method before calling this method. </p>
     * <p>The <b>X</b>, <b>Y</b>, <b>Width</b> and <b>Height</b> of <b>PlotArea</b> represents the plot-area
     * bounding box that includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If you want to get actual size of plot area, you should call <b>InnerX</b>, <b>InnerY</b>, <b>InnerWidth</b> and
     * <b>InnerHeight</b> properties.</p>
     * <p>For excel 2007 or latter, the default value is zero. you should call get the value after calling Chart.Calculate().</p>
     */
    getWidth() : number;
    /**
     * Gets or sets the width of plot-area bounding box in units of 1/4000 of the chart area.
     * @param value - The value to set.
     * 
     * @remarks
     * <p>The plot-area bounding box includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If the value is not created by MS Excel, please call Chart.Calculate() method before calling this method. </p>
     * <p>The <b>X</b>, <b>Y</b>, <b>Width</b> and <b>Height</b> of <b>PlotArea</b> represents the plot-area
     * bounding box that includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If you want to get actual size of plot area, you should call <b>InnerX</b>, <b>InnerY</b>, <b>InnerWidth</b> and
     * <b>InnerHeight</b> properties.</p>
     * <p>For excel 2007 or latter, the default value is zero. you should call get the value after calling Chart.Calculate().</p>
     */
    setWidth(value: number) : void;
    /**
     * Gets or gets the x coordinate of the upper top corner of plot area in units of 1/4000 of the chart area.
     * 
     * @remarks
     * <p>The plot-area bounding box includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If the value is not created by MS Excel, please call Chart.Calculate() method before calling this method. </p>
     * <p>The <b>X</b>, <b>Y</b>, <b>Width</b> and <b>Height</b> of <b>PlotArea</b> represents the plot-area
     * bounding box that includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If you want to get actual size of plot area, you should call <b>InnerX</b>, <b>InnerY</b>, <b>InnerWidth</b> and
     * <b>InnerHeight</b> properties.</p>
     * <p>For excel 2007 or latter, the default value is zero. you should call get the value after calling Chart.Calculate().</p>
     */
    getInnerX() : number;
    /**
     * Gets or gets the x coordinate of the upper top corner of plot area in units of 1/4000 of the chart area.
     * @param value - The value to set.
     * 
     * @remarks
     * <p>The plot-area bounding box includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If the value is not created by MS Excel, please call Chart.Calculate() method before calling this method. </p>
     * <p>The <b>X</b>, <b>Y</b>, <b>Width</b> and <b>Height</b> of <b>PlotArea</b> represents the plot-area
     * bounding box that includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If you want to get actual size of plot area, you should call <b>InnerX</b>, <b>InnerY</b>, <b>InnerWidth</b> and
     * <b>InnerHeight</b> properties.</p>
     * <p>For excel 2007 or latter, the default value is zero. you should call get the value after calling Chart.Calculate().</p>
     */
    setInnerX(value: number) : void;
    /**
     * Gets or gets the x coordinate of the upper top corner of plot area in units of 1/4000 of the chart area.
     * 
     * @remarks
     * <p>The plot-area bounding box includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If the value is not created by MS Excel, please call Chart.Calculate() method before calling this method. </p>
     * <p>The <b>X</b>, <b>Y</b>, <b>Width</b> and <b>Height</b> of <b>PlotArea</b> represents the plot-area
     * bounding box that includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If you want to get actual size of plot area, you should call <b>InnerX</b>, <b>InnerY</b>, <b>InnerWidth</b> and
     * <b>InnerHeight</b> properties.</p>
     * <p>For excel 2007 or latter, the default value is zero. you should call get the value after calling Chart.Calculate().</p>
     */
    getInnerY() : number;
    /**
     * Gets or gets the x coordinate of the upper top corner of plot area in units of 1/4000 of the chart area.
     * @param value - The value to set.
     * 
     * @remarks
     * <p>The plot-area bounding box includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If the value is not created by MS Excel, please call Chart.Calculate() method before calling this method. </p>
     * <p>The <b>X</b>, <b>Y</b>, <b>Width</b> and <b>Height</b> of <b>PlotArea</b> represents the plot-area
     * bounding box that includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If you want to get actual size of plot area, you should call <b>InnerX</b>, <b>InnerY</b>, <b>InnerWidth</b> and
     * <b>InnerHeight</b> properties.</p>
     * <p>For excel 2007 or latter, the default value is zero. you should call get the value after calling Chart.Calculate().</p>
     */
    setInnerY(value: number) : void;
    /**
     * Gets or sets the height of plot area in units of 1/4000 of the chart area.
     * 
     * @remarks
     * <p>The plot-area bounding box includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If the value is not created by MS Excel, please call Chart.Calculate() method before calling this method. </p>
     * <p>The <b>X</b>, <b>Y</b>, <b>Width</b> and <b>Height</b> of <b>PlotArea</b> represents the plot-area
     * bounding box that includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If you want to get actual size of plot area, you should call <b>InnerX</b>, <b>InnerY</b>, <b>InnerWidth</b> and
     * <b>InnerHeight</b> properties.</p>
     * <p>For excel 2007 or latter, the default value is zero. you should call get the value after calling Chart.Calculate().</p>
     */
    getInnerHeight() : number;
    /**
     * Gets or sets the height of plot area in units of 1/4000 of the chart area.
     * @param value - The value to set.
     * 
     * @remarks
     * <p>The plot-area bounding box includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If the value is not created by MS Excel, please call Chart.Calculate() method before calling this method. </p>
     * <p>The <b>X</b>, <b>Y</b>, <b>Width</b> and <b>Height</b> of <b>PlotArea</b> represents the plot-area
     * bounding box that includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If you want to get actual size of plot area, you should call <b>InnerX</b>, <b>InnerY</b>, <b>InnerWidth</b> and
     * <b>InnerHeight</b> properties.</p>
     * <p>For excel 2007 or latter, the default value is zero. you should call get the value after calling Chart.Calculate().</p>
     */
    setInnerHeight(value: number) : void;
    /**
     * Gets or sets the width  of plot area in units of 1/4000 of the chart area.
     * 
     * @remarks
     * <p>The plot-area bounding box includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If the value is not created by MS Excel, please call Chart.Calculate() method before calling this method. </p>
     * <p>The <b>X</b>, <b>Y</b>, <b>Width</b> and <b>Height</b> of <b>PlotArea</b> represents the plot-area
     * bounding box that includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If you want to get actual size of plot area, you should call <b>InnerX</b>, <b>InnerY</b>, <b>InnerWidth</b> and
     * <b>InnerHeight</b> properties.</p>
     * <p>For excel 2007 or latter, the default value is zero. you should call get the value after calling Chart.Calculate().</p>
     */
    getInnerWidth() : number;
    /**
     * Gets or sets the width  of plot area in units of 1/4000 of the chart area.
     * @param value - The value to set.
     * 
     * @remarks
     * <p>The plot-area bounding box includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If the value is not created by MS Excel, please call Chart.Calculate() method before calling this method. </p>
     * <p>The <b>X</b>, <b>Y</b>, <b>Width</b> and <b>Height</b> of <b>PlotArea</b> represents the plot-area
     * bounding box that includes the plot area, tick marks(tick labels), and a small border around the tick marks.
     * If you want to get actual size of plot area, you should call <b>InnerX</b>, <b>InnerY</b>, <b>InnerWidth</b> and
     * <b>InnerHeight</b> properties.</p>
     * <p>For excel 2007 or latter, the default value is zero. you should call get the value after calling Chart.Calculate().</p>
     */
    setInnerWidth(value: number) : void;
    /**
     * Indicates whether the plot area is automatic sized.
     */
    isAutomaticSize() : boolean;
    /**
     * Indicates whether the plot area is automatic sized.
     * @param value - The value to set.
     */
    setIsAutomaticSize(value: boolean) : void;
    /**
     * Set position of the plot area to automatic
     */
    setPositionAuto() : void;
}

/**
 * Represents the base unit for the category axis.
 */
export enum TimeUnit {
    /**
     * Days
     */
    Days = 0,
    /**
     * Months
     */
    Months = 1,
    /**
     * Years
     */
    Years = 2,
}

/**
 * Represents all color type
 */
export enum ColorType {
    /**
     * Automatic color.
     */
    Automatic = 0,
    /**
     * It's automatic color,but the displayed color depends the setting of the OS System.
     * 
     * @remarks
     * Not supported.
     */
    AutomaticIndex = 1,
    /**
     * The RGB color.
     */
    RGB = 2,
    /**
     * The color index in the color palette.
     */
    IndexedColor = 3,
    /**
     * The theme color.
     */
    Theme = 4,
}

/**
 * Represents the master differential formatting records.
 */
export class DxfCollection {
    /**
     * Gets the element at the specified index.
     * @param index - The specified index.
     */
    get(index: number) : Style;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents look at type.
 */
export enum LookAtType {
    /**
     * Cell value Contains the find object.
     */
    Contains = 0,
    /**
     * Cell value Starts with the find object.
     */
    StartWith = 1,
    /**
     * Cell value ends with the find object.
     */
    EndWith = 2,
    /**
     * Cell value is same as the find object.
     */
    EntireContent = 3,
}

/**
 * Represents look in type.
 */
export enum LookInType {
    /**
     * If the cell contains a formula, find object from formula, else find it from the value.
     */
    Formulas = 0,
    /**
     * Only find object from the formatted values.
     */
    Values = 1,
    /**
     * Only find object from the values of cells which do not contains formula.
     */
    ValuesExcludeFormulaCell = 2,
    /**
     * Only find object from the comments.
     */
    Comments = 3,
    /**
     * Only find object from formulas.
     */
    OnlyFormulas = 4,
    /**
     * Only find object from the original values.
     */
    OriginalValues = 5,
}

/**
 * Represent the replace options.
 */
export class ReplaceOptions {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Indicates if the searched string is case sensitive.
     */
    getCaseSensitive() : boolean;
    /**
     * Indicates if the searched string is case sensitive.
     * @param value - The value to set.
     */
    setCaseSensitive(value: boolean) : void;
    /**
     * Indicates whether to match entire cells contents
     */
    getMatchEntireCellContents() : boolean;
    /**
     * Indicates whether to match entire cells contents
     * @param value - The value to set.
     */
    setMatchEntireCellContents(value: boolean) : void;
    /**
     * Indicates whether the searched key is regex. If true then the searched key will be taken as regex.
     */
    getRegexKey() : boolean;
    /**
     * Indicates whether the searched key is regex. If true then the searched key will be taken as regex.
     * @param value - The value to set.
     */
    setRegexKey(value: boolean) : void;
    /**
     * The rich formatted settings for the replaced text.
     */
    getFontSettings() : FontSetting[];
    /**
     * The rich formatted settings for the replaced text.
     * @param value - The value to set.
     */
    setFontSettings(value: FontSetting[]) : void;
}

/**
 * Represents a referred area by the formula.
 */
export class ReferredArea {
    /**
     * Indicates whether this is an external link.
     */
    isExternalLink() : boolean;
    /**
     * Get the external file name if this is an external reference.
     */
    getExternalFileName() : string;
    /**
     * Indicates which sheet this reference is in.
     */
    getSheetName() : string;
    /**
     * Indicates whether this area contains all columns(entire row).
     */
    isEntireRow() : boolean;
    /**
     * Indicates whether this area contains all rows(entire column).
     */
    isEntireColumn() : boolean;
    /**
     * Indicates whether this is an area.
     * 
     * @remarks
     * If this is not an area, only StartRow and StartColumn effect.
     */
    isArea() : boolean;
    /**
     * The end column of the area.
     */
    getEndColumn() : number;
    /**
     * The start column of the area.
     */
    getStartColumn() : number;
    /**
     * The end row of the area.
     */
    getEndRow() : number;
    /**
     * The start row of the area.
     */
    getStartRow() : number;
    /**
     * Returns the reference address of this area.
     * Generally it is the address of the reference which may be used in formula, such as "Sheet1!A1:C3".
     * @returns
     * the reference address of this area.
     */
    toString() : string;
}

/**
 * Represents the arc shape.
 */
export class ArcShape extends Shape {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Shape);
}

/**
 * Encapsulates the object that represents an area format.
 */
export class Area {
    /**
     * Gets or sets the background <see cref="System.Drawing.Color"/> of the <see cref="Area"/>.
     */
    getBackgroundColor() : Color;
    /**
     * Gets or sets the background <see cref="System.Drawing.Color"/> of the <see cref="Area"/>.
     * @param value - The value to set.
     */
    setBackgroundColor(value: Color) : void;
    /**
     * Gets or sets the foreground <see cref="System.Drawing.Color"/>.
     */
    getForegroundColor() : Color;
    /**
     * Gets or sets the foreground <see cref="System.Drawing.Color"/>.
     * @param value - The value to set.
     */
    setForegroundColor(value: Color) : void;
    /**
     * Represents the formatting of the area.
     */
    getFormatting() : FormattingType;
    /**
     * Represents the formatting of the area.
     * @param value - The value to set.
     */
    setFormatting(value: FormattingType) : void;
    /**
     * If the property is true and the value of chart point is a negative number,
     * the foreground color and background color will be exchanged.
     */
    getInvertIfNegative() : boolean;
    /**
     * If the property is true and the value of chart point is a negative number,
     * the foreground color and background color will be exchanged.
     * @param value - The value to set.
     */
    setInvertIfNegative(value: boolean) : void;
    /**
     * Represents a <see cref="FillFormat"/> object that contains fill formatting properties for the specified chart or shape.
     */
    getFillFormat() : FillFormat;
    /**
     * Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
     */
    getTransparency() : number;
    /**
     * Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
     * @param value - The value to set.
     */
    setTransparency(value: number) : void;
}

/**
 * Encapsulates the object that represents a single data series in a chart.
 */
export class Series {
    /**
     * Indicates whether the series is selected or filtered.True represents this series is filtered, and it will not be displayed on the chart.
     */
    isFiltered() : boolean;
    /**
     * Indicates whether the series is selected or filtered.True represents this series is filtered, and it will not be displayed on the chart.
     * @param value - The value to set.
     */
    setIsFiltered(value: boolean) : void;
    /**
     * Represents the properties of layout.
     */
    getLayoutProperties() : SeriesLayoutProperties;
    /**
     * Gets the collection of points in a series in a chart.
     * 
     * @remarks
     * When the chart is Pie of Pie or Bar of Pie, the last point is other point in first pie plot.
     */
    getPoints() : ChartPointCollection;
    /**
     * Represents the background area of Series object.
     */
    getArea() : Area;
    /**
     * Represents border of Series object.
     */
    getBorder() : Line;
    /**
     * Gets or sets the name of the data series.
     */
    getName() : string;
    /**
     * Gets or sets the name of the data series.
     * @param value - The value to set.
     */
    setName(value: string) : void;
    /**
     * Gets the series's name that displays on the chart graph.
     */
    getDisplayName() : string;
    /**
     * Gets the number of the data values.
     */
    getCountOfDataValues() : number;
    /**
     * Indicates whether the data source is vertical.
     */
    isVerticalValues() : boolean;
    /**
     * Represents the Y values of this chart series.
     */
    getValues() : string;
    /**
     * Represents the Y values of this chart series.
     * @param value - The value to set.
     */
    setValues(value: string) : void;
    /**
     * Represents format code of Values's NumberList.
     */
    getValuesFormatCode() : string;
    /**
     * Represents format code of Values's NumberList.
     * @param value - The value to set.
     */
    setValuesFormatCode(value: string) : void;
    /**
     * Represents format code of X Values's NumberList.
     */
    getXValuesFormatCode() : string;
    /**
     * Represents format code of X Values's NumberList.
     * @param value - The value to set.
     */
    setXValuesFormatCode(value: string) : void;
    /**
     * Represents the x values of the chart series.
     */
    getXValues() : string;
    /**
     * Represents the x values of the chart series.
     * @param value - The value to set.
     */
    setXValues(value: string) : void;
    /**
     * Gets or sets the bubble sizes values of the chart series.
     */
    getBubbleSizes() : string;
    /**
     * Gets or sets the bubble sizes values of the chart series.
     * @param value - The value to set.
     */
    setBubbleSizes(value: string) : void;
    /**
     * Returns all the trendlines of this series.
     */
    getTrendLines() : TrendlineCollection;
    /**
     * Represents curve smoothing.
     * True if curve smoothing is turned on for the line chart or scatter chart.
     * Applies only to line and scatter connected by lines charts.
     */
    getSmooth() : boolean;
    /**
     * Represents curve smoothing.
     * True if curve smoothing is turned on for the line chart or scatter chart.
     * Applies only to line and scatter connected by lines charts.
     * @param value - The value to set.
     */
    setSmooth(value: boolean) : void;
    /**
     * True if the series has a shadow.
     */
    getShadow() : boolean;
    /**
     * True if the series has a shadow.
     * @param value - The value to set.
     */
    setShadow(value: boolean) : void;
    /**
     * True if the series has a three-dimensional appearance.
     * Applies only to bubble charts.
     */
    getHas3DEffect() : boolean;
    /**
     * True if the series has a three-dimensional appearance.
     * Applies only to bubble charts.
     * @param value - The value to set.
     */
    setHas3DEffect(value: boolean) : void;
    /**
     * Gets or sets the 3D shape type used with the 3-D bar or column chart.
     */
    getBar3DShapeType() : Bar3DShapeType;
    /**
     * Gets or sets the 3D shape type used with the 3-D bar or column chart.
     * @param value - The value to set.
     */
    setBar3DShapeType(value: Bar3DShapeType) : void;
    /**
     * Represents the DataLabels object for the specified ASeries.
     */
    getDataLabels() : DataLabels;
    /**
     * Gets or sets a data series' type.
     */
    getType() : ChartType;
    /**
     * Gets or sets a data series' type.
     * @param value - The value to set.
     */
    setType(value: ChartType) : void;
    /**
     * Gets the <see cref="Marker">marker</see>.
     */
    getMarker() : Marker;
    /**
     * Indicates if this series is plotted on second value axis.
     */
    getPlotOnSecondAxis() : boolean;
    /**
     * Indicates if this series is plotted on second value axis.
     * @param value - The value to set.
     */
    setPlotOnSecondAxis(value: boolean) : void;
    /**
     * Represents X direction error bar of the series.
     */
    getXErrorBar() : ErrorBar;
    /**
     * Represents Y direction error bar of the series.
     */
    getYErrorBar() : ErrorBar;
    /**
     * True if the line chart has high-low lines.
     * Applies only to line charts.
     */
    getHasHiLoLines() : boolean;
    /**
     * True if the line chart has high-low lines.
     * Applies only to line charts.
     * @param value - The value to set.
     */
    setHasHiLoLines(value: boolean) : void;
    /**
     * Returns a HiLoLines object that represents the high-low lines for a series on a line chart.
     * Applies only to line charts.
     */
    getHiLoLines() : Line;
    /**
     * True if a stacked column chart or bar chart has series lines or
     * if a Pie of Pie chart or Bar of Pie chart has connector lines between the two sections.
     * Applies only to stacked column charts, bar charts, Pie of Pie charts, or Bar of Pie charts.
     */
    getHasSeriesLines() : boolean;
    /**
     * True if a stacked column chart or bar chart has series lines or
     * if a Pie of Pie chart or Bar of Pie chart has connector lines between the two sections.
     * Applies only to stacked column charts, bar charts, Pie of Pie charts, or Bar of Pie charts.
     * @param value - The value to set.
     */
    setHasSeriesLines(value: boolean) : void;
    /**
     * Returns a SeriesLines object that represents the series lines for a stacked bar chart or a stacked column chart.
     * Applies only to stacked bar and stacked column charts.
     */
    getSeriesLines() : Line;
    /**
     * True if the chart has drop lines.
     * Applies only to line chart or area charts.
     */
    getHasDropLines() : boolean;
    /**
     * True if the chart has drop lines.
     * Applies only to line chart or area charts.
     * @param value - The value to set.
     */
    setHasDropLines(value: boolean) : void;
    /**
     * Returns a <see cref="Line"/> object that represents the drop lines for a series on the line chart or area chart.
     * Applies only to line chart or area charts.
     */
    getDropLines() : Line;
    /**
     * True if a line chart has up and down bars.
     * Applies only to line charts.
     */
    getHasUpDownBars() : boolean;
    /**
     * True if a line chart has up and down bars.
     * Applies only to line charts.
     * @param value - The value to set.
     */
    setHasUpDownBars(value: boolean) : void;
    /**
     * Returns an DropBars object that represents the up bars on a line chart.
     * Applies only to line charts.
     */
    getUpBars() : DropBars;
    /**
     * Returns a <see cref="DropBars"/> object that represents the down bars on a line chart.
     * Applies only to line charts.
     */
    getDownBars() : DropBars;
    /**
     * Represents if the color of points is varied.
     * The chart must contain only one series.
     */
    isColorVaried() : boolean;
    /**
     * Represents if the color of points is varied.
     * The chart must contain only one series.
     * @param value - The value to set.
     */
    setIsColorVaried(value: boolean) : void;
    /**
     * Returns or sets the space between bar or column clusters, as a percentage of the bar or column width.
     * The value of this property must be between 0 and 500.
     */
    getGapWidth() : number;
    /**
     * Returns or sets the space between bar or column clusters, as a percentage of the bar or column width.
     * The value of this property must be between 0 and 500.
     * @param value - The value to set.
     */
    setGapWidth(value: number) : void;
    /**
     * Gets or sets the angle of the first pie-chart or doughnut-chart slice, in degrees (clockwise from vertical).
     * Applies only to pie, 3-D pie, and doughnut charts, 0 to 360.
     */
    getFirstSliceAngle() : number;
    /**
     * Gets or sets the angle of the first pie-chart or doughnut-chart slice, in degrees (clockwise from vertical).
     * Applies only to pie, 3-D pie, and doughnut charts, 0 to 360.
     * @param value - The value to set.
     */
    setFirstSliceAngle(value: number) : void;
    /**
     * Specifies how bars and columns are positioned.
     * Can be a value between – 100 and 100.
     * Applies only to 2-D bar and 2-D column charts.
     */
    getOverlap() : number;
    /**
     * Specifies how bars and columns are positioned.
     * Can be a value between – 100 and 100.
     * Applies only to 2-D bar and 2-D column charts.
     * @param value - The value to set.
     */
    setOverlap(value: number) : void;
    /**
     * Returns or sets the size of the secondary section of either a pie of pie chart or a bar of pie chart,
     * as a percentage of the size of the primary pie.
     * Can be a value from 5 to 200.
     */
    getSecondPlotSize() : number;
    /**
     * Returns or sets the size of the secondary section of either a pie of pie chart or a bar of pie chart,
     * as a percentage of the size of the primary pie.
     * Can be a value from 5 to 200.
     * @param value - The value to set.
     */
    setSecondPlotSize(value: number) : void;
    /**
     * Returns or sets a value that how to determine which data points are in the second pie or bar on a pie of pie or bar of
     * pie chart.
     */
    getSplitType() : ChartSplitType;
    /**
     * Returns or sets a value that how to determine which data points are in the second pie or bar on a pie of pie or bar of
     * pie chart.
     * @param value - The value to set.
     */
    setSplitType(value: ChartSplitType) : void;
    /**
     * Returns or sets a value that shall be used to determine which data points are in the second pie or bar on
     * a pie of pie or bar of pie chart.
     */
    getSplitValue() : number;
    /**
     * Returns or sets a value that shall be used to determine which data points are in the second pie or bar on
     * a pie of pie or bar of pie chart.
     * @param value - The value to set.
     */
    setSplitValue(value: number) : void;
    /**
     * Indicates whether the threshold value is automatic.
     */
    isAutoSplit() : boolean;
    /**
     * Gets or sets the scale factor for bubbles in the specified chart group.
     * It can be an integer value from 0 (zero) to 300,
     * corresponding to a percentage of the default size.
     * Applies only to bubble charts.
     */
    getBubbleScale() : number;
    /**
     * Gets or sets the scale factor for bubbles in the specified chart group.
     * It can be an integer value from 0 (zero) to 300,
     * corresponding to a percentage of the default size.
     * Applies only to bubble charts.
     * @param value - The value to set.
     */
    setBubbleScale(value: number) : void;
    /**
     * Gets or sets what the bubble size represents on a bubble chart.
     * 
     * @remarks
     * BubbleSizeRepresents.SizeIsArea means the value <see cref="Series.BubbleSizes"/> is the area of the bubble.
     * BubbleSizeRepresents.SizeIsWidth means the value <see cref="Series.BubbleSizes"/> is the width of the bubble.
     */
    getSizeRepresents() : BubbleSizeRepresents;
    /**
     * Gets or sets what the bubble size represents on a bubble chart.
     * @param value - The value to set.
     * 
     * @remarks
     * BubbleSizeRepresents.SizeIsArea means the value <see cref="Series.BubbleSizes"/> is the area of the bubble.
     * BubbleSizeRepresents.SizeIsWidth means the value <see cref="Series.BubbleSizes"/> is the width of the bubble.
     */
    setSizeRepresents(value: BubbleSizeRepresents) : void;
    /**
     * True if negative bubbles are shown for the chart group. Valid only for bubble charts.
     */
    getShowNegativeBubbles() : boolean;
    /**
     * True if negative bubbles are shown for the chart group. Valid only for bubble charts.
     * @param value - The value to set.
     */
    setShowNegativeBubbles(value: boolean) : void;
    /**
     * Returns or sets the size of the hole in a doughnut chart group.
     * The hole size is expressed as a percentage of the chart size, between 10 and 90 percent.
     */
    getDoughnutHoleSize() : number;
    /**
     * Returns or sets the size of the hole in a doughnut chart group.
     * The hole size is expressed as a percentage of the chart size, between 10 and 90 percent.
     * @param value - The value to set.
     */
    setDoughnutHoleSize(value: number) : void;
    /**
     * The distance of an open pie slice from the center of the pie chart is expressed as a percentage of the pie diameter.
     */
    getExplosion() : number;
    /**
     * The distance of an open pie slice from the center of the pie chart is expressed as a percentage of the pie diameter.
     * @param value - The value to set.
     */
    setExplosion(value: number) : void;
    /**
     * True if a radar chart has category axis labels. Applies only to radar charts.
     */
    getHasRadarAxisLabels() : boolean;
    /**
     * True if a radar chart has category axis labels. Applies only to radar charts.
     * @param value - The value to set.
     */
    setHasRadarAxisLabels(value: boolean) : void;
    /**
     * True if the series has leader lines.
     */
    getHasLeaderLines() : boolean;
    /**
     * True if the series has leader lines.
     * @param value - The value to set.
     */
    setHasLeaderLines(value: boolean) : void;
    /**
     * Represents leader lines on a chart. Leader lines connect data labels to data points.
     * This object isn’t a collection; there’s no object that represents a single leader line.
     */
    getLeaderLines() : Line;
    /**
     * Gets the legend entry according to this series.
     */
    getLegendEntry() : LegendEntry;
    /**
     * Gets the <see cref="ShapePropertyCollection"/> object that holds the visual shape properties of the Series.
     */
    getShapeProperties() : ShapePropertyCollection;
    /**
     * Moves the series up or down.
     * @param count - The number of moving up or down.         /// Move the series up if this is less than zero;         /// Move the series down if this is greater than zero.
     */
    move(count: number) : void;
}

/**
 * Represents find options.
 */
export class FindOptions {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Indicates if the searched string is case sensitive.
     */
    getCaseSensitive() : boolean;
    /**
     * Indicates if the searched string is case sensitive.
     * @param value - The value to set.
     */
    setCaseSensitive(value: boolean) : void;
    /**
     * Look at type.
     */
    getLookAtType() : LookAtType;
    /**
     * Look at type.
     * @param value - The value to set.
     */
    setLookAtType(value: LookAtType) : void;
    /**
     * Indicates whether the searched range is set.
     */
    isRangeSet() : boolean;
    /**
     * Whether search backward for cells.
     */
    getSearchBackward() : boolean;
    /**
     * Whether search backward for cells.
     * @param value - The value to set.
     */
    setSearchBackward(value: boolean) : void;
    /**
     * Indicates whether search order by rows or columns.
     */
    getSeachOrderByRows() : boolean;
    /**
     * Indicates whether search order by rows or columns.
     * @param value - The value to set.
     */
    setSeachOrderByRows(value: boolean) : void;
    /**
     * Look in type.
     */
    getLookInType() : LookInType;
    /**
     * Look in type.
     * @param value - The value to set.
     */
    setLookInType(value: LookInType) : void;
    /**
     * Indicates whether the searched key is regex.
     * If true the searched key will be taken as regex and parsed. Otherwise the key will be parsed according to the rules in ms excel.
     */
    getRegexKey() : boolean;
    /**
     * Indicates whether the searched key is regex.
     * If true the searched key will be taken as regex and parsed. Otherwise the key will be parsed according to the rules in ms excel.
     * @param value - The value to set.
     */
    setRegexKey(value: boolean) : void;
    /**
     * Indicates whether searched cell value type should be same with the searched key.
     */
    getValueTypeSensitive() : boolean;
    /**
     * Indicates whether searched cell value type should be same with the searched key.
     * @param value - The value to set.
     */
    setValueTypeSensitive(value: boolean) : void;
    /**
     * The format to search for.
     */
    getStyle() : Style;
    /**
     * The format to search for.
     * @param value - The value to set.
     */
    setStyle(value: Style) : void;
    /**
     * Gets or sets a value that indicates whether converting the searched string value to numeric data.
     */
    getConvertNumericData() : boolean;
    /**
     * Gets or sets a value that indicates whether converting the searched string value to numeric data.
     * @param value - The value to set.
     */
    setConvertNumericData(value: boolean) : void;
    /**
     * Gets and sets the searched range.
     * @returns
     * Returns the searched range.
     */
    getRange() : CellArea;
    /**
     * Sets the searched range.
     * @param ca - the searched range.
     */
    setRange(ca: CellArea) : void;
}

/**
 * Represents all built-in auto shape type.
 */
export enum AutoShapeType {
    /**
     */
    NotPrimitive = 0,
    /**
     */
    Rectangle = 1,
    /**
     */
    RoundedRectangle = 2,
    /**
     */
    Oval = 3,
    /**
     */
    Diamond = 4,
    /**
     */
    IsoscelesTriangle = 5,
    /**
     */
    RightTriangle = 6,
    /**
     */
    Parallelogram = 7,
    /**
     */
    Trapezoid = 8,
    /**
     */
    Hexagon = 9,
    /**
     */
    Octagon = 10,
    /**
     */
    Cross = 11,
    /**
     */
    Star5 = 12,
    /**
     */
    RightArrow = 13,
    /**
     */
    HomePlate = 15,
    /**
     */
    Cube = 16,
    /**
     */
    Balloon = 17,
    /**
     */
    Seal = 18,
    /**
     */
    Arc = 19,
    /**
     */
    Line = 20,
    /**
     */
    Plaque = 21,
    /**
     */
    Can = 22,
    /**
     */
    Donut = 23,
    /**
     */
    TextSimple = 24,
    /**
     */
    TextOctagon = 25,
    /**
     */
    TextHexagon = 26,
    /**
     */
    TextCurve = 27,
    /**
     */
    TextWave = 28,
    /**
     */
    TextRing = 29,
    /**
     */
    TextOnCurve = 30,
    /**
     */
    msosptTextOnRing = 31,
    /**
     */
    StraightConnector = 32,
    /**
     */
    BentConnector2 = 33,
    /**
     */
    ElbowConnector = 34,
    /**
     */
    BentConnector4 = 35,
    /**
     */
    BentConnector5 = 36,
    /**
     */
    CurvedConnector2 = 37,
    /**
     */
    CurvedConnector = 38,
    /**
     */
    CurvedConnector4 = 39,
    /**
     */
    CurvedConnector5 = 40,
    /**
     */
    LineCalloutNoBorder2 = 41,
    /**
     */
    LineCalloutNoBorder3 = 42,
    /**
     */
    LineCalloutNoBorder4 = 43,
    /**
     */
    LineCalloutWithAccentBar2 = 44,
    /**
     */
    LineCalloutWithAccentBar3 = 45,
    /**
     */
    LineCalloutWithAccentBar4 = 46,
    /**
     */
    LineCalloutWithBorder2 = 47,
    /**
     */
    LineCalloutWithBorder3 = 48,
    /**
     */
    LineCalloutWithBorder4 = 49,
    /**
     */
    LineCalloutWithBorderAndAccentBar2 = 50,
    /**
     */
    LineCalloutWithBorderAndAccentBar3 = 51,
    /**
     */
    LineCalloutWithBorderAndAccentBar4 = 52,
    /**
     */
    DownRibbon = 53,
    /**
     */
    UpRibbon = 54,
    /**
     */
    Chevron = 55,
    /**
     */
    RegularPentagon = 56,
    /**
     */
    NoSymbol = 57,
    /**
     */
    Star8 = 58,
    /**
     */
    Star16 = 59,
    /**
     */
    Star32 = 60,
    /**
     */
    RectangularCallout = 61,
    /**
     */
    RoundedRectangularCallout = 62,
    /**
     */
    OvalCallout = 63,
    /**
     */
    Wave = 64,
    /**
     */
    FoldedCorner = 65,
    /**
     */
    LeftArrow = 66,
    /**
     */
    DownArrow = 67,
    /**
     */
    UpArrow = 68,
    /**
     */
    LeftRightArrow = 69,
    /**
     */
    UpDownArrow = 70,
    /**
     */
    Explosion1 = 71,
    /**
     */
    Explosion2 = 72,
    /**
     */
    LightningBolt = 73,
    /**
     */
    Heart = 74,
    /**
     */
    PictureFrame = 75,
    /**
     */
    QuadArrow = 76,
    /**
     */
    LeftArrowCallout = 77,
    /**
     */
    RightArrowCallout = 78,
    /**
     */
    UpArrowCallout = 79,
    /**
     */
    DownArrowCallout = 80,
    /**
     */
    LeftRightArrowCallout = 81,
    /**
     */
    UpDownArrowCallout = 82,
    /**
     */
    QuadArrowCallout = 83,
    /**
     */
    Bevel = 84,
    /**
     */
    LeftBracket = 85,
    /**
     */
    RightBracket = 86,
    /**
     */
    LeftBrace = 87,
    /**
     */
    RightBrace = 88,
    /**
     */
    LeftUpArrow = 89,
    /**
     */
    BentUpArrow = 90,
    /**
     */
    BentArrow = 91,
    /**
     */
    Star24 = 92,
    /**
     */
    StripedRightArrow = 93,
    /**
     */
    NotchedRightArrow = 94,
    /**
     */
    BlockArc = 95,
    /**
     */
    SmileyFace = 96,
    /**
     */
    VerticalScroll = 97,
    /**
     */
    HorizontalScroll = 98,
    /**
     */
    CircularArrow = 99,
    /**
     * A value that SHOULD NOT be used.
     */
    NotchedCircularArrow = 100,
    /**
     */
    UTurnArrow = 101,
    /**
     */
    CurvedRightArrow = 102,
    /**
     */
    CurvedLeftArrow = 103,
    /**
     */
    CurvedUpArrow = 104,
    /**
     */
    CurvedDownArrow = 105,
    /**
     */
    CloudCallout = 106,
    /**
     */
    CurvedDownRibbon = 107,
    /**
     */
    CurvedUpRibbon = 108,
    /**
     */
    FlowChartProcess = 109,
    /**
     */
    FlowChartDecision = 110,
    /**
     */
    FlowChartData = 111,
    /**
     */
    FlowChartPredefinedProcess = 112,
    /**
     */
    FlowChartInternalStorage = 113,
    /**
     */
    FlowChartDocument = 114,
    /**
     */
    FlowChartMultidocument = 115,
    /**
     */
    FlowChartTerminator = 116,
    /**
     */
    FlowChartPreparation = 117,
    /**
     */
    FlowChartManualInput = 118,
    /**
     */
    FlowChartManualOperation = 119,
    /**
     */
    FlowChartConnector = 120,
    /**
     */
    FlowChartCard = 121,
    /**
     */
    FlowChartPunchedTape = 122,
    /**
     */
    FlowChartSummingJunction = 123,
    /**
     */
    FlowChartOr = 124,
    /**
     */
    FlowChartCollate = 125,
    /**
     */
    FlowChartSort = 126,
    /**
     */
    FlowChartExtract = 127,
    /**
     */
    FlowChartMerge = 128,
    /**
     */
    FlowChartOfflineStorage = 129,
    /**
     */
    FlowChartStoredData = 130,
    /**
     */
    FlowChartSequentialAccessStorage = 131,
    /**
     */
    FlowChartMagneticDisk = 132,
    /**
     */
    FlowChartDirectAccessStorage = 133,
    /**
     */
    FlowChartDisplay = 134,
    /**
     */
    FlowChartDelay = 135,
    /**
     * A plain text shape.
     */
    TextPlainText = 136,
    /**
     * An octagonal text shape.
     */
    TextStop = 137,
    /**
     * A triangular text shape pointing upwards.
     */
    TextTriangle = 138,
    /**
     * A triangular text shape pointing downwards.
     */
    TextTriangleInverted = 139,
    /**
     * A chevron text shape pointing upwards.
     */
    TextChevron = 140,
    /**
     * A chevron text shape pointing downwards.
     */
    TextChevronInverted = 141,
    /**
     * A circular text shape, as if reading an inscription on the inside of a ring.
     */
    TextRingInside = 142,
    /**
     * A circular text shape, as if reading an inscription on the outside of a ring.
     */
    TextRingOutside = 143,
    /**
     * An upward arching curved text shape.
     */
    TextArchUpCurve = 144,
    /**
     * A downward arching curved text shape.
     */
    TextArchDownCurve = 145,
    /**
     * A circular text shape.
     */
    TextCircleCurve = 146,
    /**
     * A text shape that resembles a button.
     */
    TextButtonCurve = 147,
    /**
     * An upward arching text shape.
     */
    TextArchUpPour = 148,
    /**
     * A downward arching text shape.
     */
    TextArchDownPour = 149,
    /**
     * A circular text shape.
     */
    TextCirclePour = 150,
    /**
     * A text shape that resembles a button.
     */
    TextButtonPour = 151,
    /**
     * An upward curving text shape.
     */
    TextCurveUp = 152,
    /**
     * A downward curving text shape.
     */
    TextCurveDown = 153,
    /**
     * A cascading text shape pointed upwards.
     */
    TextCascadeUp = 154,
    /**
     * A cascading text shape pointed downwards.
     */
    TextCascadeDown = 155,
    /**
     * A wavy text shape.
     */
    TextWave1 = 156,
    /**
     * A wavy text shape.
     */
    TextWave2 = 157,
    /**
     * A wavy text shape.
     */
    TextDoubleWave1 = 158,
    /**
     * A wavy text shape.
     */
    TextDoubleWave2 = 159,
    /**
     * A text shape that expands vertically in the middle.
     */
    TextInflate = 160,
    /**
     * A text shape that shrinks vertically in the middle.
     */
    TextDeflate = 161,
    /**
     * A text shape that expands downward in the middle.
     */
    TextInflateBottom = 162,
    /**
     * A text shape that shrinks upwards in the middle.
     */
    TextDeflateBottom = 163,
    /**
     * A text shape that expands upward in the middle.
     */
    TextInflateTop = 164,
    /**
     * A text shape that shrinks downward in the middle.
     */
    TextDeflateTop = 165,
    /**
     * A text shape where lower lines expand upward. Upper lines shrink to compensate.
     */
    TextDeflateInflate = 166,
    /**
     * A text shape where lines in the center expand vertically. Upper and lower lines shrink to compensate.
     */
    TextDeflateInflateDeflate = 167,
    /**
     * A text shape that shrinks vertically on the right side.
     */
    TextFadeRight = 168,
    /**
     * A text shape that shrinks vertically on the left side.
     */
    TextFadeLeft = 169,
    /**
     * A text shape that shrinks horizontally on top.
     */
    TextFadeUp = 170,
    /**
     * A text shape that shrinks horizontally on bottom.
     */
    TextFadeDown = 171,
    /**
     * An upward slanted text shape.
     */
    TextSlantUp = 172,
    /**
     * A downward slanted text shape.
     */
    TextSlantDown = 173,
    /**
     * A text shape that is curved upwards as if being read on the side of a can.
     */
    TextCanUp = 174,
    /**
     * A text shape that is curved downwards as if being read on the side of a can.
     */
    TextCanDown = 175,
    /**
     */
    FlowChartAlternateProcess = 176,
    /**
     */
    FlowChartOffpageConnector = 177,
    /**
     */
    LineCalloutNoBorder1 = 178,
    /**
     */
    LineCalloutWithAccentBar1 = 179,
    /**
     */
    LineCalloutWithBorder1 = 180,
    /**
     */
    LineCalloutWithBorderAndAccentBar1 = 181,
    /**
     */
    LeftRightUpArrow = 182,
    /**
     */
    Sun = 183,
    /**
     */
    Moon = 184,
    /**
     * A shape enclosed in brackets.
     */
    DoubleBracket = 185,
    /**
     * A shape enclosed in braces.
     */
    DoubleBrace = 186,
    /**
     */
    Star4 = 187,
    /**
     */
    DoubleWave = 188,
    /**
     */
    BlankActionButton = 189,
    /**
     */
    HomeActionButton = 190,
    /**
     */
    HelpActionButton = 191,
    /**
     */
    InformationActionButton = 192,
    /**
     */
    ForwardNextActionButton = 193,
    /**
     */
    BackPreviousActionButton = 194,
    /**
     */
    EndActionButton = 195,
    /**
     */
    BeginningActionButton = 196,
    /**
     */
    ReturnActionButton = 197,
    /**
     */
    DocumentActionButton = 198,
    /**
     */
    SoundActionButton = 199,
    /**
     */
    MovieActionButton = 200,
    /**
     * This value SHOULD NOT be used.
     */
    HostControl = 201,
    /**
     */
    TextBox = 202,
    /**
     */
    Heptagon = 2049,
    /**
     */
    Decagon = 2050,
    /**
     */
    Dodecagon = 2051,
    /**
     */
    Star6 = 2052,
    /**
     */
    Star7 = 2053,
    /**
     */
    Star10 = 2054,
    /**
     */
    Star12 = 2055,
    /**
     */
    RoundSingleCornerRectangle = 2056,
    /**
     */
    RoundSameSideCornerRectangle = 2057,
    /**
     */
    RoundDiagonalCornerRectangle = 2058,
    /**
     */
    SnipRoundSingleCornerRectangle = 2059,
    /**
     */
    SnipSingleCornerRectangle = 2060,
    /**
     */
    SnipSameSideCornerRectangle = 2061,
    /**
     */
    SnipDiagonalCornerRectangle = 2062,
    /**
     */
    Teardrop = 2063,
    /**
     */
    Pie = 2064,
    /**
     */
    HalfFrame = 2066,
    /**
     */
    L_Shape = 2067,
    /**
     */
    DiagonalStripe = 2068,
    /**
     */
    Chord = 2069,
    /**
     */
    Cloud = 2070,
    /**
     */
    MathPlus = 2071,
    /**
     */
    MathMinus = 2072,
    /**
     */
    MathMultiply = 2073,
    /**
     */
    MathDivide = 2074,
    /**
     */
    MathEqual = 2075,
    /**
     */
    MathNotEqual = 2076,
    /**
     */
    LineInv = 2077,
    /**
     */
    NonIsoscelesTrapezoid = 2078,
    /**
     */
    PieWedge = 2079,
    /**
     */
    LeftCircularArrow = 2080,
    /**
     */
    LeftRightCircularArrow = 2081,
    /**
     */
    SwooshArrow = 2082,
    /**
     */
    LeftRightRibbon = 2083,
    /**
     */
    TextNoShape = 2084,
    /**
     */
    Gear6 = 2097,
    /**
     */
    Gear9 = 2098,
    /**
     */
    Funnel = 2099,
    /**
     */
    CornerTabs = 2100,
    /**
     */
    SquareTabs = 2101,
    /**
     */
    PlaqueTabs = 2102,
    /**
     */
    ChartX = 2103,
    /**
     */
    ChartStar = 2104,
    /**
     */
    ChartPlus = 2105,
    /**
     */
    Frame = 2106,
    /**
     */
    Model3D = 2107,
    /**
     * There is no such type in Excel
     */
    RoundCallout = 2108,
    /**
     * There is no such type in Excel
     */
    TextArchLeftPour = 2109,
    /**
     * There is no such type in Excel
     */
    TextArchRightPour = 2110,
    /**
     * There is no such type in Excel
     */
    TextArchLeftCurve = 2111,
    /**
     * There is no such type in Excel
     */
    TextArchRightCurve = 2112,
    /**
     */
    Unknown = 4095,
}

/**
 * Encapsulates the object that represents an axis of chart.
 */
export class Axis {
    /**
     * Gets the <see cref="Area"/>.
     */
    getArea() : Area;
    /**
     * Indicates whether the min value is automatically assigned.
     */
    isAutomaticMinValue() : boolean;
    /**
     * Indicates whether the min value is automatically assigned.
     * @param value - The value to set.
     */
    setIsAutomaticMinValue(value: boolean) : void;
    /**
     * Indicates whether the max value is automatically assigned.
     */
    isAutomaticMaxValue() : boolean;
    /**
     * Indicates whether the max value is automatically assigned.
     * @param value - The value to set.
     */
    setIsAutomaticMaxValue(value: boolean) : void;
    /**
     * Indicates whether the major unit of the axis is automatically assigned.
     */
    isAutomaticMajorUnit() : boolean;
    /**
     * Indicates whether the major unit of the axis is automatically assigned.
     * @param value - The value to set.
     */
    setIsAutomaticMajorUnit(value: boolean) : void;
    /**
     * Represents the major units for the axis.
     * 
     * @remarks
     * The major units must be greater than zero.
     */
    getMajorUnit() : number;
    /**
     * Represents the major units for the axis.
     * @param value - The value to set.
     * 
     * @remarks
     * The major units must be greater than zero.
     */
    setMajorUnit(value: number) : void;
    /**
     * Indicates whether the minor unit of the axis is automatically assigned.
     */
    isAutomaticMinorUnit() : boolean;
    /**
     * Indicates whether the minor unit of the axis is automatically assigned.
     * @param value - The value to set.
     */
    setIsAutomaticMinorUnit(value: boolean) : void;
    /**
     * Represents the minor units for the axis.
     * 
     * @remarks
     * The minor units must be greater than zero.
     */
    getMinorUnit() : number;
    /**
     * Represents the minor units for the axis.
     * @param value - The value to set.
     * 
     * @remarks
     * The minor units must be greater than zero.
     */
    setMinorUnit(value: number) : void;
    /**
     * Gets the appearance of an Axis.
     */
    getAxisLine() : Line;
    /**
     * Represents the type of major tick mark for the specified axis.
     */
    getMajorTickMark() : TickMarkType;
    /**
     * Represents the type of major tick mark for the specified axis.
     * @param value - The value to set.
     */
    setMajorTickMark(value: TickMarkType) : void;
    /**
     * Represents the type of minor tick mark for the specified axis.
     */
    getMinorTickMark() : TickMarkType;
    /**
     * Represents the type of minor tick mark for the specified axis.
     * @param value - The value to set.
     */
    setMinorTickMark(value: TickMarkType) : void;
    /**
     * Represents the position of tick-mark labels on the specified axis.
     */
    getTickLabelPosition() : TickLabelPositionType;
    /**
     * Represents the position of tick-mark labels on the specified axis.
     * @param value - The value to set.
     */
    setTickLabelPosition(value: TickLabelPositionType) : void;
    /**
     * Represents the point on the value axis where the category axis crosses it.
     * 
     * @remarks
     * The number should be a integer when it applies to category axis.
     * And the value must be between 1 and 31999.
     */
    getCrossAt() : number;
    /**
     * Represents the point on the value axis where the category axis crosses it.
     * @param value - The value to set.
     * 
     * @remarks
     * The number should be a integer when it applies to category axis.
     * And the value must be between 1 and 31999.
     */
    setCrossAt(value: number) : void;
    /**
     * Represents the <see cref="CrossType"/> on the specified axis where the other axis crosses.
     */
    getCrossType() : CrossType;
    /**
     * Represents the <see cref="CrossType"/> on the specified axis where the other axis crosses.
     * @param value - The value to set.
     */
    setCrossType(value: CrossType) : void;
    /**
     * Represents the logarithmic base. Default value is 10.Only applies for Excel2007.
     */
    getLogBase() : number;
    /**
     * Represents the logarithmic base. Default value is 10.Only applies for Excel2007.
     * @param value - The value to set.
     */
    setLogBase(value: number) : void;
    /**
     * Represents if the value axis scale type is logarithmic or not.
     */
    isLogarithmic() : boolean;
    /**
     * Represents if the value axis scale type is logarithmic or not.
     * @param value - The value to set.
     */
    setIsLogarithmic(value: boolean) : void;
    /**
     * Represents if Microsoft Excel plots data points from last to first.
     */
    isPlotOrderReversed() : boolean;
    /**
     * Represents if Microsoft Excel plots data points from last to first.
     * @param value - The value to set.
     */
    setIsPlotOrderReversed(value: boolean) : void;
    /**
     * Represents if the value axis crosses the category axis between categories.
     * 
     * @remarks
     * This property applies only to category axes, and it doesn't apply to 3-D charts.
     */
    getAxisBetweenCategories() : boolean;
    /**
     * Represents if the value axis crosses the category axis between categories.
     * @param value - The value to set.
     * 
     * @remarks
     * This property applies only to category axes, and it doesn't apply to 3-D charts.
     */
    setAxisBetweenCategories(value: boolean) : void;
    /**
     * Returns a <see cref="TickLabels"/> object that represents the tick-mark labels for the specified axis.
     */
    getTickLabels() : TickLabels;
    /**
     * Represents the number of categories or series between tick-mark labels. Applies only to category and series axes.
     * 
     * @remarks
     * The number must be between 1 and 31999.
     */
    getTickLabelSpacing() : number;
    /**
     * Represents the number of categories or series between tick-mark labels. Applies only to category and series axes.
     * @param value - The value to set.
     * 
     * @remarks
     * The number must be between 1 and 31999.
     */
    setTickLabelSpacing(value: number) : void;
    /**
     * Indicates whether the spacing of tick label is automatic
     */
    isAutoTickLabelSpacing() : boolean;
    /**
     * Indicates whether the spacing of tick label is automatic
     * @param value - The value to set.
     */
    setIsAutoTickLabelSpacing(value: boolean) : void;
    /**
     * Returns or sets the number of categories or series between tick marks. Applies only to category and series axes.
     * 
     * @remarks
     * The number must be between 1 and 31999.
     */
    getTickMarkSpacing() : number;
    /**
     * Returns or sets the number of categories or series between tick marks. Applies only to category and series axes.
     * @param value - The value to set.
     * 
     * @remarks
     * The number must be between 1 and 31999.
     */
    setTickMarkSpacing(value: number) : void;
    /**
     * Represents the unit label for the specified axis.
     */
    getDisplayUnit() : DisplayUnitType;
    /**
     * Represents the unit label for the specified axis.
     * @param value - The value to set.
     */
    setDisplayUnit(value: DisplayUnitType) : void;
    /**
     * Specifies a custom value for the display unit.
     */
    getCustomUnit() : number;
    /**
     * Specifies a custom value for the display unit.
     * @param value - The value to set.
     */
    setCustomUnit(value: number) : void;
    /**
     * Represents a unit label on an axis in the specified chart.
     * Unit labels are useful for charting large values— for example, in the millions or billions.
     */
    getDisplayUnitLabel() : DisplayUnitLabel;
    /**
     * Represents if the display unit label is shown on the specified axis.
     * 
     * @remarks
     * The default value is True.
     */
    isDisplayUnitLabelShown() : boolean;
    /**
     * Represents if the display unit label is shown on the specified axis.
     * @param value - The value to set.
     * 
     * @remarks
     * The default value is True.
     */
    setIsDisplayUnitLabelShown(value: boolean) : void;
    /**
     * Gets the axis' title.
     */
    getTitle() : Title;
    /**
     * Represents the category axis type.
     */
    getCategoryType() : CategoryType;
    /**
     * Represents the category axis type.
     * @param value - The value to set.
     */
    setCategoryType(value: CategoryType) : void;
    /**
     * Represents the base unit scale for the category axis.
     * 
     * @remarks
     * Setting this property only takes effect when the CategoryType property is set to TimeScale.
     */
    getBaseUnitScale() : TimeUnit;
    /**
     * Represents the base unit scale for the category axis.
     * @param value - The value to set.
     * 
     * @remarks
     * Setting this property only takes effect when the CategoryType property is set to TimeScale.
     */
    setBaseUnitScale(value: TimeUnit) : void;
    /**
     * Represents the major unit scale for the category axis.
     */
    getMajorUnitScale() : TimeUnit;
    /**
     * Represents the major unit scale for the category axis.
     * @param value - The value to set.
     */
    setMajorUnitScale(value: TimeUnit) : void;
    /**
     * Represents the major unit scale for the category axis.
     */
    getMinorUnitScale() : TimeUnit;
    /**
     * Represents the major unit scale for the category axis.
     * @param value - The value to set.
     */
    setMinorUnitScale(value: TimeUnit) : void;
    /**
     * Represents if the axis is visible.
     */
    isVisible() : boolean;
    /**
     * Represents if the axis is visible.
     * @param value - The value to set.
     */
    setIsVisible(value: boolean) : void;
    /**
     * Represents major gridlines on a chart axis.
     */
    getMajorGridLines() : Line;
    /**
     * Represents minor gridlines on a chart axis.
     */
    getMinorGridLines() : Line;
    /**
     * Indicates whether the labels shall be shown as multi level.
     * 
     * @remarks
     * Only valid for category axis.
     */
    getHasMultiLevelLabels() : boolean;
    /**
     * Indicates whether the labels shall be shown as multi level.
     * @param value - The value to set.
     * 
     * @remarks
     * Only valid for category axis.
     */
    setHasMultiLevelLabels(value: boolean) : void;
    /**
     * Represents bins on a chart(Histogram/Pareto) axis
     */
    getBins() : AxisBins;
    /**
     * Gets the labels of the axis after call Chart.Calculate() method.
     */
    getAxisTexts() : string[];
}

/**
 * Represents the display mode of the background.
 */
export enum BackgroundMode {
    /**
     * Automatic
     */
    Automatic = 0,
    /**
     * Opaque
     */
    Opaque = 1,
    /**
     * Transparent
     */
    Transparent = 2,
}

/**
 * Enumerates cell background pattern types.
 */
export enum BackgroundType {
    /**
     * Represents diagonal crosshatch pattern.
     */
    DiagonalCrosshatch = 9,
    /**
     * Represents diagonal stripe pattern.
     */
    DiagonalStripe = 8,
    /**
     * Represents 6.25% gray pattern
     */
    Gray6 = 18,
    /**
     * Represents 12.5% gray pattern
     */
    Gray12 = 17,
    /**
     * Represents 25% gray pattern.
     */
    Gray25 = 4,
    /**
     * Represents 50% gray pattern.
     */
    Gray50 = 2,
    /**
     * Represents 75% gray pattern.
     */
    Gray75 = 3,
    /**
     * Represents horizontal stripe pattern.
     */
    HorizontalStripe = 5,
    /**
     * Represents no background.
     */
    None = 0,
    /**
     * Represents reverse diagonal stripe pattern.
     */
    ReverseDiagonalStripe = 7,
    /**
     * Represents solid pattern.
     */
    Solid = 1,
    /**
     * Represents thick diagonal crosshatch pattern.
     */
    ThickDiagonalCrosshatch = 10,
    /**
     * Represents thin diagonal crosshatch pattern.
     */
    ThinDiagonalCrosshatch = 16,
    /**
     * Represents thin diagonal stripe pattern.
     */
    ThinDiagonalStripe = 14,
    /**
     * Represents thin horizontal crosshatch pattern.
     */
    ThinHorizontalCrosshatch = 15,
    /**
     * Represents thin horizontal stripe pattern.
     */
    ThinHorizontalStripe = 11,
    /**
     * Represents thin reverse diagonal stripe pattern.
     */
    ThinReverseDiagonalStripe = 13,
    /**
     * Represents thin vertical stripe pattern.
     */
    ThinVerticalStripe = 12,
    /**
     * Represents vertical stripe pattern.
     */
    VerticalStripe = 6,
}

/**
 * Represents the shape used with the 3-D bar or column chart.
 */
export enum Bar3DShapeType {
    /**
     * Box
     */
    Box = 0,
    /**
     * PyramidToPoint
     */
    PyramidToPoint = 1,
    /**
     * PyramidToMax
     */
    PyramidToMax = 2,
    /**
     * Cylinder
     */
    Cylinder = 3,
    /**
     * ConeToPoint
     */
    ConeToPoint = 4,
    /**
     * ConeToMax
     */
    ConeToMax = 5,
}

/**
 * Encapsulates the object that represents the cell border.
 */
export class Border {
    /**
     * Gets and sets the theme color of the border.
     */
    getThemeColor() : ThemeColor;
    /**
     * Gets and sets the theme color of the border.
     * @param value - The value to set.
     */
    setThemeColor(value: ThemeColor) : void;
    /**
     * Gets or sets the <see cref="System.Drawing.Color"/> of the border.
     */
    getColor() : Color;
    /**
     * Gets or sets the <see cref="System.Drawing.Color"/> of the border.
     * @param value - The value to set.
     */
    setColor(value: Color) : void;
    /**
     * Gets and sets the color with a 32-bit ARGB value.
     */
    getArgbColor() : number;
    /**
     * Gets and sets the color with a 32-bit ARGB value.
     * @param value - The value to set.
     */
    setArgbColor(value: number) : void;
    /**
     * Gets or sets the cell border type.
     */
    getLineStyle() : CellBorderType;
    /**
     * Gets or sets the cell border type.
     * @param value - The value to set.
     */
    setLineStyle(value: CellBorderType) : void;
}

/**
 * Encapsulates a collection of <see cref="Border"/> objects.
 */
export class BorderCollection {
    /**
     * Gets the <see cref="Border"/> element at the specified index.
     * @param borderType - The border to be retrieved.
     * @returns
     * The element at the specified index.
     */
    get(borderType: BorderType) : Border;
    /**
     * Gets or sets the <see cref="System.Drawing.Color"/> of Diagonal lines.
     */
    getDiagonalColor() : Color;
    /**
     * Gets or sets the <see cref="System.Drawing.Color"/> of Diagonal lines.
     * @param value - The value to set.
     */
    setDiagonalColor(value: Color) : void;
    /**
     * Gets or sets the style of Diagonal lines.
     */
    getDiagonalStyle() : CellBorderType;
    /**
     * Gets or sets the style of Diagonal lines.
     * @param value - The value to set.
     */
    setDiagonalStyle(value: CellBorderType) : void;
    /**
     * Sets the <see cref="System.Drawing.Color"/> of all borders in the collection.
     * @param color - Borders' <see cref="System.Drawing.Color"/>.
     */
    setColor(color: Color) : void;
    /**
     * Sets the style of all borders of the collection.
     * @param style - Borders' style
     */
    setStyle(style: CellBorderType) : void;
}

/**
 * Enumerates the border line and diagonal line types.
 */
export enum BorderType {
    /**
     * Represents bottom border line.
     */
    BottomBorder = 8,
    /**
     * Represents the diagonal line from top left to right bottom.
     */
    DiagonalDown = 16,
    /**
     * Represents the diagonal line from bottom left to right top.
     */
    DiagonalUp = 32,
    /**
     * Represents left border line.
     */
    LeftBorder = 1,
    /**
     * Represents right border line exists.
     */
    RightBorder = 2,
    /**
     * Represents top border line.
     */
    TopBorder = 4,
    /**
     * Only for dynamic style,such as conditional formatting.
     */
    Horizontal = 128,
    /**
     * Only for dynamic style,such as conditional formatting.
     */
    Vertical = 64,
}

/**
 * Represents what the bubble size represents on a bubble chart.
 */
export enum BubbleSizeRepresents {
    /**
     * Represents the value of <see cref="Series.BubbleSizes"/> is area of the bubble.
     */
    SizeIsArea = 0,
    /**
     * Represents the value of <see cref="Series.BubbleSizes"/> is width of the bubble.
     */
    SizeIsWidth = 1,
}

/**
 * Represents the Forms control: Button
 */
export class Button extends Shape {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Shape);
}

/**
 * Represents the mode type of calculating formulas.
 * 
 * @remarks
 * Only sets for MS Excel.
 */
export enum CalcModeType {
    /**
     */
    Automatic = 0,
    /**
     */
    AutomaticExceptTable = 1,
    /**
     */
    Manual = 2,
}

/**
 * Enumerates a cell's border type.
 */
export enum CellBorderType {
    /**
     * Represents thin dash-dotted line.
     */
    DashDot = 9,
    /**
     * Represents thin dash-dot-dotted line.
     */
    DashDotDot = 11,
    /**
     * Represents dashed line.
     */
    Dashed = 3,
    /**
     * Represents dotted line.
     */
    Dotted = 4,
    /**
     * Represents double line.
     */
    Double = 6,
    /**
     * Represents hair line.
     */
    Hair = 7,
    /**
     * Represents medium dash-dotted line.
     */
    MediumDashDot = 10,
    /**
     * Represents medium dash-dot-dotted line.
     */
    MediumDashDotDot = 12,
    /**
     * Represents medium dashed line.
     */
    MediumDashed = 8,
    /**
     * Represents no line.
     */
    None = 0,
    /**
     * Represents medium line.
     */
    Medium = 2,
    /**
     * Represents slanted medium dash-dotted line.
     */
    SlantedDashDot = 13,
    /**
     * Represents thick line.
     */
    Thick = 5,
    /**
     * Represents thin line.
     */
    Thin = 1,
}

/**
 * Represents the auto shape and drawing object.
 */
export class CellsDrawing extends Shape {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Shape);
}

/**
 * Specifies a cell value type.
 */
export enum CellValueType {
    /**
     * Cell value type is unknown.
     */
    IsUnknown = 0,
    /**
     * Blank cell. Corresponding value should be null.
     */
    IsNull = 1,
    /**
     * Cell value is numeric. Corresponding value must be int or double.
     */
    IsNumeric = 2,
    /**
     * Cell value is datetime. Corresponding value must be DateTime.
     */
    IsDateTime = 4,
    /**
     * Cell value is string. Corresponding value must be string.
     */
    IsString = 8,
    /**
     * Cell value is boolean. Corresponding value must be bool.
     */
    IsBool = 16,
    /**
     * Cell contains error value. Corresponding value must be error string.
     */
    IsError = 32,
}

/**
 * Represents a range of characters within the cell text.
 */
export class FontSetting {
    /**
     * @param startIndex - 
     * @param length - 
     * @param sheets - 
     */
    constructor(startIndex: number, length: number, sheets: WorksheetCollection);
    /**
     * Gets the type of text node.
     */
    getType() : TextNodeType;
    /**
     * Gets the start index of the characters.
     */
    getStartIndex() : number;
    /**
     * Gets the length of the characters.
     */
    getLength() : number;
    /**
     * Returns the font of this object.
     */
    getFont() : Font;
    /**
     * Returns the text options.
     */
    getTextOptions() : TextOptions;
    /**
     * Sets the preset WordArt style.
     * @param style - The preset WordArt style.
     * 
     * @remarks
     * Only for the text of shape/chart.
     */
    setWordArtStyle(style: PresetWordArtStyle) : void;
}

/**
 * Encapsulates the object that represents a single Excel chart.
 */
export class Chart {
    /**
     * Gets and sets the builtin style.
     * 
     * @remarks
     * It should be between 1 and 48.
     * Return -1 if it's not be set.
     */
    getStyle() : number;
    /**
     * Gets and sets the builtin style.
     * @param value - The value to set.
     * 
     * @remarks
     * It should be between 1 and 48.
     * Return -1 if it's not be set.
     */
    setStyle(value: number) : void;
    /**
     * Represents the chartShape;
     */
    getChartObject() : ChartShape;
    /**
     * Indicates whether hide the pivot chart field buttons only when the chart is PivotChart.
     */
    getHidePivotFieldButtons() : boolean;
    /**
     * Indicates whether hide the pivot chart field buttons only when the chart is PivotChart.
     * @param value - The value to set.
     */
    setHidePivotFieldButtons(value: boolean) : void;
    /**
     * Specifies the pivot controls that appear on the chart
     */
    getPivotOptions() : PivotOptions;
    /**
     * The source is the data of the pivotTable.
     * If PivotSource is not empty ,the chart is PivotChart.
     * 
     * @remarks
     * If the pivot table  "PivotTable1" in the Worksheet "Sheet1" in the file "Book1.xls".
     * The pivotSource could be "[Book1.xls]Sheet1!PivotTable1" if the chart and the PivotTable is not in the same workbook.
     * If you set this property ,the previous data source setting will be lost.
     */
    getPivotSource() : string;
    /**
     * The source is the data of the pivotTable.
     * If PivotSource is not empty ,the chart is PivotChart.
     * @param value - The value to set.
     * 
     * @remarks
     * If the pivot table  "PivotTable1" in the Worksheet "Sheet1" in the file "Book1.xls".
     * The pivotSource could be "[Book1.xls]Sheet1!PivotTable1" if the chart and the PivotTable is not in the same workbook.
     * If you set this property ,the previous data source setting will be lost.
     */
    setPivotSource(value: string) : void;
    /**
     * Gets and sets whether plot by row or column.
     */
    getPlotBy() : PlotDataByType;
    /**
     * Gets and sets  how to plot the empty cells.
     */
    getPlotEmptyCellsType() : PlotEmptyCellsType;
    /**
     * Gets and sets  how to plot the empty cells.
     * @param value - The value to set.
     */
    setPlotEmptyCellsType(value: PlotEmptyCellsType) : void;
    /**
     * Indicates whether plot visible cells only.
     */
    getPlotVisibleCellsOnly() : boolean;
    /**
     * Indicates whether plot visible cells only.
     * @param value - The value to set.
     */
    setPlotVisibleCellsOnly(value: boolean) : void;
    /**
     * Indicates whether displaying #N/A as blank value.
     */
    getDisplayNaAsBlank() : boolean;
    /**
     * Indicates whether displaying #N/A as blank value.
     * @param value - The value to set.
     */
    setDisplayNaAsBlank(value: boolean) : void;
    /**
     * Gets and sets the name of the chart.
     */
    getName() : string;
    /**
     * Gets and sets the name of the chart.
     * @param value - The value to set.
     */
    setName(value: string) : void;
    /**
     * True if Microsoft Excel resizes the chart to match the size of the chart sheet window.
     */
    getSizeWithWindow() : boolean;
    /**
     * True if Microsoft Excel resizes the chart to match the size of the chart sheet window.
     * @param value - The value to set.
     */
    setSizeWithWindow(value: boolean) : void;
    /**
     * Gets the worksheet which contains this chart.
     */
    getWorksheet() : Worksheet;
    /**
     * Returns all drawing shapes in this chart.
     */
    getShapes() : ShapeCollection;
    /**
     * Gets and sets the printed chart size.
     */
    getPrintSize() : PrintSizeType;
    /**
     * Gets and sets the printed chart size.
     * @param value - The value to set.
     */
    setPrintSize(value: PrintSizeType) : void;
    /**
     * Gets or sets a chart's type.
     */
    getType() : ChartType;
    /**
     * Gets or sets a chart's type.
     * @param value - The value to set.
     */
    setType(value: ChartType) : void;
    /**
     * Gets a <see cref="SeriesCollection"/> collection representing the data series in the chart.
     */
    getNSeries() : SeriesCollection;
    /**
     * Gets a <see cref="SeriesCollection"/> collection representing the data series that are filtered in the chart.
     */
    getFilteredNSeries() : SeriesCollection;
    /**
     * Gets the chart's title.
     */
    getTitle() : Title;
    /**
     * Gets the chart's sub-title.
     * Only for ODS format file.
     */
    getSubTitle() : Title;
    /**
     * Gets the chart's plot area which includes axis tick labels.
     * 
     * @remarks
     */
    getPlotArea() : PlotArea;
    /**
     * Gets the chart area in the worksheet.
     */
    getChartArea() : ChartArea;
    /**
     * Gets the chart's X axis.
     */
    getCategoryAxis() : Axis;
    /**
     * Gets the chart's Y axis.
     */
    getValueAxis() : Axis;
    /**
     * Gets the chart's second Y axis.
     */
    getSecondValueAxis() : Axis;
    /**
     * Gets the chart's second X axis.
     */
    getSecondCategoryAxis() : Axis;
    /**
     * Gets the chart's series axis.
     */
    getSeriesAxis() : Axis;
    /**
     * Gets the chart legend.
     */
    getLegend() : Legend;
    /**
     * Represents the chart data table.
     */
    getChartDataTable() : ChartDataTable;
    /**
     * Gets or sets a value indicating whether the chart legend will be displayed. Default is true.
     */
    getShowLegend() : boolean;
    /**
     * Gets or sets a value indicating whether the chart legend will be displayed. Default is true.
     * @param value - The value to set.
     */
    setShowLegend(value: boolean) : void;
    /**
     * Gets or sets a value indicating whether the chart area is rectangular cornered.
     * Default is true.
     */
    isRectangularCornered() : boolean;
    /**
     * Gets or sets a value indicating whether the chart area is rectangular cornered.
     * Default is true.
     * @param value - The value to set.
     */
    setIsRectangularCornered(value: boolean) : void;
    /**
     * Gets or sets a value indicating whether the chart displays a data table.
     */
    getShowDataTable() : boolean;
    /**
     * Gets or sets a value indicating whether the chart displays a data table.
     * @param value - The value to set.
     */
    setShowDataTable(value: boolean) : void;
    /**
     * Gets or sets the angle of the first pie-chart or doughnut-chart slice, in degrees (clockwise from vertical).
     * Applies only to pie, 3-D pie, and doughnut charts, 0 to 360.
     */
    getFirstSliceAngle() : number;
    /**
     * Gets or sets the angle of the first pie-chart or doughnut-chart slice, in degrees (clockwise from vertical).
     * Applies only to pie, 3-D pie, and doughnut charts, 0 to 360.
     * @param value - The value to set.
     */
    setFirstSliceAngle(value: number) : void;
    /**
     * Returns or sets the space between bar or column clusters, as a percentage of the bar or column width.
     * The value of this property must be between 0 and 500.
     */
    getGapWidth() : number;
    /**
     * Returns or sets the space between bar or column clusters, as a percentage of the bar or column width.
     * The value of this property must be between 0 and 500.
     * @param value - The value to set.
     */
    setGapWidth(value: number) : void;
    /**
     * Gets or sets the distance between the data series in a 3-D chart, as a percentage of the marker width.
     * The value of this property must be between 0 and 500.
     */
    getGapDepth() : number;
    /**
     * Gets or sets the distance between the data series in a 3-D chart, as a percentage of the marker width.
     * The value of this property must be between 0 and 500.
     * @param value - The value to set.
     */
    setGapDepth(value: number) : void;
    /**
     * Returns a <see cref="Floor"/> object that represents the walls of a 3-D chart.
     * 
     * @remarks
     * This property doesn't apply to 3-D pie charts.
     */
    getFloor() : Floor;
    /**
     * Returns a <see cref="Walls"/> object that represents the walls of a 3-D chart.
     * 
     * @remarks
     * This property doesn't apply to 3-D pie charts.
     */
    getWalls() : Walls;
    /**
     * Returns a <see cref="Walls"/> object that represents the back wall of a 3-D chart.
     */
    getBackWall() : Walls;
    /**
     * Returns a <see cref="Walls"/> object that represents the side wall of a 3-D chart.
     */
    getSideWall() : Walls;
    /**
     * True if gridlines are drawn two-dimensionally on a 3-D chart.
     */
    getWallsAndGridlines2D() : boolean;
    /**
     * True if gridlines are drawn two-dimensionally on a 3-D chart.
     * @param value - The value to set.
     */
    setWallsAndGridlines2D(value: boolean) : void;
    /**
     * Represents the rotation of the 3-D chart view (the rotation of the plot area around the z-axis, in degrees).
     * 
     * @remarks
     * The value of this property must be from 0 to 360, except for 3-D bar charts, where the value must be from 0 to 44.
     * The default value is 20. Applies only to 3-D charts.
     */
    getRotationAngle() : number;
    /**
     * Represents the rotation of the 3-D chart view (the rotation of the plot area around the z-axis, in degrees).
     * @param value - The value to set.
     * 
     * @remarks
     * The value of this property must be from 0 to 360, except for 3-D bar charts, where the value must be from 0 to 44.
     * The default value is 20. Applies only to 3-D charts.
     */
    setRotationAngle(value: number) : void;
    /**
     * Represents the elevation of the 3-D chart view, in degrees.
     * 
     * @remarks
     * The chart elevation is the height at which you view the chart, in degrees.
     * The default is 15 for most chart types.
     * The value of this property must be between -90 and 90, except for 3-D bar charts, where it must be between 0 and 44.
     */
    getElevation() : number;
    /**
     * Represents the elevation of the 3-D chart view, in degrees.
     * @param value - The value to set.
     * 
     * @remarks
     * The chart elevation is the height at which you view the chart, in degrees.
     * The default is 15 for most chart types.
     * The value of this property must be between -90 and 90, except for 3-D bar charts, where it must be between 0 and 44.
     */
    setElevation(value: number) : void;
    /**
     * True if the chart axes are at right angles. Applies only for 3-D charts(except Column3D and 3-D Pie Charts).
     * 
     * @remarks
     * If this property is True, the Perspective property is ignored.
     */
    getRightAngleAxes() : boolean;
    /**
     * True if the chart axes are at right angles. Applies only for 3-D charts(except Column3D and 3-D Pie Charts).
     * @param value - The value to set.
     * 
     * @remarks
     * If this property is True, the Perspective property is ignored.
     */
    setRightAngleAxes(value: boolean) : void;
    /**
     * True if Microsoft Excel scales a 3-D chart so that it's closer in size to the equivalent 2-D chart.
     * The RightAngleAxes property must be True.
     */
    getAutoScaling() : boolean;
    /**
     * True if Microsoft Excel scales a 3-D chart so that it's closer in size to the equivalent 2-D chart.
     * The RightAngleAxes property must be True.
     * @param value - The value to set.
     */
    setAutoScaling(value: boolean) : void;
    /**
     * Returns or sets the height of a 3-D chart as a percentage of the chart width (between 5 and 500 percent).
     */
    getHeightPercent() : number;
    /**
     * Returns or sets the height of a 3-D chart as a percentage of the chart width (between 5 and 500 percent).
     * @param value - The value to set.
     */
    setHeightPercent(value: number) : void;
    /**
     * Returns or sets the perspective for the 3-D chart view. Must be between 0 and 100.
     * This property is ignored if the RightAngleAxes property is True.
     */
    getPerspective() : number;
    /**
     * Returns or sets the perspective for the 3-D chart view. Must be between 0 and 100.
     * This property is ignored if the RightAngleAxes property is True.
     * @param value - The value to set.
     */
    setPerspective(value: number) : void;
    /**
     * Indicates whether the chart is a 3d chart.
     */
    getIs3D() : boolean;
    /**
     * Represents the depth of a 3-D chart as a percentage of the chart width (between 20 and 2000 percent).
     */
    getDepthPercent() : number;
    /**
     * Represents the depth of a 3-D chart as a percentage of the chart width (between 20 and 2000 percent).
     * @param value - The value to set.
     */
    setDepthPercent(value: number) : void;
    /**
     * Represents the way the chart is attached to the cells below it.
     */
    getPlacement() : PlacementType;
    /**
     * Represents the way the chart is attached to the cells below it.
     * @param value - The value to set.
     */
    setPlacement(value: PlacementType) : void;
    /**
     * Represents the page setup description in this chart.
     */
    getPageSetup() : PageSetup;
    /**
     * Gets the line.
     */
    getLine() : Line;
    /**
     * Returns whether the cell refered by the chart.
     * @param sheetIndex - The sheet Index.-1 means the worksheet which contains current chart.
     * @param rowIndex - The row index
     * @param columnIndex - The column index
     */
    isCellReferedByChart(sheetIndex: number, rowIndex: number, columnIndex: number) : boolean;
    /**
     * Detects if a chart's data source has changed.
     * @returns
     * Returns true if the chart has changed otherwise returns false
     * 
     * @remarks
     * The method detects the changes in the chart's data source before rendering the chart to image format.
     * At first Chart.toImage call, the chart source data (e.g. XValuesParseData, ValuesParseData) will be recorded.
     * Before calling the Chart.toImage method again, call IsChartDataChanged method to check if Chart needs re-rendering.
     */
    isChartDataChanged() : boolean;
    /**
     * Refreshes chart's data from pivot table.
     * 
     * @remarks
     * We will gather data from pivot data source to the pivot table report.
     * This method is only used to gather all data to a pivot chart.
     */
    refreshPivotData() : void;
    /**
     * Change chart type with preset template.
     * @param data - The data of chart template file(.crtx).
     */
    changeTemplate(data: number[]) : void;
    /**
     * Moves the chart to a specified location.
     * @param upperLeftColumn - Upper left column index.
     * @param upperLeftRow - Upper left row index.
     * @param lowerRightColumn - Lower right column index
     * @param lowerRightRow - Lower right row index
     */
    move(upperLeftRow: number, upperLeftColumn: number, lowerRightRow: number, lowerRightColumn: number) : void;
    /**
     * Calculates the custom position of plot area, axes if the position of them are auto assigned.
     */
    calculate() : void;
    /**
     * Calculates the custom position of plot area, axes if the position of them are auto assigned, with Chart Calculate Options.
     */
    calculate(calculateOptions: ChartCalculateOptions) : void;
    /**
     * Creates the chart image and saves it to a file.
     * The extension of the file name determines the format of the image.
     * @param imageFile - The image file name with full path.
     * 
     * @remarks
     * <p>The format of the image is specified by using the extension of the file name.
     * For example, if you specify "myfile.png", then the image will be saved
     * in the PNG format. The following file extensions are recognized:
     * .bmp, .gif, .png, .jpg, .jpeg, .tiff, .tif, .emf.</p>
     * If the width or height is zero or the chart is not supported according to Supported Charts List, this method will do nothing.
     */
    toImage(imageFile: string) : void;
    /**
     * Creates the chart image and saves it to a file in the specified image type.
     * @param imageFile - The image file name with full path.
     * @param imageType - The image type in which to save the image.
     * 
     * @remarks
     * <p>The type of the image is specified by using <c>imageType</c>.
     * The following types are supported:
     * ImageType.Bmp, ImageType.Gif, ImageType.Png, ImageType.Jpeg, ImageType.Tiff, ImageType.Emf.</p>
     * If the width or height is zero or the chart is not supported according to Supported Charts List, this method will do nothing.
     */
    toImage(imageFile: string, imageType: ImageType) : void;
    /**
     * Creates the chart image and saves it to a file in the Jpeg format.
     * @param imageFile - The image file name with full path.
     * @param jpegQuality - Jpeg quality.
     * 
     * @remarks
     * If the width or height is zero or the chart is not supported according to Supported Charts List, this method will do nothing.
     */
    toImage(imageFile: string, jpegQuality: number) : void;
    /**
     * Creates the chart image and saves it to a stream in the Jpeg format.
     * @param jpegQuality - Jpeg quality.
     * @returns
     * The result stream.
     * 
     * @remarks
     * If the width or height is zero or the chart is not supported according to Supported Charts List, this method will do nothing.
     */
    toImage(jpegQuality: number) : Uint8Array;
    /**
     * Creates the chart image and saves it to a stream in the specified format.
     * @param imageType - The image type in which to save the image.
     * @returns
     * The result stream.
     * 
     * @remarks
     * <p>The type of the image is specified by using <c>imageType</c>.
     * The following types are supported:
     * ImageType.Bmp, ImageType.Gif, ImageType.Png, ImageType.Jpeg, ImageType.Tiff, ImageType.Emf.</p>
     * If the width or height is zero or the chart is not supported according to Supported Charts List, this method will do nothing.
     */
    toImage(imageType: ImageType) : Uint8Array;
    /**
     * Creates the chart image and saves it to a file.
     * The extension of the file name determines the format of the image.
     * @param imageFile - The image file name with full path.
     * @param options - Additional image creation options
     * 
     * @remarks
     * <p>The format of the image is specified by using the extension of the file name.
     * For example, if you specify "myfile.png", then the image will be saved
     * in the PNG format. The following file extensions are recognized:
     * .bmp, .gif, .png, .jpg, .jpeg, .tiff, .tif, .emf.</p>
     * If the width or height is zero or the chart is not supported according to Supported Charts List, this method will do nothing.
     * Please refer to <a href="http://www.aspose.com/documentation/.net-components/aspose.cells-for-.net/converting-chart-to-image.html">Supported Charts List</a> for more details.
     */
    toImage(imageFile: string, options: ImageOrPrintOptions) : void;
    /**
     * Creates the chart image and saves it to a stream in the specified format.
     * @param options - Additional image creation options
     * @returns
     * The result stream.
     * 
     * @remarks
     * <p>The type of the image is specified by using <c>options.ImageType</c>.
     * The following formats are supported:
     * ImageType.Bmp, ImageType.Gif, ImageType.Png, ImageType.Jpeg, ImageType.Tiff, ImageType.Emf.</p>
     * If the width or height is zero or the chart is not supported according to Supported Charts List, this method will do nothing.
     * Please refer to <a href="http://www.aspose.com/documentation/.net-components/aspose.cells-for-.net/converting-chart-to-image.html">Supported Charts List</a> for more details.
     */
    toImage(options: ImageOrPrintOptions) : Uint8Array;
    /**
     * Saves the chart to a pdf file.
     * @param fileName - the pdf file name with full path
     */
    toPdf(fileName: string) : void;
    /**
     * Saves the chart to a pdf file.
     * @param fileName - the pdf file name with full path
     * @param desiredPageWidth - The desired page width in inches.
     * @param desiredPageHeight - The desired page height in inches.
     * @param hAlignmentType - The chart horizontal alignment type in the output page.
     * @param vAlignmentType - The chart vertical alignment type in the output page.
     */
    toPdf(fileName: string, desiredPageWidth: number, desiredPageHeight: number, hAlignmentType: PageLayoutAlignmentType, vAlignmentType: PageLayoutAlignmentType) : void;
    /**
     * Creates the chart pdf and saves it to a stream.
     * @returns
     * The result stream.
     */
    toPdf() : Uint8Array;
    /**
     * Creates the chart pdf and saves it to a stream.
     * @param desiredPageWidth - The desired page width in inches.
     * @param desiredPageHeight - The desired page height in inches.
     * @param hAlignmentType - The chart horizontal alignment type in the output page.
     * @param vAlignmentType - The chart vertical alignment type in the output page.
     * @returns
     * The result stream.
     */
    toPdf(desiredPageWidth: number, desiredPageHeight: number, hAlignmentType: PageLayoutAlignmentType, vAlignmentType: PageLayoutAlignmentType) : Uint8Array;
    /**
     * Gets actual size of chart in unit of pixels.
     * @returns
     * Actual size in an array(width and height).
     * [0] is width; [1] is height.
     */
    getActualSize() : number[];
    /**
     * Returns which axes exist on the chart.
     * 
     * @remarks
     * Normally, Pie, PieExploded, PiePie,PieBar, Pie3D, Pie3DExploded,Doughnut, DoughnutExploded is no axis.
     */
    hasAxis(aixsType: AxisType, isPrimary: boolean) : boolean;
    /**
     * Switches row/column.
     * @returns
     * False means switching row/column fails.
     */
    switchRowColumn() : boolean;
    /**
     * Gets the data source range of the chart.
     * @returns
     * The data source.
     * 
     * @remarks
     * Only supports range.
     */
    getChartDataRange() : string;
    /**
     * Specifies data range for a chart.
     * @param area - Specifies values from which to plot the data series
     * @param isVertical - Specifies whether to plot the series from a range of cell values by row or by column.
     */
    setChartDataRange(area: string, isVertical: boolean) : void;
}

/**
 * Encapsulates the object that represents the chart area in the worksheet.
 */
export class ChartArea extends ChartFrame {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: ChartFrame);
    /**
     * Gets or gets the horizontal offset from its upper left corner column.
     */
    getX() : number;
    /**
     * Gets or gets the horizontal offset from its upper left corner column.
     * @param value - The value to set.
     */
    setX(value: number) : void;
    /**
     * Gets or gets the vertical offset from its upper left corner row.
     */
    getY() : number;
    /**
     * Gets or gets the vertical offset from its upper left corner row.
     * @param value - The value to set.
     */
    setY(value: number) : void;
    /**
     * Gets or sets the vertical offset from its lower right corner row.
     */
    getHeight() : number;
    /**
     * Gets or sets the vertical offset from its lower right corner row.
     * @param value - The value to set.
     */
    setHeight(value: number) : void;
    /**
     * Gets or sets the horizontal offset from its lower right corner column.
     */
    getWidth() : number;
    /**
     * Gets or sets the horizontal offset from its lower right corner column.
     * @param value - The value to set.
     */
    setWidth(value: number) : void;
    /**
     * Gets a <see cref="Font"/> object of the specified chartarea object.
     */
    getFont() : Font;
}

/**
 * Represents a chart data table.
 */
export class ChartDataTable {
    /**
     * Gets a <see cref="Font"/> object which represents the font setting of the specified chart data table.
     */
    getFont() : Font;
    /**
     * True if the text in the object changes font size when the object size changes.
     * The default value is True.
     */
    getAutoScaleFont() : boolean;
    /**
     * True if the text in the object changes font size when the object size changes.
     * The default value is True.
     * @param value - The value to set.
     */
    setAutoScaleFont(value: boolean) : void;
    /**
     * Gets and sets the display mode of the background
     */
    getBackgroundMode() : BackgroundMode;
    /**
     * Gets and sets the display mode of the background
     * @param value - The value to set.
     */
    setBackgroundMode(value: BackgroundMode) : void;
    /**
     * True if the chart data table has horizontal cell borders
     * 
     * @remarks
     * NOTE: This property is now obsolete. Instead,
     * please use ChartDataTable.HasHorizontalBorder property.
     * This property will be removed 12 months later since June 2024.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use ChartDataTable.HasHorizontalBorder property, instead.
     */
    getHasBorderHorizontal() : boolean;
    /**
     * True if the chart data table has horizontal cell borders
     * @param value - The value to set.
     * 
     * @remarks
     * NOTE: This property is now obsolete. Instead,
     * please use ChartDataTable.HasHorizontalBorder property.
     * This property will be removed 12 months later since June 2024.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use ChartDataTable.HasHorizontalBorder property, instead.
     */
    setHasBorderHorizontal(value: boolean) : void;
    /**
     * True if the chart data table has horizontal cell borders
     */
    getHasHorizontalBorder() : boolean;
    /**
     * True if the chart data table has horizontal cell borders
     * @param value - The value to set.
     */
    setHasHorizontalBorder(value: boolean) : void;
    /**
     * True if the chart data table has vertical cell borders
     * 
     * @remarks
     * NOTE: This property is now obsolete. Instead,
     * please use ChartDataTable.HasVerticalBorder property.
     * This property will be removed 12 months later since June 2024.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use ChartDataTable.HasVerticalBorder property, instead.
     */
    getHasBorderVertical() : boolean;
    /**
     * True if the chart data table has vertical cell borders
     * @param value - The value to set.
     * 
     * @remarks
     * NOTE: This property is now obsolete. Instead,
     * please use ChartDataTable.HasVerticalBorder property.
     * This property will be removed 12 months later since June 2024.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use ChartDataTable.HasVerticalBorder property, instead.
     */
    setHasBorderVertical(value: boolean) : void;
    /**
     * True if the chart data table has vertical cell borders
     */
    getHasVerticalBorder() : boolean;
    /**
     * True if the chart data table has vertical cell borders
     * @param value - The value to set.
     */
    setHasVerticalBorder(value: boolean) : void;
    /**
     * True if the chart data table has outline borders
     * 
     * @remarks
     * NOTE: This property is now obsolete. Instead,
     * please use ChartDataTable.HasOutlineBorder property.
     * This property will be removed 12 months later since June 2024.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use ChartDataTable.HasOutlineBorder property, instead.
     */
    getHasBorderOutline() : boolean;
    /**
     * True if the chart data table has outline borders
     * @param value - The value to set.
     * 
     * @remarks
     * NOTE: This property is now obsolete. Instead,
     * please use ChartDataTable.HasOutlineBorder property.
     * This property will be removed 12 months later since June 2024.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use ChartDataTable.HasOutlineBorder property, instead.
     */
    setHasBorderOutline(value: boolean) : void;
    /**
     * True if the chart data table has outline borders
     */
    getHasOutlineBorder() : boolean;
    /**
     * True if the chart data table has outline borders
     * @param value - The value to set.
     */
    setHasOutlineBorder(value: boolean) : void;
    /**
     * True if the data label legend key is visible.
     */
    getShowLegendKey() : boolean;
    /**
     * True if the data label legend key is visible.
     * @param value - The value to set.
     */
    setShowLegendKey(value: boolean) : void;
    /**
     * Returns a Border object that represents the border of the object
     */
    getBorder() : Line;
}

/**
 * Encapsulates the object that represents the frame object in a chart.
 */
export class ChartFrame {
    /**
     * Indicates whether the size of the plot area size includes the tick marks, and the axis labels.
     * False specifies that the size shall determine the size of the plot area, the tick marks, and the axis labels.
     * 
     * @remarks
     * Only for Xlsx file.
     */
    isInnerMode() : boolean;
    /**
     * Indicates whether the size of the plot area size includes the tick marks, and the axis labels.
     * False specifies that the size shall determine the size of the plot area, the tick marks, and the axis labels.
     * @param value - The value to set.
     * 
     * @remarks
     * Only for Xlsx file.
     */
    setIsInnerMode(value: boolean) : void;
    /**
     * Gets the <see cref="Line">border</see>.
     */
    getBorder() : Line;
    /**
     * Gets the <see cref="Area">area</see>.
     */
    getArea() : Area;
    /**
     * Gets and sets the options of the text.
     */
    getTextOptions() : TextOptions;
    /**
     * Gets a <see cref="Font"/> object of the specified ChartFrame object.
     */
    getFont() : Font;
    /**
     * True if the text in the object changes font size when the object size changes. The default value is True.
     */
    getAutoScaleFont() : boolean;
    /**
     * True if the text in the object changes font size when the object size changes. The default value is True.
     * @param value - The value to set.
     */
    setAutoScaleFont(value: boolean) : void;
    /**
     * Gets and sets the display mode of the background
     */
    getBackgroundMode() : BackgroundMode;
    /**
     * Gets and sets the display mode of the background
     * @param value - The value to set.
     */
    setBackgroundMode(value: BackgroundMode) : void;
    /**
     * Indicates whether the chart frame is automatic sized.
     */
    isAutomaticSize() : boolean;
    /**
     * Indicates whether the chart frame is automatic sized.
     * @param value - The value to set.
     */
    setIsAutomaticSize(value: boolean) : void;
    /**
     * Gets or sets the x coordinate of the upper left corner in units of 1/4000 of the chart area.
     * 
     * @remarks
     * How to convert units of 1/4000 to pixels?
     * X In Pixels = X * Chart.ChartObject.Width / 4000;
     */
    getX() : number;
    /**
     * Gets or sets the x coordinate of the upper left corner in units of 1/4000 of the chart area.
     * @param value - The value to set.
     * 
     * @remarks
     * How to convert units of 1/4000 to pixels?
     * X In Pixels = X * Chart.ChartObject.Width / 4000;
     */
    setX(value: number) : void;
    /**
     * Gets or sets the y coordinate of the upper left corner in units of 1/4000 of the chart area.
     * 
     * @remarks
     * How to convert units of 1/4000 to pixels?
     * Y In Pixels = Y * Chart.ChartObject.Height / 4000;
     */
    getY() : number;
    /**
     * Gets or sets the y coordinate of the upper left corner in units of 1/4000 of the chart area.
     * @param value - The value to set.
     * 
     * @remarks
     * How to convert units of 1/4000 to pixels?
     * Y In Pixels = Y * Chart.ChartObject.Height / 4000;
     */
    setY(value: number) : void;
    /**
     * Gets or sets the height of frame in units of 1/4000 of the chart area.
     * 
     * @remarks
     * How to convert units of 1/4000 to pixels?
     * Height In Pixels = Y * Chart.ChartObject.Height / 4000;
     */
    getHeight() : number;
    /**
     * Gets or sets the height of frame in units of 1/4000 of the chart area.
     * @param value - The value to set.
     * 
     * @remarks
     * How to convert units of 1/4000 to pixels?
     * Height In Pixels = Y * Chart.ChartObject.Height / 4000;
     */
    setHeight(value: number) : void;
    /**
     * Gets or sets the width of frame in units of 1/4000 of the chart area.
     * 
     * @remarks
     * How to convert units of 1/4000 to pixels?
     * Width In Pixels = Width * Chart.ChartObject.Height / 4000;
     */
    getWidth() : number;
    /**
     * Gets or sets the width of frame in units of 1/4000 of the chart area.
     * @param value - The value to set.
     * 
     * @remarks
     * How to convert units of 1/4000 to pixels?
     * Width In Pixels = Width * Chart.ChartObject.Height / 4000;
     */
    setWidth(value: number) : void;
    /**
     * True if the frame has a shadow.
     */
    getShadow() : boolean;
    /**
     * True if the frame has a shadow.
     * @param value - The value to set.
     */
    setShadow(value: boolean) : void;
    /**
     * Gets the <see cref="ShapeProperties"/> object.
     */
    getShapeProperties() : ShapePropertyCollection;
    /**
     * Indicates whether default position(DefaultX, DefaultY, DefaultWidth and DefaultHeight) are set.
     */
    isDefaultPosBeSet() : boolean;
    /**
     * Represents x of default position
     */
    getDefaultX() : number;
    /**
     * Represents y of default position
     */
    getDefaultY() : number;
    /**
     * Represents width of default position
     */
    getDefaultWidth() : number;
    /**
     * Represents height of default position
     */
    getDefaultHeight() : number;
    /**
     * Set position of the frame to automatic
     */
    setPositionAuto() : void;
}

/**
 * Represents the marker style in a line chart, scatter chart, or radar chart.
 */
export enum ChartMarkerType {
    /**
     * Automatic markers.
     */
    Automatic = 0,
    /**
     * Circular markers.
     */
    Circle = 1,
    /**
     * Long bar markers
     */
    Dash = 2,
    /**
     * Diamond-shaped markers.
     */
    Diamond = 3,
    /**
     * Short bar markers.
     */
    Dot = 4,
    /**
     * No markers.
     */
    None = 5,
    /**
     * Square markers with a plus sign.
     */
    SquarePlus = 6,
    /**
     * Square markers.
     */
    Square = 7,
    /**
     * Square markers with an asterisk.
     */
    SquareStar = 8,
    /**
     * Triangular markers.
     */
    Triangle = 9,
    /**
     * Square markers with an X.
     */
    SquareX = 10,
    /**
     * Picture
     */
    Picture = 11,
}

/**
 * Represents a single point in a series in a chart.
 */
export class ChartPoint {
    /**
     * The distance of an open pie slice from the center of the pie chart is expressed as a percentage of the pie diameter.
     */
    getExplosion() : number;
    /**
     * The distance of an open pie slice from the center of the pie chart is expressed as a percentage of the pie diameter.
     * @param value - The value to set.
     */
    setExplosion(value: number) : void;
    /**
     * True if the chartpoint has a shadow.
     */
    getShadow() : boolean;
    /**
     * True if the chartpoint has a shadow.
     * @param value - The value to set.
     */
    setShadow(value: boolean) : void;
    /**
     * Gets the <see cref="Line"> border</see>.
     */
    getBorder() : Line;
    /**
     * Gets the <see cref="Area"> area</see>.
     */
    getArea() : Area;
    /**
     * Gets the <see cref="Marker"> marker</see>.
     */
    getMarker() : Marker;
    /**
     * Returns a <see cref="DataLabels"/> object that represents the data label associated with this chart point.
     */
    getDataLabels() : DataLabels;
    /**
     * Gets Y value type of the chart point.
     */
    getYValueType() : CellValueType;
    /**
     * Gets X value type of the chart point.
     */
    getXValueType() : CellValueType;
    /**
     * Gets the <see cref="ShapePropertyCollection"/> object that holds the visual shape properties of the ChartPoint.
     */
    getShapeProperties() : ShapePropertyCollection;
    /**
     * Gets or sets a value indicates whether this data points is in the second pie or bar
     * on a pie of pie or bar of pie chart
     */
    isInSecondaryPlot() : boolean;
    /**
     * Gets or sets a value indicates whether this data points is in the second pie or bar
     * on a pie of pie or bar of pie chart
     * @param value - The value to set.
     */
    setIsInSecondaryPlot(value: boolean) : void;
    /**
     * Gets the x coordinate of the upper left corner in units of 1/4000 of chart's width after calls Chart.Calculate() method.
     */
    getShapeX() : number;
    /**
     * Gets the y coordinate of the upper left corner in units of 1/4000 of chart's height after calls Chart.Calculate() method.
     */
    getShapeY() : number;
    /**
     * Gets the width in units of 1/4000 of chart's width after calls Chart.Calculate() method.
     */
    getShapeWidth() : number;
    /**
     * Gets the height in units of 1/4000 of chart's height after calls Chart.Calculate() method.
     */
    getShapeHeight() : number;
    /**
     * Gets the x coordinate of the upper left corner in units of pixels after calls Chart.Calculate() method.
     */
    getShapeXPx() : number;
    /**
     * Gets the y coordinate of the upper left corner in units of pixels after calls Chart.Calculate() method.
     */
    getShapeYPx() : number;
    /**
     * Gets the width in units of pixels after calls Chart.Calculate() method.
     */
    getShapeWidthPx() : number;
    /**
     * Gets the height in units of pixels after calls Chart.Calculate() method.
     */
    getShapeHeightPx() : number;
    /**
     * Gets the width of border in units of pixels after calls Chart.Calculate() method.
     */
    getBorderWidthPx() : number;
    /**
     * Gets the radius of bubble, pie or doughnut in units of pixels after calls Chart.Calculate() method.
     */
    getRadiusPx() : number;
    /**
     * Gets the inner radius of doughnut slice in units of pixels after calls Chart.Calculate() method.
     * Applies to Doughnut chart.
     */
    getDoughnutInnerRadius() : number;
    /**
     * Gets the inner radius of doughnut slice in units of pixels after calls Chart.Calculate() method.
     * Applies to Doughnut chart.
     * 
     * @remarks
     * NOTE: This property is now obsolete. Instead,
     * please use ChartPoint.DoughnutInnerRadius property.
     * This property will be removed 12 months later since June 2024.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use ChartPoint.DoughnutInnerRadius property, instead.
     */
    getInnerRadiusPx() : number;
    /**
     * Gets the starting angle for the pie section, measured in degrees clockwise from the x-axis after calls Chart.Calculate() method.
     * Applies to Pie chart.
     */
    getStartAngle() : number;
    /**
     * Gets the ending angle for the pie section, measured in degrees clockwise from the x-axis after calls Chart.Calculate() method.
     * Applies to Pie chart.
     */
    getEndAngle() : number;
    /**
     * Gets the x coordinate of starting point for the pie section after calls Chart.Calculate() method.
     * Applies to Pie and Doughnut  chart.
     */
    getArcStartPointXPx() : number;
    /**
     * Gets the y coordinate of starting point for the pie section after calls Chart.Calculate() method.
     * Applies to Pie and Doughnut  chart.
     */
    getArcStartPointYPx() : number;
    /**
     * Gets the x coordinate of ending point for the pie section after calls Chart.Calculate() method.
     * Applies to Pie and Doughnut  chart.
     */
    getArcEndPointXPx() : number;
    /**
     * Gets the y coordinate of ending point for the pie section after calls Chart.Calculate() method.
     * Applies to Pie and Doughnut chart.
     */
    getArcEndPointYPx() : number;
    /**
     * Gets the x coordinate of starting point for the pie section after calls Chart.Calculate() method.
     * Applies to Doughnut chart.
     */
    getInnerArcStartPointXPx() : number;
    /**
     * Gets the y coordinate of starting point for the pie section after calls Chart.Calculate() method.
     * Applies to Doughnut chart.
     */
    getInnerArcStartPointYPx() : number;
    /**
     * Gets the x coordinate of ending point for the pie section after calls Chart.Calculate() method.
     * Applies to Doughnut chart.
     */
    getInnerArcEndPointXPx() : number;
    /**
     * Gets the y coordinate of ending point for the pie section after calls Chart.Calculate() method.
     * Applies to Doughnut chart.
     */
    getInnerArcEndPointYPx() : number;
    /**
     * Gets the number of top points after calls Chart.Calculate() method.
     */
    getTopPointCount() : number;
    /**
     * Gets x-coordinate of the top point of shape after calls Chart.Calculate() method.
     * Applies 3D charts: Column3D, Bar3D, Cone, Cylinder, Pyramid and Area3D
     */
    getTopPointXPx(index: number) : number;
    /**
     * Gets y-coordinate of the top point of shape after calls Chart.Calculate() method.
     * Applies 3D charts: Column3D, Bar3D, Cone, Cylinder, Pyramid and Area3D
     */
    getTopPointYPx(index: number) : number;
    /**
     * Gets the number of bottom points  after calls Chart.Calculate() method.
     */
    getBottomPointCount() : number;
    /**
     * Gets x-coordinate of the bottom point of shape after calls Chart.Calculate() method.
     * Applies 3D charts: Column3D, Bar3D, Cone, Cylinder, Pyramid
     */
    getBottomPointXPx(index: number) : number;
    /**
     * Gets y-coordinate of the bottom point of shape  after calls Chart.Calculate() method.
     * Applies 3D charts: Column3D, Bar3D, Cone, Cylinder, Pyramid
     */
    getBottomPointYPx(index: number) : number;
    /**
     * Gets the number of the points on category axis after calls Chart.Calculate() method. Only applies to area chart.
     * 
     * @remarks
     * Area 2D chart return 1
     * Area 3D chart return 2.
     */
    getOnCategoryAxisPointCount() : number;
    /**
     * Gets x-coordinate of the point on category axis after calls Chart.Calculate() method. Only applies to Area chart.
     * 
     * @remarks
     * Area 2D chart: index is 0.
     * Area 3D chart: index is 0 or 1.
     */
    getOnCategoryAxisPointXPx(index: number) : number;
    /**
     * Gets y-coordinate of the point on category axis after calls Chart.Calculate() method. Only applies to Area chart.
     * 
     * @remarks
     * Area 2D chart: index is 0.
     * Area 3D chart: index is 0 or 1.
     */
    getOnCategoryAxisPointYPx(index: number) : number;
}

/**
 * Represents a collection that contains all the points in one series.
 */
export class ChartPointCollection {
    /**
     * Gets the <see cref="ChartPoint"/> element at the specified index in the series.
     * @param index - The index of chart point in the series.
     * @returns
     * The ChartPoint object.
     */
    get(index: number) : ChartPoint;
    /**
     * Gets the count of the chart point.
     */
    getCount() : number;
    /**
     * Returns an enumerator for the entire <see cref="ChartPointCollection"/>.
     */
    getEnumerator() : ChartPointEnumerator;
    /**
     * Remove all setting of the chart points.
     */
    clear() : void;
    /**
     * Removes point at the index of the series..
     * @param index - The index of the point.
     */
    removeAt(index: number) : void;
}

/**
 * Encapsulates a collection of <see cref="Chart"/> objects.
 */
export class ChartCollection {
    /**
     * Gets the <see cref="Chart"/> element at the specified index.
     * @param index - The zero based index of the element.
     * @returns
     * The element at the specified index.
     */
    get(index: number) : Chart;
    /**
     * Gets the chart by the name.
     * @param name - The chart name.
     * @returns
     * The chart.
     * 
     * @remarks
     * The default chart name is null. So you have to explicitly set the name of the chart.
     */
    get(name: string) : Chart;
    /**
     * Adds a chart to the collection.
     * @param type - Chart type
     * @param left - The x offset to corner
     * @param top - The y offset to corner
     * @param width - The chart width
     * @param height - The chart height
     * @returns
     * <see cref="Chart"/> object index.
     */
    addFloatingChart(type: ChartType, left: number, top: number, width: number, height: number) : number;
    /**
     * Adds a chart to the collection.
     * @param type - Chart type
     * @param upperLeftRow - Upper left row index.
     * @param upperLeftColumn - Upper left column index.
     * @param lowerRightRow - Lower right row index
     * @param lowerRightColumn - Lower right column index
     * @returns
     * <see cref="Chart"/> object index.
     */
    add(type: ChartType, upperLeftRow: number, upperLeftColumn: number, lowerRightRow: number, lowerRightColumn: number) : number;
    /**
     * Adds a chart with preset template.
     * @param data - The data of chart template file(.crtx).
     * @param dataRange - Specifies the data range of the chart
     * @param isVertical - Specifies whether to plot the series from a range of cell values by row or by column.
     * @param topRow - Upper left row index.
     * @param leftColumn - Upper left column index.
     * @param rightRow - Lower right row index
     * @param bottomColumn - Lower right column index
     * @returns
     * <see cref="Chart"/> object index.
     */
    add(data: number[], dataRange: string, isVertical: boolean, topRow: number, leftColumn: number, rightRow: number, bottomColumn: number) : number;
    /**
     * Adds a chart to the collection.
     * @param type - Chart type
     * @param dataRange - Specifies the data range of the chart
     * @param isVertical - Specifies whether to plot the series from a range of cell values by row or by column.
     * @param topRow - Upper left row index.
     * @param leftColumn - Upper left column index.
     * @param rightRow - Lower right row index
     * @param bottomColumn - Lower right column index
     * @returns
     * <see cref="Chart"/> object index.
     */
    add(type: ChartType, dataRange: string, isVertical: boolean, topRow: number, leftColumn: number, rightRow: number, bottomColumn: number) : number;
    /**
     * Remove a chart at the specific index.
     * @param index - The chart index.
     */
    removeAt(index: number) : void;
    /**
     * Clear all charts.
     */
    clear() : void;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the shape of the chart.
 * Properties and methods for the ChartObject object control the appearance and size of the embedded chart on the worksheet.
 */
export class ChartShape extends Shape {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Shape);
    /**
     * Returns a Chart object that represents the chart contained in the object.
     */
    getChart() : Chart;
}

/**
 * Represents the way the two sections of either a pie of pie chart or a bar of pie chart are split.
 */
export enum ChartSplitType {
    /**
     * Represents the data points shall be split between the pie
     * and the second chart by putting the last Split Position
     * of the data points in the second chart
     */
    Position = 0,
    /**
     * Represents the data points shall be split between the pie
     * and the second chart by putting the data points with
     * value less than Split Position in the second chart.
     */
    Value = 1,
    /**
     * Represents the data points shall be split between the pie
     * and the second chart by putting the points with
     * percentage less than Split Position percent in the
     * second chart.
     */
    PercentValue = 2,
    /**
     * Represents the data points shall be split between the pie
     * and the second chart according to the Custom Split
     * values.
     */
    Custom = 3,
    /**
     * Represents the data points shall be split using the default
     * mechanism for this chart type.
     * 
     * @remarks
     * NOTE: This member is now obsolete. Instead,
     * please use Series.IsAutoSplit property.
     * This property will be removed 12 months later since September 2023.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use Series.IsAutoSplit property instead.
     */
    Auto = 4,
}

/**
 * Enumerates all chart types used in Excel.
 */
export enum ChartType {
    /**
     * Represents Area Chart.
     */
    Area = 0,
    /**
     * Represents Stacked Area Chart.
     */
    AreaStacked = 1,
    /**
     * Represents 100% Stacked Area Chart.
     */
    Area100PercentStacked = 2,
    /**
     * Represents 3D Area Chart.
     */
    Area3D = 3,
    /**
     * Represents 3D Stacked Area Chart.
     */
    Area3DStacked = 4,
    /**
     * Represents 3D 100% Stacked Area Chart.
     */
    Area3D100PercentStacked = 5,
    /**
     * Represents Bar Chart: Clustered Bar Chart.
     */
    Bar = 6,
    /**
     * Represents Stacked Bar Chart.
     */
    BarStacked = 7,
    /**
     * Represents 100% Stacked Bar Chart.
     */
    Bar100PercentStacked = 8,
    /**
     * Represents 3D Clustered Bar Chart.
     */
    Bar3DClustered = 9,
    /**
     * Represents 3D Stacked Bar Chart.
     */
    Bar3DStacked = 10,
    /**
     * Represents 3D 100% Stacked Bar Chart.
     */
    Bar3D100PercentStacked = 11,
    /**
     * Represents Bubble Chart.
     */
    Bubble = 12,
    /**
     * Represents 3D Bubble Chart.
     */
    Bubble3D = 13,
    /**
     * Represents Column Chart: Clustered Column Chart.
     */
    Column = 14,
    /**
     * Represents Stacked Column Chart.
     */
    ColumnStacked = 15,
    /**
     * Represents 100% Stacked Column Chart.
     */
    Column100PercentStacked = 16,
    /**
     * Represents 3D Column Chart.
     */
    Column3D = 17,
    /**
     * Represents 3D Clustered Column Chart.
     */
    Column3DClustered = 18,
    /**
     * Represents 3D Stacked Column Chart.
     */
    Column3DStacked = 19,
    /**
     * Represents 3D 100% Stacked Column Chart.
     */
    Column3D100PercentStacked = 20,
    /**
     * Represents Cone Chart.
     */
    Cone = 21,
    /**
     * Represents Stacked Cone Chart.
     */
    ConeStacked = 22,
    /**
     * Represents 100% Stacked Cone Chart.
     */
    Cone100PercentStacked = 23,
    /**
     * Represents Conical Bar Chart.
     */
    ConicalBar = 24,
    /**
     * Represents Stacked Conical Bar Chart.
     */
    ConicalBarStacked = 25,
    /**
     * Represents 100% Stacked Conical Bar Chart.
     */
    ConicalBar100PercentStacked = 26,
    /**
     * Represents 3D Conical Column Chart.
     */
    ConicalColumn3D = 27,
    /**
     * Represents Cylinder Chart.
     */
    Cylinder = 28,
    /**
     * Represents Stacked Cylinder Chart.
     */
    CylinderStacked = 29,
    /**
     * Represents 100% Stacked Cylinder Chart.
     */
    Cylinder100PercentStacked = 30,
    /**
     * Represents Cylindrical Bar Chart.
     */
    CylindricalBar = 31,
    /**
     * Represents Stacked Cylindrical Bar Chart.
     */
    CylindricalBarStacked = 32,
    /**
     * Represents 100% Stacked Cylindrical Bar Chart.
     */
    CylindricalBar100PercentStacked = 33,
    /**
     * Represents 3D Cylindrical Column Chart.
     */
    CylindricalColumn3D = 34,
    /**
     * Represents Doughnut Chart.
     */
    Doughnut = 35,
    /**
     * Represents Exploded Doughnut Chart.
     */
    DoughnutExploded = 36,
    /**
     * Represents Line Chart.
     */
    Line = 37,
    /**
     * Represents Stacked Line Chart.
     */
    LineStacked = 38,
    /**
     * Represents 100% Stacked Line Chart.
     */
    Line100PercentStacked = 39,
    /**
     * Represents Line Chart with data markers.
     */
    LineWithDataMarkers = 40,
    /**
     * Represents Stacked Line Chart with data markers.
     */
    LineStackedWithDataMarkers = 41,
    /**
     * Represents 100% Stacked Line Chart with data markers.
     */
    Line100PercentStackedWithDataMarkers = 42,
    /**
     * Represents 3D Line Chart.
     */
    Line3D = 43,
    /**
     * Represents Pie Chart.
     */
    Pie = 44,
    /**
     * Represents 3D Pie Chart.
     */
    Pie3D = 45,
    /**
     * Represents Pie of Pie Chart.
     */
    PiePie = 46,
    /**
     * Represents Exploded Pie Chart.
     */
    PieExploded = 47,
    /**
     * Represents 3D Exploded Pie Chart.
     */
    Pie3DExploded = 48,
    /**
     * Represents Bar of Pie Chart.
     */
    PieBar = 49,
    /**
     * Represents Pyramid Chart.
     */
    Pyramid = 50,
    /**
     * Represents Stacked Pyramid Chart.
     */
    PyramidStacked = 51,
    /**
     * Represents 100% Stacked Pyramid Chart.
     */
    Pyramid100PercentStacked = 52,
    /**
     * Represents Pyramid Bar Chart.
     */
    PyramidBar = 53,
    /**
     * Represents Stacked Pyramid Bar Chart.
     */
    PyramidBarStacked = 54,
    /**
     * Represents 100% Stacked Pyramid Bar Chart.
     */
    PyramidBar100PercentStacked = 55,
    /**
     * Represents 3D Pyramid Column Chart.
     */
    PyramidColumn3D = 56,
    /**
     * Represents Radar Chart.
     */
    Radar = 57,
    /**
     * Represents Radar Chart with data markers.
     */
    RadarWithDataMarkers = 58,
    /**
     * Represents Filled Radar Chart.
     */
    RadarFilled = 59,
    /**
     * Represents Scatter Chart.
     */
    Scatter = 60,
    /**
     * Represents Scatter Chart connected by curves, with data markers.
     */
    ScatterConnectedByCurvesWithDataMarker = 61,
    /**
     * Represents Scatter Chart connected by curves, without data markers.
     */
    ScatterConnectedByCurvesWithoutDataMarker = 62,
    /**
     * Represents Scatter Chart connected by lines, with data markers.
     */
    ScatterConnectedByLinesWithDataMarker = 63,
    /**
     * Represents Scatter Chart connected by lines, without data markers.
     */
    ScatterConnectedByLinesWithoutDataMarker = 64,
    /**
     * Represents High-Low-Close Stock Chart.
     */
    StockHighLowClose = 65,
    /**
     * Represents Open-High-Low-Close Stock Chart.
     */
    StockOpenHighLowClose = 66,
    /**
     * Represents Volume-High-Low-Close Stock Chart.
     */
    StockVolumeHighLowClose = 67,
    /**
     * Represents Volume-Open-High-Low-Close Stock Chart.
     */
    StockVolumeOpenHighLowClose = 68,
    /**
     * Represents Surface Chart: 3D Surface Chart.
     */
    Surface3D = 69,
    /**
     * Represents Wireframe 3D Surface Chart.
     */
    SurfaceWireframe3D = 70,
    /**
     * Represents Contour Chart.
     */
    SurfaceContour = 71,
    /**
     * Represents Wireframe Contour Chart.
     */
    SurfaceContourWireframe = 72,
    /**
     * The series is laid out as box and whisker.
     */
    BoxWhisker = 73,
    /**
     * The series is laid out as a funnel.
     */
    Funnel = 74,
    /**
     * The series is laid out as pareto lines.
     */
    ParetoLine = 75,
    /**
     * The series is laid out as a sunburst.
     */
    Sunburst = 76,
    /**
     * The series is laid out as a treemap.
     */
    Treemap = 77,
    /**
     * The series is laid out as a waterfall.
     */
    Waterfall = 78,
    /**
     * The series is laid out as a histogram.
     */
    Histogram = 79,
    /**
     * The series is laid out as a region map.
     */
    Map = 80,
    /**
     * The series is laid out as a radial historgram. It is used only for rendering
     */
    RadialHistogram = 81,
}

/**
 * Represents a check box object in a worksheet.
 */
export class CheckBox extends Shape {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Shape);
    /**
     * Indicates if the checkbox is checked or not.
     */
    getValue() : boolean;
    /**
     * Indicates if the checkbox is checked or not.
     * @param value - The value to set.
     */
    setValue(value: boolean) : void;
    /**
     * Gets or set checkbox' value.
     */
    getCheckedValue() : CheckValueType;
    /**
     * Gets or set checkbox' value.
     * @param value - The value to set.
     */
    setCheckedValue(value: CheckValueType) : void;
    /**
     * Indicates whether the combobox has 3-D shading.
     */
    getShadow() : boolean;
    /**
     * Indicates whether the combobox has 3-D shading.
     * @param value - The value to set.
     */
    setShadow(value: boolean) : void;
}

/**
 * Represents a collection of <see cref="CheckBox"/> objects in a worksheet.
 */
export class CheckBoxCollection {
    /**
     * Gets the <see cref="CheckBox"/> element at the specified index.
     * @param index - The zero based index of the element.
     * @returns
     * The element at the specified index.
     */
    get(index: number) : CheckBox;
    /**
     * Adds a checkBox to the collection.
     * @param upperLeftRow - Upper left row index.
     * @param upperLeftColumn - Upper left column index.
     * @param height - Height of checkBox, in unit of pixel.
     * @param width - Width of checkBox, in unit of pixel.
     * @returns
     * <see cref="CheckBox"/> object index.
     */
    add(upperLeftRow: number, upperLeftColumn: number, height: number, width: number) : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the check value type of the check box.
 */
export enum CheckValueType {
    /**
     * UnChecked
     */
    UnChecked = 0,
    /**
     * Checked
     */
    Checked = 1,
    /**
     * Mixed
     */
    Mixed = 2,
}

/**
 * Represents the control form ComboBox.
 */
export class ComboBox extends Shape {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Shape);
    /**
     * Gets or sets the index number of the currently selected item in a list box or combo box.
     * Zero-based.
     * 
     * @remarks
     * -1 presents no item is selected.
     */
    getSelectedIndex() : number;
    /**
     * Gets or sets the index number of the currently selected item in a list box or combo box.
     * Zero-based.
     * @param value - The value to set.
     * 
     * @remarks
     * -1 presents no item is selected.
     */
    setSelectedIndex(value: number) : void;
    /**
     * Gets the selected value of the combox box.
     */
    getSelectedValue() : string;
    /**
     * Gets the selected cell in the input range of the combo box.
     */
    getSelectedCell() : Cell;
    /**
     * Indicates whether the combobox has 3-D shading.
     */
    getShadow() : boolean;
    /**
     * Indicates whether the combobox has 3-D shading.
     * @param value - The value to set.
     */
    setShadow(value: boolean) : void;
    /**
     * Gets or sets the number of list lines displayed in the drop-down portion of a combo box.
     */
    getDropDownLines() : number;
    /**
     * Gets or sets the number of list lines displayed in the drop-down portion of a combo box.
     * @param value - The value to set.
     */
    setDropDownLines(value: number) : void;
}

/**
 * Encapsulates the object that represents a cell comment.
 */
export class Comment {
    /**
     * Gets and sets Name of the original comment author
     */
    getAuthor() : string;
    /**
     * Gets and sets Name of the original comment author
     * @param value - The value to set.
     */
    setAuthor(value: string) : void;
    /**
     * Get a Shape object that represents the shape attached to the specified comment.
     */
    getCommentShape() : CommentShape;
    /**
     * Gets the row index of the comment.
     */
    getRow() : number;
    /**
     * Gets the column index of the comment.
     */
    getColumn() : number;
    /**
     * Indicates whether this comment is a threaded comment.
     */
    isThreadedComment() : boolean;
    /**
     * Gets the list of threaded comments;
     */
    getThreadedComments() : ThreadedCommentCollection;
    /**
     * Represents the content of comment.
     * 
     * @remarks
     * If this is a threaded comment, the note could not be changed, otherwise MS Excel could not process it as a threaded comment.
     */
    getNote() : string;
    /**
     * Represents the content of comment.
     * @param value - The value to set.
     * 
     * @remarks
     * If this is a threaded comment, the note could not be changed, otherwise MS Excel could not process it as a threaded comment.
     */
    setNote(value: string) : void;
    /**
     * Gets and sets the html string which contains data and some formats in this comment.
     * 
     * @remarks
     * If this is a threaded comment, the note could not be changed, otherwise MS Excel could not process it as a threaded comment.
     */
    getHtmlNote() : string;
    /**
     * Gets and sets the html string which contains data and some formats in this comment.
     * @param value - The value to set.
     * 
     * @remarks
     * If this is a threaded comment, the note could not be changed, otherwise MS Excel could not process it as a threaded comment.
     */
    setHtmlNote(value: string) : void;
    /**
     * Gets the font of comment.
     */
    getFont() : Font;
    /**
     * Represents if the comment is visible or not.
     */
    isVisible() : boolean;
    /**
     * Represents if the comment is visible or not.
     * @param value - The value to set.
     */
    setIsVisible(value: boolean) : void;
    /**
     * Gets and sets the text orientation type of the comment.
     */
    getTextOrientationType() : TextOrientationType;
    /**
     * Gets and sets the text orientation type of the comment.
     * @param value - The value to set.
     */
    setTextOrientationType(value: TextOrientationType) : void;
    /**
     * Gets and sets the text horizontal alignment type of the comment.
     */
    getTextHorizontalAlignment() : TextAlignmentType;
    /**
     * Gets and sets the text horizontal alignment type of the comment.
     * @param value - The value to set.
     */
    setTextHorizontalAlignment(value: TextAlignmentType) : void;
    /**
     * Gets and sets the text vertical alignment type of the comment.
     */
    getTextVerticalAlignment() : TextAlignmentType;
    /**
     * Gets and sets the text vertical alignment type of the comment.
     * @param value - The value to set.
     */
    setTextVerticalAlignment(value: TextAlignmentType) : void;
    /**
     * Indicates if size of comment is adjusted automatically according to its content.
     */
    getAutoSize() : boolean;
    /**
     * Indicates if size of comment is adjusted automatically according to its content.
     * @param value - The value to set.
     */
    setAutoSize(value: boolean) : void;
    /**
     * Represents the height of the comment, in unit of centimeters.
     */
    getHeightCM() : number;
    /**
     * Represents the height of the comment, in unit of centimeters.
     * @param value - The value to set.
     */
    setHeightCM(value: number) : void;
    /**
     * Represents the width of the comment, in unit of centimeters.
     */
    getWidthCM() : number;
    /**
     * Represents the width of the comment, in unit of centimeters.
     * @param value - The value to set.
     */
    setWidthCM(value: number) : void;
    /**
     * Represents the width of the comment, in unit of pixels.
     */
    getWidth() : number;
    /**
     * Represents the width of the comment, in unit of pixels.
     * @param value - The value to set.
     */
    setWidth(value: number) : void;
    /**
     * Represents the Height of the comment, in unit of pixels.
     */
    getHeight() : number;
    /**
     * Represents the Height of the comment, in unit of pixels.
     * @param value - The value to set.
     */
    setHeight(value: number) : void;
    /**
     * Represents the width of the comment, in unit of inches.
     */
    getWidthInch() : number;
    /**
     * Represents the width of the comment, in unit of inches.
     * @param value - The value to set.
     */
    setWidthInch(value: number) : void;
    /**
     * Represents the height of the comment, in unit of inches.
     */
    getHeightInch() : number;
    /**
     * Represents the height of the comment, in unit of inches.
     * @param value - The value to set.
     */
    setHeightInch(value: number) : void;
    /**
     * Format some characters with the font setting.
     * @param startIndex - The start index.
     * @param length - The length.
     * @param font - The font setting.
     * @param flag - The flag of the font setting.
     */
    formatCharacters(startIndex: number, length: number, font: Font, flag: StyleFlag) : void;
    /**
     * Returns a Characters object that represents a range of characters within the comment text.
     * @param startIndex - The index of the start of the character.
     * @param length - The number of characters.
     * @returns
     * Characters object.
     */
    characters(startIndex: number, length: number) : FontSetting;
    /**
     * Returns all Characters objects
     * that represents a range of characters within the comment text.
     * @returns
     * All Characters objects
     */
    getRichFormattings() : FontSetting[];
}

/**
 * Encapsulates a collection of <see cref="Comment"/> objects.
 */
export class CommentCollection {
    /**
     * Gets the <see cref="Comment"/> element at the specified index.
     * @param index - The zero based index of the element.
     * @returns
     * The element at the specified index.
     */
    get(index: number) : Comment;
    /**
     * Gets the <see cref="Comment"/> element at the specified cell.
     * @param cellName - Cell name.
     * @returns
     * The element at the specified cell.
     */
    get(cellName: string) : Comment;
    /**
     * Gets the <see cref="Comment"/> element at the specified row index and column index.
     * @param row - Row index.
     * @param column - Column index.
     * @returns
     * The element at the specified cell.
     */
    get(row: number, column: number) : Comment;
    /**
     * Adds a threaded comment.
     * @param row - Cell row index.
     * @param column - Cell column index.
     * @param text - The text of the comment
     * @param author - The user of this threaded comment.
     * @returns
     * <see cref="ThreadedComment"/> object index.
     */
    addThreadedComment(row: number, column: number, text: string, author: ThreadedCommentAuthor) : number;
    /**
     * Adds a threaded comment.
     * @param cellName - The name of the cell.
     * @param text - The text of the comment
     * @param author - The user of this threaded comment.
     * @returns
     * <see cref="ThreadedComment"/> object index.
     */
    addThreadedComment(cellName: string, text: string, author: ThreadedCommentAuthor) : number;
    /**
     * Gets the threaded comments by row and column index.
     * @param row - The row index.
     * @param column - The column index.
     */
    getThreadedComments(row: number, column: number) : ThreadedCommentCollection;
    /**
     * Gets the threaded comments by cell name.
     * @param cellName - The name of the cell.
     */
    getThreadedComments(cellName: string) : ThreadedCommentCollection;
    /**
     * Adds a comment to the collection.
     * @param row - Cell row index.
     * @param column - Cell column index.
     * @returns
     * <see cref="Comment"/> object index.
     */
    add(row: number, column: number) : number;
    /**
     * Adds a comment to the collection.
     * @param cellName - Cell name.
     * @returns
     * <see cref="Comment"/> object index.
     */
    add(cellName: string) : number;
    /**
     * Removes the comment of the specific cell.
     * @param cellName - The name of cell which contains a comment.
     */
    removeAt(cellName: string) : void;
    /**
     * Removes the comment of the specific cell.
     * @param row - The row index.
     * @param column - the column index.
     */
    removeAt(row: number, column: number) : void;
    /**
     * Removes all comments;
     */
    clear() : void;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the shape of the comment.
 */
export class CommentShape extends Shape {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Shape);
    /**
     * Gets the comment object.
     */
    getComment() : Comment;
}

/**
 * Encapsulates a collection of <see cref="FormatCondition"/> objects.
 */
export class ConditionalFormattingCollection {
    /**
     * Gets the FormatConditions element at the specified index.
     * @param index - The zero based index of the element.
     */
    get(index: number) : FormatConditionCollection;
    /**
     * Remove all conditional formatting in the range.
     * @param startRow - The start row of the range.
     * @param startColumn - The start column of the range.
     * @param totalRows - The number of rows of the range.
     * @param totalColumns - The number of columns of the range.
     */
    removeArea(startRow: number, startColumn: number, totalRows: number, totalColumns: number) : void;
    /**
     * Copies conditional formatting.
     * @param cfs - The conditional formatting
     */
    copy(cfs: ConditionalFormattingCollection) : void;
    /**
     * Adds a FormatConditions to the collection.
     * @returns
     * FormatConditions object index.
     */
    add() : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents consolidation function.
 */
export enum ConsolidationFunction {
    /**
     * Represents Sum function.
     */
    Sum = 0,
    /**
     * Represents Count function.
     */
    Count = 1,
    /**
     * Represents Average function.
     */
    Average = 2,
    /**
     * Represents Max function.
     */
    Max = 3,
    /**
     * Represents Min function.
     */
    Min = 4,
    /**
     * Represents Product function.
     */
    Product = 5,
    /**
     * Represents Count Nums function.
     */
    CountNums = 6,
    /**
     * Represents StdDev function.
     */
    StdDev = 7,
    /**
     * Represents StdDevp function.
     */
    StdDevp = 8,
    /**
     * Represents Var function.
     */
    Var = 9,
    /**
     * Represents Varp function.
     */
    Varp = 10,
    /**
     * Represents Distinct Count function.
     * 
     * @remarks
     * Only valid for PivotTable with Data Module created since by 2013.
     */
    DistinctCount = 11,
}

/**
 * Specifies the type (format) of an image.
 */
export enum ImageType {
    /**
     * An unknown image type.
     */
    Unknown = 0,
    /**
     * Windows Enhanced Metafile.
     */
    Emf = 2,
    /**
     * Windows Metafile.
     */
    Wmf = 3,
    /**
     * Macintosh PICT.
     */
    Pict = 4,
    /**
     * JPEG JFIF.
     */
    Jpeg = 5,
    /**
     * Portable Network Graphics.
     */
    Png = 6,
    /**
     * Windows Bitmap
     */
    Bmp = 7,
    /**
     * Gif
     */
    Gif = 66,
    /**
     * Tiff
     */
    Tiff = 67,
    /**
     * Svg
     */
    Svg = 68,
    /**
     * Svm
     */
    Svm = 69,
    /**
     * glTF
     */
    Gltf = 70,
    /**
     * Windows Enhanced Metafile which is more compatible with Office.
     */
    OfficeCompatibleEmf = 71,
    /**
     * Weppy image format
     */
    WebP = 72,
}

/**
 * Specifies a type of compression applied to all content in the PDF file except images.
 */
export enum PdfCompressionCore {
    /**
     * None
     */
    None = 0,
    /**
     * Rle
     */
    Rle = 1,
    /**
     * Lzw
     */
    Lzw = 2,
    /**
     * Flate
     */
    Flate = 3,
}

/**
 * Represents the command of header/footer
 */
export class HeaderFooterCommand {
    /**
     * Gets the header/footer' command type .
     */
    getType() : HeaderFooterCommandType;
    /**
     * Gets the font of the command's value.
     * 
     * @remarks
     * Useless for HeaderFooterCommandType.Picture.
     */
    getFont() : Font;
    /**
     * Gets the text of the command.
     * 
     * @remarks
     * Only valid for HeaderFooterCommandType.Text.
     */
    getText() : string;
}

/**
 * Represents the copy options.
 */
export class CopyOptions {
    /**
     * CopyOptions constructor.
     */
    constructor();
    /**
     * Indicates whether keeping macros;
     * 
     * @remarks
     * Only for copying workbook.
     */
    getKeepMacros() : boolean;
    /**
     * Indicates whether keeping macros;
     * @param value - The value to set.
     * 
     * @remarks
     * Only for copying workbook.
     */
    setKeepMacros(value: boolean) : void;
    /**
     * Indicates whether extend ranges when copying the range to adjacent range.
     * 
     * @remarks
     * If it's true, only extends the range of the hyperlink,not adding a new hyperlink when copying hyperlinks to adjacent rows.
     */
    getExtendToAdjacentRange() : boolean;
    /**
     * Indicates whether extend ranges when copying the range to adjacent range.
     * @param value - The value to set.
     * 
     * @remarks
     * If it's true, only extends the range of the hyperlink,not adding a new hyperlink when copying hyperlinks to adjacent rows.
     */
    setExtendToAdjacentRange(value: boolean) : void;
    /**
     * Indicates whether copying the names.
     */
    getCopyNames() : boolean;
    /**
     * Indicates whether copying the names.
     * @param value - The value to set.
     */
    setCopyNames(value: boolean) : void;
    /**
     * If the formula is not valid for the dest destination, only copy values.
     */
    getCopyInvalidFormulasAsValues() : boolean;
    /**
     * If the formula is not valid for the dest destination, only copy values.
     * @param value - The value to set.
     */
    setCopyInvalidFormulasAsValues(value: boolean) : void;
    /**
     * Indicates whether copying column width in unit of characters.
     */
    getColumnCharacterWidth() : boolean;
    /**
     * Indicates whether copying column width in unit of characters.
     * @param value - The value to set.
     */
    setColumnCharacterWidth(value: boolean) : void;
    /**
     * In ms excel, when copying formulas which refer to other worksheets while copying a worksheet to another one,
     * the copied formulas should refer to source workbook.
     * However, for some situations user may need the copied formulas refer to worksheets with the same name
     * in the same workbook, such as when those worksheets have been copied before this copy operation,
     * then this property should be kept as true.
     * 
     * @remarks
     * The default value is true.
     */
    getReferToSheetWithSameName() : boolean;
    /**
     * In ms excel, when copying formulas which refer to other worksheets while copying a worksheet to another one,
     * the copied formulas should refer to source workbook.
     * However, for some situations user may need the copied formulas refer to worksheets with the same name
     * in the same workbook, such as when those worksheets have been copied before this copy operation,
     * then this property should be kept as true.
     * @param value - The value to set.
     * 
     * @remarks
     * The default value is true.
     */
    setReferToSheetWithSameName(value: boolean) : void;
    /**
     * When copying the range in the same file and the chart refers to the source sheet,
     * False means the copied chart's data source will not be changed.
     * True means the copied chart's data source refers to the destination sheet.
     * 
     * @remarks
     * The default value is false, it works as MS Excel.
     */
    getReferToDestinationSheet() : boolean;
    /**
     * When copying the range in the same file and the chart refers to the source sheet,
     * False means the copied chart's data source will not be changed.
     * True means the copied chart's data source refers to the destination sheet.
     * @param value - The value to set.
     * 
     * @remarks
     * The default value is false, it works as MS Excel.
     */
    setReferToDestinationSheet(value: boolean) : void;
}

/**
 * Represents Excel country identifiers.
 */
export enum CountryCode {
    /**
     */
    Default = 0,
    /**
     * United States
     */
    USA = 1,
    /**
     * Canada
     */
    Canada = 2,
    /**
     * Latin America, except Brazil
     */
    LatinAmeric = 3,
    /**
     * Russia
     */
    Russia = 7,
    /**
     * Egypt
     */
    Egypt = 20,
    /**
     * Greece
     */
    Greece = 30,
    /**
     * Netherlands
     */
    Netherlands = 31,
    /**
     * Belgium
     */
    Belgium = 32,
    /**
     * France
     */
    France = 33,
    /**
     * Spain
     */
    Spain = 34,
    /**
     * Hungary
     */
    Hungary = 36,
    /**
     * Italy
     */
    Italy = 39,
    /**
     * Switzerland
     */
    Switzerland = 41,
    /**
     * Austria
     */
    Austria = 43,
    /**
     * United Kingdom
     */
    UnitedKingdom = 44,
    /**
     * Denmark
     */
    Denmark = 45,
    /**
     * Sweden
     */
    Sweden = 46,
    /**
     * Norway
     */
    Norway = 47,
    /**
     * Poland
     */
    Poland = 48,
    /**
     * Germany
     */
    Germany = 49,
    /**
     * Mexico
     */
    Mexico = 52,
    /**
     * Brazil
     */
    Brazil = 55,
    /**
     * Australia
     */
    Australia = 61,
    /**
     * New Zealand
     */
    NewZealand = 64,
    /**
     * Thailand
     */
    Thailand = 66,
    /**
     * Japan
     */
    Japan = 81,
    /**
     * SouthKorea
     */
    SouthKorea = 82,
    /**
     * Viet Nam
     */
    VietNam = 84,
    /**
     * People's Republic of China
     */
    China = 86,
    /**
     * Turkey
     */
    Turkey = 90,
    /**
     * India
     */
    India = 91,
    /**
     * Algeria
     */
    Algeria = 213,
    /**
     * Morocco
     */
    Morocco = 216,
    /**
     * Libya
     */
    Libya = 218,
    /**
     * Portugal
     */
    Portugal = 351,
    /**
     * Iceland
     */
    Iceland = 354,
    /**
     * Finland
     */
    Finland = 358,
    /**
     * Czech Republic
     */
    Czech = 420,
    /**
     * Taiwan
     */
    Taiwan = 886,
    /**
     * Lebanon
     */
    Lebanon = 961,
    /**
     * Jordan
     */
    Jordan = 962,
    /**
     * Syria
     */
    Syria = 963,
    /**
     * Iraq
     */
    Iraq = 964,
    /**
     * Kuwait
     */
    Kuwait = 965,
    /**
     * Saudi Arabia
     */
    Saudi = 966,
    /**
     * United Arab Emirates
     */
    UnitedArabEmirates = 971,
    /**
     * Israel
     */
    Israel = 972,
    /**
     * Qatar
     */
    Qatar = 974,
    /**
     * Iran
     */
    Iran = 981,
}

/**
 * A collection of <see cref="CustomProperty"/> objects that represent additional information.
 */
export class CustomPropertyCollection {
    /**
     * Gets the custom property by the specific index.
     * @param index - The index.
     * @returns
     * The custom property
     */
    get(index: number) : CustomProperty;
    /**
     * Gets the custom property by the property name.
     * @param name - The property name.
     * @returns
     * The custom property
     */
    get(name: string) : CustomProperty;
    /**
     * Adds custom property information.
     * @param name - The name of the custom property.
     * @param value - The value of the custom property.
     */
    add(name: string, value: string) : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents identifier information.
 */
export class CustomProperty {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Returns or sets the name of the object.
     */
    getName() : string;
    /**
     * Returns or sets the name of the object.
     * @param value - The value to set.
     */
    setName(value: string) : void;
    /**
     * Returns or sets the value of the custom property.
     */
    getValue() : string;
    /**
     * Returns or sets the value of the custom property.
     * @param value - The value to set.
     */
    setValue(value: string) : void;
}

/**
 * Encapsulates a collection of all the DataLabel objects for the specified Series.
 */
export class DataLabels extends ChartTextFrame {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: ChartTextFrame);
    /**
     * Gets the <see cref="Line">border</see>.
     */
    getBorder() : Line;
    /**
     * Gets the <see cref="Area">area</see>.
     */
    getArea() : Area;
    /**
     * Indicates the text is auto generated.
     */
    isAutoText() : boolean;
    /**
     * Indicates the text is auto generated.
     * @param value - The value to set.
     */
    setIsAutoText(value: boolean) : void;
    /**
     * Gets and sets the direction of text.
     */
    getDirectionType() : ChartTextDirectionType;
    /**
     * Gets and sets the direction of text.
     * @param value - The value to set.
     */
    setDirectionType(value: ChartTextDirectionType) : void;
    /**
     * Gets or sets the text of data label.
     */
    getText() : string;
    /**
     * Gets or sets the text of data label.
     * @param value - The value to set.
     */
    setText(value: string) : void;
    /**
     * Gets or sets a value indicating whether the text is wrapped.
     */
    isTextWrapped() : boolean;
    /**
     * Gets or sets a value indicating whether the text is wrapped.
     * @param value - The value to set.
     */
    setIsTextWrapped(value: boolean) : void;
    /**
     * Gets and sets the display mode of the background
     */
    getBackgroundMode() : BackgroundMode;
    /**
     * Gets and sets the display mode of the background
     * @param value - The value to set.
     */
    setBackgroundMode(value: BackgroundMode) : void;
    /**
     * Represents a specified chart's data label values display behavior. True displays the values. False to hide.
     */
    getShowValue() : boolean;
    /**
     * Represents a specified chart's data label values display behavior. True displays the values. False to hide.
     * @param value - The value to set.
     */
    setShowValue(value: boolean) : void;
    /**
     * Indicates whether showing cell range as the data labels.
     */
    getShowCellRange() : boolean;
    /**
     * Indicates whether showing cell range as the data labels.
     * @param value - The value to set.
     */
    setShowCellRange(value: boolean) : void;
    /**
     * Represents a specified chart's data label percentage value display behavior. True displays the percentage value. False to hide.
     */
    getShowPercentage() : boolean;
    /**
     * Represents a specified chart's data label percentage value display behavior. True displays the percentage value. False to hide.
     * @param value - The value to set.
     */
    setShowPercentage(value: boolean) : void;
    /**
     * Represents a specified chart's data label percentage value display behavior. True displays the percentage value. False to hide.
     */
    getShowBubbleSize() : boolean;
    /**
     * Represents a specified chart's data label percentage value display behavior. True displays the percentage value. False to hide.
     * @param value - The value to set.
     */
    setShowBubbleSize(value: boolean) : void;
    /**
     * Represents a specified chart's data label category name display behavior.True to display the category name for the data labels on a chart. False to hide.
     */
    getShowCategoryName() : boolean;
    /**
     * Represents a specified chart's data label category name display behavior.True to display the category name for the data labels on a chart. False to hide.
     * @param value - The value to set.
     */
    setShowCategoryName(value: boolean) : void;
    /**
     * Indicates whether the series name displays for the data labels on a chart.
     * True to show the series name. False to hide.
     */
    getShowSeriesName() : boolean;
    /**
     * Indicates whether the series name displays for the data labels on a chart.
     * True to show the series name. False to hide.
     * @param value - The value to set.
     */
    setShowSeriesName(value: boolean) : void;
    /**
     * Represents a specified chart's data label legend key display behavior.
     * True if the data label legend key is visible.
     */
    getShowLegendKey() : boolean;
    /**
     * Represents a specified chart's data label legend key display behavior.
     * True if the data label legend key is visible.
     * @param value - The value to set.
     */
    setShowLegendKey(value: boolean) : void;
    /**
     * Represents the format string for the DataLabels object.
     */
    get_NumberFormat() : string;
    /**
     * Represents the format string for the DataLabels object.
     * @param value - The value to set.
     */
    setNumberFormat(value: string) : void;
    /**
     * Gets and sets the built-in number format.
     */
    getNumber() : number;
    /**
     * Gets and sets the built-in number format.
     * @param value - The value to set.
     */
    setNumber(value: number) : void;
    /**
     * True if the number format is linked to the cells
     * (so that the number format changes in the labels when it changes in the cells).
     */
    getNumberFormatLinked() : boolean;
    /**
     * True if the number format is linked to the cells
     * (so that the number format changes in the labels when it changes in the cells).
     * @param value - The value to set.
     */
    setNumberFormatLinked(value: boolean) : void;
    /**
     * Gets the font of the DataLabels;
     */
    getFont() : Font;
    /**
     * Gets or sets the separator type used for the data labels on a chart.
     * 
     * @remarks
     * To set custom separator, please set  the property <see cref="DataLabels.SeparatorType"/> as <see cref="DataLabelsSeparatorType.Custom"/> and then specify the expected value for <see cref="DataLabels.SeparatorValue"/>.
     */
    getSeparatorType() : DataLabelsSeparatorType;
    /**
     * Gets or sets the separator type used for the data labels on a chart.
     * @param value - The value to set.
     * 
     * @remarks
     * To set custom separator, please set  the property <see cref="DataLabels.SeparatorType"/> as <see cref="DataLabelsSeparatorType.Custom"/> and then specify the expected value for <see cref="DataLabels.SeparatorValue"/>.
     */
    setSeparatorType(value: DataLabelsSeparatorType) : void;
    /**
     * Gets or sets the separator value used for the data labels on a chart.
     */
    getSeparatorValue() : string;
    /**
     * Gets or sets the separator value used for the data labels on a chart.
     * @param value - The value to set.
     */
    setSeparatorValue(value: string) : void;
    /**
     * Represents the position of the data label.
     */
    getPosition() : LabelPositionType;
    /**
     * Represents the position of the data label.
     * @param value - The value to set.
     */
    setPosition(value: LabelPositionType) : void;
    /**
     * Indicates whether the datalabels display never overlap. (For Pie chart)
     */
    isNeverOverlap() : boolean;
    /**
     * Indicates whether the datalabels display never overlap. (For Pie chart)
     * @param value - The value to set.
     */
    setIsNeverOverlap(value: boolean) : void;
    /**
     * Gets or sets  shape type of data label.
     */
    getShapeType() : DataLabelShapeType;
    /**
     * Gets or sets  shape type of data label.
     * @param value - The value to set.
     */
    setShapeType(value: DataLabelShapeType) : void;
    /**
     * Apply the font of the datalabels to all child nodes.
     */
    applyFont() : void;
}

/**
 * Represents the separator type of DataLabels.
 */
export enum DataLabelsSeparatorType {
    /**
     * Represents automatic separator
     */
    Auto = 0,
    /**
     * Represents space(" ")
     */
    Space = 1,
    /**
     * Represents comma(",")
     */
    Comma = 2,
    /**
     * Represents semicolon(";")
     */
    Semicolon = 3,
    /**
     * Represents period(".")
     */
    Period = 4,
    /**
     * Represents newline("\n")
     */
    NewLine = 5,
    /**
     * Represents custom separator
     */
    Custom = 6,
}

/**
 * Summary description for DataSorter.
 */
export class DataSorter {
    /**
     * Gets the key list of data sorter.
     */
    getKeys() : DataSorterKeyCollection;
    /**
     * Represents whether the range has headers.
     */
    getHasHeaders() : boolean;
    /**
     * Represents whether the range has headers.
     * @param value - The value to set.
     */
    setHasHeaders(value: boolean) : void;
    /**
     * Represents first sorted column index(absolute position, column A is 0, B is 1, ...).
     */
    getKey1() : number;
    /**
     * Represents first sorted column index(absolute position, column A is 0, B is 1, ...).
     * @param value - The value to set.
     */
    setKey1(value: number) : void;
    /**
     * Represents sort order of the first key.
     */
    getOrder1() : SortOrder;
    /**
     * Represents sort order of the first key.
     * @param value - The value to set.
     */
    setOrder1(value: SortOrder) : void;
    /**
     * Represents second sorted column index(absolute position, column A is 0, B is 1, ...).
     */
    getKey2() : number;
    /**
     * Represents second sorted column index(absolute position, column A is 0, B is 1, ...).
     * @param value - The value to set.
     */
    setKey2(value: number) : void;
    /**
     * Represents sort order of the second key.
     */
    getOrder2() : SortOrder;
    /**
     * Represents sort order of the second key.
     * @param value - The value to set.
     */
    setOrder2(value: SortOrder) : void;
    /**
     * Represents third sorted column index(absolute position, column A is 0, B is 1, ...).
     */
    getKey3() : number;
    /**
     * Represents third sorted column index(absolute position, column A is 0, B is 1, ...).
     * @param value - The value to set.
     */
    setKey3(value: number) : void;
    /**
     * Represents sort order of the third key.
     */
    getOrder3() : SortOrder;
    /**
     * Represents sort order of the third key.
     * @param value - The value to set.
     */
    setOrder3(value: SortOrder) : void;
    /**
     * True means that sorting orientation is from left to right.
     * False means that sorting orientation is from top to bottom.
     * The default value is false.
     */
    getSortLeftToRight() : boolean;
    /**
     * True means that sorting orientation is from left to right.
     * False means that sorting orientation is from top to bottom.
     * The default value is false.
     * @param value - The value to set.
     */
    setSortLeftToRight(value: boolean) : void;
    /**
     * Gets and sets whether case sensitive when comparing string.
     */
    getCaseSensitive() : boolean;
    /**
     * Gets and sets whether case sensitive when comparing string.
     * @param value - The value to set.
     */
    setCaseSensitive(value: boolean) : void;
    /**
     * Indicates whether sorting anything that looks like a number.
     */
    getSortAsNumber() : boolean;
    /**
     * Indicates whether sorting anything that looks like a number.
     * @param value - The value to set.
     */
    setSortAsNumber(value: boolean) : void;
    /**
     * Clear all settings.
     */
    clear() : void;
    /**
     * Adds sorted column index and sort order.
     * @param key - The sorted column index(absolute position, column A is 0, B is 1, ...)
     * @param order - The sort order
     */
    addKey(key: number, order: SortOrder) : void;
    /**
     * Adds sorted column index and sort order with custom sort list.
     * @param key - The sorted column index(absolute position, column A is 0, B is 1, ...)
     * @param order - The sort order.
     * @param customList - The custom sort list.
     */
    addKey(key: number, order: SortOrder, customList: string) : void;
    /**
     * Adds sorted column index and sort order with custom sort list.
     * @param key - The sorted column index(absolute position, column A is 0, B is 1, ...)
     * @param order - The sort order.
     * @param customList - The custom sort list.
     */
    addKey(key: number, order: SortOrder, customList: string[]) : void;
    /**
     * Sorts the data of the area.
     * @param cells - The cells contains the data area.
     * @param startRow - The start row of the area.
     * @param startColumn - The start column of the area.
     * @param endRow - The end row of the area.
     * @param endColumn - The end column of the area.
     * @returns
     * the original indices(absolute position, for example, column A is 0, B is 1, ...) of the sorted rows/columns.
     * If no rows/columns needs to be moved by this sorting operation, null will be returned.
     */
    sort(cells: Cells, startRow: number, startColumn: number, endRow: number, endColumn: number) : number[];
    /**
     * Sort the data of the area.
     * @param cells - The cells contains the data area.
     * @param area - The area needed to sort
     * @returns
     * the original indices(absolute position, for example, column A is 0, B is 1, ...) of the sorted rows/columns.
     * If no rows/columns needs to be moved by this sorting operation, null will be returned.
     */
    sort(cells: Cells, area: CellArea) : number[];
    /**
     * Sort the data in the range.
     * @returns
     * the original indices(absolute position, for example, column A is 0, B is 1, ...) of the sorted rows/columns.
     * If no rows/columns needs to be moved by this sorting operation, null will be returned.
     */
    sort() : number[];
}

/**
 * Represents whether and how to show objects in the workbook.
 */
export enum DisplayDrawingObjects {
    /**
     * Show all objects
     */
    DisplayShapes = 0,
    /**
     * Show placeholders
     */
    Placeholders = 1,
    /**
     * Hide all shapes.
     */
    Hide = 2,
}

/**
 * Represents the display unit label.
 */
export class DisplayUnitLabel extends ChartTextFrame {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: ChartTextFrame);
    /**
     * Gets or sets the text of display unit label.
     */
    getText() : string;
    /**
     * Gets or sets the text of display unit label.
     * @param value - The value to set.
     */
    setText(value: string) : void;
    /**
     * Gets a <see cref="Font"/> object of the specified ChartFrame object.
     */
    getFont() : Font;
    /**
     * True if the text in the object changes font size when the object size changes. The default value is True.
     */
    getAutoScaleFont() : boolean;
    /**
     * True if the text in the object changes font size when the object size changes. The default value is True.
     * @param value - The value to set.
     */
    setAutoScaleFont(value: boolean) : void;
}

/**
 * Represents the type of display unit of chart's axis.
 */
export enum DisplayUnitType {
    /**
     * Display unit is None.
     */
    None = 0,
    /**
     * Specifies the values on the chart shall be divided by 100.
     */
    Hundreds = 1,
    /**
     * Specifies the values on the chart shall be divided by 1,000.
     */
    Thousands = 2,
    /**
     * Specifies the values on the chart shall be divided by 10,000.
     */
    TenThousands = 3,
    /**
     * Specifies the values on the chart shall be divided by 100,000.
     */
    HundredThousands = 4,
    /**
     * Specifies the values on the chart shall be divided by 1,000,000.
     */
    Millions = 5,
    /**
     * Specifies the values on the chart shall be divided by 10,000,000.
     */
    TenMillions = 6,
    /**
     * Specifies the values on the chart shall be divided by 100,000,000.
     */
    HundredMillions = 7,
    /**
     * Specifies the values on the chart shall be divided by 1,000,000,000.
     */
    Billions = 8,
    /**
     * Specifies the values on the chart shall be divided by 1,000,000,000,000.
     */
    Trillions = 9,
    /**
     * The values on the chart shall be divided by 0.01.
     */
    Percentage = 10,
    /**
     * specifies a custom value for the display unit.
     * 
     * @remarks
     * NOTE: This member is now obsolete. Instead,
     * please use DisplayUnitType.Custom.
     * This property will be removed 12 months later since January 2023.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use DisplayUnitType.Custom, instead.
     */
    Cust = 11,
    /**
     * specifies a custom value for the display unit.
     */
    Custom = 12,
}

/**
 * A collection of built-in document properties.
 * 
 * @remarks
 * <p>Provides access to <see cref="DocumentProperty"/> objects by their names (using an indexer) and
 * via a set of typed properties that return values of appropriate types.</p>
 */
export class BuiltInDocumentPropertyCollection extends DocumentPropertyCollection {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: DocumentPropertyCollection);
    /**
     * Returns a <see cref="DocumentProperty"/> object by the name of the property.
     * @param name - The case-insensitive name of the property to retrieve.
     * 
     * @remarks
     * <p>The string names of the properties correspond to the names of the typed
     * properties available from <see cref="BuiltInDocumentPropertyCollection"/>.</p>
     * <p>If you request a property that is not present in the document, but the name
     * of the property is recognized as a valid built-in name, a new <see cref="DocumentProperty"/>
     * is created, added to the collection and returned. The newly created property is assigned
     * a default value (empty string, zero, false or DateTime.MinValue depending on the type
     * of the built-in property).</p>
     * <p>If you request a property that is not present in the document and the name
     * is not recognized as a built-in name, a null is returned.</p>
     */
    get(name: string) : DocumentProperty;
    /**
     * Returns a <see cref="DocumentProperty"/> object by index.
     * @param index - Zero-based index of the <see cref="DocumentProperty"/> to retrieve.
     */
    get(index: number) : DocumentProperty;
    /**
     * Gets or sets the document's language.
     */
    getLanguage() : string;
    /**
     * Gets or sets the document's language.
     * @param value - The value to set.
     */
    setLanguage(value: string) : void;
    /**
     * Gets or sets the name of the document's author.
     */
    getAuthor() : string;
    /**
     * Gets or sets the name of the document's author.
     * @param value - The value to set.
     */
    setAuthor(value: string) : void;
    /**
     * Gets or sets the document comments.
     */
    getComments() : string;
    /**
     * Gets or sets the document comments.
     * @param value - The value to set.
     */
    setComments(value: string) : void;
    /**
     * Gets or sets the category of the document.
     */
    getCategory() : string;
    /**
     * Gets or sets the category of the document.
     * @param value - The value to set.
     */
    setCategory(value: string) : void;
    /**
     * Gets or sets the content type of the document.
     */
    getContentType() : string;
    /**
     * Gets or sets the content type of the document.
     * @param value - The value to set.
     */
    setContentType(value: string) : void;
    /**
     * Gets or sets the content status of the document.
     */
    getContentStatus() : string;
    /**
     * Gets or sets the content status of the document.
     * @param value - The value to set.
     */
    setContentStatus(value: string) : void;
    /**
     * Gets or sets the company property.
     */
    getCompany() : string;
    /**
     * Gets or sets the company property.
     * @param value - The value to set.
     */
    setCompany(value: string) : void;
    /**
     * Gets or sets the hyperlinkbase property.
     */
    getHyperlinkBase() : string;
    /**
     * Gets or sets the hyperlinkbase property.
     * @param value - The value to set.
     */
    setHyperlinkBase(value: string) : void;
    /**
     * Gets or sets date of the document creation in local timezone.
     * 
     * @remarks
     * <p>Aspose.Cells does not update this property when you modify the document.</p>
     */
    getCreatedTime() : Date;
    /**
     * Gets or sets date of the document creation in local timezone.
     * @param value - The value to set.
     * 
     * @remarks
     * <p>Aspose.Cells does not update this property when you modify the document.</p>
     */
    setCreatedTime(value: Date) : void;
    /**
     * Gets or sets the Universal time of the document creation.
     * 
     * @remarks
     * <p>Aspose.Cells does not update this property when you modify the document.</p>
     */
    getCreatedUniversalTime() : Date;
    /**
     * Gets or sets the Universal time of the document creation.
     * @param value - The value to set.
     * 
     * @remarks
     * <p>Aspose.Cells does not update this property when you modify the document.</p>
     */
    setCreatedUniversalTime(value: Date) : void;
    /**
     * Gets or sets the document keywords.
     */
    getKeywords() : string;
    /**
     * Gets or sets the document keywords.
     * @param value - The value to set.
     */
    setKeywords(value: string) : void;
    /**
     * Gets or sets the date when the document was last printed in local timezone.
     * 
     * @remarks
     * <p>If the document was never printed, this property will return DateTime.MinValue.</p>
     * <p>Aspose.Cells does not update this property when you modify the document.</p>
     */
    getLastPrinted() : Date;
    /**
     * Gets or sets the date when the document was last printed in local timezone.
     * @param value - The value to set.
     * 
     * @remarks
     * <p>If the document was never printed, this property will return DateTime.MinValue.</p>
     * <p>Aspose.Cells does not update this property when you modify the document.</p>
     */
    setLastPrinted(value: Date) : void;
    /**
     * Gets or sets the Universal time when the document was last printed.
     */
    getLastPrintedUniversalTime() : Date;
    /**
     * Gets or sets the Universal time when the document was last printed.
     * @param value - The value to set.
     */
    setLastPrintedUniversalTime(value: Date) : void;
    /**
     * Gets or sets the name of the last author.
     * 
     * @remarks
     * <p>Aspose.Cells does not update this property when you modify the document.</p>
     */
    getLastSavedBy() : string;
    /**
     * Gets or sets the name of the last author.
     * @param value - The value to set.
     * 
     * @remarks
     * <p>Aspose.Cells does not update this property when you modify the document.</p>
     */
    setLastSavedBy(value: string) : void;
    /**
     * Gets or sets the time of the last save in local timezone.
     * 
     * @remarks
     * <p>Aspose.Cells does not update this property when you modify the document.</p>
     */
    getLastSavedTime() : Date;
    /**
     * Gets or sets the time of the last save in local timezone.
     * @param value - The value to set.
     * 
     * @remarks
     * <p>Aspose.Cells does not update this property when you modify the document.</p>
     */
    setLastSavedTime(value: Date) : void;
    /**
     * Gets or sets the universal time of the last save.
     * 
     * @remarks
     * <p>Aspose.Cells does not update this property when you modify the document.</p>
     */
    getLastSavedUniversalTime() : Date;
    /**
     * Gets or sets the universal time of the last save.
     * @param value - The value to set.
     * 
     * @remarks
     * <p>Aspose.Cells does not update this property when you modify the document.</p>
     */
    setLastSavedUniversalTime(value: Date) : void;
    /**
     * Gets or sets the manager property.
     */
    getManager() : string;
    /**
     * Gets or sets the manager property.
     * @param value - The value to set.
     */
    setManager(value: string) : void;
    /**
     * Gets or sets the name of the application.
     */
    getNameOfApplication() : string;
    /**
     * Gets or sets the name of the application.
     * @param value - The value to set.
     */
    setNameOfApplication(value: string) : void;
    /**
     * Represents an estimate of the number of pages in the document.
     */
    getPages() : number;
    /**
     * Represents an estimate of the number of pages in the document.
     * @param value - The value to set.
     */
    setPages(value: number) : void;
    /**
     * Gets or sets the document revision number.
     * 
     * @remarks
     * <p>Aspose.Cells does not update this property when you modify the document.</p>
     */
    getRevisionNumber() : string;
    /**
     * Gets or sets the document revision number.
     * @param value - The value to set.
     * 
     * @remarks
     * <p>Aspose.Cells does not update this property when you modify the document.</p>
     */
    setRevisionNumber(value: string) : void;
    /**
     * Gets or sets the subject of the document.
     */
    getSubject() : string;
    /**
     * Gets or sets the subject of the document.
     * @param value - The value to set.
     */
    setSubject(value: string) : void;
    /**
     * Gets or sets the informational name of the document template.
     */
    getTemplate() : string;
    /**
     * Gets or sets the informational name of the document template.
     * @param value - The value to set.
     */
    setTemplate(value: string) : void;
    /**
     * Gets or sets the title of the document.
     */
    getTitle() : string;
    /**
     * Gets or sets the title of the document.
     * @param value - The value to set.
     */
    setTitle(value: string) : void;
    /**
     * Gets or sets the total editing time in minutes.
     */
    getTotalEditingTime() : number;
    /**
     * Gets or sets the total editing time in minutes.
     * @param value - The value to set.
     */
    setTotalEditingTime(value: number) : void;
    /**
     * Represents the version number of the application that created the document.
     * 
     * @remarks
     * It's format is "00.0000",for example : 12.0000
     */
    getVersion() : string;
    /**
     * Represents the version number of the application that created the document.
     * @param value - The value to set.
     * 
     * @remarks
     * It's format is "00.0000",for example : 12.0000
     */
    setVersion(value: string) : void;
    /**
     * Represents the version of the file.
     */
    getDocumentVersion() : string;
    /**
     * Represents the version of the file.
     * @param value - The value to set.
     */
    setDocumentVersion(value: string) : void;
    /**
     * Indicates the display mode of the document thumbnail.
     */
    getScaleCrop() : boolean;
    /**
     * Indicates the display mode of the document thumbnail.
     * @param value - The value to set.
     */
    setScaleCrop(value: boolean) : void;
    /**
     * Indicates whether hyperlinks in a document are up-to-date.
     */
    getLinksUpToDate() : boolean;
    /**
     * Indicates whether hyperlinks in a document are up-to-date.
     * @param value - The value to set.
     */
    setLinksUpToDate(value: boolean) : void;
    /**
     * Represents an estimate of the number of words in the document.
     */
    getWords() : number;
    /**
     * Represents an estimate of the number of words in the document.
     * @param value - The value to set.
     */
    setWords(value: number) : void;
}

/**
 * A collection of custom document properties.
 * 
 * @remarks
 * <p>Each <see cref="DocumentProperty"/> object represents a custom property of a container document.</p>
 */
export class CustomDocumentPropertyCollection extends DocumentPropertyCollection {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: DocumentPropertyCollection);
    /**
     * Creates a new custom document property of the <b>PropertyType.String</b> data type.
     * @param name - The name of the property.
     * @param value - The value of the property.
     * @returns
     * The newly created property object.
     */
    add(name: string, value: string) : DocumentProperty;
    /**
     * Creates a new custom document property of the <b>PropertyType.Number</b> data type.
     * @param name - The name of the property.
     * @param value - The value of the property.
     * @returns
     * The newly created property object.
     */
    add(name: string, value: number) : DocumentProperty;
    /**
     * Creates a new custom document property of the <b>PropertyType.DateTime</b> data type.
     * @param name - The name of the property.
     * @param value - The value of the property.
     * @returns
     * The newly created property object.
     */
    add(name: string, value: Date) : DocumentProperty;
    /**
     * Creates a new custom document property of the <b>PropertyType.Boolean</b> data type.
     * @param name - The name of the property.
     * @param value - The value of the property.
     * @returns
     * The newly created property object.
     */
    add(name: string, value: boolean) : DocumentProperty;
    /**
     * Creates a new custom document property of the <b>PropertyType.Float</b> data type.
     * @param name - The name of the property.
     * @param value - The value of the property.
     * @returns
     * The newly created property object.
     */
    add(name: string, value: number) : DocumentProperty;
    /**
     * Creates a new custom document property which links to content.
     * @param name - The name of the property.
     * @param source - The source of the property
     * @returns
     * The newly created property object.
     */
    addLinkToContent(name: string, source: string) : DocumentProperty;
    /**
     * Update custom document property value which links to content.
     */
    updateLinkedPropertyValue() : void;
    /**
     * Update custom document property value to linked range.
     */
    updateLinkedRange() : void;
}

/**
 * Base class for <see cref="BuiltInDocumentPropertyCollection"/> and <see cref="CustomDocumentPropertyCollection"/> collections.
 */
export class DocumentPropertyCollection {
    /**
     * Returns a <see cref="DocumentProperty"/> object by the name of the property.
     * @param name - The case-insensitive name of the property to retrieve.
     * 
     * @remarks
     * <p>Returns null if a property with the specified name is not found.</p>
     */
    get(name: string) : DocumentProperty;
    /**
     * Returns a <see cref="DocumentProperty"/> object by index.
     * @param index - Zero-based index of the <see cref="DocumentProperty"/> to retrieve.
     */
    get(index: number) : DocumentProperty;
    /**
     * Returns true if a property with the specified name exists in the collection.
     * @param name - The case-insensitive name of the property.
     * @returns
     * True if the property exists in the collection; false otherwise.
     */
    contains(name: string) : boolean;
    /**
     * Gets the index of a property by name.
     * @param name - The case-insensitive name of the property.
     * @returns
     * The zero based index. Negative value if not found.
     */
    indexOf(name: string) : number;
    /**
     * Removes a property with the specified name from the collection.
     * @param name - The case-insensitive name of the property.
     */
    remove(name: string) : void;
    /**
     * Removes a property at the specified index.
     * @param index - The zero based index.
     */
    removeAt(index: number) : void;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents a custom or built-in document property.
 */
export class DocumentProperty {
    /**
     * Returns the name of the property.
     */
    getName() : string;
    /**
     * Indicates whether this property is linked to content
     */
    isLinkedToContent() : boolean;
    /**
     * The linked content source.
     */
    getSource() : string;
    /**
     * Gets the data type of the property.
     */
    getType() : PropertyType;
    /**
     * Returns true if this property does not have a name in the OLE2 storage
     * and a unique name was generated only for the public API.
     */
    isGeneratedName() : boolean;
    /**
     * Returns the property value as a string.
     * 
     * @remarks
     * <p>Converts a number property using Object.ToString(). Converts a boolean property
     * into "Y" or "N". Converts a date property into a short date string.</p>
     */
    toString() : string;
    /**
     * Returns the property value as integer.
     * 
     * @remarks
     * Throws an exception if the property type is not PropertyType.Number.
     */
    toInt() : number;
    /**
     * Returns the property value as double.
     * 
     * @remarks
     * Throws an exception if the property type is not PropertyType.Float.
     */
    toDouble() : number;
    /**
     * Returns the property value as DateTime in local timezone.
     * 
     * @remarks
     * <p>Throws an exception if the property type is not PropertyType.Date.</p>
     */
    toDateTime() : Date;
    /**
     * Returns the property value as bool.
     * 
     * @remarks
     * <p>Throws an exception if the property type is not PropertyType.Boolean.</p>
     */
    toBool() : boolean;
}

/**
 * Specifies data type of a document property.
 */
export enum PropertyType {
    /**
     * The property is a boolean value.
     */
    Boolean = 0,
    /**
     * The property is a date time value.
     */
    DateTime = 1,
    /**
     * The property is a floating number.
     */
    Double = 2,
    /**
     * The property is an integer number.
     */
    Number = 3,
    /**
     * The property is a string value.
     */
    String = 4,
    /**
     * The property is a byte array.
     */
    Blob = 5,
}

/**
 * Represents the up/down bars in a chart.
 */
export class DropBars {
    /**
     * Gets the border <see cref="Line"/>.
     */
    getBorder() : Line;
    /**
     * Gets the <see cref="Area"/>.
     */
    getArea() : Area;
}

/**
 * Encryption Type.
 * Only used by excel2003.
 * We will encrypt 2007/2010 workbook using SHA AES the same as Excel does, and this EncryptionType will be ignored.
 */
export enum EncryptionType {
    /**
     * XOR encryption algorithm.
     */
    XOR = 0,
    /**
     * Office 97/2000 compatible.
     */
    Compatible = 1,
    /**
     * Enhanced encryption.
     */
    EnhancedCryptographicProviderV1 = 2,
    /**
     * Strong encryption algorithm.
     */
    StrongCryptographicProvider = 3,
}

/**
 * Represents error bar of data series.
 */
export class ErrorBar extends Line {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Line);
    /**
     * Represents error bar amount type.
     */
    getType() : ErrorBarType;
    /**
     * Represents error bar amount type.
     * @param value - The value to set.
     */
    setType(value: ErrorBarType) : void;
    /**
     * Represents the display type of error bar.
     */
    getDisplayType() : ErrorBarDisplayType;
    /**
     * Represents the display type of error bar.
     * @param value - The value to set.
     */
    setDisplayType(value: ErrorBarDisplayType) : void;
    /**
     * Represents amount of error bar.
     * 
     * @remarks
     * The amount must be greater than or equal to zero.
     */
    getAmount() : number;
    /**
     * Represents amount of error bar.
     * @param value - The value to set.
     * 
     * @remarks
     * The amount must be greater than or equal to zero.
     */
    setAmount(value: number) : void;
    /**
     * Indicates if formatting error bars with a T-top.
     */
    getShowMarkerTTop() : boolean;
    /**
     * Indicates if formatting error bars with a T-top.
     * @param value - The value to set.
     */
    setShowMarkerTTop(value: boolean) : void;
    /**
     * Represents positive error amount when error bar type is Custom.
     */
    getPlusValue() : string;
    /**
     * Represents positive error amount when error bar type is Custom.
     * @param value - The value to set.
     */
    setPlusValue(value: string) : void;
    /**
     * Represents negative error amount when error bar type is Custom.
     */
    getMinusValue() : string;
    /**
     * Represents negative error amount when error bar type is Custom.
     * @param value - The value to set.
     */
    setMinusValue(value: string) : void;
}

/**
 * Represents error bar amount type.
 */
export enum ErrorBarType {
    /**
     * InnerCustom value type.
     */
    Custom = 0,
    /**
     * Fixed value type.
     */
    FixedValue = 1,
    /**
     * Percentage type
     */
    Percent = 2,
    /**
     * Standard deviation type.
     */
    StDev = 3,
    /**
     * Standard error type.
     */
    StError = 4,
}

/**
 * Represents custom exception type code.
 */
export enum ExceptionType {
    /**
     * Invalid chart setting.
     */
    Chart = 0,
    /**
     * Invalid data type setting.
     */
    DataType = 1,
    /**
     * Invalid data validation setting.
     */
    DataValidation = 2,
    /**
     * Invalid data validation setting.
     */
    ConditionalFormatting = 3,
    /**
     * Invalid file format.
     */
    FileFormat = 4,
    /**
     * Invalid formula.
     */
    Formula = 5,
    /**
     * Invalid data.
     */
    InvalidData = 6,
    /**
     * Invalid operator.
     */
    InvalidOperator = 7,
    /**
     * Incorrect password.
     */
    IncorrectPassword = 8,
    /**
     * License related errors.
     */
    License = 9,
    /**
     * Out of MS Excel limitation error.
     */
    Limitation = 10,
    /**
     * Invalid page setup setting.
     */
    PageSetup = 11,
    /**
     * Invalid pivotTable setting.
     */
    PivotTable = 12,
    /**
     * Invalid drawing object setting.
     */
    Shape = 13,
    /**
     * Invalid sparkline object setting.
     */
    Sparkline = 14,
    /**
     * Invalid worksheet name.
     */
    SheetName = 15,
    /**
     * Invalid worksheet type.
     */
    SheetType = 16,
    /**
     * The process is interrupted.
     */
    Interrupted = 17,
    /**
     * The file is invalid.
     */
    IO = 18,
    /**
     * Permission is required to open this file.
     */
    Permission = 19,
    /**
     * Unsupported feature.
     */
    UnsupportedFeature = 20,
    /**
     * Unsupported stream to be opened.
     */
    UnsupportedStream = 21,
    /**
     * Files contains some undisclosed information.
     */
    UndisclosedInformation = 22,
    /**
     * File content is corrupted.
     */
    FileCorrupted = 23,
    /**
     * Internal exception.
     */
    Internal = 24,
}

/**
 * Represents an external link in a workbook.
 */
export class ExternalLink {
    /**
     * Gets the type of external link.
     */
    getType() : ExternalLinkType;
    /**
     * Get the path type of this external link
     */
    getPathType() : string;
    /**
     * Represents stored data source of the external link.
     */
    getOriginalDataSource() : string;
    /**
     * Represents stored data source of the external link.
     * @param value - The value to set.
     */
    setOriginalDataSource(value: string) : void;
    /**
     * Represents data source of the external link.
     */
    getDataSource() : string;
    /**
     * Represents data source of the external link.
     * @param value - The value to set.
     */
    setDataSource(value: string) : void;
    /**
     * Indicates whether this external link is referenced by others.
     */
    isReferred() : boolean;
    /**
     * Indicates whether this external link is visible in MS Excel.
     */
    isVisible() : boolean;
    /**
     * Adds an external name.
     * @param text - The text of the external name.         /// If the external name belongs to a worksheet, the text should be as Sheet1!Text.
     * @param referTo - The referTo of the external name. It must be a cell or the range.
     */
    addExternalName(text: string, referTo: string) : void;
}

/**
 * Represents external links collection in a workbook.
 */
export class ExternalLinkCollection {
    /**
     * Gets the <see cref="ExternalLink"/> element at the specified index.
     * @param index - The zero based index of the element.
     * @returns
     * The element at the specified index.
     */
    get(index: number) : ExternalLink;
    /**
     * Gets the number of elements actually contained in the collection.
     */
    getCount() : number;
    /**
     * Adds an external link.
     * @param fileName - The external file name.
     * @param sheetNames - All sheet names of the external file.
     * @returns
     * The position of the external name in this list.
     */
    add(fileName: string, sheetNames: string[]) : number;
    /**
     * Add an external link .
     * @param directoryType - The directory type of the file name.
     * @param fileName - the file name.
     * @param sheetNames - All sheet names of the external file.
     * @returns
     * The position of the external name in this list.
     */
    add(directoryType: DirectoryType, fileName: string, sheetNames: string[]) : number;
    /**
     * Removes all external links.
     * 
     * @remarks
     * When removing external links, all formulas that reference to them will be removed too because
     * the references become invalid.
     */
    clear() : void;
    /**
     * Removes all external links.
     * @param updateReferencesAsLocal - Whether update all references of external links in formulas to references of current workbook itself.
     * 
     * @remarks
     * If references are required to be updated, those references of external links in formulas
     * will be changed to current workbook when it is possible.
     * For example, one cell's original formula is "='externalsource.xlam'!customfunction()",
     * after removing external links, the formula will become "=customfunction()";
     * When the original formula is "='[externalsource.xlam]Sheet1'!$A$1",
     * according to whether there is one sheet with name "Sheet1" in current workbook:
     * if true, the formula will become "=Sheet1!$A$1";
     * if false, the formula will become "=#REF!$A$1".<br></br>
     * If references are not required to be updated, all formulas with references to external links
     * will be removed too because those references become invalid.
     */
    clear(updateReferencesAsLocal: boolean) : void;
    /**
     * Removes the specified external link from the workbook.
     * @param index - the index of the external link to be removed.
     * 
     * @remarks
     * When removing the external link, all formulas that reference to it will be removed too because
     * the references become invalid.
     */
    removeAt(index: number) : void;
    /**
     * Removes the specified external link from the workbook.
     * @param index - the index of the external link to be removed.
     * @param updateReferencesAsLocal - Whether update all references of given external link to reference of current workbook itself.         /// Check <see cref="Clear(bool)"/> to get more details about this parameter.
     */
    removeAt(index: number, updateReferencesAsLocal: boolean) : void;
    /**
     * Get an enumerator that iterates through this collection.
     */
    getEnumerator() : ExternalLinkEnumerator;
}

/**
 * Represents the file format types.
 */
export enum FileFormatType {
    /**
     * Comma-Separated Values(CSV) text file.
     */
    Csv = 1,
    /**
     * Office Open XML SpreadsheetML file (macro-free).
     */
    Xlsx = 6,
    /**
     * Office Open XML SpreadsheetML Macro-Enabled file.
     */
    Xlsm = 7,
    /**
     * Office Open XML SpreadsheetML Template (macro-free).
     */
    Xltx = 8,
    /**
     * Office Open XML SpreadsheetML Macro-Enabled Template.
     */
    Xltm = 9,
    /**
     * Office Open XML SpreadsheetML addinMacro-Enabled file.
     */
    Xlam = 10,
    /**
     * Tab-Separated Values(TSV) text file.
     */
    Tsv = 11,
    /**
     * Tab-Separated Values(TSV) text file, same with <see cref="Tsv"/>.
     */
    TabDelimited = 11,
    /**
     * HTML format.
     */
    Html = 12,
    /**
     * MHTML (Web archive) format.
     */
    MHtml = 17,
    /**
     * Open Document Sheet(ODS) file.
     */
    Ods = 14,
    /**
     * Excel97-2003 spreadsheet file.
     */
    Excel97To2003 = 5,
    /**
     * Excel 2003 XML Data file.
     */
    SpreadsheetML = 15,
    /**
     * The Excel Binary File Format (.xlsb)
     */
    Xlsb = 16,
    /**
     * Represents unrecognized format, cannot be loaded.
     */
    Unknown = 255,
    /**
     * PDF (Adobe Portable Document) format.
     */
    Pdf = 13,
    /**
     * XPS (XML Paper Specification) format.
     */
    Xps = 20,
    /**
     * Represents a TIFF file.
     */
    Tiff = 21,
    /**
     * SVG file.
     */
    Svg = 28,
    /**
     * Represents an Excel95 xls file.
     */
    Excel95 = 22,
    /**
     * Represents an Excel4.0 xls file.
     * 
     * @remarks
     * The file format is not supported
     */
    Excel4 = 23,
    /**
     * Represents an Excel3.0 xls file.
     * 
     * @remarks
     * The file format is not supported
     */
    Excel3 = 24,
    /**
     * Represents an Excel2.1 xls file.
     * 
     * @remarks
     * The file format is not supported
     */
    Excel2 = 25,
    /**
     * Represents a pptx file.
     * 
     * @remarks
     * The file format is not supported
     * Only for detecting file type.
     */
    Pptx = 26,
    /**
     * Represents a docx file.
     * 
     * @remarks
     * The file format is not supported
     * Only for detecting file type.
     */
    Docx = 27,
    /**
     * Data Interchange Format.
     */
    Dif = 30,
    /**
     * Represents a doc file.
     * 
     * @remarks
     * The file format is not supported
     * Only for detecting file type.
     */
    Doc = 31,
    /**
     * Represents a ppt file.
     * 
     * @remarks
     * The file format is not supported
     * Only for detecting file type.
     */
    Ppt = 32,
    /**
     * Represents a email file.
     * 
     * @remarks
     * The file format is not supported
     * Only for detecting file type.
     */
    MapiMessage = 33,
    /**
     * Represents the MS Equation 3.0 object.
     * 
     * @remarks
     * The file format is not supported
     * Only for detecting file type.
     */
    MsEquation = 34,
    /**
     * Represents the embedded native object.
     * 
     * @remarks
     * The file format is not supported
     * Only for detecting file type.
     */
    Ole10Native = 35,
    /**
     * Represents MS Visio VSD binary format.
     * 
     * @remarks
     * The file format is not supported
     * Only for detecting file type.
     */
    Vsd = 36,
    /**
     * Represents MS Visio 2013 VSDX file format.
     * 
     * @remarks
     * The file format is not supported
     * Only for detecting file type.
     */
    Vsdx = 37,
    /**
     * Represents a docm file.
     * 
     * @remarks
     * The file format is not supported
     * Only for detecting file type.
     */
    Docm = 38,
    /**
     * Represents a dotx file.
     * 
     * @remarks
     * The file format is not supported
     * Only for detecting file type.
     */
    Dotx = 39,
    /**
     * Represents a dotm file.
     * 
     * @remarks
     * The file format is not supported
     * Only for detecting file type.
     */
    Dotm = 40,
    /**
     * Represents a pptm file.
     * 
     * @remarks
     * The file format is not supported
     * Only for detecting file type.
     */
    Pptm = 41,
    /**
     * Represents a Potx file.
     * 
     * @remarks
     * The file format is not supported
     * Only for detecting file type.
     */
    Potx = 42,
    /**
     * Represents a Potm file.
     * 
     * @remarks
     * The file format is not supported
     * Only for detecting file type.
     */
    Potm = 43,
    /**
     * Represents a ppsx file.
     * 
     * @remarks
     * The file format is not supported
     * Only for detecting file type.
     */
    Ppsx = 44,
    /**
     * Represents a ppsm file.
     * 
     * @remarks
     * The file format is not supported
     * Only for detecting file type.
     */
    Ppsm = 45,
    /**
     * Represents office open xml file(such as xlsx, docx,pptx, etc).
     * 
     * @remarks
     * The file format is not supported
     * Only for detecting file type.
     * If the office open xml file is encrypted, it could not be detected as xlsx ,docx, pptx,etc.
     */
    Ooxml = 46,
    /**
     * Represents an ODT file.
     * 
     * @remarks
     * The file format is not supported
     * Only for detecting file type.
     */
    Odt = 47,
    /**
     * Represents a ODP file.
     * 
     * @remarks
     * The file format is not supported
     * Only for detecting file type.
     */
    Odp = 48,
    /**
     * Represents an ODF file.
     * 
     * @remarks
     * The file format is not supported
     * Only for detecting file type.
     */
    Odf = 49,
    /**
     * Represents an ODG file.
     * 
     * @remarks
     * The file format is not supported
     * Only for detecting file type.
     */
    Odg = 50,
    /**
     * Represents a simple xml file.
     * 
     * @remarks
     * The file format is not supported
     * Only for detecting file type.
     */
    Xml = 51,
    /**
     * Excel97-2003 spreadsheet template.
     */
    Xlt = 52,
    /**
     * Represents an OTT file.
     * 
     * @remarks
     * The file format is not supported
     * Only for detecting file type.
     */
    Ott = 53,
    /**
     * Represents a BMP file.
     * 
     * @remarks
     * The file format is not supported
     * Only for detecting file type.
     */
    Bmp = 54,
    /**
     * Represents an ots file.
     */
    Ots = 55,
    /**
     * Represents Numbers 9.0 file format by Apple Inc.
     * 
     * @remarks
     * NOTE: This member is now obsolete. Instead,
     * please use <see cref="Numbers09"/> property.
     * This property will be removed 6 months later since June 2023.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use FileFormatType.Numbers09 instead.
     */
    Numbers = 56,
    /**
     * Represents Numbers 9.0 file format by Apple Inc.
     */
    Numbers09 = 56,
    /**
     * Represents markdown document.
     */
    Markdown = 57,
    /**
     * Represents embedded graph chart.
     */
    GraphChart = 58,
    /**
     * Represents OpenDocument Flat XML Spreadsheet (.fods) file format.
     */
    Fods = 59,
    /**
     * Represents StarOffice Calc Spreadsheet (.sxc) file format.
     */
    Sxc = 60,
    /**
     * Represents a OTP file.
     * 
     * @remarks
     * The file format is not supported.
     * Only for detecting file type.
     */
    Otp = 61,
    /**
     * Represents Numbers 3.5 file format since 2014 by Apple Inc
     */
    Numbers35 = 62,
    /**
     * Windows Enhanced Metafile.
     */
    Emf = 258,
    /**
     * Windows Metafile.
     */
    Wmf = 259,
    /**
     * JPEG JFIF.
     */
    Jpg = 261,
    /**
     * Portable Network Graphics.
     */
    Png = 262,
    /**
     * Gif
     */
    Gif = 322,
    /**
     * Webp
     */
    WebP = 323,
    /**
     * Json
     */
    Json = 513,
    /**
     * Sql
     */
    SqlScript = 514,
    /**
     * Rrepesents XHtml file.
     */
    XHtml = 771,
    /**
     * Rrepesents One Note file.
     * 
     * @remarks
     * The file format is not supported
     * Only for detecting file type.
     */
    OneNote = 772,
    /**
     * Rrepesents Microsoft Cabinet file.
     * 
     * @remarks
     * The file format is not supported
     * Only for detecting file type.
     */
    MicrosoftCabinet = 773,
    /**
     * Rtf
     */
    Rtf = 774,
    /**
     * EPUB
     */
    Epub = 775,
    /**
     * AZW3
     */
    Azw3 = 777,
    /**
     * OXPS (Open XML Paper Specification) format.
     */
    Oxps = 776,
    /**
     * Rrepesents GZip file.
     * 
     * @remarks
     * The file format is not supported
     * Only for detecting file type.
     */
    GZip = 35615,
}

/**
 * Enumerates shape fill pattern types.
 */
export enum FillPattern {
    /**
     * Represents no background.
     */
    None = 0,
    /**
     * Represents solid pattern.
     */
    Solid = 1,
    /**
     * Represents 5% gray pattern.
     */
    Gray5 = 2,
    /**
     * Represents 10% gray pattern.
     */
    Gray10 = 3,
    /**
     * Represents 20% gray pattern.
     */
    Gray20 = 4,
    /**
     * Represents 30% gray pattern.
     */
    Gray30 = 5,
    /**
     * Represents 40% gray pattern.
     */
    Gray40 = 6,
    /**
     * Represents 50% gray pattern.
     */
    Gray50 = 7,
    /**
     * Represents 60% gray pattern.
     */
    Gray60 = 8,
    /**
     * Represents 70% gray pattern.
     */
    Gray70 = 9,
    /**
     * Represents 75% gray pattern.
     */
    Gray75 = 10,
    /**
     * Represents 80% gray pattern.
     */
    Gray80 = 11,
    /**
     * Represents 90% gray pattern.
     */
    Gray90 = 12,
    /**
     * Represents 25% gray pattern.
     */
    Gray25 = 13,
    /**
     * Represents light downward diagonal pattern.
     */
    LightDownwardDiagonal = 14,
    /**
     * Represents light upward diagonal pattern.
     */
    LightUpwardDiagonal = 15,
    /**
     * Represents dark downward diagonal pattern.
     */
    DarkDownwardDiagonal = 16,
    /**
     * Represents dark upward diagonal pattern.
     */
    DarkUpwardDiagonal = 17,
    /**
     * Represents wide downward diagonal pattern.
     */
    WideDownwardDiagonal = 18,
    /**
     * Represents wide upward diagonal pattern.
     */
    WideUpwardDiagonal = 19,
    /**
     * Represents light vertical pattern.
     */
    LightVertical = 20,
    /**
     * Represents light horizontal pattern.
     */
    LightHorizontal = 21,
    /**
     * Represents narrow vertical pattern.
     */
    NarrowVertical = 22,
    /**
     * Represents narrow horizontal pattern.
     */
    NarrowHorizontal = 23,
    /**
     * Represents dark vertical pattern.
     */
    DarkVertical = 24,
    /**
     * Represents dark horizontal pattern.
     */
    DarkHorizontal = 25,
    /**
     * Represents dashed downward diagonal pattern.
     */
    DashedDownwardDiagonal = 26,
    /**
     * Represents dashed upward diagonal pattern.
     */
    DashedUpwardDiagonal = 27,
    /**
     * Represents dashed vertical pattern.
     */
    DashedVertical = 28,
    /**
     * Represents dashed horizontal pattern.
     */
    DashedHorizontal = 29,
    /**
     * Represents small confetti pattern.
     */
    SmallConfetti = 30,
    /**
     * Represents large confetti pattern.
     */
    LargeConfetti = 31,
    /**
     * Represents zig zag pattern.
     */
    ZigZag = 32,
    /**
     * Represents wave pattern.
     */
    Wave = 33,
    /**
     * Represents diagonal brick pattern.
     */
    DiagonalBrick = 34,
    /**
     * Represents horizontal brick pattern.
     */
    HorizontalBrick = 35,
    /**
     * Represents weave pattern.
     */
    Weave = 36,
    /**
     * Represents plaid pattern.
     */
    Plaid = 37,
    /**
     * Represents divot pattern.
     */
    Divot = 38,
    /**
     * Represents dotted grid pattern.
     */
    DottedGrid = 39,
    /**
     * Represents dotted diamond pattern.
     */
    DottedDiamond = 40,
    /**
     * Represents shingle pattern.
     */
    Shingle = 41,
    /**
     * Represents trellis pattern.
     */
    Trellis = 42,
    /**
     * Represents sphere pattern.
     */
    Sphere = 43,
    /**
     * Represents small grid pattern.
     */
    SmallGrid = 44,
    /**
     * Represents large grid pattern.
     */
    LargeGrid = 45,
    /**
     * Represents small checker board pattern.
     */
    SmallCheckerBoard = 46,
    /**
     * Represents large checker board pattern.
     */
    LargeCheckerBoard = 47,
    /**
     * Represents outlined diamond pattern.
     */
    OutlinedDiamond = 48,
    /**
     * Represents solid diamond pattern.
     */
    SolidDiamond = 49,
    /**
     * Represents unknown pattern.
     */
    Unknown = 50,
}

/**
 * Represents a filter for a single column. The Filter object is a member of the Filters collection
 */
export class FilterColumn {
    /**
     * Indicates whether the AutoFilter button for this column is visible.
     */
    isDropdownVisible() : boolean;
    /**
     * Indicates whether the AutoFilter button for this column is visible.
     * @param value - The value to set.
     */
    setIsDropdownVisible(value: boolean) : void;
    /**
     * Gets and sets the condition of filtering data.
     */
    getFilter() : object;
    /**
     * Gets and sets the condition of filtering data.
     * @param value - The value to set.
     */
    setFilter(value: object) : void;
    /**
     * Gets and sets the type fo filtering data.
     */
    getFilterType() : FilterType;
    /**
     * Gets and sets the type fo filtering data.
     * @param value - The value to set.
     */
    setFilterType(value: FilterType) : void;
    /**
     * Gets and sets the column offset in the range.
     */
    getFieldIndex() : number;
    /**
     * Gets and sets the column offset in the range.
     * @param value - The value to set.
     */
    setFieldIndex(value: number) : void;
}

/**
 * Custom Filter operator type.
 */
export enum FilterOperatorType {
    /**
     * Represents LessOrEqual operator.
     */
    LessOrEqual = 0,
    /**
     * Represents LessThan operator.
     */
    LessThan = 1,
    /**
     * Represents Equal operator.
     */
    Equal = 2,
    /**
     * Represents GreaterThan operator.
     */
    GreaterThan = 3,
    /**
     * Represents NotEqual operator.
     */
    NotEqual = 4,
    /**
     * Represents GreaterOrEqual operator.
     */
    GreaterOrEqual = 5,
    /**
     * Represents no comparison.
     */
    None = 6,
    /**
     * Begins with the text.
     */
    BeginsWith = 7,
    /**
     * Ends with the text.
     */
    EndsWith = 8,
    /**
     * Contains the text.
     */
    Contains = 9,
    /**
     * Not contains the text.
     */
    NotContains = 10,
}

/**
 * A collection of Filter objects that represents all the filters in an autofiltered range.
 */
export class FilterColumnCollection {
    /**
     * Gets <see cref="FilterColumn"/> object at the special field.
     * @param fieldIndex - The integer offset of the field on which you want to base the filter          /// (from the left of the list; the leftmost field is field 0).
     * @returns
     * Returns <see cref="FilterColumn"/> object.
     */
    get(fieldIndex: number) : FilterColumn;
    /**
     * @param index - 
     */
    removeAt(index: number) : void;
    /**
     * Returns a single Filter object from a collection.
     */
    getByIndex(index: number) : FilterColumn;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Encapsulates the object that represents the floor of a 3-D chart.
 */
export class Floor extends Area {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Area);
    /**
     * Gets or sets the border <see cref="Line"/>.
     */
    getBorder() : Line;
    /**
     * Gets or sets the border <see cref="Line"/>.
     * @param value - The value to set.
     */
    setBorder(value: Line) : void;
}

/**
 * Encapsulates the font object used in a spreadsheet.
 */
export class Font {
    /**
     * Represent the character set.
     */
    getCharset() : number;
    /**
     * Represent the character set.
     * @param value - The value to set.
     */
    setCharset(value: number) : void;
    /**
     * Gets or sets a value indicating whether the font is italic.
     */
    isItalic() : boolean;
    /**
     * Gets or sets a value indicating whether the font is italic.
     * @param value - The value to set.
     */
    setIsItalic(value: boolean) : void;
    /**
     * Gets or sets a value indicating whether the font is bold.
     */
    isBold() : boolean;
    /**
     * Gets or sets a value indicating whether the font is bold.
     * @param value - The value to set.
     */
    setIsBold(value: boolean) : void;
    /**
     * Gets and sets the text caps type.
     */
    getCapsType() : TextCapsType;
    /**
     * Gets and sets the text caps type.
     * @param value - The value to set.
     */
    setCapsType(value: TextCapsType) : void;
    /**
     * Gets the strike type of the text.
     */
    getStrikeType() : TextStrikeType;
    /**
     * Gets the strike type of the text.
     * @param value - The value to set.
     */
    setStrikeType(value: TextStrikeType) : void;
    /**
     * Gets or sets a value indicating whether the font is single strikeout.
     */
    isStrikeout() : boolean;
    /**
     * Gets or sets a value indicating whether the font is single strikeout.
     * @param value - The value to set.
     */
    setIsStrikeout(value: boolean) : void;
    /**
     * Gets and sets the script offset,in unit of percentage
     */
    getScriptOffset() : number;
    /**
     * Gets and sets the script offset,in unit of percentage
     * @param value - The value to set.
     */
    setScriptOffset(value: number) : void;
    /**
     * Gets or sets a value indicating whether the font is super script.
     */
    isSuperscript() : boolean;
    /**
     * Gets or sets a value indicating whether the font is super script.
     * @param value - The value to set.
     */
    setIsSuperscript(value: boolean) : void;
    /**
     * Gets or sets a value indicating whether the font is subscript.
     */
    isSubscript() : boolean;
    /**
     * Gets or sets a value indicating whether the font is subscript.
     * @param value - The value to set.
     */
    setIsSubscript(value: boolean) : void;
    /**
     * Gets or sets the font underline type.
     */
    getUnderline() : FontUnderlineType;
    /**
     * Gets or sets the font underline type.
     * @param value - The value to set.
     */
    setUnderline(value: FontUnderlineType) : void;
    /**
     * Gets  or sets the name of the <see cref="Font"/>.
     */
    getName() : string;
    /**
     * Gets  or sets the name of the <see cref="Font"/>.
     * @param value - The value to set.
     */
    setName(value: string) : void;
    /**
     * Gets and sets the double size of the font.
     */
    getDoubleSize() : number;
    /**
     * Gets and sets the double size of the font.
     * @param value - The value to set.
     */
    setDoubleSize(value: number) : void;
    /**
     * Gets or sets the size of the font.
     */
    getSize() : number;
    /**
     * Gets or sets the size of the font.
     * @param value - The value to set.
     */
    setSize(value: number) : void;
    /**
     * Gets and sets the theme color.
     * 
     * @remarks
     * If the font color is not a theme color, NULL will be returned.
     */
    getThemeColor() : ThemeColor;
    /**
     * Gets and sets the theme color.
     * @param value - The value to set.
     * 
     * @remarks
     * If the font color is not a theme color, NULL will be returned.
     */
    setThemeColor(value: ThemeColor) : void;
    /**
     * Gets or sets the <see cref="System.Drawing.Color"/> of the font.
     */
    getColor() : Color;
    /**
     * Gets or sets the <see cref="System.Drawing.Color"/> of the font.
     * @param value - The value to set.
     */
    setColor(value: Color) : void;
    /**
     * Gets and sets the color with a 32-bit ARGB value.
     */
    getArgbColor() : number;
    /**
     * Gets and sets the color with a 32-bit ARGB value.
     * @param value - The value to set.
     */
    setArgbColor(value: number) : void;
    /**
     * Indicates whether the normalization of height that is to be applied to the text run.
     */
    isNormalizeHeights() : boolean;
    /**
     * Indicates whether the normalization of height that is to be applied to the text run.
     * @param value - The value to set.
     */
    setIsNormalizeHeights(value: boolean) : void;
    /**
     * Gets and sets the scheme type of the font.
     */
    getSchemeType() : FontSchemeType;
    /**
     * Gets and sets the scheme type of the font.
     * @param value - The value to set.
     */
    setSchemeType(value: FontSchemeType) : void;
    /**
     * Checks if two fonts are equals.
     * @param font - Compared font object.
     * @returns
     * True if equal to the compared font object.
     */
    equals(font: Font) : boolean;
    /**
     * Returns a string represents the current Cell object.
     */
    toString() : string;
}

/**
 * Enumerates the font underline types.
 */
export enum FontUnderlineType {
    /**
     * Represents no underline.
     */
    None = 0,
    /**
     * Represents single underline.
     */
    Single = 1,
    /**
     * Represents double underline.
     */
    Double = 2,
    /**
     * Represents single accounting underline.
     */
    Accounting = 3,
    /**
     * Represents double accounting underline.
     */
    DoubleAccounting = 4,
    /**
     * Represents Dashed Underline
     */
    Dash = 5,
    /**
     * Represents Thick Dash-Dot-Dot Underline
     */
    DashDotDotHeavy = 6,
    /**
     * Represents Thick Dash-Dot Underline
     */
    DashDotHeavy = 7,
    /**
     * Represents Thick Dashed Underline
     */
    DashedHeavy = 8,
    /**
     * Represents Long Dashed Underline
     */
    DashLong = 9,
    /**
     * Represents Thick Long Dashed Underline
     */
    DashLongHeavy = 10,
    /**
     * Represents Dash-Dot Underline
     */
    DotDash = 11,
    /**
     * Represents Dash-Dot-Dot Underline
     */
    DotDotDash = 12,
    /**
     * Represents Dotted Underline
     */
    Dotted = 13,
    /**
     * Represents Thick Dotted Underline
     */
    DottedHeavy = 14,
    /**
     * Represents Thick Underline
     */
    Heavy = 15,
    /**
     * Represents Wave Underline
     */
    Wave = 16,
    /**
     * Represents Double Wave Underline
     */
    WavyDouble = 17,
    /**
     * Represents Heavy Wave Underline
     */
    WavyHeavy = 18,
    /**
     * Represents Underline Non-Space Characters Only
     */
    Words = 19,
}

/**
 * Describe the AboveAverage conditional formatting rule.
 * This conditional formatting rule highlights cells that
 * are above or below the average for all values in the range.
 */
export class AboveAverage {
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Get or set the flag indicating whether the rule is an "above average" rule.
     * 'true' indicates 'above average'.
     * Default value is true.
     */
    isAboveAverage() : boolean;
    /**
     * Get or set the flag indicating whether the rule is an "above average" rule.
     * 'true' indicates 'above average'.
     * Default value is true.
     * @param value - The value to set.
     */
    setIsAboveAverage(value: boolean) : void;
    /**
     * Get or set the flag indicating whether the 'aboveAverage' and 'belowAverage' criteria
     * is inclusive of the average itself, or exclusive of that value.
     * 'true' indicates to include the average value in the criteria.
     * Default value is false.
     */
    isEqualAverage() : boolean;
    /**
     * Get or set the flag indicating whether the 'aboveAverage' and 'belowAverage' criteria
     * is inclusive of the average itself, or exclusive of that value.
     * 'true' indicates to include the average value in the criteria.
     * Default value is false.
     * @param value - The value to set.
     */
    setIsEqualAverage(value: boolean) : void;
    /**
     * Get or set the number of standard deviations to include above or below the average in the
     * conditional formatting rule.
     * The input value must between 0 and 3 (include 0 and 3).
     * Setting this value to 0 means stdDev is not set.
     * The default value is 0.
     */
    getStdDev() : number;
    /**
     * Get or set the number of standard deviations to include above or below the average in the
     * conditional formatting rule.
     * The input value must between 0 and 3 (include 0 and 3).
     * Setting this value to 0 means stdDev is not set.
     * The default value is 0.
     * @param value - The value to set.
     */
    setStdDev(value: number) : void;
}

/**
 * Represents conditional formatting.
 * The FormatConditions can contain up to three conditional formats.
 */
export class FormatConditionCollection {
    /**
     * Gets the formatting condition by index.
     * @param index - the index of the formatting condition to return.
     * @returns
     * the formatting condition
     */
    get(index: number) : FormatCondition;
    /**
     * Gets the count of the conditions.
     */
    getCount() : number;
    /**
     * Gets count of conditionally formatted ranges.
     */
    getRangeCount() : number;
    /**
     * Adds a formatting condition and effected cell rang to the FormatConditions
     * The FormatConditions can contain up to three conditional formats.
     * References to the other sheets are not allowed in the formulas of conditional formatting.
     * @param cellArea - Conditional formatted cell range.
     * @param type - Type of conditional formatting.It could be one of the members of FormatConditionType.
     * @param operatorType - Comparison operator.It could be one of the members of OperatorType.
     * @param formula1 - The value or expression associated with conditional formatting.
     * @param formula2 - The value or expression associated with conditional formatting
     * @returns
     * [0]:Formatting condition object index;[1] Effected cell rang index.
     */
    add(cellArea: CellArea, type: FormatConditionType, operatorType: OperatorType, formula1: string, formula2: string) : number[];
    /**
     * Adds a conditional formatted cell range.
     * @param cellArea - Conditional formatted cell range.
     * @returns
     * Conditional formatted cell rang index.
     */
    addArea(cellArea: CellArea) : number;
    /**
     * Adds a formatting condition.
     * @param type - The type of format condition.
     * @param operatorType - The operator type
     * @param formula1 - The value or expression associated with conditional formatting.         /// If the input value starts with '=', then it will be taken as formula.         /// Otherwise it will be taken as plain value(text, number, bool).         /// For text value that starts with '=', user may input it as formula in format: "=\"=...\"".
     * @param formula2 - The value or expression associated with conditional formatting.         /// The input format is same with formula1
     * @returns
     * Formatting condition object index;
     */
    addCondition(type: FormatConditionType, operatorType: OperatorType, formula1: string, formula2: string) : number;
    /**
     * Add a format condition.
     * @param type - Format condition type.
     * @returns
     * Formatting condition object index;
     */
    addCondition(type: FormatConditionType) : number;
    /**
     * Gets the conditional formatted cell range by index.
     * @param index - the index of the conditional formatted cell range.
     * @returns
     * the conditional formatted cell range
     */
    getCellArea(index: number) : CellArea;
    /**
     * Removes conditional formatted cell range by index.
     * @param index - The index of the conditional formatted cell range to be removed.
     */
    removeArea(index: number) : void;
    /**
     * Remove conditional formatting int the range.
     * @param startRow - The startRow of the range.
     * @param startColumn - The startColumn of the range.
     * @param totalRows - The number of rows of the range.
     * @param totalColumns - The number of columns of the range.
     * @returns
     * Returns TRUE, this FormatCondtionCollection should be removed.
     */
    removeArea(startRow: number, startColumn: number, totalRows: number, totalColumns: number) : boolean;
    /**
     * Removes the formatting condition by index.
     * @param index - The index of the formatting condition to be removed.
     */
    removeCondition(index: number) : void;
}

/**
 * Conditional format rule type.
 */
export enum FormatConditionType {
    /**
     * This conditional formatting rule compares a cell value
     * to a formula calculated result, using an operator.
     */
    CellValue = 1,
    /**
     * This conditional formatting rule contains a formula to
     * evaluate. When the formula result is true, the cell is
     * highlighted.
     */
    Expression = 2,
    /**
     * This conditional formatting rule highlights cells whose
     * values fall in the top N or bottom N bracket, as
     * specified.
     */
    Top10 = 4,
    /**
     * This conditional formatting rule highlights unique
     * values in the range.
     */
    UniqueValues = 8,
    /**
     * This conditional formatting rule highlights duplicated
     * values.
     */
    DuplicateValues = 16,
    /**
     * This conditional formatting rule highlights cells
     * containing given text. Equivalent to using the SEARCH()
     * sheet function to determine whether the cell contains
     * the text.
     */
    ContainsText = 32,
    /**
     * This conditional formatting rule highlights cells that
     * do not contain given text. Equivalent of using SEARCH()
     * sheet function to determine whether the cell contains
     * the text or not.
     */
    NotContainsText = 64,
    /**
     * This conditional formatting rule highlights cells in the
     * range that begin with the given text. Equivalent to
     * using the LEFT() sheet function and comparing values.
     */
    BeginsWith = 128,
    /**
     * This conditional formatting rule highlights cells ending
     * with given text. Equivalent to using the RIGHT() sheet
     * function and comparing values.
     */
    EndsWith = 256,
    /**
     * This conditional formatting rule highlights cells that
     * are completely blank. Equivalent of using LEN(TRIM()).
     * This means that if the cell contains only characters
     * that TRIM() would remove, then it is considered blank.
     * An empty cell is also considered blank.
     */
    ContainsBlanks = 512,
    /**
     * This conditional formatting rule highlights cells that
     * are not blank. Equivalent of using LEN(TRIM()). This
     * means that if the cell contains only characters that
     * TRIM() would remove, then it is considered blank. An
     * empty cell is also considered blank.
     */
    NotContainsBlanks = 1024,
    /**
     * This conditional formatting rule highlights cells with
     * formula errors. Equivalent to using ISERROR() sheet
     * function to determine if there is a formula error.
     */
    ContainsErrors = 2048,
    /**
     * This conditional formatting rule highlights cells
     * without formula errors. Equivalent to using ISERROR()
     * sheet function to determine if there is a formula error.
     */
    NotContainsErrors = 4096,
    /**
     * This conditional formatting rule highlights cells
     * containing dates in the specified time period. The
     * underlying value of the cell is evaluated, therefore the
     * cell does not need to be formatted as a date to be
     * evaluated. For example, with a cell containing the
     * value 38913 the conditional format shall be applied if
     * the rule requires a value of 7/14/2006.
     */
    TimePeriod = 8192,
    /**
     * This conditional formatting rule highlights cells that
     * are above or below the average for all values in the
     * range.
     */
    AboveAverage = 16384,
    /**
     * This conditional formatting rule creates a gradated
     * color scale on the cells.
     */
    ColorScale = 32768,
    /**
     * This conditional formatting rule displays a gradated
     * data bar in the range of cells.
     */
    DataBar = 65536,
    /**
     * This conditional formatting rule applies icons to cells
     * according to their values.
     */
    IconSet = 131072,
}

/**
 * Represents the type of formatting applied to an <see cref="Area"/> object or a <see cref="Line"/> object.
 */
export enum FormattingType {
    /**
     * Represents automatic formatting type.
     */
    Automatic = 0,
    /**
     * Represents custom formatting type.
     */
    Custom = 2,
    /**
     * Represents none formatting type.
     */
    None = 1,
}

/**
 * Represents the gradient color type for the specified fill.
 */
export enum GradientColorType {
    /**
     * No gradient color
     */
    None = 0,
    /**
     * One gradient color
     */
    OneColor = 1,
    /**
     * Preset gradient colors
     */
    PresetColors = 2,
    /**
     * Two gradient colors
     */
    TwoColors = 3,
}

/**
 * Represents gradient preset color type.
 */
export enum GradientPresetType {
    /**
     * Brass preset color
     */
    Brass = 0,
    /**
     * Calm Water preset color
     */
    CalmWater = 1,
    /**
     * Chrome preset color
     */
    Chrome = 2,
    /**
     * Chrome II preset color
     */
    ChromeII = 3,
    /**
     * Daybreak preset color
     */
    Daybreak = 4,
    /**
     * Desert preset color
     */
    Desert = 5,
    /**
     * Early Sunset preset color
     */
    EarlySunset = 6,
    /**
     * Fire preset color
     */
    Fire = 7,
    /**
     * Fog preset color
     */
    Fog = 8,
    /**
     * Gold preset color
     */
    Gold = 9,
    /**
     * Gold II preset color
     */
    GoldII = 10,
    /**
     * Horizon preset color
     */
    Horizon = 11,
    /**
     * Late Sunset preset color
     */
    LateSunset = 12,
    /**
     * Mahogany preset color
     */
    Mahogany = 13,
    /**
     * Moss preset color
     */
    Moss = 14,
    /**
     * Nightfall preset color
     */
    Nightfall = 15,
    /**
     * Ocean preset color
     */
    Ocean = 16,
    /**
     * Parchment preset color
     */
    Parchment = 17,
    /**
     * Peacock preset color
     */
    Peacock = 18,
    /**
     * Rainbow preset color
     */
    Rainbow = 19,
    /**
     * Rainbow II preset color
     */
    RainbowII = 20,
    /**
     * Sapphire preset color
     */
    Sapphire = 21,
    /**
     * Silver preset color
     */
    Silver = 22,
    /**
     * Wheat preset color
     */
    Wheat = 23,
    /**
     * Unknown preset color.
     * Only for the preset color (which is not same as any known preset color) in the template workbook.
     */
    Unknown = 24,
}

/**
 * Represents gradient shading style.
 */
export enum GradientStyleType {
    /**
     * Diagonal down shading style
     */
    DiagonalDown = 0,
    /**
     * Diagonal up shading style
     */
    DiagonalUp = 1,
    /**
     * From center shading style
     */
    FromCenter = 2,
    /**
     * From corner shading style
     */
    FromCorner = 3,
    /**
     * Horizontal shading style
     */
    Horizontal = 4,
    /**
     * Vertical shading style
     */
    Vertical = 5,
    /**
     * Unknown shading style.Only for the shading style(which is not for any member of the GradientStyleType) in the template file.
     */
    Unknown = 6,
}

/**
 * Encapsulates the object that represents a groupbox in a spreadsheet.
 */
export class GroupBox extends Shape {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Shape);
    /**
     * Indicates whether the groupbox has shadow.
     */
    getShadow() : boolean;
    /**
     * Indicates whether the groupbox has shadow.
     * @param value - The value to set.
     */
    setShadow(value: boolean) : void;
}

/**
 * Represents the group shape which contains the individual shapes.
 */
export class GroupShape extends Shape {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Shape);
    /**
     * Gets the child shape by index.
     * @param index - the child shape index.
     * @returns
     * return the child shape.
     */
    get(index: number) : Shape;
    /**
     * Ungroups the shape items.
     * 
     * @remarks
     * If the group shape is grouped by another group shape,nothing will be done.
     */
    ungroup() : void;
    /**
     * Gets the shapes grouped by this shape.
     */
    getGroupedShapes() : Shape[];
}

/**
 * Provides helper functions.
 */
export class CellsHelper {
    /**
     * Gets and sets the number of significant digits.
     * The default value is 17.
     * 
     * @remarks
     * Only could be 15 or 17 now.
     */
    static getSignificantDigits() : number;
    /**
     * Gets and sets the number of significant digits.
     * The default value is 17.
     * @param value - The value to set.
     * 
     * @remarks
     * Only could be 15 or 17 now.
     */
    static setSignificantDigits(value: number) : void;
    /**
     * Gets the DPI of the machine.
     * 
     * @remarks
     */
    static getDPI() : number;
    /**
     * Gets the DPI of the machine.
     * @param value - The value to set.
     * 
     * @remarks
     */
    static setDPI(value: number) : void;
    /**
     * Gets or sets the startup path, which is referred to by some external formula references.
     */
    static getStartupPath() : string;
    /**
     * Gets or sets the startup path, which is referred to by some external formula references.
     * @param value - The value to set.
     */
    static setStartupPath(value: string) : void;
    /**
     * Gets or sets the alternate startup path, which is referred to by some external formula references.
     */
    static getAltStartPath() : string;
    /**
     * Gets or sets the alternate startup path, which is referred to by some external formula references.
     * @param value - The value to set.
     */
    static setAltStartPath(value: string) : void;
    /**
     * Gets or sets the library path which is referred to by some external formula references.
     */
    static getLibraryPath() : string;
    /**
     * Gets or sets the library path which is referred to by some external formula references.
     * @param value - The value to set.
     */
    static setLibraryPath(value: string) : void;
    /**
     * Please set this property True when running on a cloud platform, such as: Azure, AWSLambda, etc,
     */
    static isCloudPlatform() : boolean;
    /**
     * Please set this property True when running on a cloud platform, such as: Azure, AWSLambda, etc,
     * @param value - The value to set.
     */
    static setIsCloudPlatform(value: boolean) : void;
    /**
     * Get width of text in unit of points.
     * @param text - The text.
     * @param font - The font of the text.
     * @param scaling - The scaling of text.
     */
    static getTextWidth(text: string, font: Font, scaling: number) : number;
    /**
     * Get the release version.
     * @returns
     * The release version.
     */
    static getVersion() : string;
    /**
     * Gets the cell row and column indexes according to its name.
     * @param cellName - Name of cell.
     * @param row - Output row index
     * @param column - Output column index
     */
    static cellNameToIndex(cellName: string, row: number, column: number) : void;
    /**
     * Gets cell name according to its row and column indexes.
     * @param row - Row index.
     * @param column - Column index.
     * @returns
     * Name of cell.
     */
    static cellIndexToName(row: number, column: number) : string;
    /**
     * Gets column name according to column index.
     * @param column - Column index.
     * @returns
     * Name of column.
     */
    static columnIndexToName(column: number) : string;
    /**
     * Gets column index according to column name.
     * @param columnName - Column name.
     * @returns
     * Column index.
     */
    static columnNameToIndex(columnName: string) : number;
    /**
     * Gets row name according to row index.
     * @param row - Row index.
     * @returns
     * Name of row.
     */
    static rowIndexToName(row: number) : string;
    /**
     * Gets row index according to row name.
     * @param rowName - Row name.
     * @returns
     * Row index.
     */
    static rowNameToIndex(rowName: string) : number;
    /**
     * Convert the double value to the date time value.
     * @param doubleValue - The double value.
     * @param date1904 - Date 1904 system.
     */
    static getDateTimeFromDouble(doubleValue: number, date1904: boolean) : Date;
    /**
     * Convert the date time to double value.
     * @param dateTime - The date time.
     * @param date1904 - Date 1904 system.
     */
    static getDoubleFromDateTime(dateTime: Date, date1904: boolean) : number;
    /**
     * Gets all used colors in the workbook.
     * @param workbook - The workbook object.
     * @returns
     * The used colors.
     */
    static getUsedColors(workbook: Workbook) : Color[];
    /**
     * Merges some large xls files to a xls file.
     * @param files - The files.
     * @param cachedFile - The cached file.
     * @param destFile - The dest file.
     * 
     * @remarks
     * This method only supports merging data, style and formulas to the new file.
     * The cached file is used to store some temporary data.
     */
    static mergeFiles(files: string[], cachedFile: string, destFile: string) : void;
    /**
     * Checks given sheet name and create a valid one when needed.
     * If given sheet name conforms to the rules of excel sheet name, then return it.
     * Otherwise string will be truncated if length exceeds the limit
     * and invalid characters will be replaced with ' ', then return the rebuilt string value.
     * @param nameProposal - sheet name to be used
     */
    static createSafeSheetName(nameProposal: string) : string;
    /**
     * Indicates whether the name of the sheet should be enclosed in single quotes
     * @param sheetName - The name of the sheet
     */
    static needQuoteInFormula(sheetName: string) : boolean;
}

/**
 * Encapsulates the object that represents a horizontal page break.
 */
export class HorizontalPageBreak {
    /**
     * Gets the start column index of this horizontal page break.
     */
    getStartColumn() : number;
    /**
     * Gets the end column index of this horizontal page break.
     */
    getEndColumn() : number;
    /**
     * Gets the zero based row index.
     */
    getRow() : number;
}

/**
 * Encapsulates a collection of <see cref="HorizontalPageBreak"/> objects.
 */
export class HorizontalPageBreakCollection {
    /**
     * Gets the <see cref="HorizontalPageBreak"/> element at the specified index.
     * @param index - The zero based index of the element.
     * @returns
     * The element at the specified index.
     */
    get(index: number) : HorizontalPageBreak;
    /**
     * Gets the <see cref="HorizontalPageBreak"/> element with the specified cell name.
     * @param cellName - Cell name.
     * @returns
     * The element with the specified cell name.
     */
    get(cellName: string) : HorizontalPageBreak;
    /**
     * Adds a horizontal page break to the collection.
     * @param row - Row index, zero based.
     * @param startColumn - Start column index, zero based.
     * @param endColumn - End column index, zero based.
     * @returns
     * <see cref="HorizontalPageBreak"/> object index.
     * 
     * @remarks
     * This method is used to add a horizontal pagebreak within a print area.
     */
    add(row: number, startColumn: number, endColumn: number) : number;
    /**
     * Adds a horizontal page break to the collection.
     * @param row - Cell row index, zero based.
     * @returns
     * <see cref="HorizontalPageBreak"/> object index.
     * 
     * @remarks
     * Page break is added in the top left of the cell.
     * Please set a horizontal page break and a vertical page break concurrently.
     */
    add(row: number) : number;
    /**
     * Adds a horizontal page break to the collection.
     * @param row - Cell row index, zero based.
     * @param column - Cell column index, zero based.
     * @returns
     * <see cref="HorizontalPageBreak"/> object index.
     * 
     * @remarks
     * Page break is added in the top left of the cell.
     * Please set a horizontal page break and a vertical page break concurrently.
     */
    add(row: number, column: number) : number;
    /**
     * Adds a horizontal page break to the collection.
     * @param cellName - Cell name.
     * @returns
     * <see cref="HorizontalPageBreak"/> object index.
     * 
     * @remarks
     * Page break is added in the top left of the cell.
     * Please set a horizontal page break and a vertical page break concurrently.
     */
    add(cellName: string) : number;
    /**
     * Removes the HPageBreak element at a specified name.
     * @param index - Element index, zero based.
     */
    removeAt(index: number) : void;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Encapsulates the object that represents a hyperlink.
 */
export class Hyperlink {
    /**
     * Represents the address of a hyperlink.
     */
    getAddress() : string;
    /**
     * Represents the address of a hyperlink.
     * @param value - The value to set.
     */
    setAddress(value: string) : void;
    /**
     * Represents the text to be displayed for the specified hyperlink. The default value is the address of the hyperlink.
     */
    getTextToDisplay() : string;
    /**
     * Represents the text to be displayed for the specified hyperlink. The default value is the address of the hyperlink.
     * @param value - The value to set.
     */
    setTextToDisplay(value: string) : void;
    /**
     * Gets the range of hyperlink.
     */
    getArea() : CellArea;
    /**
     * Returns or sets the ScreenTip text for the specified hyperlink.
     */
    getScreenTip() : string;
    /**
     * Returns or sets the ScreenTip text for the specified hyperlink.
     * @param value - The value to set.
     */
    setScreenTip(value: string) : void;
    /**
     * Gets the link type.
     */
    getLinkType() : TargetModeType;
    /**
     * Deletes this hyperlink
     */
    delete() : void;
}

/**
 * Encapsulates a collection of <see cref="Hyperlink"/> objects.
 */
export class HyperlinkCollection {
    /**
     * Gets the <see cref="Hyperlink"/> element at the specified index.
     * @param index - The zero based index of the element.
     * @returns
     * The element at the specified index.
     */
    get(index: number) : Hyperlink;
    /**
     * Adds a hyperlink to a specified cell or a range of cells.
     * @param firstRow - First row of the hyperlink range.
     * @param firstColumn - First column of the hyperlink range.
     * @param totalRows - Number of rows in this hyperlink range.
     * @param totalColumns - Number of columns of this hyperlink range.
     * @param address - Address of the hyperlink.
     * @returns
     * <see cref="Hyperlink"/> object index.
     */
    add(firstRow: number, firstColumn: number, totalRows: number, totalColumns: number, address: string) : number;
    /**
     * Adds a hyperlink to a specified cell or a range of cells.
     * @param cellName - Cell name.
     * @param totalRows - Number of rows in this hyperlink range.
     * @param totalColumns - Number of columns of this hyperlink range.
     * @param address - Address of the hyperlink.
     * @returns
     * <see cref="Hyperlink"/> object index.
     */
    add(cellName: string, totalRows: number, totalColumns: number, address: string) : number;
    /**
     * Adds a hyperlink to a specified cell or a range of cells.
     * @param startCellName - The top-left cell of the range.
     * @param endCellName - The bottom-right cell of the range.
     * @param address - Address of the hyperlink.
     * @param textToDisplay - The text to be displayed for the specified hyperlink.
     * @param screenTip - The screenTip text for the specified hyperlink.
     * @returns
     * <see cref="Hyperlink"/> object index.
     */
    add(startCellName: string, endCellName: string, address: string, textToDisplay: string, screenTip: string) : number;
    /**
     * Remove the hyperlink  at the specified index in this collection.
     * @param index - The zero based index of the element.
     */
    removeAt(index: number) : void;
    /**
     * Clears all hyperlinks.
     */
    clear() : void;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the save options for csv/tab delimited/other text format.
 */
export class TxtSaveOptions extends SaveOptions {
    /**
     * Creates text file save options.
     */
    constructor();
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: SaveOptions);
    /**
     * Creates text file save options.
     * @param saveFormat - The file format.         /// It should be <see cref="SaveFormat.Csv"/> or <see cref="SaveFormat.Tsv"/>,         /// otherwise the saved format will be set as <see cref="SaveFormat.Csv"/> automatically.
     */
    constructor(saveFormat: SaveFormat);
    /**
     * Gets and sets char Delimiter of text file.
     */
    getSeparator() : string;
    /**
     * Gets and sets char Delimiter of text file.
     * @param value - The value to set.
     */
    setSeparator(value: string) : void;
    /**
     * Gets and sets a string value as separator.
     */
    getSeparatorString() : string;
    /**
     * Gets and sets a string value as separator.
     * @param value - The value to set.
     */
    setSeparatorString(value: string) : void;
    /**
     * Gets and sets the default encoding.
     */
    getEncoding() : EncodingType;
    /**
     * Gets and sets the default encoding.
     * @param value - The value to set.
     */
    setEncoding(value: EncodingType) : void;
    /**
     * Gets or sets how to quote values in the exported text file.
     */
    getQuoteType() : TxtValueQuoteType;
    /**
     * Gets or sets how to quote values in the exported text file.
     * @param value - The value to set.
     */
    setQuoteType(value: TxtValueQuoteType) : void;
    /**
     * Gets and sets the format strategy when exporting the cell value as string.
     */
    getFormatStrategy() : CellValueFormatStrategy;
    /**
     * Gets and sets the format strategy when exporting the cell value as string.
     * @param value - The value to set.
     */
    setFormatStrategy(value: CellValueFormatStrategy) : void;
    /**
     * The data provider for saving workbook in light mode.
     */
    getLightCellsDataProvider() : LightCellsDataProvider;
    /**
     * The data provider for saving workbook in light mode.
     * @param value - The value to set.
     */
    setLightCellsDataProvider(value: LightCellsDataProvider) : void;
    /**
     * Indicates whether leading blank rows and columns should be trimmed like what ms excel does.
     * Default is true.
     * 
     * @remarks
     * Same with the rule in ms excel, a row/column will not be taken as blank if it has custom style,
     * even if it contains no cell data.
     * When saving with LightCells mode, this option takes no effect.
     * User should control the output range by the implementation of <see cref="LightCellsDataProvider"/>
     * or by speicifing <see cref="ExportArea"/>
     */
    getTrimLeadingBlankRowAndColumn() : boolean;
    /**
     * Indicates whether leading blank rows and columns should be trimmed like what ms excel does.
     * Default is true.
     * @param value - The value to set.
     * 
     * @remarks
     * Same with the rule in ms excel, a row/column will not be taken as blank if it has custom style,
     * even if it contains no cell data.
     * When saving with LightCells mode, this option takes no effect.
     * User should control the output range by the implementation of <see cref="LightCellsDataProvider"/>
     * or by speicifing <see cref="ExportArea"/>
     */
    setTrimLeadingBlankRowAndColumn(value: boolean) : void;
    /**
     * Indicates whether tailing blank cells in one row should be trimmed. Default is false.
     * 
     * @remarks
     * When saving with LightCells mode and the <see cref="ExportArea"/> has not been specified,
     * this option takes no effect and one row will be extended to just the last cell provided by
     * the implementation <see cref="LightCellsDataProvider"/>
     */
    getTrimTailingBlankCells() : boolean;
    /**
     * Indicates whether tailing blank cells in one row should be trimmed. Default is false.
     * @param value - The value to set.
     * 
     * @remarks
     * When saving with LightCells mode and the <see cref="ExportArea"/> has not been specified,
     * this option takes no effect and one row will be extended to just the last cell provided by
     * the implementation <see cref="LightCellsDataProvider"/>
     */
    setTrimTailingBlankCells(value: boolean) : void;
    /**
     * Indicates whether separators should be output for blank row.
     * Default value is false so by default the content for blank row will be empty.
     */
    getKeepSeparatorsForBlankRow() : boolean;
    /**
     * Indicates whether separators should be output for blank row.
     * Default value is false so by default the content for blank row will be empty.
     * @param value - The value to set.
     */
    setKeepSeparatorsForBlankRow(value: boolean) : void;
    /**
     * The range of cells to be exported.
     * 
     * @remarks
     * If the exported area has been specified, <see cref="TrimLeadingBlankRowAndColumn"/>
     * will takes no effect.
     */
    getExportArea() : CellArea;
    /**
     * The range of cells to be exported.
     * @param value - The value to set.
     * 
     * @remarks
     * If the exported area has been specified, <see cref="TrimLeadingBlankRowAndColumn"/>
     * will takes no effect.
     */
    setExportArea(value: CellArea) : void;
    /**
     * Indicates whether the single quote sign should be exported as part of the value of one cell
     * when <see cref="Style.QuotePrefix"/> is true for it. Default is false.
     */
    getExportQuotePrefix() : boolean;
    /**
     * Indicates whether the single quote sign should be exported as part of the value of one cell
     * when <see cref="Style.QuotePrefix"/> is true for it. Default is false.
     * @param value - The value to set.
     */
    setExportQuotePrefix(value: boolean) : void;
    /**
     * Indicates whether exporting all sheets to the text file.
     * If it is false, only export the activesheet, just like MS Excel.
     * 
     * @remarks
     * The defult value is false.
     */
    getExportAllSheets() : boolean;
    /**
     * Indicates whether exporting all sheets to the text file.
     * If it is false, only export the activesheet, just like MS Excel.
     * @param value - The value to set.
     * 
     * @remarks
     * The defult value is false.
     */
    setExportAllSheets(value: boolean) : void;
}

/**
 * Represents Xml Data Binding information.
 */
export class XmlColumnProperty {
    /**
     * Default Constructor.
     */
    constructor();
}

/**
 * Encapsulates the object that represents a label in a spreadsheet.
 */
export class Label extends Shape {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Shape);
}

/**
 * Encapsulates the object that represents the chart legend.
 */
export class Legend extends ChartTextFrame {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: ChartTextFrame);
    /**
     * Gets or sets the legend position type.
     * 
     * @remarks
     * <br>Default position is right.</br>
     * <br>If the legend is at left or right side of the chart, setting Legend.X property will not take effect.</br>
     * <br>If the legend is at top or bottom side of the chart, setting Legend.Y property will not take effect.</br>
     */
    getPosition() : LegendPositionType;
    /**
     * Gets or sets the legend position type.
     * @param value - The value to set.
     * 
     * @remarks
     * <br>Default position is right.</br>
     * <br>If the legend is at left or right side of the chart, setting Legend.X property will not take effect.</br>
     * <br>If the legend is at top or bottom side of the chart, setting Legend.Y property will not take effect.</br>
     */
    setPosition(value: LegendPositionType) : void;
    /**
     * Gets a collection of all the LegendEntry objects in the specified chart legend.
     * Setting the legend entries of the surface chart is not supported.
     * So it will return null if the chart type is surface chart type.
     */
    getLegendEntries() : LegendEntryCollection;
    /**
     * Gets or sets whether showing the legend without overlapping the chart.
     */
    isOverLay() : boolean;
    /**
     * Gets or sets whether showing the legend without overlapping the chart.
     * @param value - The value to set.
     */
    setIsOverLay(value: boolean) : void;
    /**
     * Gets the labels of the legend entries after call Chart.Calculate() method.
     */
    getLegendLabels() : string[];
}

/**
 * Represents a collection of all the <see cref="LegendEntry"/> objects in the specified chart legend.
 */
export class LegendEntryCollection {
    /**
     * Gets the <see cref="LegendEntry"/> element at the specified index.
     * @param index - The zero based index of the element.
     * @returns
     * The element at the specified index.
     */
    get(index: number) : LegendEntry;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents a legend entry in a chart legend.
 */
export class LegendEntry {
    /**
     * Gets and sets whether the legend entry is deleted.
     */
    isDeleted() : boolean;
    /**
     * Gets and sets whether the legend entry is deleted.
     * @param value - The value to set.
     */
    setIsDeleted(value: boolean) : void;
    /**
     * Gets a <see cref="Font"/> object of the specified ChartFrame object.
     */
    getFont() : Font;
    /**
     * Gets or sets no fill of the text.
     */
    isTextNoFill() : boolean;
    /**
     * Gets or sets no fill of the text.
     * @param value - The value to set.
     */
    setIsTextNoFill(value: boolean) : void;
    /**
     * True if the text in the object changes font size when the object size changes.
     * The default value is True.
     */
    getAutoScaleFont() : boolean;
    /**
     * True if the text in the object changes font size when the object size changes.
     * The default value is True.
     * @param value - The value to set.
     */
    setAutoScaleFont(value: boolean) : void;
    /**
     * Gets and sets the display mode of the background
     */
    getBackgroundMode() : BackgroundMode;
    /**
     * Gets and sets the display mode of the background
     * @param value - The value to set.
     */
    setBackgroundMode(value: BackgroundMode) : void;
}

/**
 * Enumerates the legend position types.
 */
export enum LegendPositionType {
    /**
     * Displays the legend to the bottom of the chart's plot area.
     */
    Bottom = 0,
    /**
     * Displays the legend to the corner of the chart's plot area.
     */
    Corner = 1,
    /**
     * Displays the legend to the left of the chart's plot area.
     */
    Left = 4,
    /**
     * Represents that the legend is not docked.
     */
    NotDocked = 7,
    /**
     * Displays the legend to the right of the chart's plot area.
     */
    Right = 3,
    /**
     * Displays the legend to the top of the chart's plot area.
     */
    Top = 2,
}

/**
 * Encapsulates the object that represents the line format.
 */
export class Line {
    /**
     * Specifies the compound line type
     */
    getCompoundType() : MsoLineStyle;
    /**
     * Specifies the compound line type
     * @param value - The value to set.
     */
    setCompoundType(value: MsoLineStyle) : void;
    /**
     * Specifies the dash line type
     */
    getDashType() : MsoLineDashStyle;
    /**
     * Specifies the dash line type
     * @param value - The value to set.
     */
    setDashType(value: MsoLineDashStyle) : void;
    /**
     * Specifies the ending caps.
     */
    getCapType() : LineCapType;
    /**
     * Specifies the ending caps.
     * @param value - The value to set.
     */
    setCapType(value: LineCapType) : void;
    /**
     * Specifies the joining caps.
     */
    getJoinType() : LineJoinType;
    /**
     * Specifies the joining caps.
     * @param value - The value to set.
     */
    setJoinType(value: LineJoinType) : void;
    /**
     * Specifies an arrowhead for the begin of a line.
     */
    getBeginType() : MsoArrowheadStyle;
    /**
     * Specifies an arrowhead for the begin of a line.
     * @param value - The value to set.
     */
    setBeginType(value: MsoArrowheadStyle) : void;
    /**
     * Specifies an arrowhead for the end of a line.
     */
    getEndType() : MsoArrowheadStyle;
    /**
     * Specifies an arrowhead for the end of a line.
     * @param value - The value to set.
     */
    setEndType(value: MsoArrowheadStyle) : void;
    /**
     * Specifies the length of the arrowhead for the begin of a line.
     */
    getBeginArrowLength() : MsoArrowheadLength;
    /**
     * Specifies the length of the arrowhead for the begin of a line.
     * @param value - The value to set.
     */
    setBeginArrowLength(value: MsoArrowheadLength) : void;
    /**
     * Specifies the length of the arrowhead for the end of a line.
     */
    getEndArrowLength() : MsoArrowheadLength;
    /**
     * Specifies the length of the arrowhead for the end of a line.
     * @param value - The value to set.
     */
    setEndArrowLength(value: MsoArrowheadLength) : void;
    /**
     * Specifies the width of the arrowhead for the begin of a line.
     */
    getBeginArrowWidth() : MsoArrowheadWidth;
    /**
     * Specifies the width of the arrowhead for the begin of a line.
     * @param value - The value to set.
     */
    setBeginArrowWidth(value: MsoArrowheadWidth) : void;
    /**
     * Specifies the width of the arrowhead for the end of a line.
     */
    getEndArrowWidth() : MsoArrowheadWidth;
    /**
     * Specifies the width of the arrowhead for the end of a line.
     * @param value - The value to set.
     */
    setEndArrowWidth(value: MsoArrowheadWidth) : void;
    /**
     * Gets and sets the theme color.
     * 
     * @remarks
     * If the foreground color is not a theme color, NULL will be returned.
     */
    getThemeColor() : ThemeColor;
    /**
     * Gets and sets the theme color.
     * @param value - The value to set.
     * 
     * @remarks
     * If the foreground color is not a theme color, NULL will be returned.
     */
    setThemeColor(value: ThemeColor) : void;
    /**
     * Represents the <see cref="System.Drawing.Color"/> of the line.
     */
    getColor() : Color;
    /**
     * Represents the <see cref="System.Drawing.Color"/> of the line.
     * @param value - The value to set.
     */
    setColor(value: Color) : void;
    /**
     * Returns or sets the degree of transparency of the line as a value from 0.0 (opaque) through 1.0 (clear).
     */
    getTransparency() : number;
    /**
     * Returns or sets the degree of transparency of the line as a value from 0.0 (opaque) through 1.0 (clear).
     * @param value - The value to set.
     */
    setTransparency(value: number) : void;
    /**
     * Represents the style of the line.
     */
    getStyle() : LineType;
    /**
     * Represents the style of the line.
     * @param value - The value to set.
     */
    setStyle(value: LineType) : void;
    /**
     * Gets or sets the <see cref="WeightType"/> of the line.
     */
    getWeight() : WeightType;
    /**
     * Gets or sets the <see cref="WeightType"/> of the line.
     * @param value - The value to set.
     */
    setWeight(value: WeightType) : void;
    /**
     * Gets or sets the weight of the line in unit of points.
     */
    getWeightPt() : number;
    /**
     * Gets or sets the weight of the line in unit of points.
     * @param value - The value to set.
     */
    setWeightPt(value: number) : void;
    /**
     * Gets or sets the weight of the line in unit of pixels.
     */
    getWeightPx() : number;
    /**
     * Gets or sets the weight of the line in unit of pixels.
     * @param value - The value to set.
     */
    setWeightPx(value: number) : void;
    /**
     * Gets or sets format type.
     */
    getFormattingType() : ChartLineFormattingType;
    /**
     * Gets or sets format type.
     * @param value - The value to set.
     */
    setFormattingType(value: ChartLineFormattingType) : void;
    /**
     * Indicates whether the color of line is automatic assigned.
     */
    isAutomaticColor() : boolean;
    /**
     * Represents whether the line is visible.
     */
    isVisible() : boolean;
    /**
     * Represents whether the line is visible.
     * @param value - The value to set.
     */
    setIsVisible(value: boolean) : void;
    /**
     * Indicates whether this line style is auto assigned.
     */
    isAuto() : boolean;
    /**
     * Indicates whether this line style is auto assigned.
     * @param value - The value to set.
     */
    setIsAuto(value: boolean) : void;
    /**
     * Represents gradient fill.
     */
    getGradientFill() : GradientFill;
}

/**
 * Represents the line shape.
 */
export class LineShape extends Shape {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Shape);
}

/**
 * Enumerates the type of <see cref="Picture"/> border or <see cref="Chart"/> line.
 */
export enum LineType {
    /**
     * Represents a dark gray line.
     */
    DarkGray = 6,
    /**
     * Represent a dash line.
     */
    Dash = 1,
    /**
     * Represents a dash-dot line
     */
    DashDot = 3,
    /**
     * Represents a dash-dot-dot line.
     */
    DashDotDot = 4,
    /**
     * Represents a dotted line.
     */
    Dot = 2,
    /**
     * Represents a light gray line.
     */
    LightGray = 8,
    /**
     * Represents a medium gray line.
     */
    MediumGray = 7,
    /**
     * Represent a solid line.
     */
    Solid = 0,
}

/**
 * Represents a list box object.
 */
export class ListBox extends Shape {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Shape);
    /**
     * Gets the number of items in the list box.
     */
    getItemCount() : number;
    /**
     * Gets or sets the index number of the currently selected item in a list box or combo box.
     * Zero-based.
     * 
     * @remarks
     * -1 presents no item is selected.
     */
    getSelectedIndex() : number;
    /**
     * Gets or sets the index number of the currently selected item in a list box or combo box.
     * Zero-based.
     * @param value - The value to set.
     * 
     * @remarks
     * -1 presents no item is selected.
     */
    setSelectedIndex(value: number) : void;
    /**
     * Gets the selected cells.
     * Returns null if the input range is not set or no item is selected
     */
    getSelectedCells() : Cell[];
    /**
     * Indicates whether the combobox has 3-D shading.
     */
    getShadow() : boolean;
    /**
     * Indicates whether the combobox has 3-D shading.
     * @param value - The value to set.
     */
    setShadow(value: boolean) : void;
    /**
     * Gets or sets the selection mode of the specified list box.
     */
    getSelectionType() : SelectionType;
    /**
     * Gets or sets the selection mode of the specified list box.
     * @param value - The value to set.
     */
    setSelectionType(value: SelectionType) : void;
    /**
     * Specifies the amount by which the control's value is changed
     * when the user clicks on the scrollbar's page up or page down region.
     */
    getPageChange() : number;
    /**
     * Specifies the amount by which the control's value is changed
     * when the user clicks on the scrollbar's page up or page down region.
     * @param value - The value to set.
     */
    setPageChange(value: number) : void;
    /**
     * Sets whether the item is selected
     * @param itemIndex - The item index
     * @param isSelected - Whether the item is selected.         /// True means that this item should be selected.         /// False means that this item should be unselected.
     */
    selectedItem(itemIndex: number, isSelected: boolean) : void;
    /**
     * Indicates whether the item is selected.
     * @param itemIndex - The item index.
     * @returns
     * whether the item is selected.
     */
    isSelected(itemIndex: number) : boolean;
}

/**
 * Represents a column in a Table.
 */
export class ListColumn {
    /**
     * Gets and sets the name of the column.
     * 
     * @remarks
     * If sets the name of the column, the according cell' value will be changed too.
     */
    getName() : string;
    /**
     * Gets and sets the name of the column.
     * @param value - The value to set.
     * 
     * @remarks
     * If sets the name of the column, the according cell' value will be changed too.
     */
    setName(value: string) : void;
    /**
     * Gets and sets the type of calculation in the Totals row of the list column.
     */
    getTotalsCalculation() : TotalsCalculation;
    /**
     * Gets and sets the type of calculation in the Totals row of the list column.
     * @param value - The value to set.
     */
    setTotalsCalculation(value: TotalsCalculation) : void;
    /**
     * Gets the range of this list column.
     */
    getRange() : Range;
    /**
     * Gets and sets the formula of the list column.
     */
    getFormula() : string;
    /**
     * Gets and sets the formula of the list column.
     * @param value - The value to set.
     */
    setFormula(value: string) : void;
    /**
     * Gets and sets the display labels of total row.
     */
    getTotalsRowLabel() : string;
    /**
     * Gets and sets the display labels of total row.
     * @param value - The value to set.
     */
    setTotalsRowLabel(value: string) : void;
    /**
     * Gets the formula of totals row of this list column.
     * @param isR1C1 - Whether the formula needs to be formatted as R1C1.
     * @param isLocal - Whether the formula needs to be formatted by locale.
     * @returns
     * The formula of this list column.
     */
    getCustomTotalsRowFormula(isR1C1: boolean, isLocal: boolean) : string;
    /**
     * Gets the formula of totals row of this list column.
     * @param formula - the formula for this list column.
     * @param isR1C1 - Whether the formula needs to be formatted as R1C1.
     * @param isLocal - Whether the formula needs to be formatted by locale.
     */
    setCustomTotalsRowFormula(formula: string, isR1C1: boolean, isLocal: boolean) : void;
    /**
     * Gets the formula of this list column.
     * @param isR1C1 - Whether the formula needs to be formatted as R1C1.
     * @param isLocal - Whether the formula needs to be formatted by locale.
     * @returns
     * The formula of this list column.
     */
    getCustomCalculatedFormula(isR1C1: boolean, isLocal: boolean) : string;
    /**
     * Sets the formula for this list column.
     * @param formula - the formula for this list column.
     * @param isR1C1 - Whether the formula needs to be formatted as R1C1.
     * @param isLocal - Whether the formula needs to be formatted by locale.
     */
    setCustomCalculatedFormula(formula: string, isR1C1: boolean, isLocal: boolean) : void;
    /**
     * Gets the style of the data in this column of the table.
     */
    getDataStyle() : Style;
    /**
     * Sets the style of the data in this column of the table.
     */
    setDataStyle(style: Style) : void;
}

/**
 * Represents A collection of all the <see cref="ListColumn"/> objects in the specified ListObject object.
 */
export class ListColumnCollection {
    /**
     * Gets the ListColumn by the index.
     * @param index - The index.
     * @returns
     * the ListColumn object.
     */
    get(index: number) : ListColumn;
    /**
     * Gets the ListColumn by the name.
     * @param name - The name of the ListColumn
     * @returns
     * The ListColumn object.
     */
    get(name: string) : ListColumn;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents a collection of <see cref="ListObject"/> objects in the worksheet.
 */
export class ListObjectCollection {
    /**
     * Gets the ListObject by index.
     * @param index - The index.
     * @returns
     * The ListObject
     */
    get(index: number) : ListObject;
    /**
     * Gets the ListObject by specified name.
     * @param tableName - ListObject name.
     * @returns
     * The ListObject
     */
    get(tableName: string) : ListObject;
    /**
     * Adds a ListObject to the worksheet.
     * @param startRow - The start row of the list range.
     * @param startColumn - The start row of the list range.
     * @param endRow - The start row of the list range.
     * @param endColumn - The start row of the list range.
     * @param hasHeaders - Whether the range has headers.
     * @returns
     * The index of the new ListObject
     */
    add(startRow: number, startColumn: number, endRow: number, endColumn: number, hasHeaders: boolean) : number;
    /**
     * Adds a ListObject to the worksheet.
     * @param startCell - The start cell of the list range.
     * @param endCell - The end cell of the list range.
     * @param hasHeaders - Whether the range has headers.
     * @returns
     * The index of the new ListObject
     */
    add(startCell: string, endCell: string, hasHeaders: boolean) : number;
    /**
     * Update all column name of the tables.
     */
    updateColumnName() : void;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the marker in a line chart, scatter chart, or radar chart.
 */
export class Marker {
    /**
     * Gets the <see cref="Line">border</see>.
     */
    getBorder() : Line;
    /**
     * Gets the <see cref="Area">area</see>.
     */
    getArea() : Area;
    /**
     * Represents the marker style. Applies to line chart, scatter chart, or radar chart.
     */
    getMarkerStyle() : ChartMarkerType;
    /**
     * Represents the marker style. Applies to line chart, scatter chart, or radar chart.
     * @param value - The value to set.
     */
    setMarkerStyle(value: ChartMarkerType) : void;
    /**
     * Represents the marker size in unit of points. Applies to line chart, scatter chart, or radar chart.
     */
    getMarkerSize() : number;
    /**
     * Represents the marker size in unit of points. Applies to line chart, scatter chart, or radar chart.
     * @param value - The value to set.
     */
    setMarkerSize(value: number) : void;
    /**
     * Represents the marker size in unit of pixels. Applies to line chart, scatter chart, or radar chart.
     */
    getMarkerSizePx() : number;
    /**
     * Represents the marker size in unit of pixels. Applies to line chart, scatter chart, or radar chart.
     * @param value - The value to set.
     */
    setMarkerSizePx(value: number) : void;
    /**
     * Represents the marker foreground color in a line chart, scatter chart, or radar chart.
     */
    getForegroundColor() : Color;
    /**
     * Represents the marker foreground color in a line chart, scatter chart, or radar chart.
     * @param value - The value to set.
     */
    setForegroundColor(value: Color) : void;
    /**
     * Gets or sets the marker foreground color set type.
     */
    getForegroundColorSetType() : FormattingType;
    /**
     * Gets or sets the marker foreground color set type.
     * @param value - The value to set.
     */
    setForegroundColorSetType(value: FormattingType) : void;
    /**
     * Represents the marker background color in a line chart, scatter chart, or radar chart.
     */
    getBackgroundColor() : Color;
    /**
     * Represents the marker background color in a line chart, scatter chart, or radar chart.
     * @param value - The value to set.
     */
    setBackgroundColor(value: Color) : void;
    /**
     * Gets or sets the marker background color set type.
     */
    getBackgroundColorSetType() : FormattingType;
    /**
     * Gets or sets the marker background color set type.
     * @param value - The value to set.
     */
    setBackgroundColorSetType(value: FormattingType) : void;
}

/**
 * Enumerates the line end type of the shape border line.
 */
export enum MsoArrowheadStyle {
    /**
     * No line end type.
     */
    None = 0,
    /**
     * Arrow line end type.
     */
    Arrow = 1,
    /**
     * Arrow Stealth line end type.
     */
    ArrowStealth = 2,
    /**
     * Arrow Diamond Line end type.
     */
    ArrowDiamond = 3,
    /**
     * Arrow Oval line end type.
     */
    ArrowOval = 4,
    /**
     * Arrow Open line end type.
     */
    ArrowOpen = 5,
}

/**
 * Represents line format type of chart line.
 */
export enum ChartLineFormattingType {
    /**
     * Represents automatic formatting type.
     */
    Automatic = 0,
    /**
     * Represents solid formatting type.
     */
    Solid = 1,
    /**
     * Represents none formatting type.
     */
    None = 2,
    /**
     * Gradient
     */
    Gradient = 3,
}

/**
 * Represents the gradient fill.
 */
export class GradientFill {
    /**
     * Represents the gradient stop collection.
     */
    getGradientStops() : GradientStopCollection;
    /**
     * Gets the gradient fill type.
     */
    getFillType() : GradientFillType;
    /**
     * Gets the gradient direction type.
     */
    getDirectionType() : GradientDirectionType;
    /**
     * The angle of linear fill.
     */
    getAngle() : number;
    /**
     * The angle of linear fill.
     * @param value - The value to set.
     */
    setAngle(value: number) : void;
    /**
     * Set the gradient fill type and direction.
     * @param type - Gradient fill type.
     * @param angle - The angle. Only applies for GradientFillType.Linear.
     * @param direction - The direction type. Only applies for GradientFillType.Radial and GradientFillType.Rectangle.
     */
    setGradient(type: GradientFillType, angle: number, direction: GradientDirectionType) : void;
    /**
     * Sets preset theme gradient fill.
     * @param gradientType - The preset gradient type.
     * @param themeColorType - The theme color type.
     */
    setPresetThemeGradient(gradientType: PresetThemeGradientType, themeColorType: ThemeColorType) : void;
    /**
     * Sets the specified fill to a one-color gradient.
     * Only applies for Excel 2007.
     * @param color - One gradient color.
     * @param degree - The gradient degree. Can be a value from 0.0 (dark) through 1.0 (light).
     * @param style - Gradient shading style.
     * @param variant - The gradient variant. Can be a value from 1 through 4, corresponding to one of the four variants on the Gradient tab in the Fill Effects dialog box. If style is GradientStyle.FromCenter, the Variant argument can only be 1 or 2.
     */
    setOneColorGradient(color: Color, degree: number, style: GradientStyleType, variant: number) : void;
    /**
     * Sets the specified fill to a two-color gradient.
     * Only applies for Excel 2007.
     * @param color1 - One gradient color.
     * @param color2 - Two gradient color.
     * @param style - Gradient shading style.
     * @param variant - The gradient variant. Can be a value from 1 through 4, corresponding to one of the four variants on the Gradient tab in the Fill Effects dialog box. If style is GradientStyle.FromCenter, the Variant argument can only be 1 or 2.
     */
    setTwoColorGradient(color1: Color, color2: Color, style: GradientStyleType, variant: number) : void;
    /**
     * Sets the specified fill to a two-color gradient.
     * Only applies for Excel 2007.
     * @param color1 - One gradient color.
     * @param transparency1 - The degree of transparency of the color1 as a value from 0.0 (opaque) through 1.0 (clear).
     * @param color2 - Two gradient color.
     * @param transparency2 - The degree of transparency of the color2 as a value from 0.0 (opaque) through 1.0 (clear).
     * @param style - Gradient shading style.
     * @param variant - The gradient variant. Can be a value from 1 through 4, corresponding to one of the four variants on the Gradient tab in the Fill Effects dialog box. If style is GradientStyle.FromCenter, the Variant argument can only be 1 or 2.
     */
    setTwoColorGradient(color1: Color, transparency1: number, color2: Color, transparency2: number, style: GradientStyleType, variant: number) : void;
}

/**
 * Represents all Gradient fill type.
 */
export enum GradientFillType {
    /**
     * Linear
     */
    Linear = 0,
    /**
     * Radial
     */
    Radial = 1,
    /**
     * Rectangle
     */
    Rectangle = 2,
    /**
     * Path
     */
    Path = 3,
}

/**
 * Represents the gradient stop.
 */
export class GradientStop {
    /**
     * The position of the stop.
     */
    getPosition() : number;
    /**
     * The position of the stop.
     * @param value - The value to set.
     */
    setPosition(value: number) : void;
    /**
     * Gets the color of this gradient stop.
     */
    getCellsColor() : CellsColor;
    /**
     * Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
     */
    getTransparency() : number;
    /**
     * Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
     * @param value - The value to set.
     */
    setTransparency(value: number) : void;
}

/**
 * Represents all direction type of gradient.
 */
export enum GradientDirectionType {
    /**
     * FromUpperLeftCorner
     */
    FromUpperLeftCorner = 0,
    /**
     * FromUpperRightCorner
     */
    FromUpperRightCorner = 1,
    /**
     * FromLowerLeftCorner
     */
    FromLowerLeftCorner = 2,
    /**
     * FromLowerRightCorner
     */
    FromLowerRightCorner = 3,
    /**
     * FromCenter
     */
    FromCenter = 4,
    /**
     * Unknown
     */
    Unknown = 5,
}

/**
 * Represents the caps of a line
 */
export enum LineCapType {
    /**
     * Square protrudes by half line width.
     */
    Square = 0,
    /**
     * Rounded ends.
     */
    Round = 1,
    /**
     * Line ends at end point.
     */
    Flat = 2,
    /**
     * None cap
     */
    None = 3,
}

/**
 * Represents the join styles of a line.
 */
export enum LineJoinType {
    /**
     * Round joint
     */
    Round = 0,
    /**
     * Bevel joint
     */
    Bevel = 1,
    /**
     * Miter joint
     */
    Miter = 2,
    /**
     * None joint
     */
    None = 3,
}

/**
 * Encapsulates the object that represents pattern fill format
 */
export class PatternFill {
    /**
     * Gets or sets the fill pattern type
     */
    getPattern() : FillPattern;
    /**
     * Gets or sets the fill pattern type
     * @param value - The value to set.
     */
    setPattern(value: FillPattern) : void;
    /**
     * Gets or sets the background <see cref="System.Drawing.Color"/> of the <see cref="Area"/>.
     */
    getBackgroundColor() : Color;
    /**
     * Gets or sets the background <see cref="System.Drawing.Color"/> of the <see cref="Area"/>.
     * @param value - The value to set.
     */
    setBackgroundColor(value: Color) : void;
    /**
     * Gets and sets the foreground <see cref="CellsColor"/> object.
     */
    getBackgroundCellsColor() : CellsColor;
    /**
     * Gets and sets the foreground <see cref="CellsColor"/> object.
     * @param value - The value to set.
     */
    setBackgroundCellsColor(value: CellsColor) : void;
    /**
     * Gets or sets the foreground <see cref="System.Drawing.Color"/>.
     */
    getForegroundColor() : Color;
    /**
     * Gets or sets the foreground <see cref="System.Drawing.Color"/>.
     * @param value - The value to set.
     */
    setForegroundColor(value: Color) : void;
    /**
     * Gets and sets the foreground <see cref="CellsColor"/> object.
     */
    getForegroundCellsColor() : CellsColor;
    /**
     * Gets and sets the foreground <see cref="CellsColor"/> object.
     * @param value - The value to set.
     */
    setForegroundCellsColor(value: CellsColor) : void;
    /**
     * Gets or sets the transparency of foreground color.
     */
    getForeTransparency() : number;
    /**
     * Gets or sets the transparency of foreground color.
     * @param value - The value to set.
     */
    setForeTransparency(value: number) : void;
    /**
     * Gets or sets the transparency of background color.
     */
    getBackTransparency() : number;
    /**
     * Gets or sets the transparency of background color.
     * @param value - The value to set.
     */
    setBackTransparency(value: number) : void;
}

/**
 * Represents all plot empty cells type of a chart.
 */
export enum PlotEmptyCellsType {
    /**
     * Not plotted(leave gap)
     */
    NotPlotted = 0,
    /**
     * Zero
     */
    Zero = 1,
    /**
     * Interpolated
     */
    Interpolated = 2,
}

/**
 * Encapsulates the object that represents texture fill format
 */
export class TextureFill {
    /**
     * Gets and sets the texture type
     */
    getType() : TextureType;
    /**
     * Gets and sets the texture type
     * @param value - The value to set.
     */
    setType(value: TextureType) : void;
    /**
     * Gets and sets the image data of the fill.
     */
    getImageData() : number[];
    /**
     * Gets and sets the image data of the fill.
     * @param value - The value to set.
     */
    setImageData(value: number[]) : void;
    /**
     * Indicates whether tile picture as texture.
     */
    isTiling() : boolean;
    /**
     * Indicates whether tile picture as texture.
     * @param value - The value to set.
     */
    setIsTiling(value: boolean) : void;
    /**
     * Gets or sets picture format option.
     */
    getPicFormatOption() : PicFormatOption;
    /**
     * Gets or sets picture format option.
     * @param value - The value to set.
     */
    setPicFormatOption(value: PicFormatOption) : void;
    /**
     * Gets or sets tile picture option.
     */
    getTilePicOption() : TilePicOption;
    /**
     * Gets or sets tile picture option.
     * @param value - The value to set.
     */
    setTilePicOption(value: TilePicOption) : void;
    /**
     * Gets and sets the picture format type.
     */
    getPictureFormatType() : FillPictureType;
    /**
     * Gets and sets the picture format type.
     * @param value - The value to set.
     */
    setPictureFormatType(value: FillPictureType) : void;
    /**
     * Gets and sets the picture format scale.
     */
    getScale() : number;
    /**
     * Gets and sets the picture format scale.
     * @param value - The value to set.
     */
    setScale(value: number) : void;
    /**
     * Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
     */
    getTransparency() : number;
    /**
     * Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
     * @param value - The value to set.
     */
    setTransparency(value: number) : void;
}

/**
 * Represents the picture fill type.
 */
export enum FillPictureType {
    /**
     * Stretch
     */
    Stretch = 0,
    /**
     * Stack
     */
    Stack = 1,
    /**
     * StackAndScale
     */
    StackAndScale = 2,
}

/**
 * Represents office drawing objects type.
 */
export enum MsoDrawingType {
    /**
     * Group
     */
    Group = 0,
    /**
     * Line
     */
    Line = 1,
    /**
     * Rectangle
     */
    Rectangle = 2,
    /**
     * Oval
     */
    Oval = 3,
    /**
     * Arc
     */
    Arc = 4,
    /**
     * Chart
     */
    Chart = 5,
    /**
     * TextBox
     */
    TextBox = 6,
    /**
     * Button
     */
    Button = 7,
    /**
     * Picture
     */
    Picture = 8,
    /**
     * Polygon
     */
    Polygon = 9,
    /**
     * CheckBox
     */
    CheckBox = 11,
    /**
     * RadioButton
     */
    RadioButton = 12,
    /**
     * Label
     */
    Label = 14,
    /**
     * DialogBox
     */
    Dialog_Box = 15,
    /**
     * Spinner
     */
    Spinner = 16,
    /**
     * ScrollBar
     */
    ScrollBar = 17,
    /**
     * ListBox
     */
    ListBox = 18,
    /**
     * GroupBox
     */
    GroupBox = 19,
    /**
     * ComboBox
     */
    ComboBox = 20,
    /**
     * Comment
     */
    Comment = 25,
    /**
     * OleObject
     */
    OleObject = 24,
    /**
     * Only for preserving the drawing object in the template file.
     */
    CellsDrawing = 30,
    /**
     * Only for preserving the drawing object in the xlsx file.
     */
    Unknown = 29,
    /**
     * Slicer
     */
    Slicer = 31,
    /**
     * Web extension
     */
    WebExtension = 32,
    /**
     * Smart Art
     */
    SmartArt = 33,
    /**
     * Custom xml shape ,such as Ink.
     */
    CustomXml = 34,
    /**
     * Timeline
     */
    Timeline = 35,
    /**
     * 3D Model
     */
    Model3D = 36,
}

/**
 * Represents preset text effect type of WordArt.
 */
export enum MsoPresetTextEffect {
    /**
     * TextEffect1
     */
    TextEffect1 = 0,
    /**
     * TextEffect2
     */
    TextEffect2 = 1,
    /**
     * TextEffect3
     */
    TextEffect3 = 2,
    /**
     * TextEffect4
     */
    TextEffect4 = 3,
    /**
     * TextEffect5
     */
    TextEffect5 = 4,
    /**
     * TextEffect6
     */
    TextEffect6 = 5,
    /**
     * TextEffect7
     */
    TextEffect7 = 6,
    /**
     * TextEffect8
     */
    TextEffect8 = 7,
    /**
     * TextEffect9
     */
    TextEffect9 = 8,
    /**
     * TextEffect10
     */
    TextEffect10 = 9,
    /**
     * TextEffect11
     */
    TextEffect11 = 10,
    /**
     * TextEffect12
     */
    TextEffect12 = 11,
    /**
     * TextEffect13
     */
    TextEffect13 = 12,
    /**
     * TextEffect14
     */
    TextEffect14 = 13,
    /**
     * TextEffect15
     */
    TextEffect15 = 14,
    /**
     * TextEffect16
     */
    TextEffect16 = 15,
    /**
     * TextEffect17
     */
    TextEffect17 = 16,
    /**
     * TextEffect18
     */
    TextEffect18 = 17,
    /**
     * TextEffect19
     */
    TextEffect19 = 18,
    /**
     * TextEffect20
     */
    TextEffect20 = 19,
    /**
     * TextEffect21
     */
    TextEffect21 = 20,
    /**
     * TextEffect22
     */
    TextEffect22 = 21,
    /**
     * TextEffect23
     */
    TextEffect23 = 22,
    /**
     * TextEffect24
     */
    TextEffect24 = 23,
    /**
     * TextEffect25
     */
    TextEffect25 = 24,
    /**
     * TextEffect26
     */
    TextEffect26 = 25,
    /**
     * TextEffect27
     */
    TextEffect27 = 26,
    /**
     * TextEffect28
     */
    TextEffect28 = 27,
    /**
     * TextEffect29
     */
    TextEffect29 = 28,
    /**
     * TextEffect30
     */
    TextEffect30 = 29,
}

/**
 * Represents preset text effect shape type of WordArt.
 */
export enum MsoPresetTextEffectShape {
    /**
     * PlainText
     */
    PlainText = 136,
    /**
     * Stop
     */
    Stop = 137,
    /**
     * TriangleUp
     */
    TriangleUp = 138,
    /**
     * TriangleDown
     */
    TriangleDown = 139,
    /**
     * ChevronUp
     */
    ChevronUp = 140,
    /**
     * ChevronDown
     */
    ChevronDown = 141,
    /**
     * RingInside
     */
    RingInside = 142,
    /**
     * RingOutside
     */
    RingOutside = 143,
    /**
     * ArchUpCurve
     */
    ArchUpCurve = 144,
    /**
     * ArchDownCurve
     */
    ArchDownCurve = 145,
    /**
     * CircleCurve
     */
    CircleCurve = 146,
    /**
     * ButtonCurve
     */
    ButtonCurve = 147,
    /**
     * ArchUpPour
     */
    ArchUpPour = 148,
    /**
     * ArchDownPour
     */
    ArchDownPour = 149,
    /**
     * CirclePour
     */
    CirclePour = 150,
    /**
     * ButtonPour
     */
    ButtonPour = 151,
    /**
     * CurveUp
     */
    CurveUp = 152,
    /**
     * CurveDown
     */
    CurveDown = 153,
    /**
     * CanUp
     */
    CanUp = 174,
    /**
     * CanDown
     */
    CanDown = 175,
    /**
     * Wave1
     */
    Wave1 = 156,
    /**
     * Wave2
     */
    Wave2 = 157,
    /**
     * DoubleWave1
     */
    DoubleWave1 = 158,
    /**
     * DoubleWave2
     */
    DoubleWave2 = 159,
    /**
     * Inflate
     */
    Inflate = 160,
    /**
     * Deflate
     */
    Deflate = 161,
    /**
     * InflateBottom
     */
    InflateBottom = 162,
    /**
     * DeflateBottom
     */
    DeflateBottom = 163,
    /**
     * InflateTop
     */
    InflateTop = 164,
    /**
     * DeflateTop
     */
    DeflateTop = 165,
    /**
     * DeflateInflate
     */
    DeflateInflate = 166,
    /**
     * DeflateInflateDeflate
     */
    DeflateInflateDeflate = 167,
    /**
     * FadeRight
     */
    FadeRight = 168,
    /**
     * FadeLeft
     */
    FadeLeft = 169,
    /**
     * FadeUp
     */
    FadeUp = 170,
    /**
     * FadeDown
     */
    FadeDown = 171,
    /**
     * SlantUp
     */
    SlantUp = 172,
    /**
     * SlantDown
     */
    SlantDown = 173,
    /**
     * CascadeUp
     */
    CascadeUp = 154,
    /**
     * CascadeDown
     */
    CascadeDown = 155,
    /**
     * Mixed
     */
    Mixed = 255,
}

/**
 * Contains properties and methods that apply to WordArt objects.
 */
export class TextEffectFormat {
    /**
     * The text in the WordArt.
     */
    getText() : string;
    /**
     * The text in the WordArt.
     * @param value - The value to set.
     */
    setText(value: string) : void;
    /**
     * The name of the font used in the WordArt.
     */
    getFontName() : string;
    /**
     * The name of the font used in the WordArt.
     * @param value - The value to set.
     */
    setFontName(value: string) : void;
    /**
     * Indicates whether font is bold.
     */
    getFontBold() : boolean;
    /**
     * Indicates whether font is bold.
     * @param value - The value to set.
     */
    setFontBold(value: boolean) : void;
    /**
     * Indicates whether font is italic.
     */
    getFontItalic() : boolean;
    /**
     * Indicates whether font is italic.
     * @param value - The value to set.
     */
    setFontItalic(value: boolean) : void;
    /**
     * If true,characters in the specified WordArt are rotated 90 degrees relative to the WordArt's bounding shape.
     */
    getRotatedChars() : boolean;
    /**
     * If true,characters in the specified WordArt are rotated 90 degrees relative to the WordArt's bounding shape.
     * @param value - The value to set.
     */
    setRotatedChars(value: boolean) : void;
    /**
     * The size (in points) of the font used in the WordArt.
     */
    getFontSize() : number;
    /**
     * The size (in points) of the font used in the WordArt.
     * @param value - The value to set.
     */
    setFontSize(value: number) : void;
    /**
     * Gets and sets the preset shape type.
     */
    getPresetShape() : MsoPresetTextEffectShape;
    /**
     * Gets and sets the preset shape type.
     * @param value - The value to set.
     */
    setPresetShape(value: MsoPresetTextEffectShape) : void;
    /**
     * Sets the preset text effect.
     * @param effect - The preset text effect.
     */
    setTextEffect(effect: MsoPresetTextEffect) : void;
}

/**
 * Represents fill formatting for a shape.
 */
export class MsoFillFormat {
    /**
     * Gets and sets the fill fore color.
     */
    getForeColor() : Color;
    /**
     * Gets and sets the fill fore color.
     * @param value - The value to set.
     */
    setForeColor(value: Color) : void;
    /**
     * Returns or sets the degree of transparency of the specified fill as a value from 0.0 (opaque) through 1.0 (clear).
     */
    getTransparency() : number;
    /**
     * Returns or sets the degree of transparency of the specified fill as a value from 0.0 (opaque) through 1.0 (clear).
     * @param value - The value to set.
     */
    setTransparency(value: number) : void;
    /**
     * Gets and sets the file back color.
     */
    getBackColor() : Color;
    /**
     * Gets and sets the file back color.
     * @param value - The value to set.
     */
    setBackColor(value: Color) : void;
    /**
     * Gets and sets the Texture and Picture fill data.
     */
    getImageData() : number[];
    /**
     * Gets and sets the Texture and Picture fill data.
     * @param value - The value to set.
     */
    setImageData(value: number[]) : void;
    /**
     * Gets the texture fill type.
     */
    getTexture() : TextureType;
    /**
     * Indicates whether there is fill.
     */
    isVisible() : boolean;
    /**
     * Indicates whether there is fill.
     * @param value - The value to set.
     */
    setIsVisible(value: boolean) : void;
    /**
     * Sets the specified fill to a one-color gradient.
     * @param color - One gradient color.
     * @param degree - The gradient degree. Can be a value from 0.0 (dark) through 1.0 (light).
     * @param style - Gradient shading style.
     * @param variant - The gradient variant. Can be a value from 1 through 4, corresponding to one of the four variants on the Gradient tab in the Fill Effects dialog box. If style is GradientStyle.FromCenter, the Variant argument can only be 1 or 2.
     */
    setOneColorGradient(color: Color, degree: number, style: GradientStyleType, variant: number) : void;
}

/**
 * Represents the picture format.
 */
export class MsoFormatPicture {
    /**
     * Represents the location of the top of the crop rectangle expressed, in unit of inches.
     */
    getTopCropInch() : number;
    /**
     * Represents the location of the top of the crop rectangle expressed, in unit of inches.
     * @param value - The value to set.
     */
    setTopCropInch(value: number) : void;
    /**
     * Represents the location of the bottom of the crop rectangle expressed, in unit of inches.
     */
    getBottomCropInch() : number;
    /**
     * Represents the location of the bottom of the crop rectangle expressed, in unit of inches.
     * @param value - The value to set.
     */
    setBottomCropInch(value: number) : void;
    /**
     * Represents the location of the left of the crop rectangle expressed, in unit of inches.
     */
    getLeftCropInch() : number;
    /**
     * Represents the location of the left of the crop rectangle expressed, in unit of inches.
     * @param value - The value to set.
     */
    setLeftCropInch(value: number) : void;
    /**
     * Represents the location of the right of the crop rectangle expressed, in unit of inches.
     */
    getRightCropInch() : number;
    /**
     * Represents the location of the right of the crop rectangle expressed, in unit of inches.
     * @param value - The value to set.
     */
    setRightCropInch(value: number) : void;
    /**
     * Represents the location of the top of the crop rectangle expressed, expressed as a ratio of the image's height.
     */
    getTopCrop() : number;
    /**
     * Represents the location of the top of the crop rectangle expressed, expressed as a ratio of the image's height.
     * @param value - The value to set.
     */
    setTopCrop(value: number) : void;
    /**
     * Represents the location of the bottom of the crop rectangle expressed, expressed as a ratio of the image's height.
     */
    getBottomCrop() : number;
    /**
     * Represents the location of the bottom of the crop rectangle expressed, expressed as a ratio of the image's height.
     * @param value - The value to set.
     */
    setBottomCrop(value: number) : void;
    /**
     * Represents the location of the left of the crop rectangle expressed, expressed as a ratio of the image's width.
     */
    getLeftCrop() : number;
    /**
     * Represents the location of the left of the crop rectangle expressed, expressed as a ratio of the image's width.
     * @param value - The value to set.
     */
    setLeftCrop(value: number) : void;
    /**
     * Represents the location of the right of the crop rectangle expressed, expressed as a ratio of the image's width.
     */
    getRightCrop() : number;
    /**
     * Represents the location of the right of the crop rectangle expressed, expressed as a ratio of the image's width.
     * @param value - The value to set.
     */
    setRightCrop(value: number) : void;
    /**
     * Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
     */
    getTransparency() : number;
    /**
     * Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
     * @param value - The value to set.
     */
    setTransparency(value: number) : void;
    /**
     * Gets and sets the transparent color of the picture.
     */
    getTransparentColor() : CellsColor;
    /**
     * Gets and sets the transparent color of the picture.
     * @param value - The value to set.
     */
    setTransparentColor(value: CellsColor) : void;
    /**
     * Represents the contrast modification for the picture.in unit of percentage.
     * 
     * @remarks
     * It is between -100% and 100%. It works same as Excel 2007 or above version.
     */
    getContrast() : number;
    /**
     * Represents the contrast modification for the picture.in unit of percentage.
     * @param value - The value to set.
     * 
     * @remarks
     * It is between -100% and 100%. It works same as Excel 2007 or above version.
     */
    setContrast(value: number) : void;
    /**
     * Represents the brightness modification for the picture in unit of percentage.
     * 
     * @remarks
     * It is between -100% and 100%. It works same as Excel 2007 or above version.
     */
    getBrightness() : number;
    /**
     * Represents the brightness modification for the picture in unit of percentage.
     * @param value - The value to set.
     * 
     * @remarks
     * It is between -100% and 100%. It works same as Excel 2007 or above version.
     */
    setBrightness(value: number) : void;
    /**
     * Represents gamma of the picture.
     */
    getGamma() : number;
    /**
     * Represents gamma of the picture.
     * @param value - The value to set.
     */
    setGamma(value: number) : void;
    /**
     * Indicates whether this picture should display in two-color black and white.
     */
    isBiLevel() : boolean;
    /**
     * Indicates whether this picture should display in two-color black and white.
     * @param value - The value to set.
     */
    setIsBiLevel(value: boolean) : void;
    /**
     * Indicates whether this picture should display in grayscale.
     */
    isGray() : boolean;
    /**
     * Indicates whether this picture should display in grayscale.
     * @param value - The value to set.
     */
    setIsGray(value: boolean) : void;
    /**
     * Gets the hash code.
     */
    getHashCode() : number;
}

/**
 * Represents style of dash drawing lines.
 */
export enum MsoLineDashStyle {
    /**
     * Represent a dash line.
     */
    Dash = 0,
    /**
     * Represents a dash-dot line.
     */
    DashDot = 1,
    /**
     * Represents a dash-dot-dot line.
     */
    DashDotDot = 2,
    /**
     * Represents a long dash-short dash line.
     */
    DashLongDash = 3,
    /**
     * Represents a long dash-short dash-dot line.
     */
    DashLongDashDot = 4,
    /**
     * Represents a round-dot line.
     */
    RoundDot = 5,
    /**
     * Represent a solid line.
     */
    Solid = 6,
    /**
     * Represents a square-dot line.
     */
    SquareDot = 7,
    /**
     * Custom dash style.
     */
    Custom = 8,
}

/**
 * Represents line and arrowhead formatting.
 */
export class MsoLineFormat {
    /**
     * Indicates whether the object is visible.
     */
    isVisible() : boolean;
    /**
     * Indicates whether the object is visible.
     * @param value - The value to set.
     */
    setIsVisible(value: boolean) : void;
    /**
     * Returns a Style object that represents the style of the specified range.
     */
    getStyle() : MsoLineStyle;
    /**
     * Returns a Style object that represents the style of the specified range.
     * @param value - The value to set.
     */
    setStyle(value: MsoLineStyle) : void;
    /**
     * Gets and sets the border line fore color.
     */
    getForeColor() : Color;
    /**
     * Gets and sets the border line fore color.
     * @param value - The value to set.
     */
    setForeColor(value: Color) : void;
    /**
     * Gets and sets the border line back color.
     */
    getBackColor() : Color;
    /**
     * Gets and sets the border line back color.
     * @param value - The value to set.
     */
    setBackColor(value: Color) : void;
    /**
     * Gets or sets the dash style for the specified line.
     */
    getDashStyle() : MsoLineDashStyle;
    /**
     * Gets or sets the dash style for the specified line.
     * @param value - The value to set.
     */
    setDashStyle(value: MsoLineDashStyle) : void;
    /**
     * Returns or sets the degree of transparency of the specified fill as a value from 0.0 (opaque) through 1.0 (clear).
     */
    getTransparency() : number;
    /**
     * Returns or sets the degree of transparency of the specified fill as a value from 0.0 (opaque) through 1.0 (clear).
     * @param value - The value to set.
     */
    setTransparency(value: number) : void;
    /**
     * Returns or sets the weight of the line ,in units of pt.
     */
    getWeight() : number;
    /**
     * Returns or sets the weight of the line ,in units of pt.
     * @param value - The value to set.
     */
    setWeight(value: number) : void;
}

/**
 * Represents style of drawing lines.
 */
export enum MsoLineStyle {
    /**
     * Single line (of width lineWidth)
     */
    Single = 0,
    /**
     * Three lines, thin, thick, thin
     */
    ThickBetweenThin = 1,
    /**
     * Double lines, one thin, one thick
     */
    ThinThick = 2,
    /**
     * Double lines, one thick, one thin
     */
    ThickThin = 3,
    /**
     * Double lines of equal width
     */
    ThinThin = 4,
}

/**
 * Represents the text frame in a Shape object.
 */
export class MsoTextFrame {
    /**
     * Indicates if size of shape is adjusted automatically according to its content.
     */
    getAutoSize() : boolean;
    /**
     * Indicates if size of shape is adjusted automatically according to its content.
     * @param value - The value to set.
     */
    setAutoSize(value: boolean) : void;
    /**
     * Indicates whether the margin is auto calculated.
     */
    isAutoMargin() : boolean;
    /**
     * Indicates whether the margin is auto calculated.
     * @param value - The value to set.
     */
    setIsAutoMargin(value: boolean) : void;
    /**
     * Indicates whether rotating text with shape.
     */
    getRotateTextWithShape() : boolean;
    /**
     * Indicates whether rotating text with shape.
     * @param value - The value to set.
     */
    setRotateTextWithShape(value: boolean) : void;
    /**
     * Returns the left margin in unit of Points
     */
    getLeftMarginPt() : number;
    /**
     * Returns the left margin in unit of Points
     * @param value - The value to set.
     */
    setLeftMarginPt(value: number) : void;
    /**
     * Returns the right margin in unit of Points
     */
    getRightMarginPt() : number;
    /**
     * Returns the right margin in unit of Points
     * @param value - The value to set.
     */
    setRightMarginPt(value: number) : void;
    /**
     * Returns the top margin in unit of Points
     */
    getTopMarginPt() : number;
    /**
     * Returns the top margin in unit of Points
     * @param value - The value to set.
     */
    setTopMarginPt(value: number) : void;
    /**
     * Returns the bottom margin in unit of Points
     */
    getBottomMarginPt() : number;
    /**
     * Returns the bottom margin in unit of Points
     * @param value - The value to set.
     */
    setBottomMarginPt(value: number) : void;
}

/**
 * Represents a defined name for a range of cells.
 */
export class Name {
    /**
     * Gets and sets the comment of the name.
     * Only applies for Excel 2007 or higher versions.
     */
    getComment() : string;
    /**
     * Gets and sets the comment of the name.
     * Only applies for Excel 2007 or higher versions.
     * @param value - The value to set.
     */
    setComment(value: string) : void;
    /**
     * Gets the name text of the object.
     */
    getText() : string;
    /**
     * Gets the name text of the object.
     * @param value - The value to set.
     */
    setText(value: string) : void;
    /**
     * Gets the name  full text of the object with the scope setting.
     */
    getFullText() : string;
    /**
     * Gets or sets a R1C1 reference of the <see cref="Name"/>.
     */
    getR1C1RefersTo() : string;
    /**
     * Gets or sets a R1C1 reference of the <see cref="Name"/>.
     * @param value - The value to set.
     */
    setR1C1RefersTo(value: string) : void;
    /**
     * Indicates whether this name is referred by other formulas.
     */
    isReferred() : boolean;
    /**
     * Indicates whether the name is visible.
     */
    isVisible() : boolean;
    /**
     * Indicates whether the name is visible.
     * @param value - The value to set.
     */
    setIsVisible(value: boolean) : void;
    /**
     * Indicates this name belongs to Workbook or Worksheet.
     * 0 = Global name, otherwise index to sheet (one-based)
     */
    getSheetIndex() : number;
    /**
     * Indicates this name belongs to Workbook or Worksheet.
     * 0 = Global name, otherwise index to sheet (one-based)
     * @param value - The value to set.
     */
    setSheetIndex(value: number) : void;
    /**
     * Get the reference of this Name.
     * @param isR1C1 - Whether the reference needs to be formatted as R1C1.
     * @param isLocal - Whether the reference needs to be formatted by locale.
     */
    getRefersTo(isR1C1: boolean, isLocal: boolean) : string;
    /**
     * Get the reference of this Name based on specified cell.
     * @param isR1C1 - Whether the reference needs to be formatted as R1C1.
     * @param isLocal - Whether the reference needs to be formatted by locale.
     * @param row - The row index of the cell.
     * @param column - The column index of the cell.
     */
    getRefersTo(isR1C1: boolean, isLocal: boolean, row: number, column: number) : string;
    /**
     * Set the reference of this Name.
     * @param refersTo - The reference.
     * @param isR1C1 - Whether the reference is R1C1 format.
     * @param isLocal - Whether the reference is locale formatted.
     */
    setRefersTo(refersTo: string, isR1C1: boolean, isLocal: boolean) : void;
    /**
     * Returns a string represents the current Range object.
     */
    toString() : string;
    /**
     * Gets all ranges referred by this name.
     * @returns
     * All ranges.
     */
    getRanges() : Range[];
    /**
     * Gets all ranges referred by this name.
     * @param recalculate - whether recalculate it if this name has been calculated before this invocation.
     * @returns
     * All ranges.
     */
    getRanges(recalculate: boolean) : Range[];
    /**
     * Gets all references referred by this name.
     * @param recalculate - whether recalculate it if this name has been calculated before this invocation.
     * @returns
     * All ranges.
     */
    getReferredAreas(recalculate: boolean) : ReferredArea[];
    /**
     * Gets the range if this name refers to a range.
     * @returns
     * The range.
     */
    getRange() : Range;
    /**
     * Gets the range if this name refers to a range
     * @param recalculate - whether recalculate it if this name has been calculated before this invocation.
     * @returns
     * The range.
     */
    getRange(recalculate: boolean) : Range;
    /**
     * Gets the range if this name refers to a range.
     * If the reference of this name is not absolute, the range may be different for different cell.
     * @param sheetIndex - The according sheet index.
     * @param row - The according row index.
     * @param column - The according column index
     * @returns
     * The range.
     */
    getRange(sheetIndex: number, row: number, column: number) : Range;
}

/**
 * Represents a collection of all the <see cref="Name"/> objects in the spreadsheet.
 */
export class NameCollection {
    /**
     * Gets the <see cref="Name"/> element at the specified index.
     * @param index - The zero based index of the element.
     * @returns
     * The element at the specified index.
     */
    get(index: number) : Name;
    /**
     * Gets the <see cref="Name"/> element with the specified name.
     * @param text - Name text.
     * @returns
     * The element with the specified name.
     */
    get(text: string) : Name;
    /**
     * Defines a new name.
     * @param text - The text to use as the name.
     * @returns
     * <see cref="Name"/> object index.
     * 
     * @remarks
     * Name cannot include spaces and cannot look like cell references.
     */
    add(text: string) : number;
    /**
     * Gets all defined name by scope.
     * @param type - The scope type.
     * @param sheetIndex - The sheet index.         /// Only effects when scope type is <see cref="NameScopeType.Worksheet"/>
     */
    filter(type: NameScopeType, sheetIndex: number) : Name[];
    /**
     * Remove an array of name
     * @param names - The names' text.
     */
    remove(names: string[]) : void;
    /**
     * Remove the name.
     * @param text - The name text.
     */
    remove(text: string) : void;
    /**
     * Remove the name at the specific index.
     * @param index - index of the Name to be removed.
     * 
     * @remarks
     * Please make sure that the name is not referred by the other formulas before calling the method.
     * And if the name is referred, setting Name.RefersTo as null is better.
     */
    removeAt(index: number) : void;
    /**
     * Remove all defined names which are not referenced by the formulas and data source.
     * If the defined name is referred, we only set Name.ReferTo as null and hide them.
     */
    clear() : void;
    /**
     * Remove the duplicate defined names
     */
    removeDuplicateNames() : void;
    /**
     * Sorts defined names.
     * 
     * @remarks
     * If you create a large amount of named ranges in the Excel file, please call this method after all named ranges are created and before saving
     */
    sort() : void;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Encapsulates a collection of <see cref="Series"/> objects.
 */
export class SeriesCollection {
    /**
     * Gets the <see cref="Series"/> element at the specified index.
     * @param index - The zero based index of the element.
     * @returns
     * The element at the specified index.
     */
    get(index: number) : Series;
    /**
     * Gets or sets the range of category Axis values.
     * It can be a range of cells (such as, "d1:e10"),
     * or a sequence of values (such as,"{2,6,8,10}").
     */
    getCategoryData() : string;
    /**
     * Gets or sets the range of category Axis values.
     * It can be a range of cells (such as, "d1:e10"),
     * or a sequence of values (such as,"{2,6,8,10}").
     * @param value - The value to set.
     */
    setCategoryData(value: string) : void;
    /**
     * Gets or sets the range of second category Axis values.
     * It can be a range of cells (such as, "d1:e10"),
     * or a sequence of values (such as,"{2,6,8,10}").
     * Only effects when some ASerieses plot on the second axis.
     */
    getSecondCategoryData() : string;
    /**
     * Gets or sets the range of second category Axis values.
     * It can be a range of cells (such as, "d1:e10"),
     * or a sequence of values (such as,"{2,6,8,10}").
     * Only effects when some ASerieses plot on the second axis.
     * @param value - The value to set.
     */
    setSecondCategoryData(value: string) : void;
    /**
     * Represents if the color of points is varied.
     */
    isColorVaried() : boolean;
    /**
     * Represents if the color of points is varied.
     * @param value - The value to set.
     */
    setIsColorVaried(value: boolean) : void;
    /**
     * Gets the <see cref="Series"/> element by order.
     * @param order - The order of series
     * @returns
     * The element series
     */
    getSeriesByOrder(order: number) : Series;
    /**
     * Remove at a series at the specific index.
     * @param index - The index.
     */
    removeAt(index: number) : void;
    /**
     * Directly changes the orders of the two series.
     * @param sourceIndex - The current index
     * @param destIndex - The dest index
     * 
     * @remarks
     * NOTE: This method is now obsolete. Instead,
     * please use SeriesCollection.SwapSeries method.
     * This method will be removed 12 months later since June 2024.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use SeriesCollection.SwapSeries property, instead.
     */
    changeSeriesOrder(sourceIndex: number, destIndex: number) : void;
    /**
     * Directly changes the orders of the two series.
     * @param sourceIndex - The current index
     * @param destIndex - The dest index
     */
    swapSeries(sourceIndex: number, destIndex: number) : void;
    /**
     * Sets the name of all the serieses in the chart.
     * @param startIndex - The index of the first series which you want to set the name.
     * @param area - Specifies the area for the series name.
     * @param isVertical - >Specifies whether to plot the series from a range of cell values by row or by column.
     * 
     * @remarks
     * <br>If the start index is larger than the count of the serieses, it will return and do nothing.</br>
     * <br>If set data on contiguous cells, use colon to seperate them.For example, $C$2:$C$5.</br>
     * <br>If set data on contiguous cells, use comma to seperate them.For example, ($C$2,$D$5).</br>
     */
    setSeriesNames(startIndex: number, area: string, isVertical: boolean) : void;
    /**
     * Adds the <see cref="Series"/> collection to a chart.
     * @param area - Specifies values from which to plot the data series
     * @param isVertical - Specifies whether to plot the series from a range of cell values by row or by column.
     * @returns
     * Return the first index of the added ASeries in the NSeries.
     * 
     * @remarks
     * <br>If set data on contiguous cells, use colon to seperate them.For example, R[1]C[1]:R[3]C[2].</br>
     * <br>If set data on contiguous cells, use comma to seperate them.For example,(R[1]C[1],R[3]C[2]).</br>
     */
    addR1C1(area: string, isVertical: boolean) : number;
    /**
     * Adds the <see cref="Series"/> collection to a chart.
     * @param area - Specifies values from which to plot the data series
     * @param isVertical - Specifies whether to plot the series from a range of cell values by row or by column.
     * @returns
     * Return the first index of the added ASeries in the NSeries.
     * 
     * @remarks
     * <br>If set data on contiguous cells, use colon to seperate them.For example, $C$2:$C$5.</br>
     * <br>If set data on non contiguous cells, use comma to seperate them.For example: ($C$2,$D$5).</br>
     */
    add(area: string, isVertical: boolean) : number;
    /**
     * Adds the <see cref="Series"/> collection to a chart.
     * @param area - Specifies values from which to plot the data series
     * @param isVertical - Specifies whether to plot the series from a range of cell values by row or by column.
     * @param checkLabels - Indicates whether the range contains series's name
     * @returns
     * Return the first index of the added ASeries in the NSeries.
     * 
     * @remarks
     * <br>If set data on contiguous cells, use colon to seperate them.For example, $C$2:$C$5.</br>
     * <br>If set data on non contiguous cells, use comma to seperate them.For example, ($C$2,$D$5).</br>
     */
    add(area: string, isVertical: boolean, checkLabels: boolean) : number;
    /**
     * Clears the collection
     */
    clear() : void;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents an OleObject in a worksheet.
 */
export class OleObject extends Shape {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Shape);
    /**
     * True indicates that the size of the ole object will be auto changed as the size of snapshot of the embedded content
     * when the ole object is activated.
     */
    isAutoSize() : boolean;
    /**
     * True indicates that the size of the ole object will be auto changed as the size of snapshot of the embedded content
     * when the ole object is activated.
     * @param value - The value to set.
     */
    setIsAutoSize(value: boolean) : void;
    /**
     * Returns true if the OleObject links to the file.
     */
    isLink() : boolean;
    /**
     * Returns true if the OleObject links to the file.
     * @param value - The value to set.
     */
    set_IsLink(value: boolean) : void;
    /**
     * True if the specified object is displayed as an icon
     * and the image will not be auto changed.
     */
    getDisplayAsIcon() : boolean;
    /**
     * True if the specified object is displayed as an icon
     * and the image will not be auto changed.
     * @param value - The value to set.
     */
    setDisplayAsIcon(value: boolean) : void;
    /**
     * Represents image of ole object as byte array.
     */
    getImageData() : number[];
    /**
     * Represents image of ole object as byte array.
     * @param value - The value to set.
     */
    setImageData(value: number[]) : void;
    /**
     * Represents embedded ole object data as byte array.
     */
    getObjectData() : number[];
    /**
     * Represents embedded ole object data as byte array.
     * @param value - The value to set.
     */
    setObjectData(value: number[]) : void;
    /**
     * Gets the full embedded ole object binary data in the template file.
     */
    getFullObjectBin() : number[];
    /**
     * Gets or sets the path and name of the source file for the linked image.
     * 
     * @remarks
     * The default value is an empty string.
     * If SourceFullName is not an empty string, the image is linked.
     * If SourceFullName is not an empty string, but Data is null, then the image is linked and not stored in the file.
     */
    getImageSourceFullName() : string;
    /**
     * Gets or sets the path and name of the source file for the linked image.
     * @param value - The value to set.
     * 
     * @remarks
     * The default value is an empty string.
     * If SourceFullName is not an empty string, the image is linked.
     * If SourceFullName is not an empty string, but Data is null, then the image is linked and not stored in the file.
     */
    setImageSourceFullName(value: string) : void;
    /**
     * Gets or sets the ProgID of the OLE object.
     */
    getProgID() : string;
    /**
     * Gets or sets the ProgID of the OLE object.
     * @param value - The value to set.
     */
    setProgID(value: string) : void;
    /**
     * Gets and sets the file type of the embedded ole object data
     */
    getFileFormatType() : FileFormatType;
    /**
     * Gets and sets the file type of the embedded ole object data
     * @param value - The value to set.
     */
    setFileFormatType(value: FileFormatType) : void;
    /**
     * Returns the source full name of the source file for the linked OLE object.
     * 
     * @remarks
     * Only supports setting the source full name when the file type is OleFileType.Unknown.
     * Such as wav file ,avi file..etc..
     */
    getObjectSourceFullName() : string;
    /**
     * Returns the source full name of the source file for the linked OLE object.
     * @param value - The value to set.
     * 
     * @remarks
     * Only supports setting the source full name when the file type is OleFileType.Unknown.
     * Such as wav file ,avi file..etc..
     */
    setObjectSourceFullName(value: string) : void;
    /**
     * Gets and sets the display label of the linked ole object.
     */
    getLabel() : string;
    /**
     * Gets and sets the display label of the linked ole object.
     * @param value - The value to set.
     */
    setLabel(value: string) : void;
    /**
     * Specifies whether the link to the OleObject is automatically updated or not.
     */
    getAutoUpdate() : boolean;
    /**
     * Specifies whether the link to the OleObject is automatically updated or not.
     * @param value - The value to set.
     */
    setAutoUpdate(value: boolean) : void;
    /**
     * Specifies whether the host application for the embedded object shall be called to load
     * the object data automatically when the parent workbook is opened.
     */
    getAutoLoad() : boolean;
    /**
     * Specifies whether the host application for the embedded object shall be called to load
     * the object data automatically when the parent workbook is opened.
     * @param value - The value to set.
     */
    setAutoLoad(value: boolean) : void;
    /**
     * Gets and sets the class identifier of the embedded object.
     * It means which application opens the embedded file.
     */
    getClassIdentifier() : number[];
    /**
     * Gets and sets the class identifier of the embedded object.
     * It means which application opens the embedded file.
     * @param value - The value to set.
     */
    setClassIdentifier(value: number[]) : void;
    /**
     * Gets the image format of the ole object.
     */
    getImageType() : ImageType;
    /**
     * Sets embedded object data.
     * @param linkToFile - Indicates whether the object links to the file. If true, the parameter objectData is ignored.
     * @param objectData - The embedded object data.
     * @param sourceFileName - The file name.
     * @param displayAsIcon - Indicates whether diplaying object as an icon.         /// If true, the orginal image data will be covered by icon.
     * @param label - The icon label. Only works when displayAsIcon as true.
     */
    setEmbeddedObject(linkToFile: boolean, objectData: number[], sourceFileName: string, displayAsIcon: boolean, label: string) : void;
    /**
     * Sets embedded object data.
     * @param linkToFile - Indicates whether the object links to the file. If true, the parameter objectData is ignored.
     * @param objectData - The embedded object data.
     * @param sourceFileName - The file name.
     * @param displayAsIcon - Indicates whether diplaying object as an icon.         /// If true, the orginal image data will be covered by icon.
     * @param label - The icon label. Only works when displayAsIcon as true.
     * @param updateIcon - Indicates whether automatically updating icon.
     * 
     * @remarks
     * As Aspose can update embedd all file icons, so it's better that you can add correct icon with <paramref name="updateIcon"/> as false.
     */
    setEmbeddedObject(linkToFile: boolean, objectData: number[], sourceFileName: string, displayAsIcon: boolean, label: string, updateIcon: boolean) : void;
    /**
     * Sets the ole native source full file name with path.
     * @param sourceFullName - the ole native source full file name
     */
    setNativeSourceFullName(sourceFullName: string) : void;
}

/**
 * Represents embedded OLE objects.
 */
export class OleObjectCollection {
    /**
     * Gets the <see cref="OleObject"/> element at the specified index.
     * @param index - The zero based index of the element.
     * @returns
     * The element at the specified index.
     */
    get(index: number) : OleObject;
    /**
     * Adds an OleObject to the collection.
     * @param upperLeftRow - Upper left row index.
     * @param upperLeftColumn - Upper left column index.
     * @param height - Height of oleObject, in unit of pixel.
     * @param width - Width of oleObject, in unit of pixel.
     * @param imageData - Image of ole object as byte array.
     * @returns
     * <see cref="OleObject"/> object index.
     */
    add(upperLeftRow: number, upperLeftColumn: number, height: number, width: number, imageData: number[]) : number;
    /**
     * Adds a linked OleObject to the collection.
     * @param upperLeftRow - Upper left row index.
     * @param upperLeftColumn - Upper left column index.
     * @param height - Height of oleObject, in unit of pixel.
     * @param width - Width of oleObject, in unit of pixel.
     * @param imageData - Image of ole object as byte array.
     * @param linkedFile - 
     * @returns
     * <see cref="OleObject"/> object index.
     */
    add(upperLeftRow: number, upperLeftColumn: number, height: number, width: number, imageData: number[], linkedFile: string) : number;
    /**
     * Remove all embedded OLE objects.
     */
    clear() : void;
    /**
     * Removes the element at the specified index.
     * @param index - The specified index.
     */
    removeAt(index: number) : void;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the operator type of conditional format and data validation.
 */
export enum OperatorType {
    /**
     * Represents Between operator of conditional format and data validation.
     */
    Between = 0,
    /**
     * Represents Equal operator of conditional format and data validation.
     */
    Equal = 1,
    /**
     * Represents GreaterThan operator of conditional format and data validation.
     */
    GreaterThan = 2,
    /**
     * Represents GreaterOrEqual operator of conditional format and data validation.
     */
    GreaterOrEqual = 3,
    /**
     * Represents LessThan operator of conditional format and data validation.
     */
    LessThan = 4,
    /**
     * Represents LessOrEqual operator of conditional format and data validation.
     */
    LessOrEqual = 5,
    /**
     * Represents no comparison.
     */
    None = 6,
    /**
     * Represents NotBetween operator of conditional format and data validation.
     */
    NotBetween = 7,
    /**
     * Represents NotEqual operator of conditional format and data validation.
     */
    NotEqual = 8,
}

/**
 * Represents an outline on a worksheet.
 */
export class Outline {
    /**
     * Indicates if the summary row will be positioned below the detail rows in the outline.
     */
    getSummaryRowBelow() : boolean;
    /**
     * Indicates if the summary row will be positioned below the detail rows in the outline.
     * @param value - The value to set.
     */
    setSummaryRowBelow(value: boolean) : void;
    /**
     * Indicates if the summary column will be positioned to the right of the detail columns in the outline.
     */
    getSummaryColumnRight() : boolean;
    /**
     * Indicates if the summary column will be positioned to the right of the detail columns in the outline.
     * @param value - The value to set.
     */
    setSummaryColumnRight(value: boolean) : void;
}

/**
 * Represents the oval shape.
 */
export class Oval extends Shape {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Shape);
}

/**
 * Represents print orientation constants.
 */
export enum PageOrientationType {
    /**
     * Landscape orientation
     */
    Landscape = 0,
    /**
     * Portrait orientation
     */
    Portrait = 1,
}

/**
 * Represents all Pane objects shown in the specified window.
 */
export class PaneCollection {
    /**
     * Gets and sets the first visible row of the bottom pane.
     */
    getFirstVisibleRowOfBottomPane() : number;
    /**
     * Gets and sets the first visible row of the bottom pane.
     * @param value - The value to set.
     */
    setFirstVisibleRowOfBottomPane(value: number) : void;
    /**
     * Gets and sets the first visible column of the right pane.
     */
    getFirstVisibleColumnOfRightPane() : number;
    /**
     * Gets and sets the first visible column of the right pane.
     * @param value - The value to set.
     */
    setFirstVisibleColumnOfRightPane(value: number) : void;
    /**
     * Gets and sets the active pane.
     */
    getAcitvePaneType() : RectangleAlignmentType;
    /**
     * Gets and sets the active pane.
     * @param value - The value to set.
     */
    setAcitvePaneType(value: RectangleAlignmentType) : void;
}

/**
 * Represents paper size constants.
 */
export enum PaperSizeType {
    /**
     * Letter (8-1/2 in. x 11 in.)
     */
    PaperLetter = 1,
    /**
     * Letter Small (8-1/2 in. x 11 in.)
     */
    PaperLetterSmall = 2,
    /**
     * Tabloid (11 in. x 17 in.)
     */
    PaperTabloid = 3,
    /**
     * Ledger (17 in. x 11 in.)
     */
    PaperLedger = 4,
    /**
     * Legal (8-1/2 in. x 14 in.)
     */
    PaperLegal = 5,
    /**
     * Statement (5-1/2 in. x 8-1/2 in.)
     */
    PaperStatement = 6,
    /**
     * Executive (7-1/4 in. x 10-1/2 in.)
     */
    PaperExecutive = 7,
    /**
     * A3 (297 mm x 420 mm)
     */
    PaperA3 = 8,
    /**
     * A4 (210 mm x 297 mm)
     */
    PaperA4 = 9,
    /**
     * A4 Small (210 mm x 297 mm)
     */
    PaperA4Small = 10,
    /**
     * A5 (148 mm x 210 mm)
     */
    PaperA5 = 11,
    /**
     * JIS B4 (257 mm x 364 mm)
     */
    PaperB4 = 12,
    /**
     * JIS B5 (182 mm x 257 mm)
     */
    PaperB5 = 13,
    /**
     * Folio (8-1/2 in. x 13 in.)
     */
    PaperFolio = 14,
    /**
     * Quarto (215 mm x 275 mm)
     */
    PaperQuarto = 15,
    /**
     * 10 in. x 14 in.
     */
    Paper10x14 = 16,
    /**
     * 11 in. x 17 in.
     */
    Paper11x17 = 17,
    /**
     * Note (8-1/2 in. x 11 in.)
     */
    PaperNote = 18,
    /**
     * Envelope #9 (3-7/8 in. x 8-7/8 in.)
     */
    PaperEnvelope9 = 19,
    /**
     * Envelope #10 (4-1/8 in. x 9-1/2 in.)
     */
    PaperEnvelope10 = 20,
    /**
     * Envelope #11 (4-1/2 in. x 10-3/8 in.)
     */
    PaperEnvelope11 = 21,
    /**
     * Envelope #12 (4-1/2 in. x 11 in.)
     */
    PaperEnvelope12 = 22,
    /**
     * Envelope #14 (5 in. x 11-1/2 in.)
     */
    PaperEnvelope14 = 23,
    /**
     * C size sheet
     */
    PaperCSheet = 24,
    /**
     * D size sheet
     */
    PaperDSheet = 25,
    /**
     * E size sheet
     */
    PaperESheet = 26,
    /**
     * Envelope DL (110 mm x 220 mm)
     */
    PaperEnvelopeDL = 27,
    /**
     * Envelope C5 (162 mm x 229 mm)
     */
    PaperEnvelopeC5 = 28,
    /**
     * Envelope C3 (324 mm x 458 mm)
     */
    PaperEnvelopeC3 = 29,
    /**
     * Envelope C4 (229 mm x 324 mm)
     */
    PaperEnvelopeC4 = 30,
    /**
     * Envelope C6 (114 mm x 162 mm)
     */
    PaperEnvelopeC6 = 31,
    /**
     * Envelope C65 (114 mm x 229 mm)
     */
    PaperEnvelopeC65 = 32,
    /**
     * Envelope B4 (250 mm x 353 mm)
     */
    PaperEnvelopeB4 = 33,
    /**
     * Envelope B5 (176 mm x 250 mm)
     */
    PaperEnvelopeB5 = 34,
    /**
     * Envelope B6 (176 mm x 125 mm)
     */
    PaperEnvelopeB6 = 35,
    /**
     * Envelope Italy (110 mm x 230 mm)
     */
    PaperEnvelopeItaly = 36,
    /**
     * Envelope Monarch (3-7/8 in. x 7-1/2 in.)
     */
    PaperEnvelopeMonarch = 37,
    /**
     * Envelope (3-5/8 in. x 6-1/2 in.)
     */
    PaperEnvelopePersonal = 38,
    /**
     * U.S. Standard Fanfold (14-7/8 in. x 11 in.)
     */
    PaperFanfoldUS = 39,
    /**
     * German Standard Fanfold (8-1/2 in. x 12 in.)
     */
    PaperFanfoldStdGerman = 40,
    /**
     * German Legal Fanfold (8-1/2 in. x 13 in.)
     */
    PaperFanfoldLegalGerman = 41,
    /**
     * B4 (ISO) 250 x 353 mm
     */
    PaperISOB4 = 42,
    /**
     * Japanese Postcard (100mm × 148mm)
     */
    PaperJapanesePostcard = 43,
    /**
     * 9? × 11?
     */
    Paper9x11 = 44,
    /**
     * 10? × 11?
     */
    Paper10x11 = 45,
    /**
     * 15? × 11?
     */
    Paper15x11 = 46,
    /**
     * Envelope Invite(220mm × 220mm)
     */
    PaperEnvelopeInvite = 47,
    /**
     * US Letter Extra 9 \275 x 12 in
     */
    PaperLetterExtra = 50,
    /**
     * US Legal Extra 9 \275 x 15 in
     */
    PaperLegalExtra = 51,
    /**
     * US Tabloid Extra 11.69 x 18 in
     */
    PaperTabloidExtra = 52,
    /**
     * A4 Extra 9.27 x 12.69 in
     */
    PaperA4Extra = 53,
    /**
     * Letter Transverse 8 \275 x 11 in
     */
    PaperLetterTransverse = 54,
    /**
     * A4 Transverse 210 x 297 mm
     */
    PaperA4Transverse = 55,
    /**
     * Letter Extra Transverse 9\275 x 12 in
     */
    PaperLetterExtraTransverse = 56,
    /**
     * SuperA/SuperA/A4 227 x 356 mm
     */
    PaperSuperA = 57,
    /**
     * SuperB/SuperB/A3 305 x 487 mm
     */
    PaperSuperB = 58,
    /**
     * US Letter Plus 8.5 x 12.69 in
     */
    PaperLetterPlus = 59,
    /**
     * A4 Plus 210 x 330 mm
     */
    PaperA4Plus = 60,
    /**
     * A5 Transverse 148 x 210 mm
     */
    PaperA5Transverse = 61,
    /**
     * B5 (JIS) Transverse 182 x 257 mm
     */
    PaperJISB5Transverse = 62,
    /**
     * A3 Extra 322 x 445 mm
     */
    PaperA3Extra = 63,
    /**
     * A5 Extra 174 x 235 mm
     */
    PaperA5Extra = 64,
    /**
     * B5 (ISO) Extra 201 x 276 mm
     */
    PaperISOB5Extra = 65,
    /**
     * A2 420 x 594 mm
     */
    PaperA2 = 66,
    /**
     * A3 Transverse 297 x 420 mm
     */
    PaperA3Transverse = 67,
    /**
     * A3 Extra Transverse 322 x 445 mm
     */
    PaperA3ExtraTransverse = 68,
    /**
     * Japanese Double Postcard 200 x 148 mm
     */
    PaperJapaneseDoublePostcard = 69,
    /**
     * A6 105 x 148 mm
     */
    PaperA6 = 70,
    /**
     * Japanese Envelope Kaku #2
     */
    PaperJapaneseEnvelopeKaku2 = 71,
    /**
     * Japanese Envelope Kaku #3
     */
    PaperJapaneseEnvelopeKaku3 = 72,
    /**
     * Japanese Envelope Chou #3
     */
    PaperJapaneseEnvelopeChou3 = 73,
    /**
     * Japanese Envelope Chou #4
     */
    PaperJapaneseEnvelopeChou4 = 74,
    /**
     * 11in × 8.5in
     */
    PaperLetterRotated = 75,
    /**
     * 420mm × 297mm
     */
    PaperA3Rotated = 76,
    /**
     * 297mm × 210mm
     */
    PaperA4Rotated = 77,
    /**
     * 210mm × 148mm
     */
    PaperA5Rotated = 78,
    /**
     * B4 (JIS) Rotated 364 x 257 mm
     */
    PaperJISB4Rotated = 79,
    /**
     * B5 (JIS) Rotated 257 x 182 mm
     */
    PaperJISB5Rotated = 80,
    /**
     * Japanese Postcard Rotated 148 x 100 mm
     */
    PaperJapanesePostcardRotated = 81,
    /**
     * Double Japanese Postcard Rotated 148 x 200 mm
     */
    PaperJapaneseDoublePostcardRotated = 82,
    /**
     * A6 Rotated 148 x 105 mm
     */
    PaperA6Rotated = 83,
    /**
     * Japanese Envelope Kaku #2 Rotated
     */
    PaperJapaneseEnvelopeKaku2Rotated = 84,
    /**
     * Japanese Envelope Kaku #3 Rotated
     */
    PaperJapaneseEnvelopeKaku3Rotated = 85,
    /**
     * Japanese Envelope Chou #3 Rotated
     */
    PaperJapaneseEnvelopeChou3Rotated = 86,
    /**
     * Japanese Envelope Chou #4 Rotated
     */
    PaperJapaneseEnvelopeChou4Rotated = 87,
    /**
     * B6 (JIS) 128 x 182 mm
     */
    PaperJISB6 = 88,
    /**
     * B6 (JIS) Rotated 182 x 128 mm
     */
    PaperJISB6Rotated = 89,
    /**
     * 12 x 11 in
     */
    Paper12x11 = 90,
    /**
     * Japanese Envelope You #4
     */
    PaperJapaneseEnvelopeYou4 = 91,
    /**
     * Japanese Envelope You #4 Rotated
     */
    PaperJapaneseEnvelopeYou4Rotated = 92,
    /**
     * PRC 16K 146 x 215 mm
     */
    PaperPRC16K = 93,
    /**
     * PRC 32K 97 x 151 mm
     */
    PaperPRC32K = 94,
    /**
     * PRC 32K(Big) 97 x 151 mm
     */
    PaperPRCBig32K = 95,
    /**
     * PRC Envelope #1 102 x 165 mm
     */
    PaperPRCEnvelope1 = 96,
    /**
     * PRC Envelope #2 102 x 176 mm
     */
    PaperPRCEnvelope2 = 97,
    /**
     * PRC Envelope #3 125 x 176 mm
     */
    PaperPRCEnvelope3 = 98,
    /**
     * PRC Envelope #4 110 x 208 mm
     */
    PaperPRCEnvelope4 = 99,
    /**
     * PRC Envelope #5 110 x 220 mm
     */
    PaperPRCEnvelope5 = 100,
    /**
     * PRC Envelope #6 120 x 230 mm
     */
    PaperPRCEnvelope6 = 101,
    /**
     * PRC Envelope #7 160 x 230 mm
     */
    PaperPRCEnvelope7 = 102,
    /**
     * PRC Envelope #8 120 x 309 mm
     */
    PaperPRCEnvelope8 = 103,
    /**
     * PRC Envelope #9 229 x 324 mm
     */
    PaperPRCEnvelope9 = 104,
    /**
     * PRC Envelope #10 324 x 458 mm
     */
    PaperPRCEnvelope10 = 105,
    /**
     * PRC 16K Rotated
     */
    PaperPRC16KRotated = 106,
    /**
     * PRC 32K Rotated
     */
    PaperPRC32KRotated = 107,
    /**
     * PRC 32K(Big) Rotated
     */
    PaperPRCBig32KRotated = 108,
    /**
     * PRC Envelope #1 Rotated 165 x 102 mm
     */
    PaperPRCEnvelope1Rotated = 109,
    /**
     * PRC Envelope #2 Rotated 176 x 102 mm
     */
    PaperPRCEnvelope2Rotated = 110,
    /**
     * PRC Envelope #3 Rotated 176 x 125 mm
     */
    PaperPRCEnvelope3Rotated = 111,
    /**
     * PRC Envelope #4 Rotated 208 x 110 mm
     */
    PaperPRCEnvelope4Rotated = 112,
    /**
     * PRC Envelope #5 Rotated 220 x 110 mm
     */
    PaperPRCEnvelope5Rotated = 113,
    /**
     * PRC Envelope #6 Rotated 230 x 120 mm
     */
    PaperPRCEnvelope6Rotated = 114,
    /**
     * PRC Envelope #7 Rotated 230 x 160 mm
     */
    PaperPRCEnvelope7Rotated = 115,
    /**
     * PRC Envelope #8 Rotated 309 x 120 mm
     */
    PaperPRCEnvelope8Rotated = 116,
    /**
     * PRC Envelope #9 Rotated 324 x 229 mm
     */
    PaperPRCEnvelope9Rotated = 117,
    /**
     * PRC Envelope #10 Rotated 458 x 324 mm
     */
    PaperPRCEnvelope10Rotated = 118,
    /**
     * usual B3(13.9 x 19.7 in)
     */
    PaperB3 = 300,
    /**
     * Business Card(90mm x 55 mm)
     */
    PaperBusinessCard = 301,
    /**
     * Thermal(3 x 11 in)
     */
    PaperThermal = 302,
    /**
     * Represents the custom paper size.
     */
    Custom = 0,
}

/**
 * Encapsulates the object that represents a single picture in a spreadsheet.
 */
export class Picture extends Shape {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Shape);
    /**
     * Gets the original height of the picture.
     */
    getOriginalHeight() : number;
    /**
     * Gets the original width of the picture.
     */
    getOriginalWidth() : number;
    /**
     * Represents the <see cref="System.Drawing.Color"/> of the border line of a picture.
     */
    getBorderLineColor() : Color;
    /**
     * Represents the <see cref="System.Drawing.Color"/> of the border line of a picture.
     * @param value - The value to set.
     */
    setBorderLineColor(value: Color) : void;
    /**
     * Gets or sets the weight of the border line of a picture in units of pt.
     */
    getBorderWeight() : number;
    /**
     * Gets or sets the weight of the border line of a picture in units of pt.
     * @param value - The value to set.
     */
    setBorderWeight(value: number) : void;
    /**
     * Gets the data of the picture.
     */
    getData() : number[];
    /**
     * Gets the data of the picture.
     * @param value - The value to set.
     */
    setData(value: number[]) : void;
    /**
     * Gets or sets the path and name of the source file for the linked image.
     * 
     * @remarks
     * The default value is an empty string.
     * If SourceFullName is not an empty string, the image is linked.
     * If SourceFullName is not an empty string, but Data is null, then the image is linked and not stored in the file.
     */
    getSourceFullName() : string;
    /**
     * Gets or sets the path and name of the source file for the linked image.
     * @param value - The value to set.
     * 
     * @remarks
     * The default value is an empty string.
     * If SourceFullName is not an empty string, the image is linked.
     * If SourceFullName is not an empty string, but Data is null, then the image is linked and not stored in the file.
     */
    setSourceFullName(value: string) : void;
    /**
     * Gets and sets the data of the formula.
     */
    getFormula() : string;
    /**
     * Gets and sets the data of the formula.
     * @param value - The value to set.
     */
    setFormula(value: string) : void;
    /**
     * True indicates that the size of the ole object will be auto changed as the size of snapshot of the embedded content
     * when the ole object is activated.
     */
    isAutoSize() : boolean;
    /**
     * True indicates that the size of the ole object will be auto changed as the size of snapshot of the embedded content
     * when the ole object is activated.
     * @param value - The value to set.
     */
    setIsAutoSize(value: boolean) : void;
    /**
     * Returns true if the picture is linked to a file.
     */
    isLink() : boolean;
    /**
     * Returns true if the picture is linked to a file.
     * @param value - The value to set.
     */
    setIsLink(value: boolean) : void;
    /**
     * Gets or sets whether dynamic data exchange
     */
    isDynamicDataExchange() : boolean;
    /**
     * Gets or sets whether dynamic data exchange
     * @param value - The value to set.
     */
    setIsDynamicDataExchange(value: boolean) : void;
    /**
     * True if the specified object is displayed as an icon
     * and the image will not be auto changed.
     */
    getDisplayAsIcon() : boolean;
    /**
     * True if the specified object is displayed as an icon
     * and the image will not be auto changed.
     * @param value - The value to set.
     */
    setDisplayAsIcon(value: boolean) : void;
    /**
     * Gets the image format of the picture.
     */
    getImageType() : ImageType;
    /**
     * Gets the original height of picture, in unit of centimeters.
     */
    getOriginalHeightCM() : number;
    /**
     * Gets the original width of picture, in unit of centimeters.
     */
    getOriginalWidthCM() : number;
    /**
     * Gets the original height of picture, in unit of inches.
     */
    getOriginalHeightInch() : number;
    /**
     * Gets the original width of picture, in unit of inches.
     */
    getOriginalWidthInch() : number;
    /**
     * Gets and sets the signature line
     */
    getSignatureLine() : SignatureLine;
    /**
     * Gets and sets the signature line
     * @param value - The value to set.
     */
    setSignatureLine(value: SignatureLine) : void;
    /**
     * Copy the picture.
     * @param source - The source picture.
     * @param options - The copy options.
     */
    copy(source: Picture, options: CopyOptions) : void;
    /**
     * Moves the picture to a specified location.
     * @param upperLeftRow - Upper left row index.
     * @param upperLeftColumn - Upper left column index.
     */
    move(upperLeftRow: number, upperLeftColumn: number) : void;
    /**
     * Place this picture in the cell
     */
    placeInCell() : void;
}

/**
 * Encapsulates a collection of <see cref="Picture"/> objects.
 */
export class PictureCollection {
    /**
     * Gets the <see cref="Picture"/> element at the specified index.
     * @param index - The zero based index of the element.
     * @returns
     * The element at the specified index.
     */
    get(index: number) : Picture;
    /**
     * Adds a picture to the collection.
     * @param upperLeftRow - Upper left row index.
     * @param upperLeftColumn - Upper left column index.
     * @param lowerRightRow - Lower right row index
     * @param lowerRightColumn - Lower right column index
     * @param stream - Stream object which contains the image data.
     * @returns
     * <see cref="Picture"/> object index.
     */
    add(upperLeftRow: number, upperLeftColumn: number, lowerRightRow: number, lowerRightColumn: number, stream: Uint8Array) : number;
    /**
     * Adds a picture to the collection.
     * @param upperLeftRow - Upper left row index.
     * @param upperLeftColumn - Upper left column index.
     * @param lowerRightRow - Lower right row index
     * @param lowerRightColumn - Lower right column index
     * @param fileName - Image filename.
     * @returns
     * <see cref="Picture"/> object index.
     */
    add(upperLeftRow: number, upperLeftColumn: number, lowerRightRow: number, lowerRightColumn: number, fileName: string) : number;
    /**
     * Adds a picture to the collection.
     * @param upperLeftRow - Upper left row index.
     * @param upperLeftColumn - Upper left column index.
     * @param stream - Stream object which contains the image data.
     * @returns
     * <see cref="Picture"/> object index.
     */
    add(upperLeftRow: number, upperLeftColumn: number, stream: Uint8Array) : number;
    /**
     * Adds a picture to the collection.
     * @param upperLeftRow - Upper left row index.
     * @param upperLeftColumn - Upper left column index.
     * @param fileName - Image filename.
     * @returns
     * <see cref="Picture"/> object index.
     */
    add(upperLeftRow: number, upperLeftColumn: number, fileName: string) : number;
    /**
     * Adds a picture to the collection.
     * @param upperLeftRow - Upper left row index.
     * @param upperLeftColumn - Upper left column index.
     * @param stream - Stream object which contains the image data.
     * @param widthScale - Scale of image width, a percentage.
     * @param heightScale - Scale of image height, a percentage.
     * @returns
     * <see cref="Picture"/> object index.
     */
    add(upperLeftRow: number, upperLeftColumn: number, stream: Uint8Array, widthScale: number, heightScale: number) : number;
    /**
     * Adds a picture to the collection.
     * @param upperLeftRow - Upper left row index.
     * @param upperLeftColumn - Upper left column index.
     * @param fileName - Image filename.
     * @param widthScale - Scale of image width, a percentage.
     * @param heightScale - Scale of image height, a percentage.
     * @returns
     * <see cref="Picture"/> object index.
     */
    add(upperLeftRow: number, upperLeftColumn: number, fileName: string, widthScale: number, heightScale: number) : number;
    /**
     * Clear all pictures.
     */
    clear() : void;
    /**
     * Remove shapes at the specific index
     */
    removeAt(index: number) : void;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the way the drawing object is attached to the cells below it.
 */
export enum PlacementType {
    /**
     * Don't move or size with cells.
     */
    FreeFloating = 0,
    /**
     * Move but don't size with cells.
     */
    Move = 1,
    /**
     * Move and size with cells.
     */
    MoveAndSize = 2,
}

/**
 * Represents the way comments are printed with the sheet.
 */
export enum PrintCommentsType {
    /**
     * Represents to print comments as displayed on sheet.
     */
    PrintInPlace = 0,
    /**
     * Represents not to print comments.
     */
    PrintNoComments = 1,
    /**
     * Represents to print comments at end of sheet.
     */
    PrintSheetEnd = 2,
}

/**
 * Represents print errors constants.
 */
export enum PrintErrorsType {
    /**
     * Represents not to print errors.
     */
    PrintErrorsBlank = 0,
    /**
     * Represents to print errors as "--".
     */
    PrintErrorsDash = 1,
    /**
     * Represents to print errors as displayed.
     */
    PrintErrorsDisplayed = 2,
    /**
     * Represents to print errors as "#N/A".
     */
    PrintErrorsNA = 3,
}

/**
 * Represent print order constants.
 */
export enum PrintOrderType {
    /**
     * Down, then over
     */
    DownThenOver = 0,
    /**
     * Over, then down
     */
    OverThenDown = 1,
}

/**
 * Represents the printed chart size.
 */
export enum PrintSizeType {
    /**
     * Use full page.
     */
    Full = 0,
    /**
     * Scale to fit page.
     */
    Fit = 1,
    /**
     * Custom.
     */
    Custom = 2,
}

/**
 * Represents the various types of protection options available for a worksheet.
 */
export class Protection {
    /**
     * Represents if the deletion of columns is allowed on a protected worksheet.
     * 
     * @remarks
     * The columns containing the cells to be deleted must be unlocked when the sheet is protected,
     * and "Select unlocked cells" option must be enabled.
     */
    getAllowDeletingColumn() : boolean;
    /**
     * Represents if the deletion of columns is allowed on a protected worksheet.
     * @param value - The value to set.
     * 
     * @remarks
     * The columns containing the cells to be deleted must be unlocked when the sheet is protected,
     * and "Select unlocked cells" option must be enabled.
     */
    setAllowDeletingColumn(value: boolean) : void;
    /**
     * Represents if the deletion of rows is allowed on a protected worksheet.
     * 
     * @remarks
     * The rows containing the cells to be deleted must be unlocked when the sheet is protected,
     * and "Select unlocked cells" option must be enabled.
     */
    getAllowDeletingRow() : boolean;
    /**
     * Represents if the deletion of rows is allowed on a protected worksheet.
     * @param value - The value to set.
     * 
     * @remarks
     * The rows containing the cells to be deleted must be unlocked when the sheet is protected,
     * and "Select unlocked cells" option must be enabled.
     */
    setAllowDeletingRow(value: boolean) : void;
    /**
     * Represents if the user is allowed to make use of an AutoFilter that was created before the sheet was protected.
     */
    getAllowFiltering() : boolean;
    /**
     * Represents if the user is allowed to make use of an AutoFilter that was created before the sheet was protected.
     * @param value - The value to set.
     */
    setAllowFiltering(value: boolean) : void;
    /**
     * Represents if the formatting of cells is allowed on a protected worksheet.
     */
    getAllowFormattingCell() : boolean;
    /**
     * Represents if the formatting of cells is allowed on a protected worksheet.
     * @param value - The value to set.
     */
    setAllowFormattingCell(value: boolean) : void;
    /**
     * Represents if the formatting of columns is allowed on a protected worksheet
     */
    getAllowFormattingColumn() : boolean;
    /**
     * Represents if the formatting of columns is allowed on a protected worksheet
     * @param value - The value to set.
     */
    setAllowFormattingColumn(value: boolean) : void;
    /**
     * Represents if the formatting of rows is allowed on a protected worksheet
     */
    getAllowFormattingRow() : boolean;
    /**
     * Represents if the formatting of rows is allowed on a protected worksheet
     * @param value - The value to set.
     */
    setAllowFormattingRow(value: boolean) : void;
    /**
     * Represents if the insertion of columns is allowed on a protected worksheet
     */
    getAllowInsertingColumn() : boolean;
    /**
     * Represents if the insertion of columns is allowed on a protected worksheet
     * @param value - The value to set.
     */
    setAllowInsertingColumn(value: boolean) : void;
    /**
     * Represents if the insertion of hyperlinks is allowed on a protected worksheet
     */
    getAllowInsertingHyperlink() : boolean;
    /**
     * Represents if the insertion of hyperlinks is allowed on a protected worksheet
     * @param value - The value to set.
     */
    setAllowInsertingHyperlink(value: boolean) : void;
    /**
     * Represents if the insertion of rows is allowed on a protected worksheet
     */
    getAllowInsertingRow() : boolean;
    /**
     * Represents if the insertion of rows is allowed on a protected worksheet
     * @param value - The value to set.
     */
    setAllowInsertingRow(value: boolean) : void;
    /**
     * Represents if the sorting option is allowed on a protected worksheet.
     */
    getAllowSorting() : boolean;
    /**
     * Represents if the sorting option is allowed on a protected worksheet.
     * @param value - The value to set.
     */
    setAllowSorting(value: boolean) : void;
    /**
     * Represents if the user is allowed to manipulate pivot tables on a protected worksheet.
     */
    getAllowUsingPivotTable() : boolean;
    /**
     * Represents if the user is allowed to manipulate pivot tables on a protected worksheet.
     * @param value - The value to set.
     */
    setAllowUsingPivotTable(value: boolean) : void;
    /**
     * Represents if the user is allowed to edit contents of locked cells on a protected worksheet.
     */
    getAllowEditingContent() : boolean;
    /**
     * Represents if the user is allowed to edit contents of locked cells on a protected worksheet.
     * @param value - The value to set.
     */
    setAllowEditingContent(value: boolean) : void;
    /**
     * Represents if the user is allowed to manipulate drawing objects on a protected worksheet.
     */
    getAllowEditingObject() : boolean;
    /**
     * Represents if the user is allowed to manipulate drawing objects on a protected worksheet.
     * @param value - The value to set.
     */
    setAllowEditingObject(value: boolean) : void;
    /**
     * Represents if the user is allowed to edit scenarios on a protected worksheet.
     */
    getAllowEditingScenario() : boolean;
    /**
     * Represents if the user is allowed to edit scenarios on a protected worksheet.
     * @param value - The value to set.
     */
    setAllowEditingScenario(value: boolean) : void;
    /**
     * Represents the password to protect the worksheet.
     * 
     * @remarks
     * If password is set to null or blank string, you can unprotect the worksheet or workbook without using a password. Otherwise, you must specify the password to unprotect the worksheet or workbook.
     */
    getPassword() : string;
    /**
     * Represents the password to protect the worksheet.
     * @param value - The value to set.
     * 
     * @remarks
     * If password is set to null or blank string, you can unprotect the worksheet or workbook without using a password. Otherwise, you must specify the password to unprotect the worksheet or workbook.
     */
    setPassword(value: string) : void;
    /**
     * Indicates whether the worksheets is protected with password.
     */
    isProtectedWithPassword() : boolean;
    /**
     * Represents if the user is allowed to select locked cells on a protected worksheet.
     */
    getAllowSelectingLockedCell() : boolean;
    /**
     * Represents if the user is allowed to select locked cells on a protected worksheet.
     * @param value - The value to set.
     */
    setAllowSelectingLockedCell(value: boolean) : void;
    /**
     * Represents if the user is allowed to select unlocked cells on a protected worksheet.
     */
    getAllowSelectingUnlockedCell() : boolean;
    /**
     * Represents if the user is allowed to select unlocked cells on a protected worksheet.
     * @param value - The value to set.
     */
    setAllowSelectingUnlockedCell(value: boolean) : void;
    /**
     * Copy protection info.
     * @param source - 
     */
    copy(source: Protection) : void;
    /**
     * Gets the hash of current password.
     */
    getPasswordHash() : number;
    /**
     * Verifies password.
     * @param password - The password.
     */
    verifyPassword(password: string) : boolean;
}

/**
 * Represents workbook/worksheet protection type.
 */
export enum ProtectionType {
    /**
     * Represents to protect all.
     */
    All = 0,
    /**
     * Represents to protect contents, used in Worksheet protection.
     */
    Contents = 1,
    /**
     * Represents to protect objects, used in Worksheet protection.
     */
    Objects = 2,
    /**
     * Represents to protect scenarios, used in Worksheet protection.
     */
    Scenarios = 3,
    /**
     * Represents to protect structure, used in Workbook protection.
     */
    Structure = 4,
    /**
     * Represents to protect window, used in Workbook protection.
     */
    Windows = 5,
    /**
     * Represents no protection. Only for Reading property.
     */
    None = 6,
}

/**
 * Represents a radio button.
 */
export class RadioButton extends Shape {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Shape);
    /**
     * Indicates if the radiobutton is checked or not.
     */
    isChecked() : boolean;
    /**
     * Indicates if the radiobutton is checked or not.
     * @param value - The value to set.
     */
    setIsChecked(value: boolean) : void;
    /**
     * Indicates whether the combobox has 3-D shading.
     */
    getShadow() : boolean;
    /**
     * Indicates whether the combobox has 3-D shading.
     * @param value - The value to set.
     */
    setShadow(value: boolean) : void;
    /**
     * Gets the GroupBox that contains this RadioButton.
     */
    getGroupBox() : GroupBox;
    /**
     * Gets the option index (one-based) in all the radio buttons of the GroupBox which contains this radio button.
     * 
     * @remarks
     * If this radio button is not in the GroupBox, returns the option index in all radio buttons that are not in any GroupBox
     */
    getOptionIndex() : number;
}

/**
 * Encapsulates a collection of <see cref="Range"/> objects.
 */
export class RangeCollection {
    /**
     * Gets the <see cref="Range"/> element at the specified index.
     * @param index - The zero based index of the element.
     * @returns
     * The element at the specified index.
     */
    get(index: number) : Range;
    /**
     * Adds a <see cref="Range"/> item to the collection.
     * @param range - Range object
     */
    add(range: Range) : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the rectangle shape.
 */
export class RectangleShape extends Shape {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Shape);
}

/**
 * Represents all save options
 */
export class SaveOptions {
    /**
     * Gets the save file format.
     */
    getSaveFormat() : SaveFormat;
    /**
     * Make the workbook empty after saving the file.
     */
    getClearData() : boolean;
    /**
     * Make the workbook empty after saving the file.
     * @param value - The value to set.
     */
    setClearData(value: boolean) : void;
    /**
     * The cached file folder is used to store some large data.
     */
    getCachedFileFolder() : string;
    /**
     * The cached file folder is used to store some large data.
     * @param value - The value to set.
     */
    setCachedFileFolder(value: string) : void;
    /**
     * Indicates whether validate merged cells before saving the file.
     * 
     * @remarks
     * The default value is false.
     */
    getValidateMergedAreas() : boolean;
    /**
     * Indicates whether validate merged cells before saving the file.
     * @param value - The value to set.
     * 
     * @remarks
     * The default value is false.
     */
    setValidateMergedAreas(value: boolean) : void;
    /**
     * Indicates whether merge the areas of conditional formatting and validation before saving the file.
     * 
     * @remarks
     * The default value is false.
     */
    getMergeAreas() : boolean;
    /**
     * Indicates whether merge the areas of conditional formatting and validation before saving the file.
     * @param value - The value to set.
     * 
     * @remarks
     * The default value is false.
     */
    setMergeAreas(value: boolean) : void;
    /**
     * If true and the directory does not exist, the directory will be automatically created before saving the file.
     * 
     * @remarks
     * The default value is false.
     */
    getCreateDirectory() : boolean;
    /**
     * If true and the directory does not exist, the directory will be automatically created before saving the file.
     * @param value - The value to set.
     * 
     * @remarks
     * The default value is false.
     */
    setCreateDirectory(value: boolean) : void;
    /**
     * Indicates whether sorting defined names before saving file.
     */
    getSortNames() : boolean;
    /**
     * Indicates whether sorting defined names before saving file.
     * @param value - The value to set.
     */
    setSortNames(value: boolean) : void;
    /**
     * Indicates whether sorting external defined names before saving file.
     */
    getSortExternalNames() : boolean;
    /**
     * Indicates whether sorting external defined names before saving file.
     * @param value - The value to set.
     */
    setSortExternalNames(value: boolean) : void;
    /**
     * Indicates whether refreshing chart cache data
     */
    getRefreshChartCache() : boolean;
    /**
     * Indicates whether refreshing chart cache data
     * @param value - The value to set.
     */
    setRefreshChartCache(value: boolean) : void;
    /**
     * Gets or sets warning callback.
     * @param value - The value to set.
     */
    setWarningCallback(value: IWarningCallback) : void;
    /**
     * Gets or sets warning callback.
     */
    getWarningCallback() : IWarningCallback;
    /**
     * Indicates whether updating smart art setting.
     * The default value is false.
     * 
     * @remarks
     * Only effects after calling Shape.GetResultOfSmartArt() method and the cached shapes exist in the template file.
     */
    getUpdateSmartArt() : boolean;
    /**
     * Indicates whether updating smart art setting.
     * The default value is false.
     * @param value - The value to set.
     * 
     * @remarks
     * Only effects after calling Shape.GetResultOfSmartArt() method and the cached shapes exist in the template file.
     */
    setUpdateSmartArt(value: boolean) : void;
}

/**
 * Represents a scroll bar object.
 * 
 * @remarks
 * Scroll value must be between 0 and 30000.
 */
export class ScrollBar extends Shape {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Shape);
    /**
     * Gets or sets the current value.
     */
    getCurrentValue() : number;
    /**
     * Gets or sets the current value.
     * @param value - The value to set.
     */
    setCurrentValue(value: number) : void;
    /**
     * Gets or sets the minimum value of a scroll bar or spinner range.
     */
    getMin() : number;
    /**
     * Gets or sets the minimum value of a scroll bar or spinner range.
     * @param value - The value to set.
     */
    setMin(value: number) : void;
    /**
     * Gets or sets the maximum value of a scroll bar or spinner range.
     */
    getMax() : number;
    /**
     * Gets or sets the maximum value of a scroll bar or spinner range.
     * @param value - The value to set.
     */
    setMax(value: number) : void;
    /**
     * Gets or sets the amount that the scroll bar or spinner is incremented a line scroll.
     */
    getIncrementalChange() : number;
    /**
     * Gets or sets the amount that the scroll bar or spinner is incremented a line scroll.
     * @param value - The value to set.
     */
    setIncrementalChange(value: number) : void;
    /**
     * Gets or sets page change
     */
    getPageChange() : number;
    /**
     * Gets or sets page change
     * @param value - The value to set.
     */
    setPageChange(value: number) : void;
    /**
     * Indicates whether the shape has 3-D shading.
     */
    getShadow() : boolean;
    /**
     * Indicates whether the shape has 3-D shading.
     * @param value - The value to set.
     */
    setShadow(value: boolean) : void;
    /**
     * Indicates whether this is a horizontal scroll bar.
     */
    isHorizontal() : boolean;
    /**
     * Indicates whether this is a horizontal scroll bar.
     * @param value - The value to set.
     */
    setIsHorizontal(value: boolean) : void;
}

/**
 * The selection type of list box.
 */
export enum SelectionType {
    /**
     * Sigle selection type.
     */
    Single = 0,
    /**
     * Multiple selection type.
     */
    Multi = 1,
    /**
     * Extend selection type.
     */
    Extend = 2,
}

/**
 * Represents the msodrawing object.
 */
export class Shape {
    /**
     * Gets and sets the name of macro.
     */
    getMacroName() : string;
    /**
     * Gets and sets the name of macro.
     * @param value - The value to set.
     */
    setMacroName(value: string) : void;
    /**
     * Indicates whether the shape only contains an equation.
     */
    isEquation() : boolean;
    /**
     * Indicates whether the shape is a smart art.
     * 
     * @remarks
     * Only for ooxml file.
     */
    isSmartArt() : boolean;
    /**
     * Returns the position of a shape in the z-order.
     */
    getZOrderPosition() : number;
    /**
     * Returns the position of a shape in the z-order.
     * @param value - The value to set.
     */
    setZOrderPosition(value: number) : void;
    /**
     * Gets and sets the name of the shape.
     */
    getName() : string;
    /**
     * Gets and sets the name of the shape.
     * @param value - The value to set.
     */
    setName(value: string) : void;
    /**
     * Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
     */
    getAlternativeText() : string;
    /**
     * Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
     * @param value - The value to set.
     */
    setAlternativeText(value: string) : void;
    /**
     * Specifies the title (caption) of the current shape object.
     */
    getTitle() : string;
    /**
     * Specifies the title (caption) of the current shape object.
     * @param value - The value to set.
     */
    setTitle(value: string) : void;
    /**
     * Gets line style
     */
    getLine() : LineFormat;
    /**
     * Returns a <see cref="FillFormat"/> object that contains fill formatting properties for the specified shape.
     */
    getFill() : FillFormat;
    /**
     * Represents a <see cref="Drawing.ShadowEffect"/> object that specifies shadow effect for the chart element or shape.
     */
    getShadowEffect() : ShadowEffect;
    /**
     * Represents a <see cref="ReflectionEffect"/> object that specifies reflection effect for the chart element or shape.
     */
    getReflection() : ReflectionEffect;
    /**
     * Represents a <see cref="GlowEffect"/> object that specifies glow effect for the chart element or shape.
     */
    getGlow() : GlowEffect;
    /**
     * Gets and sets the radius of blur to apply to the edges, in unit of points.
     */
    getSoftEdges() : number;
    /**
     * Gets and sets the radius of blur to apply to the edges, in unit of points.
     * @param value - The value to set.
     */
    setSoftEdges(value: number) : void;
    /**
     * Gets and sets 3d format of the shape.
     */
    getThreeDFormat() : ThreeDFormat;
    /**
     * Gets and sets the options of the picture format.
     */
    getFormatPicture() : MsoFormatPicture;
    /**
     * Indicates whether the object is visible.
     */
    isHidden() : boolean;
    /**
     * Indicates whether the object is visible.
     * @param value - The value to set.
     */
    setIsHidden(value: boolean) : void;
    /**
     * True means that aspect ratio of the shape is locked.
     * 
     * @remarks
     * Only for pictures and Ole Objects.
     * NOTE: This member is now obsolete. Instead, please use Shape.IsAspectRatioLocked property.
     * This property will be removed 12 months later since July 2024.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use Shape.IsAspectRatioLocked property instead.
     */
    isLockAspectRatio() : boolean;
    /**
     * True means that aspect ratio of the shape is locked.
     * @param value - The value to set.
     * 
     * @remarks
     * Only for pictures and Ole Objects.
     * NOTE: This member is now obsolete. Instead, please use Shape.IsAspectRatioLocked property.
     * This property will be removed 12 months later since July 2024.
     * Aspose apologizes for any inconvenience you may have experienced.
     * @deprecated
     * Use Shape.IsAspectRatioLocked property instead.
     */
    setIsLockAspectRatio(value: boolean) : void;
    /**
     * True means that aspect ratio of the shape is locked.
     * 
     * @remarks
     * Only for pictures and Ole Objects.
     */
    isAspectRatioLocked() : boolean;
    /**
     * True means that aspect ratio of the shape is locked.
     * @param value - The value to set.
     * 
     * @remarks
     * Only for pictures and Ole Objects.
     */
    setIsAspectRatioLocked(value: boolean) : void;
    /**
     * Gets and sets the rotation of the shape.
     */
    getRotationAngle() : number;
    /**
     * Gets and sets the rotation of the shape.
     * @param value - The value to set.
     */
    setRotationAngle(value: number) : void;
    /**
     * Gets the hyperlink of the shape.
     */
    getHyperlink() : Hyperlink;
    /**
     * Gets the identifier of this shape.
     */
    getId() : number;
    /**
     * Specifies an optional string identifier that an application can use to identify the particular shape.
     */
    getSpid() : string;
    /**
     * Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
     */
    getSpt() : number;
    /**
     * Gets the <see cref="Worksheet"/> object which contains this shape.
     */
    getWorksheet() : Worksheet;
    /**
     * Indicates whether this shape is a group shape.
     */
    isGroup() : boolean;
    /**
     * Indicates whether the shape is grouped.
     */
    isInGroup() : boolean;
    /**
     * Indicates whether this shape is a word art.
     * 
     * @remarks
     * Only for the Legacy Shape of xls file.
     */
    isWordArt() : boolean;
    /**
     * Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
     * Applies to Shape objects that represent WordArt.
     */
    getTextEffect() : TextEffectFormat;
    /**
     * True means the object can not be modified when the sheet is protected.
     * Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
     */
    isLocked() : boolean;
    /**
     * True means the object can not be modified when the sheet is protected.
     * Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
     * @param value - The value to set.
     */
    setIsLocked(value: boolean) : void;
    /**
     * Indicates whether the object is printable.
     * If False, this shape will not be printed when printing.
     */
    isPrintable() : boolean;
    /**
     * Indicates whether the object is printable.
     * If False, this shape will not be printed when printing.
     * @param value - The value to set.
     */
    setIsPrintable(value: boolean) : void;
    /**
     * Gets drawing type.
     */
    getMsoDrawingType() : MsoDrawingType;
    /**
     * Gets and sets the auto shape type.
     */
    getAutoShapeType() : AutoShapeType;
    /**
     * Gets and sets the auto shape type.
     * @param value - The value to set.
     */
    setAutoShapeType(value: AutoShapeType) : void;
    /**
     * Gets and set the type of the shape anchor placeholder.
     */
    getAnchorType() : ShapeAnchorType;
    /**
     * Gets and set the type of the shape anchor placeholder.
     * @param value - The value to set.
     */
    setAnchorType(value: ShapeAnchorType) : void;
    /**
     * Represents the way the drawing object is attached to the cells below it.
     * The property controls the placement of an object on a worksheet.
     */
    getPlacement() : PlacementType;
    /**
     * Represents the way the drawing object is attached to the cells below it.
     * The property controls the placement of an object on a worksheet.
     * @param value - The value to set.
     */
    setPlacement(value: PlacementType) : void;
    /**
     * Represents the top row index.
     * 
     * @remarks
     * If the shape is in the shape or in the group , UpperLeftRow will be ignored.
     */
    getUpperLeftRow() : number;
    /**
     * Represents the top row index.
     * @param value - The value to set.
     * 
     * @remarks
     * If the shape is in the shape or in the group , UpperLeftRow will be ignored.
     */
    setUpperLeftRow(value: number) : void;
    /**
     * Gets or sets the shape's vertical offset from its upper left corner row.
     * 
     * @remarks
     * The range of value is 0 to 256.
     */
    getUpperDeltaY() : number;
    /**
     * Gets or sets the shape's vertical offset from its upper left corner row.
     * @param value - The value to set.
     * 
     * @remarks
     * The range of value is 0 to 256.
     */
    setUpperDeltaY(value: number) : void;
    /**
     * Represents upper left corner column index.
     */
    getUpperLeftColumn() : number;
    /**
     * Represents upper left corner column index.
     * @param value - The value to set.
     */
    setUpperLeftColumn(value: number) : void;
    /**
     * Gets or sets the shape's horizontal offset from its upper left corner column.
     * 
     * @remarks
     * The range of value is 0 to 1024.
     */
    getUpperDeltaX() : number;
    /**
     * Gets or sets the shape's horizontal offset from its upper left corner column.
     * @param value - The value to set.
     * 
     * @remarks
     * The range of value is 0 to 1024.
     */
    setUpperDeltaX(value: number) : void;
    /**
     * Represents lower right corner row index.
     */
    getLowerRightRow() : number;
    /**
     * Represents lower right corner row index.
     * @param value - The value to set.
     */
    setLowerRightRow(value: number) : void;
    /**
     * Gets or sets the shape's vertical offset from its lower right corner row.
     * 
     * @remarks
     * The range of value is 0 to 256.
     */
    getLowerDeltaY() : number;
    /**
     * Gets or sets the shape's vertical offset from its lower right corner row.
     * @param value - The value to set.
     * 
     * @remarks
     * The range of value is 0 to 256.
     */
    setLowerDeltaY(value: number) : void;
    /**
     * Represents lower right corner column index.
     */
    getLowerRightColumn() : number;
    /**
     * Represents lower right corner column index.
     * @param value - The value to set.
     */
    setLowerRightColumn(value: number) : void;
    /**
     * Gets or sets the shape's horizontal  offset from its lower right corner column.
     * 
     * @remarks
     * The range of value is 0 to 1024.
     */
    getLowerDeltaX() : number;
    /**
     * Gets or sets the shape's horizontal  offset from its lower right corner column.
     * @param value - The value to set.
     * 
     * @remarks
     * The range of value is 0 to 1024.
     */
    setLowerDeltaX(value: number) : void;
    /**
     * Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
     */
    getRight() : number;
    /**
     * Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
     * @param value - The value to set.
     */
    setRight(value: number) : void;
    /**
     * Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
     */
    getBottom() : number;
    /**
     * Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
     * @param value - The value to set.
     */
    setBottom(value: number) : void;
    /**
     * Represents the width of shape, in unit of pixels.
     */
    getWidth() : number;
    /**
     * Represents the width of shape, in unit of pixels.
     * @param value - The value to set.
     */
    setWidth(value: number) : void;
    /**
     * Represents the width of the shape, in unit of inch.
     */
    getWidthInch() : number;
    /**
     * Represents the width of the shape, in unit of inch.
     * @param value - The value to set.
     */
    setWidthInch(value: number) : void;
    /**
     * Represents the width of the shape, in unit of point.
     */
    getWidthPt() : number;
    /**
     * Represents the width of the shape, in unit of point.
     * @param value - The value to set.
     */
    setWidthPt(value: number) : void;
    /**
     * Represents the width of the shape, in unit of centimeters.
     */
    getWidthCM() : number;
    /**
     * Represents the width of the shape, in unit of centimeters.
     * @param value - The value to set.
     */
    setWidthCM(value: number) : void;
    /**
     * Represents the height of shape, in unit of pixel.
     */
    getHeight() : number;
    /**
     * Represents the height of shape, in unit of pixel.
     * @param value - The value to set.
     */
    setHeight(value: number) : void;
    /**
     * Represents the height of the shape, in unit of inches.
     */
    getHeightInch() : number;
    /**
     * Represents the height of the shape, in unit of inches.
     * @param value - The value to set.
     */
    setHeightInch(value: number) : void;
    /**
     * Represents the height of the shape, in unit of points.
     */
    getHeightPt() : number;
    /**
     * Represents the height of the shape, in unit of points.
     * @param value - The value to set.
     */
    setHeightPt(value: number) : void;
    /**
     * Represents the height of the shape, in unit of centimeters.
     */
    getHeightCM() : number;
    /**
     * Represents the height of the shape, in unit of centimeters.
     * @param value - The value to set.
     */
    setHeightCM(value: number) : void;
    /**
     * Represents the horizontal offset of shape from its left column, in unit of pixels.
     */
    getLeft() : number;
    /**
     * Represents the horizontal offset of shape from its left column, in unit of pixels.
     * @param value - The value to set.
     */
    setLeft(value: number) : void;
    /**
     * Represents the horizontal offset of shape from its left column, in unit of inches.
     */
    getLeftInch() : number;
    /**
     * Represents the horizontal offset of shape from its left column, in unit of inches.
     * @param value - The value to set.
     */
    setLeftInch(value: number) : void;
    /**
     * Represents the horizontal offset of shape from its left column, in unit of centimeters.
     */
    getLeftCM() : number;
    /**
     * Represents the horizontal offset of shape from its left column, in unit of centimeters.
     * @param value - The value to set.
     */
    setLeftCM(value: number) : void;
    /**
     * Represents the vertical offset of shape from its top row, in unit of pixels.
     * 
     * @remarks
     * If the shape is in the chart, represents the vertical offset of shape from its top border.
     */
    getTop() : number;
    /**
     * Represents the vertical offset of shape from its top row, in unit of pixels.
     * @param value - The value to set.
     * 
     * @remarks
     * If the shape is in the chart, represents the vertical offset of shape from its top border.
     */
    setTop(value: number) : void;
    /**
     * Represents the vertical offset of shape from its top row, in unit of inches.
     */
    getTopInch() : number;
    /**
     * Represents the vertical offset of shape from its top row, in unit of inches.
     * @param value - The value to set.
     */
    setTopInch(value: number) : void;
    /**
     * Represents the vertical offset of shape from its top row, in unit of centimeters.
     */
    getTopCM() : number;
    /**
     * Represents the vertical offset of shape from its top row, in unit of centimeters.
     * @param value - The value to set.
     */
    setTopCM(value: number) : void;
    /**
     * Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
     */
    getTopToCorner() : number;
    /**
     * Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
     * @param value - The value to set.
     */
    setTopToCorner(value: number) : void;
    /**
     * Gets and sets the horizonal offset of shape from worksheet left border.
     */
    getLeftToCorner() : number;
    /**
     * Gets and sets the horizonal offset of shape from worksheet left border.
     * @param value - The value to set.
     */
    setLeftToCorner(value: number) : void;
    /**
     * Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
     */
    getX() : number;
    /**
     * Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
     * @param value - The value to set.
     */
    setX(value: number) : void;
    /**
     * Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
     */
    getY() : number;
    /**
     * Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
     * @param value - The value to set.
     */
    setY(value: number) : void;
    /**
     * Gets and sets the width scale, in unit of percent of the original picture width.
     * If the shape is not picture ,the WidthScale property only returns 100;
     */
    getWidthScale() : number;
    /**
     * Gets and sets the width scale, in unit of percent of the original picture width.
     * If the shape is not picture ,the WidthScale property only returns 100;
     * @param value - The value to set.
     */
    setWidthScale(value: number) : void;
    /**
     * Gets and sets the height scale,in unit of percent of the original picture height.
     * If the shape is not picture ,the HeightScale property only returns 100;
     */
    getHeightScale() : number;
    /**
     * Gets and sets the height scale,in unit of percent of the original picture height.
     * If the shape is not picture ,the HeightScale property only returns 100;
     * @param value - The value to set.
     */
    setHeightScale(value: number) : void;
    /**
     * Represents the vertical offset of shape from the top border of the parent shape,
     * in unit of 1/4000 of height of the parent shape.
     * 
     * @remarks
     * Only Applies when this shape in the group or chart.
     */
    getTopInShape() : number;
    /**
     * Represents the vertical offset of shape from the top border of the parent shape,
     * in unit of 1/4000 of height of the parent shape.
     * @param value - The value to set.
     * 
     * @remarks
     * Only Applies when this shape in the group or chart.
     */
    setTopInShape(value: number) : void;
    /**
     * Represents the horizontal offset of shape from the left border of the parent shape,
     * in unit of 1/4000 of width of the parent shape.
     * 
     * @remarks
     * Only Applies when this shape in the group or chart.
     */
    getLeftInShape() : number;
    /**
     * Represents the horizontal offset of shape from the left border of the parent shape,
     * in unit of 1/4000 of width of the parent shape.
     * @param value - The value to set.
     * 
     * @remarks
     * Only Applies when this shape in the group or chart.
     */
    setLeftInShape(value: number) : void;
    /**
     * Represents the width of the shape, in unit of 1/4000 of the parent shape.
     * 
     * @remarks
     * Only Applies when this shape in the group or chart.
     */
    getWidthInShape() : number;
    /**
     * Represents the width of the shape, in unit of 1/4000 of the parent shape.
     * @param value - The value to set.
     * 
     * @remarks
     * Only Applies when this shape in the group or chart.
     */
    setWidthInShape(value: number) : void;
    /**
     * Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
     * 
     * @remarks
     * Only Applies when this shape in the group or chart.
     */
    getHeightInShape() : number;
    /**
     * Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
     * @param value - The value to set.
     * 
     * @remarks
     * Only Applies when this shape in the group or chart.
     */
    setHeightInShape(value: number) : void;
    /**
     * Gets the group shape which contains this shape.
     */
    getGroup() : GroupShape;
    /**
     * Gets the auto shape type.
     */
    getType() : AutoShapeType;
    /**
     * Gets and sets the line border of the shape is visible.
     */
    getHasLine() : boolean;
    /**
     * Gets and sets the line border of the shape is visible.
     * @param value - The value to set.
     */
    setHasLine(value: boolean) : void;
    /**
     * Indicates whether the fill format is visible.
     */
    isFilled() : boolean;
    /**
     * Indicates whether the fill format is visible.
     * @param value - The value to set.
     */
    setIsFilled(value: boolean) : void;
    /**
     * Gets and sets whether shape is horizontally flipped .
     */
    isFlippedHorizontally() : boolean;
    /**
     * Gets and sets whether shape is horizontally flipped .
     * @param value - The value to set.
     */
    setIsFlippedHorizontally(value: boolean) : void;
    /**
     * Gets and sets whether shape is vertically flipped .
     */
    isFlippedVertically() : boolean;
    /**
     * Gets and sets whether shape is vertically flipped .
     * @param value - The value to set.
     */
    setIsFlippedVertically(value: boolean) : void;
    /**
     * Get the actual bottom row.
     */
    getActualLowerRightRow() : number;
    /**
     * Indicates whether shape is relative to original picture size.
     */
    getRelativeToOriginalPictureSize() : boolean;
    /**
     * Indicates whether shape is relative to original picture size.
     * @param value - The value to set.
     */
    setRelativeToOriginalPictureSize(value: boolean) : void;
    /**
     * Gets and sets the preset text shape type.
     */
    getTextShapeType() : AutoShapeType;
    /**
     * Gets and sets the preset text shape type.
     * @param value - The value to set.
     */
    setTextShapeType(value: AutoShapeType) : void;
    /**
     * Gets and sets the setting of the shape's text.
     */
    getTextBody() : FontSettingCollection;
    /**
     * Represents the font of shape.
     */
    getFont() : Font;
    /**
     * Represents the font of shape.
     * @param value - The value to set.
     */
    setFont(value: Font) : void;
    /**
     * Represents the text options of the shape.
     */
    getTextOptions() : TextOptions;
    /**
     * Represents the text options of the shape.
     * @param value - The value to set.
     */
    setTextOptions(value: TextOptions) : void;
    /**
     * Gets and sets the text of this shape.
     */
    getText() : string;
    /**
     * Gets and sets the text of this shape.
     * @param value - The value to set.
     */
    setText(value: string) : void;
    /**
     * Whether or not the text is rich text.
     */
    isRichText() : boolean;
    /**
     * Gets and sets the html string which contains data and some formats in this textbox.
     */
    getHtmlText() : string;
    /**
     * Gets and sets the html string which contains data and some formats in this textbox.
     * @param value - The value to set.
     */
    setHtmlText(value: string) : void;
    /**
     * Gets and sets the text vertical overflow type of the shape which contains text.
     */
    getTextVerticalOverflow() : TextOverflowType;
    /**
     * Gets and sets the text vertical overflow type of the shape which contains text.
     * @param value - The value to set.
     */
    setTextVerticalOverflow(value: TextOverflowType) : void;
    /**
     * Gets and sets the text horizontal overflow type of the shape which contains text.
     */
    getTextHorizontalOverflow() : TextOverflowType;
    /**
     * Gets and sets the text horizontal overflow type of the shape which contains text.
     * @param value - The value to set.
     */
    setTextHorizontalOverflow(value: TextOverflowType) : void;
    /**
     * Gets and sets the text wrapped type of the shape which contains text.
     */
    isTextWrapped() : boolean;
    /**
     * Gets and sets the text wrapped type of the shape which contains text.
     * @param value - The value to set.
     */
    setIsTextWrapped(value: boolean) : void;
    /**
     * Gets and sets the text orientation type of the shape.
     */
    getTextOrientationType() : TextOrientationType;
    /**
     * Gets and sets the text orientation type of the shape.
     * @param value - The value to set.
     */
    setTextOrientationType(value: TextOrientationType) : void;
    /**
     * Gets and sets the text horizontal alignment type of the shape.
     */
    getTextHorizontalAlignment() : TextAlignmentType;
    /**
     * Gets and sets the text horizontal alignment type of the shape.
     * @param value - The value to set.
     */
    setTextHorizontalAlignment(value: TextAlignmentType) : void;
    /**
     * Gets and sets the text vertical alignment type of the shape.
     */
    getTextVerticalAlignment() : TextAlignmentType;
    /**
     * Gets and sets the text vertical alignment type of the shape.
     * @param value - The value to set.
     */
    setTextVerticalAlignment(value: TextAlignmentType) : void;
    /**
     * Gets/Sets the direction of the text flow for this object.
     */
    getTextDirection() : TextDirectionType;
    /**
     * Gets/Sets the direction of the text flow for this object.
     * @param value - The value to set.
     */
    setTextDirection(value: TextDirectionType) : void;
    /**
     * Gets the data of control.
     */
    getControlData() : number[];
    /**
     * Gets the ActiveX control.
     */
    getActiveXControl() : ActiveXControl;
    /**
     * Gets the paths of a custom geometric shape.
     */
    getPaths() : ShapePathCollection;
    /**
     * Gets the geometry
     */
    getGeometry() : Geometry;
    /**
     * Indicates whether the object is decorative.
     */
    isDecorative() : boolean;
    /**
     * Indicates whether the object is decorative.
     * @param value - The value to set.
     */
    setIsDecorative(value: boolean) : void;
    /**
     * Converting smart art to grouped shapes.
     */
    getResultOfSmartArt() : GroupShape;
    /**
     * Brings the shape to the front or sends the shape to back.
     * @param orders - If it's less than zero, sets the shape to back.         /// If it's greater than zero, brings the shape to front.
     */
    toFrontOrBack(orders: number) : void;
    /**
     * Gets the value of locked property.
     * @param type - The type of the shape locked property.
     * @returns
     * Returns  the value of locked property.
     */
    getLockedProperty(type: ShapeLockType) : boolean;
    /**
     * Set the locked property.
     * @param type - The locked type.
     * @param value - The value of the property.
     */
    setLockedProperty(type: ShapeLockType, value: boolean) : void;
    /**
     * Adds a hyperlink to the shape.
     * @param address - Address of the hyperlink.
     * @returns
     * Return the new hyperlink object.
     */
    addHyperlink(address: string) : Hyperlink;
    /**
     * Removes the hyperlink of the shape.
     */
    removeHyperlink() : void;
    /**
     * Moves the shape to a specified range.
     * @param upperLeftRow - Upper left row index.
     * @param upperLeftColumn - Upper left column index.
     * @param lowerRightRow - Lower right row index
     * @param lowerRightColumn - Lower right column index
     */
    moveToRange(upperLeftRow: number, upperLeftColumn: number, lowerRightRow: number, lowerRightColumn: number) : void;
    /**
     * Moves the picture to the top-right corner.
     * @param topRow - the row index.
     * @param rightColumn - the column index.
     */
    alignTopRightCorner(topRow: number, rightColumn: number) : void;
    /**
     * Creates the shape image and saves it to a stream in the specified format.
     * @param stream - The output stream.
     * @param imageType - The type in which to save the image.
     * 
     * @remarks
     * <p>The following formats are supported:
     * .bmp, .gif, .jpg, .jpeg, .tiff, .emf.</p>
     */
    toImage(stream: Uint8Array, imageType: ImageType) : void;
    /**
     * Saves the shape to a file.
     */
    toImage(imageFile: string, options: ImageOrPrintOptions) : void;
    /**
     * Saves the shape to a stream.
     * @returns
     * The result stream.
     */
    toImage(options: ImageOrPrintOptions) : Uint8Array;
    /**
     * Gets the range linked to the control's value.
     * @param isR1C1 - Whether the formula needs to be formatted as R1C1.
     * @param isLocal - Whether the formula needs to be formatted by locale.
     * @returns
     * The range linked to the control's value.
     */
    getLinkedCell(isR1C1: boolean, isLocal: boolean) : string;
    /**
     * Sets the range linked to the control's value.
     * @param formula - The range linked to the control's value.
     * @param isR1C1 - Whether the formula needs to be formatted as R1C1.
     * @param isLocal - Whether the formula needs to be formatted by locale.
     */
    setLinkedCell(formula: string, isR1C1: boolean, isLocal: boolean) : void;
    /**
     * Gets the range used to fill the control.
     * @param isR1C1 - Whether the formula needs to be formatted as R1C1.
     * @param isLocal - Whether the formula needs to be formatted by locale.
     * @returns
     * The range used to fill the control.
     */
    getInputRange(isR1C1: boolean, isLocal: boolean) : string;
    /**
     * Sets the range used to fill the control.
     * @param formula - The range used to fill the control.
     * @param isR1C1 - Whether the formula needs to be formatted as R1C1.
     * @param isLocal - Whether the formula needs to be formatted by locale.
     */
    setInputRange(formula: string, isR1C1: boolean, isLocal: boolean) : void;
    /**
     * Update the selected value by the value of the linked cell.
     */
    updateSelectedValue() : void;
    /**
     * Recalculate the text area
     * @returns
     * Text's Size in an array(width and height).
     */
    calculateTextSize() : number[];
    /**
     * Formats some characters with the font setting.
     * @param startIndex - The start index.
     * @param length - The length.
     * @param font - The font setting.
     * @param flag - The flag of the font setting.
     */
    formatCharacters(startIndex: number, length: number, font: Font, flag: StyleFlag) : void;
    /**
     * Returns a Characters object that represents a range of characters within the text.
     * @param startIndex - The index of the start of the character.
     * @param length - The number of characters.
     * @returns
     * Characters object.
     * 
     * @remarks
     * This method only works on shape with title.
     */
    characters(startIndex: number, length: number) : FontSetting;
    /**
     * Returns all Characters objects
     * that represents a range of characters within the text .
     * @returns
     * All Characters objects
     */
    getRichFormattings() : FontSetting[];
    /**
     * Remove activeX control.
     */
    removeActiveXControl() : void;
    /**
     * Get the actual position and size of the shape (after applying rotation, flip, etc.)
     * @returns
     * Return the position and size in the order of x, y, w, h
     * 
     * @remarks
     * Note:The interface is not fully functional, especially the location information is not correct.It is recommended not to use this interface until the function is complete.
     */
    getActualBox() : number[];
}

/**
 * Represents all the shape in a worksheet/chart.
 */
export class ShapeCollection {
    /**
     * Gets the <see cref="Shape"/> object at the specific index in the list.
     * @param index - The index.
     */
    get(index: number) : Shape;
    /**
     * Gets the <see cref="Shape"/> object by the name of the shape.
     * @param name - The name of the shape.
     */
    get(name: string) : Shape;
    /**
     * Adds and copy a shape to the worksheet.
     * @param sourceShape - Source shape.
     * @param topRow - The top row index.
     * @param top - Represents the vertical  offset from its top row, in unit of pixel.
     * @param leftColumn - The left column index.
     * @param left - Represents the horizontal offset from its left column, in unit of pixel.
     * @returns
     * The new <see cref="Shape"/> object.
     */
    addCopy(sourceShape: Shape, topRow: number, top: number, leftColumn: number, left: number) : Shape;
    /**
     * Adds a checkbox to the worksheet.
     * @param upperLeftRow - Upper left row index.
     * @param top - Represents the vertical  offset of checkbox from its top row, in unit of pixel.
     * @param upperLeftColumn - Upper left column index.
     * @param left - Represents the horizontal offset of textbox from its left column, in unit of pixel.
     * @param height - Height of textbox, in unit of pixel.
     * @param width - Width of textbox, in unit of pixel.
     * @returns
     * The new CheckBox object index.
     */
    addCheckBox(upperLeftRow: number, top: number, upperLeftColumn: number, left: number, height: number, width: number) : CheckBox;
    /**
     * Adds a text box to the worksheet.
     * @param upperLeftRow - Upper left row index.
     * @param top - Represents the vertical  offset of textbox from its top row, in unit of pixel.
     * @param upperLeftColumn - Upper left column index.
     * @param left - Represents the horizontal offset of textbox from its left column, in unit of pixel.
     * @param height - Represents the height of textbox, in unit of pixel.
     * @param width - Represents the width of textbox, in unit of pixel.
     * @returns
     * A <see cref="TextBox"/> object.
     */
    addTextBox(upperLeftRow: number, top: number, upperLeftColumn: number, left: number, height: number, width: number) : TextBox;
    /**
     * Add an equation object to the worksheet.
     * @param topRow - The top row index.
     * @param top - The vertical  offset its top row, in unit of pixel.
     * @param leftColumn - The left column index.
     * @param left - The horizontal offset from its left column, in unit of pixel.
     * @param height - The height of equation, in unit of pixel.
     * @param width - The width of equation, in unit of pixel.
     */
    addEquation(topRow: number, top: number, leftColumn: number, left: number, height: number, width: number) : TextBox;
    /**
     * Adds a Spinner to the worksheet.
     * @param upperLeftRow - Upper left row index.
     * @param top - Represents the vertical  offset of Spinner from its left row, in unit of pixel.
     * @param upperLeftColumn - Upper left column index.
     * @param left - Represents the horizontal offset of Spinner from its left column, in unit of pixel.
     * @param height - Represents the height of Spinner, in unit of pixel.
     * @param width - Represents the width of Spinner, in unit of pixel.
     * @returns
     * A Spinner object.
     */
    addSpinner(upperLeftRow: number, top: number, upperLeftColumn: number, left: number, height: number, width: number) : Spinner;
    /**
     * Adds a ScrollBar to the worksheet.
     * @param upperLeftRow - Upper left row index.
     * @param top - Represents the vertical  offset of ScrollBar from its left row, in unit of pixel.
     * @param upperLeftColumn - Upper left column index.
     * @param left - Represents the horizontal offset of ScrollBar from its left column, in unit of pixel.
     * @param height - Represents the height of ScrollBar, in unit of pixel.
     * @param width - Represents the width of ScrollBar, in unit of pixel.
     * @returns
     * A ScrollBar object.
     */
    addScrollBar(upperLeftRow: number, top: number, upperLeftColumn: number, left: number, height: number, width: number) : ScrollBar;
    /**
     * Adds a RadioButton to the worksheet.
     * @param upperLeftRow - Upper left row index.
     * @param top - Represents the vertical  offset of RadioButton from its left row, in unit of pixel.
     * @param upperLeftColumn - Upper left column index.
     * @param left - Represents the horizontal offset of RadioButton from its left column, in unit of pixel.
     * @param height - Represents the height of RadioButton, in unit of pixel.
     * @param width - Represents the width of RadioButton, in unit of pixel.
     * @returns
     * A RadioButton object.
     */
    addRadioButton(upperLeftRow: number, top: number, upperLeftColumn: number, left: number, height: number, width: number) : RadioButton;
    /**
     * Adds a ListBox to the worksheet.
     * @param upperLeftRow - Upper left row index.
     * @param top - Represents the vertical  offset of ListBox from its left row, in unit of pixel.
     * @param upperLeftColumn - Upper left column index.
     * @param left - Represents the horizontal offset of ListBox from its left column, in unit of pixel.
     * @param height - Represents the height of ListBox, in unit of pixel.
     * @param width - Represents the width of ListBox, in unit of pixel.
     * @returns
     * A ListBox object.
     */
    addListBox(upperLeftRow: number, top: number, upperLeftColumn: number, left: number, height: number, width: number) : ListBox;
    /**
     * Adds a ComboBox to the worksheet.
     * @param upperLeftRow - Upper left row index.
     * @param top - Represents the vertical  offset of ComboBox from its left row, in unit of pixel.
     * @param upperLeftColumn - Upper left column index.
     * @param left - Represents the horizontal offset of ComboBox from its left column, in unit of pixel.
     * @param height - Represents the height of ComboBox, in unit of pixel.
     * @param width - Represents the width of ComboBox, in unit of pixel.
     * @returns
     * A ComboBox object.
     */
    addComboBox(upperLeftRow: number, top: number, upperLeftColumn: number, left: number, height: number, width: number) : ComboBox;
    /**
     * Adds a GroupBox to the worksheet.
     * @param upperLeftRow - Upper left row index.
     * @param top - Represents the vertical  offset of GroupBox from its left row, in unit of pixel.
     * @param upperLeftColumn - Upper left column index.
     * @param left - Represents the horizontal offset of GroupBox from its left column, in unit of pixel.
     * @param height - Represents the height of GroupBox, in unit of pixel.
     * @param width - Represents the width of GroupBox, in unit of pixel.
     * @returns
     * A GroupBox object.
     */
    addGroupBox(upperLeftRow: number, top: number, upperLeftColumn: number, left: number, height: number, width: number) : GroupBox;
    /**
     * Adds a Button to the worksheet.
     * @param upperLeftRow - Upper left row index.
     * @param top - Represents the vertical  offset of Button from its left row, in unit of pixel.
     * @param upperLeftColumn - Upper left column index.
     * @param left - Represents the horizontal offset of Button from its left column, in unit of pixel.
     * @param height - Represents the height of Button, in unit of pixel.
     * @param width - Represents the width of Button, in unit of pixel.
     * @returns
     * A Button object.
     */
    addButton(upperLeftRow: number, top: number, upperLeftColumn: number, left: number, height: number, width: number) : Button;
    /**
     * Adds a Label to the worksheet.
     * @param upperLeftRow - Upper left row index.
     * @param top - Represents the vertical  offset of Label from its left row, in unit of pixel.
     * @param upperLeftColumn - Upper left column index.
     * @param left - Represents the horizontal offset of Label from its left column, in unit of pixel.
     * @param height - Represents the height of Label, in unit of pixel.
     * @param width - Represents the width of Label, in unit of pixel.
     * @returns
     * A Label object.
     */
    addLabel(upperLeftRow: number, top: number, upperLeftColumn: number, left: number, height: number, width: number) : Label;
    /**
     * Adds a label to the chart.
     * @param top - Represents the vertical offset of label from the upper left corner in units of 1/4000 of the chart area.
     * @param left - Represents the vertical offset of label from the upper left corner in units of 1/4000 of the chart area.
     * @param height - Represents the height of label, in units of 1/4000 of the chart area.
     * @param width - Represents the width of label, in units of 1/4000 of the chart area.
     * @returns
     * A new Label object.
     */
    addLabelInChart(top: number, left: number, height: number, width: number) : Label;
    /**
     * Adds a textbox to the chart.
     * @param top - Represents the vertical offset of textbox from the upper left corner in units of 1/4000 of the chart area.
     * @param left - Represents the vertical offset of textbox from the upper left corner in units of 1/4000 of the chart area.
     * @param height - Represents the height of textbox, in units of 1/4000 of the chart area.
     * @param width - Represents the width of textbox, in units of 1/4000 of the chart area.
     * @returns
     * A TextBox object.
     */
    addTextBoxInChart(top: number, left: number, height: number, width: number) : TextBox;
    /**
     * Inserts a WordArt object to the chart
     * @param effect - The mso preset text effect type.
     * @param text - The WordArt text.
     * @param fontName - The font name.
     * @param size - The font size
     * @param fontBold - Indicates whether font is bold.
     * @param fontItalic - Indicates whether font is italic.
     * @param top - Represents the vertical offset of shape from the upper left corner in units of 1/4000 of the chart area.
     * @param left - Represents the vertical offset of shape from the upper left corner in units of 1/4000 of the chart area.
     * @param height - Represents the height of shape, in units of 1/4000 of the chart area.
     * @param width - Represents the width of shape, in units of 1/4000 of the chart area.
     * @returns
     * Returns a Shape object that represents the new WordArt object.
     */
    addTextEffectInChart(effect: MsoPresetTextEffect, text: string, fontName: string, size: number, fontBold: boolean, fontItalic: boolean, top: number, left: number, height: number, width: number) : Shape;
    /**
     * Inserts a WordArt object.
     * @param effect - The mso preset text effect type.
     * @param text - The WordArt text.
     * @param fontName - The font name.
     * @param size - The font size
     * @param fontBold - Indicates whether font is bold.
     * @param fontItalic - Indicates whether font is italic.
     * @param upperLeftRow - Upper left row index.
     * @param top - Represents the vertical  offset of shape from its left row, in unit of pixel.
     * @param upperLeftColumn - Upper left column index.
     * @param left - Represents the horizontal offset of shape from its left column, in unit of pixel.
     * @param height - Represents the height of shape, in unit of pixel.
     * @param width - Represents the width of shape, in unit of pixel.
     * @returns
     * Returns a Shape object that represents the new WordArt object.
     */
    addTextEffect(effect: MsoPresetTextEffect, text: string, fontName: string, size: number, fontBold: boolean, fontItalic: boolean, upperLeftRow: number, top: number, upperLeftColumn: number, left: number, height: number, width: number) : Shape;
    /**
     * Adds preset WordArt since Excel 2007.s
     * @param style - The preset WordArt Style.
     * @param text - The text.
     * @param upperLeftRow - Upper left row index.
     * @param top - Represents the vertical  offset of shape from its left row, in unit of pixel.
     * @param upperLeftColumn - Upper left column index.
     * @param left - Represents the horizontal offset of shape from its left column, in unit of pixel.
     * @param height - Represents the height of shape, in unit of pixel.
     * @param width - Represents the width of shape, in unit of pixel.
     */
    addWordArt(style: PresetWordArtStyle, text: string, upperLeftRow: number, top: number, upperLeftColumn: number, left: number, height: number, width: number) : Shape;
    /**
     * Adds a RectangleShape to the worksheet.
     * @param upperLeftRow - Upper left row index.
     * @param top - Represents the vertical  offset of RectangleShape from its left row, in unit of pixel.
     * @param upperLeftColumn - Upper left column index.
     * @param left - Represents the horizontal offset of RectangleShape from its left column, in unit of pixel.
     * @param height - Represents the height of RectangleShape, in unit of pixel.
     * @param width - Represents the width of RectangleShape, in unit of pixel.
     * @returns
     * A RectangleShape object.
     */
    addRectangle(upperLeftRow: number, top: number, upperLeftColumn: number, left: number, height: number, width: number) : RectangleShape;
    /**
     * Adds a Oval to the worksheet.
     * @param upperLeftRow - Upper left row index.
     * @param top - Represents the vertical  offset of Oval from its left row, in unit of pixel.
     * @param upperLeftColumn - Upper left column index.
     * @param left - Represents the horizontal offset of Oval from its left column, in unit of pixel.
     * @param height - Represents the height of Oval, in unit of pixel.
     * @param width - Represents the width of Oval, in unit of pixel.
     * @returns
     * A Oval object.
     */
    addOval(upperLeftRow: number, top: number, upperLeftColumn: number, left: number, height: number, width: number) : Oval;
    /**
     * Adds a LineShape to the worksheet.
     * @param upperLeftRow - Upper left row index.
     * @param top - Represents the vertical  offset of LineShape from its left row, in unit of pixel.
     * @param upperLeftColumn - Upper left column index.
     * @param left - Represents the horizontal offset of LineShape from its left column, in unit of pixel.
     * @param height - Represents the height of LineShape, in unit of pixel.
     * @param width - Represents the width of LineShape, in unit of pixel.
     * @returns
     * A LineShape object.
     */
    addLine(upperLeftRow: number, top: number, upperLeftColumn: number, left: number, height: number, width: number) : LineShape;
    /**
     * Adds a free floating shape to the worksheet.Only applies for line/image shape.
     * @param type - The shape type.
     * @param top - Represents the vertical  offset of shape from the worksheet's top row, in unit of pixel.
     * @param left - Represents the horizontal offset of shape from the worksheet's left column, in unit of pixel.
     * @param height - Represents the height of LineShape, in unit of pixel.
     * @param width - Represents the width of LineShape, in unit of pixel.
     * @param imageData - The image data,only applies for the picture.
     * @param isOriginalSize - Whether the shape use original size if the shape is image.
     */
    addFreeFloatingShape(type: MsoDrawingType, top: number, left: number, height: number, width: number, imageData: number[], isOriginalSize: boolean) : Shape;
    /**
     * Add a shape to chart .All unit is 1/4000 of chart area.
     * @param type - The drawing type.
     * @param placement - the placement type.
     * @param left - In unit of 1/4000 chart area width.
     * @param top - In unit of 1/4000 chart area height.
     * @param right - In unit of 1/4000 chart area width.
     * @param bottom - In unit of 1/4000 chart area height.
     * @param imageData - If the shape is not a picture or ole object,imageData should be null.
     */
    addShapeInChart(type: MsoDrawingType, placement: PlacementType, left: number, top: number, right: number, bottom: number, imageData: number[]) : Shape;
    /**
     * Add a shape to chart .All unit is 1/4000 of chart area.
     * @param type - The drawing type.
     * @param placement - the placement type.
     * @param left - In unit of 1/4000 chart area width.
     * @param top - In unit of 1/4000 chart area height.
     * @param right - In unit of 1/4000 chart area width.
     * @param bottom - In unit of 1/4000 chart area height.
     */
    addShapeInChart(type: MsoDrawingType, placement: PlacementType, left: number, top: number, right: number, bottom: number) : Shape;
    /**
     * Add a shape to chart. All unit is percent scale of chart area.
     * @param type - The drawing type.
     * @param placement - the placement type.
     * @param left - Unit is percent scale of chart area width.
     * @param top - Unit is percent scale of chart area height.
     * @param right - Unit is percent scale of chart area width.
     * @param bottom - Unit is percent scale of chart area height.
     */
    addShapeInChartByScale(type: MsoDrawingType, placement: PlacementType, left: number, top: number, right: number, bottom: number) : Shape;
    /**
     * Add a shape to chart .All unit is 1/4000 of chart area.
     * @param type - The drawing type.
     * @param placement - the placement type.
     * @param left - Unit is percent scale of chart area width.
     * @param top - Unit is percent scale of chart area height.
     * @param right - Unit is percent scale of chart area width.
     * @param bottom - Unit is percent scale of chart area height.
     * @param imageData - If the shape is not a picture or ole object,imageData should be null.
     */
    addShapeInChartByScale(type: MsoDrawingType, placement: PlacementType, left: number, top: number, right: number, bottom: number, imageData: number[]) : Shape;
    /**
     * Adds a ArcShape to the worksheet.
     * @param upperLeftRow - Upper left row index.
     * @param top - Represents the vertical  offset of ArcShape from its left row, in unit of pixel.
     * @param upperLeftColumn - Upper left column index.
     * @param left - Represents the horizontal offset of ArcShape from its left column, in unit of pixel.
     * @param height - Represents the height of ArcShape, in unit of pixel.
     * @param width - Represents the width of ArcShape, in unit of pixel.
     * @returns
     * A ArcShape object.
     */
    addArc(upperLeftRow: number, top: number, upperLeftColumn: number, left: number, height: number, width: number) : ArcShape;
    /**
     * Adds a Shape to the worksheet.
     * @param type - Mso drawing type.
     * @param upperLeftRow - Upper left row index.
     * @param top - Represents the vertical  offset of Shape from its left row, in unit of pixel.
     * @param upperLeftColumn - Upper left column index.
     * @param left - Represents the horizontal offset of Shape from its left column, in unit of pixel.
     * @param height - Represents the height of Shape, in unit of pixel.
     * @param width - Represents the width of Shape, in unit of pixel.
     * @returns
     * A Shape object.
     * 
     * @remarks
     * The type could not be Chart/Comment/Picture/OleObject/Polygon/DialogBox
     */
    addShape(type: MsoDrawingType, upperLeftRow: number, top: number, upperLeftColumn: number, left: number, height: number, width: number) : Shape;
    /**
     * Adds a AutoShape to the worksheet.
     * @param type - Auto shape type.
     * @param upperLeftRow - Upper left row index.
     * @param top - Represents the vertical  offset of Shape from its left row, in unit of pixel.
     * @param upperLeftColumn - Upper left column index.
     * @param left - Represents the horizontal offset of Shape from its left column, in unit of pixel.
     * @param height - Represents the height of Shape, in unit of pixel.
     * @param width - Represents the width of Shape, in unit of pixel.
     * @returns
     * A Shape object.
     * 
     * @remarks
     * The type could not be Chart/Comment/Picture/OleObject/Polygon/DialogBox
     */
    addAutoShape(type: AutoShapeType, upperLeftRow: number, top: number, upperLeftColumn: number, left: number, height: number, width: number) : Shape;
    /**
     * Adds a AutoShape to the chart.
     * @param type - Auto shape type.
     * @param top - Represents the vertical offset of textbox from the upper left corner in units of 1/4000 of the chart area.
     * @param left - Represents the vertical offset of textbox from the upper left corner in units of 1/4000 of the chart area.
     * @param height - Represents the height of textbox, in units of 1/4000 of the chart area.
     * @param width - Represents the width of textbox, in units of 1/4000 of the chart area.
     * @returns
     * Returns a shape object.
     * 
     * @remarks
     * The type could not be Chart/Comment/Picture/OleObject/Polygon/DialogBox
     */
    addAutoShapeInChart(type: AutoShapeType, top: number, left: number, height: number, width: number) : Shape;
    /**
     * Creates an Activex Control.
     * @param type - The type of the control.
     * @param topRow - Upper left row index.
     * @param top - Represents the vertical  offset of Shape from its left row, in unit of pixel.
     * @param leftColumn - Upper left column index.
     * @param left - Represents the horizontal offset of Shape from its left column, in unit of pixel.
     * @param height - Represents the height of Shape, in unit of pixel.
     * @param width - Represents the width of Shape, in unit of pixel.
     */
    addActiveXControl(type: ControlType, topRow: number, top: number, leftColumn: number, left: number, width: number, height: number) : Shape;
    /**
     * Adds a picture to the collection.
     * @param upperLeftRow - Upper left row index.
     * @param upperLeftColumn - Upper left column index.
     * @param lowerRightRow - Lower right row index
     * @param lowerRightColumn - Lower right column index
     * @param stream - Stream object which contains the image data.
     * @returns
     * <see cref="Picture"/> Picture object.
     */
    addPicture(upperLeftRow: number, upperLeftColumn: number, lowerRightRow: number, lowerRightColumn: number, stream: Uint8Array) : Picture;
    /**
     * Adds a picture to the collection.
     * @param upperLeftRow - Upper left row index.
     * @param upperLeftColumn - Upper left column index.
     * @param stream - Stream object which contains the image data.
     * @param widthScale - Scale of image width, a percentage.
     * @param heightScale - Scale of image height, a percentage.
     * @returns
     * <see cref="Picture"/> Picture object.
     */
    addPicture(upperLeftRow: number, upperLeftColumn: number, stream: Uint8Array, widthScale: number, heightScale: number) : Picture;
    /**
     * Adds svg image.
     * @param upperLeftRow - Upper left row index.
     * @param top - Represents the vertical  offset of shape from its left row, in unit of pixel.
     * @param upperLeftColumn - Upper left column index.
     * @param left - The horizontal offset of shape from its left column, in unit of pixel.
     * @param height - The height of shape, in unit of pixel.
     * @param width - The width of shape, in unit of pixel.
     * @param svgData - The svg image data.
     * @param compatibleImageData - Converted image data from svg in order to be compatible with Excel 2016 or lower versions.
     */
    addSvg(upperLeftRow: number, top: number, upperLeftColumn: number, left: number, height: number, width: number, svgData: number[], compatibleImageData: number[]) : Picture;
    /**
     * Adds svg image.
     * @param upperLeftRow - Upper left row index.
     * @param top - Represents the vertical offset of shape from its left row, in unit of pixel.
     * @param upperLeftColumn - Upper left column index.
     * @param left - The horizontal offset of shape from its left column, in unit of pixel.
     * @param height - The height of shape, in unit of pixel.
     * @param width - The width of shape, in unit of pixel.
     * @param imageByteData - The image byte data.
     * @param compatibleImageData - Converted image data from svg in order to be compatible with Excel 2016 or lower versions.
     */
    addIcons(upperLeftRow: number, top: number, upperLeftColumn: number, left: number, height: number, width: number, imageByteData: number[], compatibleImageData: number[]) : Picture;
    /**
     * Add a linked picture.
     * @param upperLeftRow - Upper left row index.
     * @param upperLeftColumn - Upper left column index.
     * @param height - The height of the shape. In unit of pixels
     * @param width - The width of the shape. In unit of pixels
     * @param sourceFullName - The path and name of the source file for the linked image
     * @returns
     * <see cref="Picture"/> Picture object.
     */
    addLinkedPicture(upperLeftRow: number, upperLeftColumn: number, height: number, width: number, sourceFullName: string) : Picture;
    /**
     * Add a linked picture.
     * @param upperLeftRow - Upper left row index.
     * @param upperLeftColumn - Upper left column index.
     * @param height - The height of the shape. In unit of pixels
     * @param width - The width of the shape. In unit of pixels
     * @param sourceFullName - The path and name of the source file for the linked image
     * @returns
     * <see cref="Picture"/> Picture object.
     */
    addOleObjectWithLinkedImage(upperLeftRow: number, upperLeftColumn: number, height: number, width: number, sourceFullName: string) : OleObject;
    /**
     * Adds a picture to the chart.
     * @param top - Represents the vertical offset of shape from the upper left corner in units of 1/4000 of the chart area.
     * @param left - Represents the horizontal offset of shape from the upper left corner in units of 1/4000 of the chart area.
     * @param stream - Stream object which contains the image data.
     * @param widthScale - Scale of image width, a percentage.
     * @param heightScale - Scale of image height, a percentage.
     * @returns
     * Returns a Picture object.
     */
    addPictureInChart(top: number, left: number, stream: Uint8Array, widthScale: number, heightScale: number) : Picture;
    /**
     * Adds an OleObject.
     * @param upperLeftRow - 
     * @param top - 
     * @param upperLeftColumn - 
     * @param left - 
     * @param height - 
     * @param width - 
     * @param imageData - 
     */
    addOleObject(upperLeftRow: number, top: number, upperLeftColumn: number, left: number, height: number, width: number, imageData: number[]) : OleObject;
    /**
     * Copy all comments in the range.
     * @param shapes - The source shapes.
     * @param ca - The source range.
     * @param destRow - The dest range start row.
     * @param destColumn - The dest range start column.
     */
    copyCommentsInRange(shapes: ShapeCollection, ca: CellArea, destRow: number, destColumn: number) : void;
    /**
     * Copy shapes in the range to destination range.
     * @param sourceShapes - Source shapes.
     * @param ca - The source range.
     * @param destRow - The dest row index of the dest range.
     * @param destColumn - The dest column of the dest range.
     * @param isContained - Whether only copy the shapes which are contained in the range.         /// If true,only copies the shapes in the range.          /// Otherwise,it works as MS Office.
     */
    copyInRange(sourceShapes: ShapeCollection, ca: CellArea, destRow: number, destColumn: number, isContained: boolean) : void;
    /**
     * Delete shapes in the range.Comment shapes will not be deleted.
     * @param ca - The range.If the shapes are contained in the range, they will be removed.
     */
    deleteInRange(ca: CellArea) : void;
    /**
     * Delete a shape. If the shape is in the group or is a comment shape, it will not be deleted.
     * @param shape - 
     */
    deleteShape(shape: Shape) : void;
    /**
     * Group the shapes.
     * @param groupItems - the group items.
     * @returns
     * Return the group shape.
     * 
     * @remarks
     * The shape in the groupItems should not be grouped.
     * The shape must be in this Shapes collection.
     */
    group(groupItems: Shape[]) : GroupShape;
    /**
     * Ungroups the shape items.
     * @param group - The group shape.
     * 
     * @remarks
     * If the group shape is grouped by another group shape,nothing will be done.
     */
    ungroup(group: GroupShape) : void;
    /**
     * Remove the shape.
     * @param index - The index of the shape.
     */
    removeAt(index: number) : void;
    /**
     * Remove the shape.
     * @param shape - 
     */
    remove(shape: Shape) : void;
    /**
     * Clear all shapes in the worksheet.
     */
    clear() : void;
    /**
     * Update the selected value by the value of the linked cell or range of the shape.
     */
    updateSelectedValue() : void;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Specifies the worksheet type.
 */
export enum SheetType {
    /**
     * Visual Basic module
     */
    VB = 0,
    /**
     */
    Worksheet = 1,
    /**
     * Chart
     */
    Chart = 2,
    /**
     * BIFF4 Macro sheet
     */
    BIFF4Macro = 3,
    /**
     * International Macro sheet
     */
    InternationalMacro = 4,
    /**
     */
    Other = 5,
    /**
     * Dialog worksheet
     */
    Dialog = 6,
}

/**
 * Represent the shift options when deleting a range of cells.
 */
export enum ShiftType {
    /**
     * Shift cells down.
     */
    Down = 0,
    /**
     * Shift cells left.
     */
    Left = 1,
    /**
     * Do not shift cells.
     */
    None = 2,
    /**
     * Shift cells right.
     */
    Right = 3,
    /**
     * Shift cells up.
     */
    Up = 4,
}

/**
 * Represents sort order for the data range.
 */
export enum SortOrder {
    /**
     */
    Ascending = 0,
    /**
     */
    Descending = 1,
}

/**
 * Represents the Forms control: Spinner.
 * 
 * @remarks
 * Scroll value must be between 0 and 30000.
 */
export class Spinner extends Shape {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Shape);
    /**
     * Gets or sets the current value.
     */
    getCurrentValue() : number;
    /**
     * Gets or sets the current value.
     * @param value - The value to set.
     */
    setCurrentValue(value: number) : void;
    /**
     * Gets or sets the minimum value of a scroll bar or spinner range.
     */
    getMin() : number;
    /**
     * Gets or sets the minimum value of a scroll bar or spinner range.
     * @param value - The value to set.
     */
    setMin(value: number) : void;
    /**
     * Gets or sets the maximum value of a scroll bar or spinner range.
     */
    getMax() : number;
    /**
     * Gets or sets the maximum value of a scroll bar or spinner range.
     * @param value - The value to set.
     */
    setMax(value: number) : void;
    /**
     * Gets or sets the amount that the scroll bar or spinner is incremented a line scroll.
     */
    getIncrementalChange() : number;
    /**
     * Gets or sets the amount that the scroll bar or spinner is incremented a line scroll.
     * @param value - The value to set.
     */
    setIncrementalChange(value: number) : void;
    /**
     * Indicates whether the shape has 3-D shading.
     */
    getShadow() : boolean;
    /**
     * Indicates whether the shape has 3-D shading.
     * @param value - The value to set.
     */
    setShadow(value: boolean) : void;
    /**
     * Indicates whether this is a horizontal scroll bar.
     */
    isHorizontal() : boolean;
    /**
     * Indicates whether this is a horizontal scroll bar.
     * @param value - The value to set.
     */
    setIsHorizontal(value: boolean) : void;
}

/**
 * Represents display style of excel document,such as font,color,alignment,border,etc.
 * The Style object contains all style attributes (font, number format, alignment, and so on) as properties.
 */
export class Style {
    /**
     * Gets and sets the background theme color.
     * 
     * @remarks
     * If the background color is not a theme color, NULL will be returned.
     */
    getBackgroundThemeColor() : ThemeColor;
    /**
     * Gets and sets the background theme color.
     * @param value - The value to set.
     * 
     * @remarks
     * If the background color is not a theme color, NULL will be returned.
     */
    setBackgroundThemeColor(value: ThemeColor) : void;
    /**
     * Gets and sets the foreground theme color.
     * 
     * @remarks
     * If the foreground color is not a theme color, NULL will be returned.
     */
    getForegroundThemeColor() : ThemeColor;
    /**
     * Gets and sets the foreground theme color.
     * @param value - The value to set.
     * 
     * @remarks
     * If the foreground color is not a theme color, NULL will be returned.
     */
    setForegroundThemeColor(value: ThemeColor) : void;
    /**
     * Gets or sets the name of the style.
     */
    getName() : string;
    /**
     * Gets or sets the name of the style.
     * @param value - The value to set.
     */
    setName(value: string) : void;
    /**
     * Gets or sets the cell background pattern type.
     */
    getPattern() : BackgroundType;
    /**
     * Gets or sets the cell background pattern type.
     * @param value - The value to set.
     */
    setPattern(value: BackgroundType) : void;
    /**
     * Gets the <see cref="BorderCollection"/> of the style.
     */
    getBorders() : BorderCollection;
    /**
     * Gets or sets a style's background color.
     * 
     * @remarks
     * If you want to set a cell's color, please use Style.ForegroundColor property.
     * Only if the cell style pattern is other than none or solid, this property will take effect.
     */
    getBackgroundColor() : Color;
    /**
     * Gets or sets a style's background color.
     * @param value - The value to set.
     * 
     * @remarks
     * If you want to set a cell's color, please use Style.ForegroundColor property.
     * Only if the cell style pattern is other than none or solid, this property will take effect.
     */
    setBackgroundColor(value: Color) : void;
    /**
     * Gets and sets the background color with a 32-bit ARGB value.
     */
    getBackgroundArgbColor() : number;
    /**
     * Gets and sets the background color with a 32-bit ARGB value.
     * @param value - The value to set.
     */
    setBackgroundArgbColor(value: number) : void;
    /**
     * Gets or sets a style's foreground color.
     * 
     * @remarks
     * It means no color setting if Color.Empty is returned.
     */
    getForegroundColor() : Color;
    /**
     * Gets or sets a style's foreground color.
     * @param value - The value to set.
     * 
     * @remarks
     * It means no color setting if Color.Empty is returned.
     */
    setForegroundColor(value: Color) : void;
    /**
     * Gets and sets the foreground color with a 32-bit ARGB value.
     */
    getForegroundArgbColor() : number;
    /**
     * Gets and sets the foreground color with a 32-bit ARGB value.
     * @param value - The value to set.
     */
    setForegroundArgbColor(value: number) : void;
    /**
     * Checks whether there are borders have been set for the style.
     */
    getHasBorders() : boolean;
    /**
     * Gets the parent style of this style.
     */
    getParentStyle() : Style;
    /**
     * Indicate whether the number formatting should be applied.
     * 
     * @remarks
     * Only for named style.
     */
    isNumberFormatApplied() : boolean;
    /**
     * Indicate whether the number formatting should be applied.
     * @param value - The value to set.
     * 
     * @remarks
     * Only for named style.
     */
    setIsNumberFormatApplied(value: boolean) : void;
    /**
     * Indicate whether the font formatting should be applied.
     * 
     * @remarks
     * Only for named style.
     */
    isFontApplied() : boolean;
    /**
     * Indicate whether the font formatting should be applied.
     * @param value - The value to set.
     * 
     * @remarks
     * Only for named style.
     */
    setIsFontApplied(value: boolean) : void;
    /**
     * Indicate whether the alignment formatting should be applied.
     * 
     * @remarks
     * Only for named style.
     */
    isAlignmentApplied() : boolean;
    /**
     * Indicate whether the alignment formatting should be applied.
     * @param value - The value to set.
     * 
     * @remarks
     * Only for named style.
     */
    setIsAlignmentApplied(value: boolean) : void;
    /**
     * Indicate whether the border formatting should be applied.
     * 
     * @remarks
     * Only for named style.
     */
    isBorderApplied() : boolean;
    /**
     * Indicate whether the border formatting should be applied.
     * @param value - The value to set.
     * 
     * @remarks
     * Only for named style.
     */
    setIsBorderApplied(value: boolean) : void;
    /**
     * Indicate whether the fill formatting should be applied.
     * 
     * @remarks
     * Only for named style.
     */
    isFillApplied() : boolean;
    /**
     * Indicate whether the fill formatting should be applied.
     * @param value - The value to set.
     * 
     * @remarks
     * Only for named style.
     */
    setIsFillApplied(value: boolean) : void;
    /**
     * Indicate whether the protection formatting should be applied.
     * 
     * @remarks
     * Only for named style.
     */
    isProtectionApplied() : boolean;
    /**
     * Indicate whether the protection formatting should be applied.
     * @param value - The value to set.
     * 
     * @remarks
     * Only for named style.
     */
    setIsProtectionApplied(value: boolean) : void;
    /**
     * Represents the indent level for the cell or range. Can only be an integer from 0 to 250.
     * 
     * @remarks
     * If text horizontal alignment type is set to value other than left or right, indent level will
     * be reset to zero.
     */
    getIndentLevel() : number;
    /**
     * Represents the indent level for the cell or range. Can only be an integer from 0 to 250.
     * @param value - The value to set.
     * 
     * @remarks
     * If text horizontal alignment type is set to value other than left or right, indent level will
     * be reset to zero.
     */
    setIndentLevel(value: number) : void;
    /**
     * Gets a <see cref="Font"/> object.
     */
    getFont() : Font;
    /**
     * Represents text rotation angle.
     * 
     * @remarks
     * <p>0: Not rotated.</p>
     * <p>255: Top to Bottom.</p>
     * <p>-90: Downward.</p>
     * <p>90: Upward.</p>
     * You can set 255 or value ranged from -90 to 90.
     */
    getRotationAngle() : number;
    /**
     * Represents text rotation angle.
     * @param value - The value to set.
     * 
     * @remarks
     * <p>0: Not rotated.</p>
     * <p>255: Top to Bottom.</p>
     * <p>-90: Downward.</p>
     * <p>90: Upward.</p>
     * You can set 255 or value ranged from -90 to 90.
     */
    setRotationAngle(value: number) : void;
    /**
     * Gets or sets the horizontal alignment type of the text in a cell.
     */
    getHorizontalAlignment() : TextAlignmentType;
    /**
     * Gets or sets the horizontal alignment type of the text in a cell.
     * @param value - The value to set.
     */
    setHorizontalAlignment(value: TextAlignmentType) : void;
    /**
     * Gets or sets the vertical alignment type of the text in a cell.
     */
    getVerticalAlignment() : TextAlignmentType;
    /**
     * Gets or sets the vertical alignment type of the text in a cell.
     * @param value - The value to set.
     */
    setVerticalAlignment(value: TextAlignmentType) : void;
    /**
     * Gets or sets a value indicating whether the text within a cell is wrapped.
     */
    isTextWrapped() : boolean;
    /**
     * Gets or sets a value indicating whether the text within a cell is wrapped.
     * @param value - The value to set.
     */
    setIsTextWrapped(value: boolean) : void;
    /**
     * Gets or sets the display format of numbers and dates. The formatting patterns are different for different regions.
     * 
     * @remarks
     * For example, the formatting patterns represented by numbers for en_US region:
     * <list type="table">
     * <listheader>
     * <description>Value</description>
     * <description>Type</description>
     * <description>Format String</description>
     * </listheader>
     * <item>
     * <description>0</description>
     * <description>General</description>
     * <description><c>General</c></description>
     * </item>
     * <item>
     * <description>1</description>
     * <description>Decimal</description>
     * <description><c>0</c></description>
     * </item>
     * <item>
     * <description>2</description>
     * <description>Decimal</description>
     * <description><c>0.00</c></description>
     * </item>
     * <item>
     * <description>3</description>
     * <description>Decimal</description>
     * <description><c>#,##0</c></description>
     * </item>
     * <item>
     * <description>4</description>
     * <description>Decimal</description>
     * <description><c>#,##0.00</c></description>
     * </item>
     * <item>
     * <description>5</description>
     * <description>Currency</description>
     * <description><c>$#,##0_);($#,##0)</c></description>
     * </item>
     * <item>
     * <description>6</description>
     * <description>Currency</description>
     * <description><c>$#,##0_);[Red]($#,##0)</c></description>
     * </item>
     * <item>
     * <description>7</description>
     * <description>Currency</description>
     * <description><c>$#,##0.00_);($#,##0.00)</c></description>
     * </item>
     * <item>
     * <description>8</description>
     * <description>Currency</description>
     * <description><c>$#,##0.00_);[Red]($#,##0.00)</c></description>
     * </item>
     * <item>
     * <description>9</description>
     * <description>Percentage</description>
     * <description><c>0%</c></description>
     * </item>
     * <item>
     * <description>10</description>
     * <description>Percentage</description>
     * <description><c>0.00%</c></description>
     * </item>
     * <item>
     * <description>11</description>
     * <description>Scientific</description>
     * <description><c>0.00E+00</c></description>
     * </item>
     * <item>
     * <description>12</description>
     * <description>Fraction</description>
     * <description><c># ?/?</c></description>
     * </item>
     * <item>
     * <description>13</description>
     * <description>Fraction</description>
     * <description><c># ??/??</c></description>
     * </item>
     * <item>
     * <description>14</description>
     * <description>Date</description>
     * <description><c>m/d/yyyy</c></description>
     * </item>
     * <item>
     * <description>15</description>
     * <description>Date</description>
     * <description><c>d-mmm-yy</c></description>
     * </item>
     * <item>
     * <description>16</description>
     * <description>Date</description>
     * <description><c>d-mmm</c></description>
     * </item>
     * <item>
     * <description>17</description>
     * <description>Date</description>
     * <description><c>mmm-yy</c></description>
     * </item>
     * <item>
     * <description>18</description>
     * <description>Time</description>
     * <description><c>h:mm AM/PM</c></description>
     * </item>
     * <item>
     * <description>19</description>
     * <description>Time</description>
     * <description><c>h:mm:ss AM/PM</c></description>
     * </item>
     * <item>
     * <description>20</description>
     * <description>Time</description>
     * <description><c>h:mm</c></description>
     * </item>
     * <item>
     * <description>21</description>
     * <description>Time</description>
     * <description><c>h:mm:ss</c></description>
     * </item>
     * <item>
     * <description>22</description>
     * <description>Time</description>
     * <description><c>m/d/yyyy h:mm</c></description>
     * </item>
     * <item>
     * <description>37</description>
     * <description>Accounting</description>
     * <description><c>#,##0_);(#,##0)</c></description>
     * </item>
     * <item>
     * <description>38</description>
     * <description>Accounting</description>
     * <description><c>#,##0_);[Red](#,##0)</c></description>
     * </item>
     * <item>
     * <description>39</description>
     * <description>Accounting</description>
     * <description><c>#,##0.00_);(#,##0.00)</c></description>
     * </item>
     * <item>
     * <description>40</description>
     * <description>Accounting</description>
     * <description><c>#,##0.00_);[Red](#,##0.00)</c></description>
     * </item>
     * <item>
     * <description>41</description>
     * <description>Accounting</description>
     * <description><c>_(* #,##0_);_(* (#,##0);_(* "-"_);_(@_)</c></description>
     * </item>
     * <item>
     * <description>42</description>
     * <description>Currency</description>
     * <description><c>_($* #,##0_);_($* (#,##0);_($* "-"_);_(@_)</c></description>
     * </item>
     * <item>
     * <description>43</description>
     * <description>Accounting</description>
     * <description><c>_(* #,##0.00_);_(* (#,##0.00);_(* "-"??_);_(@_)</c></description>
     * </item>
     * <item>
     * <description>44</description>
     * <description>Currency</description>
     * <description><c>_($* #,##0.00_);_($* (#,##0.00);_($* "-"??_);_(@_)</c></description>
     * </item>
     * <item>
     * <description>45</description>
     * <description>Time</description>
     * <description><c>mm:ss</c></description>
     * </item>
     * <item>
     * <description>46</description>
     * <description>Time</description>
     * <description><c>[h]:mm:ss</c></description>
     * </item>
     * <item>
     * <description>47</description>
     * <description>Time</description>
     * <description><c>mm:ss.0</c></description>
     * </item>
     * <item>
     * <description>48</description>
     * <description>Scientific</description>
     * <description><c>##0.0E+0</c></description>
     * </item>
     * <item>
     * <description>49</description>
     * <description>Text</description>
     * <description><c>@</c></description>
     * </item>
     * </list>
     */
    getNumber() : number;
    /**
     * Gets or sets the display format of numbers and dates. The formatting patterns are different for different regions.
     * @param value - The value to set.
     * 
     * @remarks
     * For example, the formatting patterns represented by numbers for en_US region:
     * <list type="table">
     * <listheader>
     * <description>Value</description>
     * <description>Type</description>
     * <description>Format String</description>
     * </listheader>
     * <item>
     * <description>0</description>
     * <description>General</description>
     * <description><c>General</c></description>
     * </item>
     * <item>
     * <description>1</description>
     * <description>Decimal</description>
     * <description><c>0</c></description>
     * </item>
     * <item>
     * <description>2</description>
     * <description>Decimal</description>
     * <description><c>0.00</c></description>
     * </item>
     * <item>
     * <description>3</description>
     * <description>Decimal</description>
     * <description><c>#,##0</c></description>
     * </item>
     * <item>
     * <description>4</description>
     * <description>Decimal</description>
     * <description><c>#,##0.00</c></description>
     * </item>
     * <item>
     * <description>5</description>
     * <description>Currency</description>
     * <description><c>$#,##0_);($#,##0)</c></description>
     * </item>
     * <item>
     * <description>6</description>
     * <description>Currency</description>
     * <description><c>$#,##0_);[Red]($#,##0)</c></description>
     * </item>
     * <item>
     * <description>7</description>
     * <description>Currency</description>
     * <description><c>$#,##0.00_);($#,##0.00)</c></description>
     * </item>
     * <item>
     * <description>8</description>
     * <description>Currency</description>
     * <description><c>$#,##0.00_);[Red]($#,##0.00)</c></description>
     * </item>
     * <item>
     * <description>9</description>
     * <description>Percentage</description>
     * <description><c>0%</c></description>
     * </item>
     * <item>
     * <description>10</description>
     * <description>Percentage</description>
     * <description><c>0.00%</c></description>
     * </item>
     * <item>
     * <description>11</description>
     * <description>Scientific</description>
     * <description><c>0.00E+00</c></description>
     * </item>
     * <item>
     * <description>12</description>
     * <description>Fraction</description>
     * <description><c># ?/?</c></description>
     * </item>
     * <item>
     * <description>13</description>
     * <description>Fraction</description>
     * <description><c># ??/??</c></description>
     * </item>
     * <item>
     * <description>14</description>
     * <description>Date</description>
     * <description><c>m/d/yyyy</c></description>
     * </item>
     * <item>
     * <description>15</description>
     * <description>Date</description>
     * <description><c>d-mmm-yy</c></description>
     * </item>
     * <item>
     * <description>16</description>
     * <description>Date</description>
     * <description><c>d-mmm</c></description>
     * </item>
     * <item>
     * <description>17</description>
     * <description>Date</description>
     * <description><c>mmm-yy</c></description>
     * </item>
     * <item>
     * <description>18</description>
     * <description>Time</description>
     * <description><c>h:mm AM/PM</c></description>
     * </item>
     * <item>
     * <description>19</description>
     * <description>Time</description>
     * <description><c>h:mm:ss AM/PM</c></description>
     * </item>
     * <item>
     * <description>20</description>
     * <description>Time</description>
     * <description><c>h:mm</c></description>
     * </item>
     * <item>
     * <description>21</description>
     * <description>Time</description>
     * <description><c>h:mm:ss</c></description>
     * </item>
     * <item>
     * <description>22</description>
     * <description>Time</description>
     * <description><c>m/d/yyyy h:mm</c></description>
     * </item>
     * <item>
     * <description>37</description>
     * <description>Accounting</description>
     * <description><c>#,##0_);(#,##0)</c></description>
     * </item>
     * <item>
     * <description>38</description>
     * <description>Accounting</description>
     * <description><c>#,##0_);[Red](#,##0)</c></description>
     * </item>
     * <item>
     * <description>39</description>
     * <description>Accounting</description>
     * <description><c>#,##0.00_);(#,##0.00)</c></description>
     * </item>
     * <item>
     * <description>40</description>
     * <description>Accounting</description>
     * <description><c>#,##0.00_);[Red](#,##0.00)</c></description>
     * </item>
     * <item>
     * <description>41</description>
     * <description>Accounting</description>
     * <description><c>_(* #,##0_);_(* (#,##0);_(* "-"_);_(@_)</c></description>
     * </item>
     * <item>
     * <description>42</description>
     * <description>Currency</description>
     * <description><c>_($* #,##0_);_($* (#,##0);_($* "-"_);_(@_)</c></description>
     * </item>
     * <item>
     * <description>43</description>
     * <description>Accounting</description>
     * <description><c>_(* #,##0.00_);_(* (#,##0.00);_(* "-"??_);_(@_)</c></description>
     * </item>
     * <item>
     * <description>44</description>
     * <description>Currency</description>
     * <description><c>_($* #,##0.00_);_($* (#,##0.00);_($* "-"??_);_(@_)</c></description>
     * </item>
     * <item>
     * <description>45</description>
     * <description>Time</description>
     * <description><c>mm:ss</c></description>
     * </item>
     * <item>
     * <description>46</description>
     * <description>Time</description>
     * <description><c>[h]:mm:ss</c></description>
     * </item>
     * <item>
     * <description>47</description>
     * <description>Time</description>
     * <description><c>mm:ss.0</c></description>
     * </item>
     * <item>
     * <description>48</description>
     * <description>Scientific</description>
     * <description><c>##0.0E+0</c></description>
     * </item>
     * <item>
     * <description>49</description>
     * <description>Text</description>
     * <description><c>@</c></description>
     * </item>
     * </list>
     */
    setNumber(value: number) : void;
    /**
     * Gets or sets a value indicating whether a cell can be modified or not.
     * 
     * @remarks
     * Locking cells has no effect unless the worksheet is protected.
     */
    isLocked() : boolean;
    /**
     * Gets or sets a value indicating whether a cell can be modified or not.
     * @param value - The value to set.
     * 
     * @remarks
     * Locking cells has no effect unless the worksheet is protected.
     */
    setIsLocked(value: boolean) : void;
    /**
     * Represents the custom number format string of this style object.
     * If the custom number format is not set(For example, the number format is builtin), "" will be returned.
     * 
     * @remarks
     * The returned custom string is culture-independent.
     */
    getCustom() : string;
    /**
     * Gets and sets the culture-dependent pattern string for number format.
     * If no number format has been set for this object, null will be returned.
     * If number format is builtin, the pattern string corresponding to the builtin number will be returned.
     * 
     * @remarks
     * For builtin number format, both the pattern content(such as, one builtin date format is "m/d/y" for some locales,
     * but for some other locales it becomes  "d/m/y") and the format specifier(such as,
     * some locales is using character other than 'y' to represent the year part for date formatting)
     * are culture-dependent;
     * For user specified custom format, only format specifiers are changed according to the culture,
     * other parts of the formatting pattern will not be modified.
     */
    getCultureCustom() : string;
    /**
     * Gets and sets the culture-dependent pattern string for number format.
     * If no number format has been set for this object, null will be returned.
     * If number format is builtin, the pattern string corresponding to the builtin number will be returned.
     * @param value - The value to set.
     * 
     * @remarks
     * For builtin number format, both the pattern content(such as, one builtin date format is "m/d/y" for some locales,
     * but for some other locales it becomes  "d/m/y") and the format specifier(such as,
     * some locales is using character other than 'y' to represent the year part for date formatting)
     * are culture-dependent;
     * For user specified custom format, only format specifiers are changed according to the culture,
     * other parts of the formatting pattern will not be modified.
     */
    setCultureCustom(value: string) : void;
    /**
     * Gets the culture-independent pattern string for number format.
     * If no number format has been set for this object, null will be returned.
     * If number format is builtin, the pattern string corresponding to the builtin number will be returned.
     * 
     * @remarks
     * For builtin number formats, the returned pattern content is still culture-dependent,
     * such as, for some locales it returns "m/d/y" and for some other locales it returns "d/m/y".
     * The difference from <see cref="CultureCustom"/> is(that is also what culture-independent means):
     * the format specifiers and separators are kept as standard, such as '/' will always be used as datetime separator
     * and  "y" will always be used as the "year" part no matter what other special character is used for the specific locale.
     */
    getInvariantCustom() : string;
    /**
     * Represents if the formula will be hidden when the worksheet is protected.
     */
    isFormulaHidden() : boolean;
    /**
     * Represents if the formula will be hidden when the worksheet is protected.
     * @param value - The value to set.
     */
    setIsFormulaHidden(value: boolean) : void;
    /**
     * Represents if text automatically shrinks to fit in the available column width.
     */
    getShrinkToFit() : boolean;
    /**
     * Represents if text automatically shrinks to fit in the available column width.
     * @param value - The value to set.
     */
    setShrinkToFit(value: boolean) : void;
    /**
     * Represents text reading order.
     */
    getTextDirection() : TextDirectionType;
    /**
     * Represents text reading order.
     * @param value - The value to set.
     */
    setTextDirection(value: TextDirectionType) : void;
    /**
     * Indicates if the cells justified or distributed alignment should be used on the last line of text.
     * 
     * @remarks
     * This is typical for East Asian alignments but not typical in other contexts.
     */
    isJustifyDistributed() : boolean;
    /**
     * Indicates if the cells justified or distributed alignment should be used on the last line of text.
     * @param value - The value to set.
     * 
     * @remarks
     * This is typical for East Asian alignments but not typical in other contexts.
     */
    setIsJustifyDistributed(value: boolean) : void;
    /**
     * Indicates whether the cell's value starts with single quote mark.
     */
    getQuotePrefix() : boolean;
    /**
     * Indicates whether the cell's value starts with single quote mark.
     * @param value - The value to set.
     */
    setQuotePrefix(value: boolean) : void;
    /**
     * Indicates whether the cell shading is a gradient pattern.
     */
    isGradient() : boolean;
    /**
     * Indicates whether the cell shading is a gradient pattern.
     * @param value - The value to set.
     */
    setIsGradient(value: boolean) : void;
    /**
     * Indicates whether the number format is a percent format.
     */
    isPercent() : boolean;
    /**
     * Indicates whether the number format is a date format.
     */
    isDateTime() : boolean;
    /**
     * Sets the background color.
     * @param pattern - The pattern.
     * @param color1 - The foreground color.
     * @param color2 - The background color. Only works when pattern is not BackgroundType.None and BackgroundType.Solid.
     */
    setPatternColor(pattern: BackgroundType, color1: Color, color2: Color) : void;
    /**
     * Copies data from another style object
     * @param style - Source Style object
     * 
     * @remarks
     * This method does not copy the name of the style.
     * If you want to copy the name, please call the following codes after copying style:
     * destStyle.Name = style.Name.
     */
    copy(style: Style) : void;
    /**
     * Apply the named style to the styles of the cells which use this named style.
     * It works like clicking the "ok" button after you finished modifying the style.
     * Only applies for named style.
     */
    update() : void;
    /**
     * Checks whether the specified properties of the style have been modified.
     * Used for style of ConditionalFormattings to check whether the specified properties of this style should be used when applying the ConditionalFormattings on a cell.
     * @param modifyFlag - Style modified flags
     * @returns
     * true if the specified properties have been modified
     */
    isModified(modifyFlag: StyleModifyFlag) : boolean;
    /**
     * Serves as a hash function for a Style object.
     * @returns
     * A hash code for the current Object.
     * 
     * @remarks
     * This method is only for internal use.
     */
    getHashCode() : number;
    /**
     * Sets the borders of the style.
     * @param borderType - The border(s) to be set, can be combination of <see cref="BorderType"/>.
     * @param borderStyle - The style of the border.
     * @param borderColor - The color of the border.
     * @returns
     * Whether current border settings have been changed.
     */
    setBorder(borderType: BorderType, borderStyle: CellBorderType, borderColor: Color) : boolean;
    /**
     * Sets the borders of the style.
     * @param borderType - The border(s) to be set, can be combination of <see cref="BorderType"/>.
     * @param borderStyle - The style of the border.
     * @param borderColor - The color of the border.
     * @returns
     * Whether current border settings have been changed.
     */
    setBorder(borderType: BorderType, borderStyle: CellBorderType, borderColor: CellsColor) : boolean;
    /**
     * Sets the Custom number format string of a cell.
     * @param custom - Custom number format string, should be InvariantCulture pattern.
     * @param builtinPreference - If given Custom number format string matches one of the built-in number formats         /// corresponding to current regional settings, whether set the number format as built-in instead of Custom.
     */
    setCustom(custom: string, builtinPreference: boolean) : void;
    /**
     * Sets the specified fill to a two-color gradient.
     * @param color1 - One gradient color.
     * @param color2 - Two gradient color.
     * @param gradientStyleType - Gradient shading style.
     * @param variant - The gradient variant. Can be a value from 1 through 4, corresponding to one of the four variants on the Gradient tab in the Fill Effects dialog box. If style is GradientStyle.FromCenter, the Variant argument can only be 1 or 2.
     */
    setTwoColorGradient(color1: Color, color2: Color, gradientStyleType: GradientStyleType, variant: number) : void;
    /**
     * Get the two-color gradient setting.
     */
    getTwoColorGradientSetting() : TwoColorGradient;
    /**
     * Convert <see cref="Style"/> to JSON struct data.
     */
    toJson() : string;
}

/**
 * Represents flags which indicates applied formatting properties.
 */
export class StyleFlag {
    /**
     * Constructs an object with all flags as false.
     */
    constructor();
    /**
     * All properties will be applied.
     */
    getAll() : boolean;
    /**
     * All properties will be applied.
     * @param value - The value to set.
     */
    setAll(value: boolean) : void;
    /**
     * All borders settings will be applied.
     */
    getBorders() : boolean;
    /**
     * All borders settings will be applied.
     * @param value - The value to set.
     */
    setBorders(value: boolean) : void;
    /**
     * Left border settings will be applied.
     */
    getLeftBorder() : boolean;
    /**
     * Left border settings will be applied.
     * @param value - The value to set.
     */
    setLeftBorder(value: boolean) : void;
    /**
     * Right border settings will be applied.
     */
    getRightBorder() : boolean;
    /**
     * Right border settings will be applied.
     * @param value - The value to set.
     */
    setRightBorder(value: boolean) : void;
    /**
     * Top border settings will be applied.
     */
    getTopBorder() : boolean;
    /**
     * Top border settings will be applied.
     * @param value - The value to set.
     */
    setTopBorder(value: boolean) : void;
    /**
     * Bottom border settings will be applied.
     */
    getBottomBorder() : boolean;
    /**
     * Bottom border settings will be applied.
     * @param value - The value to set.
     */
    setBottomBorder(value: boolean) : void;
    /**
     * Diagonal down border settings will be applied.
     */
    getDiagonalDownBorder() : boolean;
    /**
     * Diagonal down border settings will be applied.
     * @param value - The value to set.
     */
    setDiagonalDownBorder(value: boolean) : void;
    /**
     * Diagonal up border settings will be applied.
     */
    getDiagonalUpBorder() : boolean;
    /**
     * Diagonal up border settings will be applied.
     * @param value - The value to set.
     */
    setDiagonalUpBorder(value: boolean) : void;
    /**
     * Font settings will be applied.
     */
    getFont() : boolean;
    /**
     * Font settings will be applied.
     * @param value - The value to set.
     */
    setFont(value: boolean) : void;
    /**
     * Font size setting will be applied.
     */
    getFontSize() : boolean;
    /**
     * Font size setting will be applied.
     * @param value - The value to set.
     */
    setFontSize(value: boolean) : void;
    /**
     * Font name setting will be applied.
     */
    getFontName() : boolean;
    /**
     * Font name setting will be applied.
     * @param value - The value to set.
     */
    setFontName(value: boolean) : void;
    /**
     * Font color setting will be applied.
     */
    getFontColor() : boolean;
    /**
     * Font color setting will be applied.
     * @param value - The value to set.
     */
    setFontColor(value: boolean) : void;
    /**
     * Font bold setting will be applied.
     */
    getFontBold() : boolean;
    /**
     * Font bold setting will be applied.
     * @param value - The value to set.
     */
    setFontBold(value: boolean) : void;
    /**
     * Font italic setting will be applied.
     */
    getFontItalic() : boolean;
    /**
     * Font italic setting will be applied.
     * @param value - The value to set.
     */
    setFontItalic(value: boolean) : void;
    /**
     * Font underline setting will be applied.
     */
    getFontUnderline() : boolean;
    /**
     * Font underline setting will be applied.
     * @param value - The value to set.
     */
    setFontUnderline(value: boolean) : void;
    /**
     * Font strikeout setting will be applied.
     */
    getFontStrike() : boolean;
    /**
     * Font strikeout setting will be applied.
     * @param value - The value to set.
     */
    setFontStrike(value: boolean) : void;
    /**
     * Font script setting will be applied.
     */
    getFontScript() : boolean;
    /**
     * Font script setting will be applied.
     * @param value - The value to set.
     */
    setFontScript(value: boolean) : void;
    /**
     * Number format setting will be applied.
     */
    get_NumberFormat() : boolean;
    /**
     * Number format setting will be applied.
     * @param value - The value to set.
     */
    setNumberFormat(value: boolean) : void;
    /**
     * Alignment setting will be applied.
     */
    getAlignments() : boolean;
    /**
     * Alignment setting will be applied.
     * @param value - The value to set.
     */
    setAlignments(value: boolean) : void;
    /**
     * Horizontal alignment setting will be applied.
     */
    getHorizontalAlignment() : boolean;
    /**
     * Horizontal alignment setting will be applied.
     * @param value - The value to set.
     */
    setHorizontalAlignment(value: boolean) : void;
    /**
     * Vertical alignment setting will be applied.
     */
    getVerticalAlignment() : boolean;
    /**
     * Vertical alignment setting will be applied.
     * @param value - The value to set.
     */
    setVerticalAlignment(value: boolean) : void;
    /**
     * Indent level setting will be applied.
     */
    getIndent() : boolean;
    /**
     * Indent level setting will be applied.
     * @param value - The value to set.
     */
    setIndent(value: boolean) : void;
    /**
     * Rotation setting will be applied.
     */
    getRotation() : boolean;
    /**
     * Rotation setting will be applied.
     * @param value - The value to set.
     */
    setRotation(value: boolean) : void;
    /**
     * Wrap text setting will be applied.
     */
    getWrapText() : boolean;
    /**
     * Wrap text setting will be applied.
     * @param value - The value to set.
     */
    setWrapText(value: boolean) : void;
    /**
     * Shrink to fit setting will be applied.
     */
    getShrinkToFit() : boolean;
    /**
     * Shrink to fit setting will be applied.
     * @param value - The value to set.
     */
    setShrinkToFit(value: boolean) : void;
    /**
     * Text direction setting will be applied.
     */
    getTextDirection() : boolean;
    /**
     * Text direction setting will be applied.
     * @param value - The value to set.
     */
    setTextDirection(value: boolean) : void;
    /**
     * Cell shading setting will be applied.
     */
    getCellShading() : boolean;
    /**
     * Cell shading setting will be applied.
     * @param value - The value to set.
     */
    setCellShading(value: boolean) : void;
    /**
     * Locked setting will be applied.
     */
    getLocked() : boolean;
    /**
     * Locked setting will be applied.
     * @param value - The value to set.
     */
    setLocked(value: boolean) : void;
    /**
     * Hide formula setting will be applied.
     */
    getHideFormula() : boolean;
    /**
     * Hide formula setting will be applied.
     * @param value - The value to set.
     */
    setHideFormula(value: boolean) : void;
    /**
     * Hide formula setting will be applied.
     */
    getQuotePrefix() : boolean;
    /**
     * Hide formula setting will be applied.
     * @param value - The value to set.
     */
    setQuotePrefix(value: boolean) : void;
}

/**
 * The style modified flags.
 */
export enum StyleModifyFlag {
    /**
     * Indicates whether left border has been modified for the style.
     */
    LeftBorder = 256,
    /**
     * Indicates whether right border has been modified for the style.
     */
    RightBorder = 512,
    /**
     * Indicates whether top border has been modified for the style.
     */
    TopBorder = 1024,
    /**
     * Indicates whether bottom border has been modified for the style.
     */
    BottomBorder = 2048,
    /**
     * Indicates whether diagonal-down border has been modified for the style.
     */
    DiagonalDownBorder = 4096,
    /**
     * Indicates whether diagonal-up border has been modified for the style.
     */
    DiagonalUpBorder = 8192,
    /**
     * Indicates whether one or more diagonal borders(<see cref="DiagonalDownBorder"/>,
     * <see cref="DiagonalUpBorder"/>) have been modified for the style.
     */
    Diagonal = 12288,
    /**
     * Indicates whether horizontal border has been modified for the style.
     * Only for dynamic style, such as conditional formatting.
     */
    HorizontalBorder = 32,
    /**
     * Indicates whether vertical border has been modified for the style.
     * Only for dynamic style, such as conditional formatting.
     */
    VerticalBorder = 64,
    /**
     * Indicates whether one or more borders(<see cref="LeftBorder"/>,
     * <see cref="RightBorder"/>, <see cref="TopBorder"/>, <see cref="BottomBorder"/>,
     * <see cref="Diagonal"/>, <see cref="HorizontalBorder"/>, <see cref="VerticalBorder"/>)
     * have been modified for the style.
     */
    Borders = 16224,
    /**
     * Indicates whether numberformat has been modified.
     */
    NumberFormat = 16384,
    /**
     * Indicates whether horizontal alignment has been modified.
     */
    HorizontalAlignment = 32768,
    /**
     * Indicates whether vertical alignment has been modified.
     */
    VerticalAlignment = 65536,
    /**
     * Indicates whether indent property has been modified.
     */
    Indent = 131072,
    /**
     * Indicates whether rotation property has been modified.
     */
    Rotation = 262144,
    /**
     * Indicates whether wrap text property has been modified.
     */
    WrapText = 524288,
    /**
     * Indicates whether shrink to fit property has been modified.
     */
    ShrinkToFit = 1048576,
    /**
     * Indicates whether text direction property has been modified.
     */
    TextDirection = 2097152,
    /**
     * Indicates whether relative indent property has been modified for the style.
     * Only for dynamic style, such as conditional formatting.
     */
    RelativeIndent = 128,
    /**
     * Indicates whether one or more alignment-related properties(<see cref="HorizontalAlignment"/>,
     * <see cref="VerticalAlignment"/>, <see cref="Rotation"/>, <see cref="WrapText"/>,
     * <see cref="WrapText"/>, <see cref="Indent"/>, <see cref="ShrinkToFit"/>, <see cref="TextDirection"/>,
     * <see cref="RelativeIndent"/>) have been modified.
     */
    AlignmentSettings = 4161664,
    /**
     * Indicates whether pattern of the shading has been modified.
     */
    Pattern = 4194304,
    /**
     * Indicates whether foreground color has been modified.
     */
    ForegroundColor = 8388608,
    /**
     * Indicates whether background color has been modified.
     */
    BackgroundColor = 16777216,
    /**
     * Indicates whether one or more shading-related properties(<see cref="Pattern"/>,
     * <see cref="ForegroundColor"/>, <see cref="BackgroundColor"/>) have been modified.
     */
    CellShading = 29360128,
    /**
     * Indicates whether locked property has been modified.
     */
    Locked = 67108864,
    /**
     * Indicates whether hide formula has been modified.
     */
    HideFormula = 134217728,
    /**
     * Indicates whether one or more protection-related properties(<see cref="Locked"/>,
     * <see cref="HideFormula"/>) have been modified.
     */
    ProtectionSettings = 201326592,
    /**
     * Indicates whether font size has been modified.
     */
    FontSize = 1,
    /**
     * Indicates whether font name has been modified.
     */
    FontName = 2,
    /**
     * Indicates whether font color has been modified.
     */
    FontColor = 3,
    /**
     * Indicates whether font weight has been modified.
     */
    FontWeight = 4,
    /**
     * Indicates whether italic property of font has been modified.
     */
    FontItalic = 5,
    /**
     * Indicates whether underline property of font has been modified.
     */
    FontUnderline = 6,
    /**
     * Indicates whether strike property font has been modified.
     */
    FontStrike = 7,
    /**
     * Indicates whether subscript or superscript property of font has been modified.
     */
    FontScript = 8,
    /**
     * Indicates whether font family has been modified.
     */
    FontFamily = 9,
    /**
     * Indicates whether charset of the font has been modified.
     */
    FontCharset = 10,
    /**
     * unused.
     */
    FontScheme = 11,
    /**
     * unused.
     */
    FontDirty = 12,
    /**
     * unused.
     */
    FontSpellingError = 13,
    /**
     * unused.
     */
    FontUFillTx = 14,
    /**
     * unused.
     */
    FontSpacing = 15,
    /**
     * unused.
     */
    FontKerning = 16,
    /**
     * unused.
     */
    FontEqualize = 17,
    /**
     * unused.
     */
    FontCap = 18,
    /**
     */
    FontVerticalText = 19,
    /**
     * Indicates whether one or more properties have been modified for the font of the style.
     */
    Font = 31,
    /**
     * Indicates whether one or more properties have been modified for the style.
     */
    All = 234881023,
}

/**
 * Represents the table's data source type.
 */
export enum TableDataSourceType {
    /**
     * Excel Worksheet Table
     */
    Worksheet = 0,
    /**
     * Read-write SharePoint linked List
     */
    SharePoint = 1,
    /**
     * XML mapper Table
     */
    XML = 2,
    /**
     * Query Table
     */
    QueryTable = 3,
}

/**
 * Represents the element of the table style.
 */
export class TableStyleElement {
    /**
     * Number of rows or columns in a single band of striping.
     * Applies only when type is firstRowStripe, secondRowStripe, firstColumnStripe, or secondColumnStripe.
     */
    getSize() : number;
    /**
     * Number of rows or columns in a single band of striping.
     * Applies only when type is firstRowStripe, secondRowStripe, firstColumnStripe, or secondColumnStripe.
     * @param value - The value to set.
     */
    setSize(value: number) : void;
    /**
     * Gets the element type.
     */
    getType() : TableStyleElementType;
    /**
     * Gets the element style.
     * @returns
     * Returns the <see cref="Style"/> object.
     */
    getElementStyle() : Style;
    /**
     * Sets the element style.
     * @param style - The element style.
     */
    setElementStyle(style: Style) : void;
}

/**
 * Represents all elements of the table style.
 */
export class TableStyleElementCollection {
    /**
     * Gets an element of the table style by the index.
     * @param index - The index.
     * @returns
     * Returns <see cref="TableStyleElement"/> object
     */
    get(index: number) : TableStyleElement;
    /**
     * Gets the element of the table style by the element type.
     * @param type - The element type.
     * @returns
     * Returns <see cref="TableStyleElement"/> object
     */
    get(type: TableStyleElementType) : TableStyleElement;
    /**
     * Adds an element.
     * @param type - The type of the element
     * @returns
     * Returns the index of the element in the list.
     */
    add(type: TableStyleElementType) : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the table style.
 */
export class TableStyle {
    /**
     * Gets the name of table style.
     */
    getName() : string;
    /**
     * Gets all elements of the table style.
     */
    getTableStyleElements() : TableStyleElementCollection;
}

/**
 * Represents the Table or PivotTable style element type.
 */
export enum TableStyleElementType {
    /**
     * Table style element that applies to PivotTable's blank rows.
     */
    BlankRow = 18,
    /**
     * Table style element that applies to table's first column.
     */
    FirstColumn = 8,
    /**
     * Table style element that applies to table's first column stripes.
     */
    FirstColumnStripe = 3,
    /**
     * Table style element that applies to PivotTable's first column subheading.
     */
    FirstColumnSubheading = 22,
    /**
     * Table style element that applies to table's first header row cell.
     */
    FirstHeaderCell = 11,
    /**
     * Table style element that applies to table's first row stripes.
     */
    FirstRowStripe = 5,
    /**
     * Table style element that applies to PivotTable's first row subheading.
     */
    FirstRowSubheading = 25,
    /**
     * Table style element that applies to PivotTable's first subtotal column.
     */
    FirstSubtotalColumn = 15,
    /**
     * Table style element that applies to pivot table's first subtotal row.
     */
    FirstSubtotalRow = 19,
    /**
     * Table style element that applies to pivot table's grand total column.
     */
    GrandTotalColumn = 28,
    /**
     * Table style element that applies to pivot table's grand total row.
     */
    GrandTotalRow = 29,
    /**
     * Table style element that applies to table's first total row cell.
     */
    FirstTotalCell = 13,
    /**
     * Table style element that applies to table's header row.
     */
    HeaderRow = 9,
    /**
     * Table style element that applies to table's last column.
     */
    LastColumn = 7,
    /**
     * Table style element that applies to table's last header row cell.
     */
    LastHeaderCell = 12,
    /**
     * Table style element that applies to table's last total row cell.
     */
    LastTotalCell = 14,
    /**
     * Table style element that applies to pivot table's page field labels.
     */
    PageFieldLabels = 1,
    /**
     * Table style element that applies to pivot table's page field values.
     */
    PageFieldValues = 2,
    /**
     * Table style element that applies to table's second column stripes.
     */
    SecondColumnStripe = 4,
    /**
     * Table style element that applies to pivot table's second column subheading.
     */
    SecondColumnSubheading = 23,
    /**
     * Table style element that applies to table's second row stripes.
     */
    SecondRowStripe = 6,
    /**
     * Table style element that applies to pivot table's second row subheading.
     */
    SecondRowSubheading = 26,
    /**
     * Table style element that applies to PivotTable's second subtotal column.
     */
    SecondSubtotalColumn = 16,
    /**
     * Table style element that applies to PivotTable's second subtotal row.
     */
    SecondSubtotalRow = 20,
    /**
     * Table style element that applies to PivotTable's third column subheading.
     */
    ThirdColumnSubheading = 24,
    /**
     * Table style element that applies to PivotTable's third row subheading.
     */
    ThirdRowSubheading = 27,
    /**
     * Table style element that applies to pivot table's third subtotal column.
     */
    ThirdSubtotalColumn = 17,
    /**
     * Table style element that applies to PivotTable's third subtotal row.
     */
    ThirdSubtotalRow = 21,
    /**
     * Table style element that applies to table's total row.
     */
    TotalRow = 10,
    /**
     * Table style element that applies to table's entire content.
     */
    WholeTable = 0,
}

/**
 * Represents all custom table styles.
 */
export class TableStyleCollection {
    /**
     * Gets the table style by the index.
     * @param index - The position of the table style in the list.
     * @returns
     * The table style object.
     */
    get(index: number) : TableStyle;
    /**
     * Gets the table style by the name.
     * @param name - The table style name.
     * @returns
     * The table style object.
     */
    get(name: string) : TableStyle;
    /**
     * Gets and sets the default style name of the table.
     */
    getDefaultTableStyleName() : string;
    /**
     * Gets and sets the default style name of the table.
     * @param value - The value to set.
     */
    setDefaultTableStyleName(value: string) : void;
    /**
     * Gets and sets the  default style name of pivot table .
     */
    getDefaultPivotStyleName() : string;
    /**
     * Gets and sets the  default style name of pivot table .
     * @param value - The value to set.
     */
    setDefaultPivotStyleName(value: string) : void;
    /**
     * Adds a custom table style.
     * @param name - The table style name.
     * @returns
     * The index of the table style.
     */
    addTableStyle(name: string) : number;
    /**
     * Adds a custom pivot table style.
     * @param name - The pivot table style name.
     * @returns
     * The index of the pivot table style.
     */
    addPivotTableStyle(name: string) : number;
    /**
     * Gets the builtin table style
     * @param type - The builtin table style type.
     */
    getBuiltinTableStyle(type: TableStyleType) : TableStyle;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the built-in table style type.
 */
export enum TableStyleType {
    /**
     */
    None = 0,
    /**
     */
    TableStyleLight1 = 1,
    /**
     */
    TableStyleLight2 = 2,
    /**
     */
    TableStyleLight3 = 3,
    /**
     */
    TableStyleLight4 = 4,
    /**
     */
    TableStyleLight5 = 5,
    /**
     */
    TableStyleLight6 = 6,
    /**
     */
    TableStyleLight7 = 7,
    /**
     */
    TableStyleLight8 = 8,
    /**
     */
    TableStyleLight9 = 9,
    /**
     */
    TableStyleLight10 = 10,
    /**
     */
    TableStyleLight11 = 11,
    /**
     */
    TableStyleLight12 = 12,
    /**
     */
    TableStyleLight13 = 13,
    /**
     */
    TableStyleLight14 = 14,
    /**
     */
    TableStyleLight15 = 15,
    /**
     */
    TableStyleLight16 = 16,
    /**
     */
    TableStyleLight17 = 17,
    /**
     */
    TableStyleLight18 = 18,
    /**
     */
    TableStyleLight19 = 19,
    /**
     */
    TableStyleLight20 = 20,
    /**
     */
    TableStyleLight21 = 21,
    /**
     */
    TableStyleMedium1 = 22,
    /**
     */
    TableStyleMedium2 = 23,
    /**
     */
    TableStyleMedium3 = 24,
    /**
     */
    TableStyleMedium4 = 25,
    /**
     */
    TableStyleMedium5 = 26,
    /**
     */
    TableStyleMedium6 = 27,
    /**
     */
    TableStyleMedium7 = 28,
    /**
     */
    TableStyleMedium8 = 29,
    /**
     */
    TableStyleMedium9 = 30,
    /**
     */
    TableStyleMedium10 = 31,
    /**
     */
    TableStyleMedium11 = 32,
    /**
     */
    TableStyleMedium12 = 33,
    /**
     */
    TableStyleMedium13 = 34,
    /**
     */
    TableStyleMedium14 = 35,
    /**
     */
    TableStyleMedium15 = 36,
    /**
     */
    TableStyleMedium16 = 37,
    /**
     */
    TableStyleMedium17 = 38,
    /**
     */
    TableStyleMedium18 = 39,
    /**
     */
    TableStyleMedium19 = 40,
    /**
     */
    TableStyleMedium20 = 41,
    /**
     */
    TableStyleMedium21 = 42,
    /**
     */
    TableStyleMedium22 = 43,
    /**
     */
    TableStyleMedium23 = 44,
    /**
     */
    TableStyleMedium24 = 45,
    /**
     */
    TableStyleMedium25 = 46,
    /**
     */
    TableStyleMedium26 = 47,
    /**
     */
    TableStyleMedium27 = 48,
    /**
     */
    TableStyleMedium28 = 49,
    /**
     */
    TableStyleDark1 = 50,
    /**
     */
    TableStyleDark2 = 51,
    /**
     */
    TableStyleDark3 = 52,
    /**
     */
    TableStyleDark4 = 53,
    /**
     */
    TableStyleDark5 = 54,
    /**
     */
    TableStyleDark6 = 55,
    /**
     */
    TableStyleDark7 = 56,
    /**
     */
    TableStyleDark8 = 57,
    /**
     */
    TableStyleDark9 = 58,
    /**
     */
    TableStyleDark10 = 59,
    /**
     */
    TableStyleDark11 = 60,
    /**
     */
    Custom = 61,
}

/**
 * Enumerates text alignment types.
 */
export enum TextAlignmentType {
    /**
     * Represents general text alignment.
     */
    General = 1792,
    /**
     * Represents bottom text alignment.
     */
    Bottom = 528,
    /**
     * Represents center text alignment.
     */
    Center = 1802,
    /**
     * Represents center across text alignment.
     */
    CenterAcross = 1286,
    /**
     * Represents distributed text alignment.
     */
    Distributed = 807,
    /**
     * Represents fill text alignment.
     */
    Fill = 1284,
    /**
     * Represents justify text alignment.
     */
    Justify = 1821,
    /**
     * Represents left text alignment.
     */
    Left = 257,
    /**
     * Represents right text alignment.
     */
    Right = 259,
    /**
     * Represents top text alignment.
     */
    Top = 512,
    /**
     * Aligns the text with an adjusted kashida length for Arabic text.
     */
    JustifiedLow = 832,
    /**
     * Distributes Thai text specially, because each character is treated as a word.
     */
    ThaiDistributed = 896,
}

/**
 * Encapsulates the object that represents a textbox in a spreadsheet.
 */
export class TextBox extends Shape {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Shape);
    /**
     * Get the specified math paragraph from the TextBody property of the TextBox object.
     * Notice:
     * (1) Returns NULL when the index is out of bounds or not found.
     * (2) Also returns NULL if the specified index position is not a math paragraph.
     * @param index - The position index of the math paragraph, starting from 0.
     * @returns
     * Returns the math paragraph specified by index.
     */
    getEquationParagraph(index: number) : EquationNode;
    /**
     * Gets the first math paragraph from the TextBody property of the TextBox object.
     * @returns
     * If there has math paragraph, returns the first one, otherwise returns null.
     */
    getEquationParagraph() : EquationNode;
}

/**
 * Encapsulates a collection of <see cref="TextBox"/> objects.
 */
export class TextBoxCollection {
    /**
     * Gets the <see cref="TextBox"/> element at the specified index.
     * @param index - The zero based index of the element.
     * @returns
     * The element at the specified index.
     */
    get(index: number) : TextBox;
    /**
     * Gets the <see cref="TextBox"/> element by the name.
     * @param name - The name of the text box.
     */
    get(name: string) : TextBox;
    /**
     * Adds a textbox to the collection.
     * @param upperLeftRow - Upper left row index.
     * @param upperLeftColumn - Upper left column index.
     * @param height - Height of textbox, in unit of pixel.
     * @param width - Width of textbox, in unit of pixel.
     * @returns
     * <see cref="TextBox"/> object index.
     */
    add(upperLeftRow: number, upperLeftColumn: number, height: number, width: number) : number;
    /**
     * Remove a text box from the file.
     * @param index - The text box index.
     */
    removeAt(index: number) : void;
    /**
     * Clear all text boxes.
     */
    clear() : void;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the direction of the text flow for this paragraph.
 */
export enum TextDirectionType {
    /**
     */
    Context = 0,
    /**
     */
    LeftToRight = 1,
    /**
     */
    RightToLeft = 2,
}

/**
 * Enumerates text orientation types.
 */
export enum TextOrientationType {
    /**
     * Rotates text with 90 degrees clockwise.
     */
    ClockWise = 0,
    /**
     * Rotates text with 90 degrees counterclockwise.
     */
    CounterClockWise = 1,
    /**
     * Represents the default value.
     */
    NoRotation = 2,
    /**
     * Displays text from top to bottom of the cell. Stacked text.
     */
    TopToBottom = 3,
}

/**
 * Represents the preset texture type.
 */
export enum TextureType {
    /**
     * Represents Blue Tissue Paper texture type.
     */
    BlueTissuePaper = 0,
    /**
     * Represents Bouquet texture type.
     */
    Bouquet = 1,
    /**
     * Represents Brown Marble texture type.
     */
    BrownMarble = 2,
    /**
     * Represents Canvas texture type.
     */
    Canvas = 3,
    /**
     * Represents Cork texture type.
     */
    Cork = 4,
    /**
     * Represents Denim texture type.
     */
    Denim = 5,
    /**
     * Represents Fish Fossil texture type.
     */
    FishFossil = 6,
    /**
     * Represents Granite texture type.
     */
    Granite = 7,
    /**
     * Represents Green Marble texture type.
     */
    GreenMarble = 8,
    /**
     * Represents Medium Wood texture type.
     */
    MediumWood = 9,
    /**
     * Represents Newsprint texture type.
     */
    Newsprint = 10,
    /**
     * Represents Oak texture type.
     */
    Oak = 11,
    /**
     * Represents Paper Bag texture type.
     */
    PaperBag = 12,
    /**
     * Represents Papyrus texture type.
     */
    Papyrus = 13,
    /**
     * Represents Parchment texture type.
     */
    Parchment = 14,
    /**
     * Represents Pink Tissue Paper texture type.
     */
    PinkTissuePaper = 15,
    /**
     * Represents Purple Mesh texture type.
     */
    PurpleMesh = 16,
    /**
     * Represents Recycled Paper texture type.
     */
    RecycledPaper = 17,
    /**
     * Represents Sand texture type.
     */
    Sand = 18,
    /**
     * Represents Stationery texture type.
     */
    Stationery = 19,
    /**
     * Represents Walnut Droplets texture type.
     */
    Walnut = 20,
    /**
     * Represents Water Droplets texture type.
     */
    WaterDroplets = 21,
    /**
     * Represents White Marble texture type.
     */
    WhiteMarble = 22,
    /**
     * Represents Woven Mat texture type.
     */
    WovenMat = 23,
    /**
     * Represents Unknown texture type.
     */
    Unknown = 24,
}

/**
 * Represents a theme color.
 */
export class ThemeColor {
    /**
     * @param type - The theme type.
     * @param tint - The tint value.
     */
    constructor(type: ThemeColorType, tint: number);
    /**
     * Gets and sets the theme type.
     */
    getColorType() : ThemeColorType;
    /**
     * Gets and sets the theme type.
     * @param value - The value to set.
     */
    setColorType(value: ThemeColorType) : void;
    /**
     * Gets and sets the tint value.
     * 
     * @remarks
     * The tint value is stored as a double from -1.0 .. 1.0, where -1.0 means 100% darken
     * and 1.0 means 100% lighten. Also, 0.0 means no change.
     */
    getTint() : number;
    /**
     * Gets and sets the tint value.
     * @param value - The value to set.
     * 
     * @remarks
     * The tint value is stored as a double from -1.0 .. 1.0, where -1.0 means 100% darken
     * and 1.0 means 100% lighten. Also, 0.0 means no change.
     */
    setTint(value: number) : void;
}

/**
 * Enumerates  the theme color types.
 */
export enum ThemeColorType {
    /**
     */
    Background1 = 0,
    /**
     */
    Text1 = 1,
    /**
     */
    Background2 = 2,
    /**
     */
    Text2 = 3,
    /**
     */
    Accent1 = 4,
    /**
     */
    Accent2 = 5,
    /**
     */
    Accent3 = 6,
    /**
     */
    Accent4 = 7,
    /**
     */
    Accent5 = 8,
    /**
     */
    Accent6 = 9,
    /**
     */
    Hyperlink = 10,
    /**
     */
    FollowedHyperlink = 11,
    /**
     * Inner used.
     * A color used in theme definitions which means to use the color of the style.
     */
    StyleColor = 12,
}

/**
 * Represents the position type of tick-mark labels on the specified axis.
 */
export enum TickLabelPositionType {
    /**
     * Position type is high.
     */
    High = 0,
    /**
     * Position type is low.
     */
    Low = 1,
    /**
     * Position type is next to axis.
     */
    NextToAxis = 2,
    /**
     * Position type is none.
     */
    None = 3,
}

/**
 * Represents the tick-mark labels associated with tick marks on a chart axis.
 */
export class TickLabels {
    /**
     * Returns a <see cref="Font"/> object that represents the font of the specified TickLabels object.
     */
    getFont() : Font;
    /**
     * True if the text in the object changes font size when the object size changes. The default value is True.
     */
    getAutoScaleFont() : boolean;
    /**
     * True if the text in the object changes font size when the object size changes. The default value is True.
     * @param value - The value to set.
     */
    setAutoScaleFont(value: boolean) : void;
    /**
     * Gets and sets the display mode of the background
     */
    getBackgroundMode() : BackgroundMode;
    /**
     * Gets and sets the display mode of the background
     * @param value - The value to set.
     */
    setBackgroundMode(value: BackgroundMode) : void;
    /**
     * Represents text rotation angle in clockwise.
     * 
     * @remarks
     * <br>0: Not rotated.</br>
     * <br>255: Top to Bottom.</br>
     * <br>-90: Downward.</br>
     * <br>90: Upward.</br>
     */
    getRotationAngle() : number;
    /**
     * Represents text rotation angle in clockwise.
     * @param value - The value to set.
     * 
     * @remarks
     * <br>0: Not rotated.</br>
     * <br>255: Top to Bottom.</br>
     * <br>-90: Downward.</br>
     * <br>90: Upward.</br>
     */
    setRotationAngle(value: number) : void;
    /**
     * Indicates whether the rotation angle is automatic
     */
    isAutomaticRotation() : boolean;
    /**
     * Indicates whether the rotation angle is automatic
     * @param value - The value to set.
     */
    setIsAutomaticRotation(value: boolean) : void;
    /**
     * Represents the format string for the TickLabels object.
     * 
     * @remarks
     * The formatting string is same as a custom format string setting to a cell. For example, "$0".
     */
    get_NumberFormat() : string;
    /**
     * Represents the format string for the TickLabels object.
     * @param value - The value to set.
     * 
     * @remarks
     * The formatting string is same as a custom format string setting to a cell. For example, "$0".
     */
    setNumberFormat(value: string) : void;
    /**
     * Represents the format number for the TickLabels object.
     */
    getNumber() : number;
    /**
     * Represents the format number for the TickLabels object.
     * @param value - The value to set.
     */
    setNumber(value: number) : void;
    /**
     * True if the number format is linked to the cells
     * (so that the number format changes in the labels when it changes in the cells).
     */
    getNumberFormatLinked() : boolean;
    /**
     * True if the number format is linked to the cells
     * (so that the number format changes in the labels when it changes in the cells).
     * @param value - The value to set.
     */
    setNumberFormatLinked(value: boolean) : void;
    /**
     * Gets and sets the display number format of tick labels.
     */
    getDisplayNumberFormat() : string;
    /**
     * Gets and sets the distance between the axis labels and the axis line.
     * 
     * @remarks
     * The default distance is 100 percent, which represents the default spacing between the axis labels and the axis line.
     * The value can be an integer percentage from 0 through 1000, relative to the axis label’s font size.
     */
    getOffset() : number;
    /**
     * Gets and sets the distance between the axis labels and the axis line.
     * @param value - The value to set.
     * 
     * @remarks
     * The default distance is 100 percent, which represents the default spacing between the axis labels and the axis line.
     * The value can be an integer percentage from 0 through 1000, relative to the axis label’s font size.
     */
    setOffset(value: number) : void;
    /**
     * Represents text reading order.
     */
    getReadingOrder() : TextDirectionType;
    /**
     * Represents text reading order.
     * @param value - The value to set.
     */
    setReadingOrder(value: TextDirectionType) : void;
    /**
     * Gets and sets the direction of text.
     */
    getDirectionType() : ChartTextDirectionType;
    /**
     * Gets and sets the direction of text.
     * @param value - The value to set.
     */
    setDirectionType(value: ChartTextDirectionType) : void;
    /**
     * Gets the display tick labels of the axis.
     * 
     * @remarks
     * Only available after calling <see cref="Chart.Calculate()"/> method.
     */
    getTickLabelItems() : TickLabelItem[];
    /**
     * Gets and sets the text alignment for the tick labels on the axis.
     */
    getAlignmentType() : TickLabelAlignmentType;
    /**
     * Gets and sets the text alignment for the tick labels on the axis.
     * @param value - The value to set.
     */
    setAlignmentType(value: TickLabelAlignmentType) : void;
}

/**
 * Represents the tick mark type for the specified axis.
 */
export enum TickMarkType {
    /**
     * Tick mark type is Cross.
     */
    Cross = 0,
    /**
     * Tick mark type is Inside.
     */
    Inside = 1,
    /**
     * Tick mark type is None.
     */
    None = 2,
    /**
     * Tick mark type is Outside
     */
    Outside = 3,
}

/**
 * Encapsulates the object that represents the title of chart or axis.
 */
export class Title extends ChartTextFrame {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: ChartTextFrame);
    /**
     * Gets or sets the text of display unit label.
     */
    getText() : string;
    /**
     * Gets or sets the text of display unit label.
     * @param value - The value to set.
     */
    setText(value: string) : void;
    /**
     * Represents whether the title is visible.
     */
    isVisible() : boolean;
    /**
     * Represents whether the title is visible.
     * @param value - The value to set.
     */
    setIsVisible(value: boolean) : void;
    /**
     * Gets or sets the x coordinate of the upper left corner in units of 1/4000 of the chart area.
     */
    getX() : number;
    /**
     * Gets or sets the x coordinate of the upper left corner in units of 1/4000 of the chart area.
     * @param value - The value to set.
     */
    setX(value: number) : void;
    /**
     * Gets or sets the y coordinate of the upper left corner in units of 1/4000 of the chart area.
     */
    getY() : number;
    /**
     * Gets or sets the y coordinate of the upper left corner in units of 1/4000 of the chart area.
     * @param value - The value to set.
     */
    setY(value: number) : void;
    /**
     * Represents overlay centered title on chart without resizing chart.
     */
    getOverLay() : boolean;
    /**
     * Represents overlay centered title on chart without resizing chart.
     * @param value - The value to set.
     */
    setOverLay(value: boolean) : void;
    /**
     * Gets rich text formatting of this Title.
     * @returns
     * returns FontSetting array
     */
    characters() : FontSetting[];
    /**
     * Returns a Characters object that represents a range of characters within the text.
     * @param startIndex - The index of the start of the character.
     * @param length - The number of characters.
     * @returns
     * Characters object.
     */
    characters(startIndex: number, length: number) : FontSetting;
}

/**
 * Determines the type of calculation in the Totals row of the list column.
 */
export enum TotalsCalculation {
    /**
     * Represents Sum totals calculation.
     */
    Sum = 6,
    /**
     * Represents Count totals calculation.
     */
    Count = 2,
    /**
     * Represents Average totals calculation.
     */
    Average = 1,
    /**
     * Represents Max totals calculation.
     */
    Max = 4,
    /**
     * Represents Min totals calculation.
     */
    Min = 5,
    /**
     * Represents Var totals calculation.
     */
    Var = 8,
    /**
     * Represents Count Nums totals calculation.
     */
    CountNums = 3,
    /**
     * Represents StdDev totals calculation.
     */
    StdDev = 7,
    /**
     * Represents No totals calculation.
     */
    None = 0,
    /**
     * Represents custom calculation.
     */
    Custom = 9,
}

/**
 * Represents a trendline in a chart.
 */
export class Trendline extends Line {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Line);
    /**
     * Returns if Microsoft Excel automatically determines the name of the trendline.
     */
    isNameAuto() : boolean;
    /**
     * Returns if Microsoft Excel automatically determines the name of the trendline.
     * @param value - The value to set.
     */
    setIsNameAuto(value: boolean) : void;
    /**
     * Returns the trendline type.
     */
    getType() : TrendlineType;
    /**
     * Returns the name of the trendline.
     */
    getName() : string;
    /**
     * Returns the name of the trendline.
     * @param value - The value to set.
     */
    setName(value: string) : void;
    /**
     * Returns or sets the trendline order (an integer greater than 1) when the trendline type is Polynomial.
     * The order must be between 2 and 6.
     */
    getOrder() : number;
    /**
     * Returns or sets the trendline order (an integer greater than 1) when the trendline type is Polynomial.
     * The order must be between 2 and 6.
     * @param value - The value to set.
     */
    setOrder(value: number) : void;
    /**
     * Returns or sets the period for the moving-average trendline.
     * 
     * @remarks
     * This value should be between 2 and 255.
     * And it must be less than the number of the chart points in the series
     */
    getPeriod() : number;
    /**
     * Returns or sets the period for the moving-average trendline.
     * @param value - The value to set.
     * 
     * @remarks
     * This value should be between 2 and 255.
     * And it must be less than the number of the chart points in the series
     */
    setPeriod(value: number) : void;
    /**
     * Returns or sets the number of periods (or units on a scatter chart) that the trendline extends forward.
     * The number of periods must be greater than or equal to zero.
     */
    getForward() : number;
    /**
     * Returns or sets the number of periods (or units on a scatter chart) that the trendline extends forward.
     * The number of periods must be greater than or equal to zero.
     * @param value - The value to set.
     */
    setForward(value: number) : void;
    /**
     * Returns or sets the number of periods (or units on a scatter chart) that the trendline extends backward.
     * The number of periods must be greater than or equal to zero.
     * If the chart type is column ,the number of periods must be between 0 and 0.5
     */
    getBackward() : number;
    /**
     * Returns or sets the number of periods (or units on a scatter chart) that the trendline extends backward.
     * The number of periods must be greater than or equal to zero.
     * If the chart type is column ,the number of periods must be between 0 and 0.5
     * @param value - The value to set.
     */
    setBackward(value: number) : void;
    /**
     * Represents if the equation for the trendline is displayed on the chart (in the same data label as the R-squared value). Setting this property to True automatically turns on data labels.
     */
    getDisplayEquation() : boolean;
    /**
     * Represents if the equation for the trendline is displayed on the chart (in the same data label as the R-squared value). Setting this property to True automatically turns on data labels.
     * @param value - The value to set.
     */
    setDisplayEquation(value: boolean) : void;
    /**
     * Represents if the R-squared value of the trendline is displayed on the chart (in the same data label as the equation). Setting this property to True automatically turns on data labels.
     */
    getDisplayRSquared() : boolean;
    /**
     * Represents if the R-squared value of the trendline is displayed on the chart (in the same data label as the equation). Setting this property to True automatically turns on data labels.
     * @param value - The value to set.
     */
    setDisplayRSquared(value: boolean) : void;
    /**
     * Returns or sets the point where the trendline crosses the value axis.
     */
    getIntercept() : number;
    /**
     * Returns or sets the point where the trendline crosses the value axis.
     * @param value - The value to set.
     */
    setIntercept(value: number) : void;
    /**
     * Represents the DataLabels object for the specified series.
     */
    getDataLabels() : DataLabels;
    /**
     * Gets the legend entry according to this trendline
     */
    getLegendEntry() : LegendEntry;
}

/**
 * Represents a collection of all the <see cref="Trendline"/> objects for the specified data series.
 */
export class TrendlineCollection {
    /**
     * Gets a <see cref="Trendline"/> object by its index.
     */
    get(index: number) : Trendline;
    /**
     * Adds a <see cref="Trendline"/> object to this collection with specified type.
     * @param type - Trendline type.
     * @returns
     * <see cref="Trendline"/> object index.
     */
    add(type: TrendlineType) : number;
    /**
     * Adds a <see cref="Trendline"/> object to this collection with specified type and name.
     * @param type - Trendline type.
     * @param name - Trendline name.
     * @returns
     * <see cref="Trendline"/> object index.
     */
    add(type: TrendlineType, name: string) : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the trendline type.
 */
export enum TrendlineType {
    /**
     * Exponential
     */
    Exponential = 0,
    /**
     * Linear
     */
    Linear = 1,
    /**
     * Logarithmic
     */
    Logarithmic = 2,
    /**
     * MovingAverage
     */
    MovingAverage = 3,
    /**
     * Polynomial
     */
    Polynomial = 4,
    /**
     * Power
     */
    Power = 5,
}

/**
 * Represents the list of <see cref="FontSetting"/>.
 */
export class FontSettingCollection {
    /**
     * Gets the <see cref="FontSetting"/> by the index.
     * @param index - The index.
     */
    get(index: number) : FontSetting;
    /**
     * Represents the alignment setting of the text body.
     */
    getTextAlignment() : ShapeTextAlignment;
    /**
     * Gets all paragraphs.
     */
    getTextParagraphs() : TextParagraphCollection;
    /**
     * Gets and sets the text of the shape.
     */
    getText() : string;
    /**
     * Gets and sets the text of the shape.
     * @param value - The value to set.
     */
    setText(value: string) : void;
    /**
     * Gets and sets the html string which contains data and some formats in this shape.
     */
    getHtmlString() : string;
    /**
     * Gets and sets the html string which contains data and some formats in this shape.
     * @param value - The value to set.
     */
    setHtmlString(value: string) : void;
    /**
     * Sets the preset WordArt style.
     * @param style - The preset WordArt style.
     */
    setWordArtStyle(style: PresetWordArtStyle) : void;
    /**
     * Gets the enumerator of the paragraphs.
     */
    getParagraphEnumerator() : TextParagraphEnumerator;
    /**
     * Appends the text.
     * @param text - The text.
     */
    appendText(text: string) : void;
    /**
     * Insert index at the position.
     * @param index - The start index.
     * @param text - The text.
     */
    insertText(index: number, text: string) : void;
    /**
     * Replace the text.
     * @param index - The start index.
     * @param count - The count of characters.
     * @param text - The text.
     */
    replace(index: number, count: number, text: string) : void;
    /**
     * Replace the text.
     * @param oldValue - The old text.
     * @param newValue - The new text.
     */
    replace(oldValue: string, newValue: string) : void;
    /**
     * Delete some characters.
     * @param index - The start index.
     * @param count - The count of characters.
     */
    deleteText(index: number, count: number) : void;
    /**
     * Format the text with font setting.
     * @param startIndex - The start index.
     * @param length - The length.
     * @param font - The font.
     * @param flag - The flags of the font.
     */
    format(startIndex: number, length: number, font: Font, flag: StyleFlag) : void;
    /**
     * Clear all setting.
     */
    clear() : void;
    /**
     */
    getHashCode() : number;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents the data validation alert style.
 */
export enum ValidationAlertType {
    /**
     * Information alert style.
     */
    Information = 0,
    /**
     * Stop alert style.
     */
    Stop = 1,
    /**
     * Warning alert style.
     */
    Warning = 2,
}

/**
 * Represents data validation collection.
 */
export class ValidationCollection {
    /**
     * Gets the <see cref="Validation"/> element at the specified index.
     * @param index - The zero based index of the element.
     * @returns
     * The element at the specified index.
     */
    get(index: number) : Validation;
    /**
     * Adds a data validation to the collection.
     * @param ca - The area contains this validation.
     * @returns
     * <see cref="Validation"/> object index.
     */
    add(ca: CellArea) : number;
    /**
     * Removes all validation setting on the cell.
     * @param row - The row index of the cell.
     * @param column - The column index of the cell.
     */
    removeACell(row: number, column: number) : void;
    /**
     * Removes all validation setting on the range..
     * @param ca - The range which contains the validations setting.
     */
    removeArea(ca: CellArea) : void;
    /**
     * Gets the validation applied to given cell.
     * @param row - The row index.
     * @param column - The column index.
     * @returns
     * Returns a <see cref="Validation"/> object or null if there is no validation for given cell
     */
    getValidationInCell(row: number, column: number) : Validation;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents data validation type.
 */
export enum ValidationType {
    /**
     * Any value validation type.
     */
    AnyValue = 0,
    /**
     * Whole number validation type.
     */
    WholeNumber = 1,
    /**
     * Decimal validation type.
     */
    Decimal = 2,
    /**
     * List validation type.
     */
    List = 3,
    /**
     * Date validation type.
     */
    Date = 4,
    /**
     * Time validation type.
     */
    Time = 5,
    /**
     * Text length validation type.
     */
    TextLength = 6,
    /**
     * Custom validation type.
     */
    Custom = 7,
}

/**
 * Represents the view type of the worksheet.
 */
export enum ViewType {
    /**
     */
    NormalView = 0,
    /**
     */
    PageBreakPreview = 1,
    /**
     */
    PageLayoutView = 2,
}

/**
 * Encapsulates the object that represents a vertical page break.
 */
export class VerticalPageBreak {
    /**
     * Gets the start row index of the vertical page break.
     */
    getStartRow() : number;
    /**
     * Gets the end row index of the vertical page break.
     */
    getEndRow() : number;
    /**
     * Gets the column index of the vertical page break.
     */
    getColumn() : number;
}

/**
 * Encapsulates a collection of <see cref="VerticalPageBreak"/> objects.
 */
export class VerticalPageBreakCollection {
    /**
     * Gets the <see cref="VerticalPageBreak"/> element at the specified index.
     * @param index - The zero based index of the element.
     * @returns
     * The element at the specified index.
     */
    get(index: number) : VerticalPageBreak;
    /**
     * Gets the <see cref="VerticalPageBreak"/> element with the specified cell name.
     * @param cellName - Cell name.
     * @returns
     * The element with the specified cell name.
     */
    get(cellName: string) : VerticalPageBreak;
    /**
     * Adds a vertical page break to the collection.
     * @param startRow - Start row index, zero based.
     * @param endRow - End row index, zero based.
     * @param column - Column index, zero based.
     * @returns
     * <see cref="VerticalPageBreak"/> object index.
     * 
     * @remarks
     * This method is used to add a vertical pagebreak within a print area.
     */
    add(startRow: number, endRow: number, column: number) : number;
    /**
     * Adds a vertical page break to the collection.
     * @param column - Cell column index, zero based.
     * @returns
     * <see cref="VerticalPageBreak"/> object index.
     * 
     * @remarks
     * Page break is added in the top left of the cell.
     * Please set a horizontal page break and a vertical page break concurrently.
     */
    add(column: number) : number;
    /**
     * Adds a vertical page break to the collection.
     * @param row - Cell row index, zero based.
     * @param column - Cell column index, zero based.
     * @returns
     * <see cref="VerticalPageBreak"/> object index.
     * 
     * @remarks
     * Page break is added in the top left of the cell.
     * Please set a horizontal page break and a vertical page break concurrently.
     */
    add(row: number, column: number) : number;
    /**
     * Adds a vertical page break to the collection.
     * @param cellName - Cell name.
     * @returns
     * <see cref="VerticalPageBreak"/> object index.
     * 
     * @remarks
     * Page break is added in the top left of the cell.
     * Please set a horizontal page break and a vertical page break concurrently.
     */
    add(cellName: string) : number;
    /**
     * Removes the VPageBreak element at a specified name.
     * @param index - Element index, zero based.
     */
    removeAt(index: number) : void;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Encapsulates the object that represents the walls of a 3-D chart.
 */
export class Walls extends Floor {
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: Floor);
    /**
     * Gets the x coordinate of the left-bottom corner of Wall center in units of 1/4000 of chart's width after calls Chart.Calculate() method.
     */
    getCenterX() : number;
    /**
     * Gets the y coordinate of the left-bottom corner of Wall center in units of 1/4000 of chart's height after calls Chart.Calculate() method.
     */
    getCenterY() : number;
    /**
     * Gets the width of left to right in units of 1/4000 of chart's width after calls Chart.Calculate() method.
     */
    getWidth() : number;
    /**
     * Gets the depth front to back in units of 1/4000 of chart's width after calls Chart.Calculate() method.
     */
    getDepth() : number;
    /**
     * Gets the height of top to bottom in units of 1/4000 of chart's height after calls Chart.Calculate() method.
     */
    getHeight() : number;
    /**
     * Gets the x coordinate of the left-bottom corner of Wall center in units of pixels after calls Chart.Calculate() method.
     */
    getCenterXPx() : number;
    /**
     * Gets the y coordinate of the left-bottom corner of Wall center in units of pixels after calls Chart.Calculate() method.
     */
    getCenterYPx() : number;
    /**
     * Gets the width of left to right in units of pixels after calls Chart.Calculate() method.
     */
    getWidthPx() : number;
    /**
     * Gets the depth front to back in units of pixels after calls Chart.Calculate() method.
     */
    getDepthPx() : number;
    /**
     * Gets the height of top to bottom in units of pixels after calls Chart.Calculate() method.
     */
    getHeightPx() : number;
    /**
     * Gets the number of cube points after calls Chart.Calculate() method.
     */
    getCubePointCount() : number;
    /**
     * Gets x-coordinate of the apex point of walls cube after calls Chart.Calculate() method.
     * The number of apex points of walls cube is eight
     */
    getCubePointXPx(index: number) : number;
    /**
     * Gets y-coordinate of the apex point of walls cube after calls Chart.Calculate() method.
     * The number of apex points of walls cube is eight.
     */
    getCubePointYPx(index: number) : number;
}

/**
 * Enumerates the weight types for a picture border or a chart line.
 */
export enum WeightType {
    /**
     * Represents the weight of hair line.
     */
    HairLine = -1,
    /**
     * Represents the weight of medium line.
     */
    MediumLine = 1,
    /**
     * Represents the weight of single line.
     */
    SingleLine = 0,
    /**
     * Represents the weight of wide line.
     */
    WideLine = 2,
}

/**
 * Represents the states for sheet visibility.
 */
export enum VisibilityType {
    /**
     * Indicates the sheet is visible.
     */
    Visible = 0,
    /**
     * Indicates the sheet is hidden, but can be shown by the user via the user interface.
     */
    Hidden = 1,
    /**
     * Indicates the sheet is hidden and cannot be shown in the user interface (UI).
     * This state is only available programmatically.
     */
    VeryHidden = 2,
}

/**
 * Represents the options for saving xlsb file.
 */
export class XlsbSaveOptions extends SaveOptions {
    /**
     * Creates xlsb file save options.
     */
    constructor();
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: SaveOptions);
    /**
     * Gets and sets the compression type for ooxml file.
     * 
     * @remarks
     * The default value is OoxmlCompressionType.Level6.
     */
    getCompressionType() : OoxmlCompressionType;
    /**
     * Gets and sets the compression type for ooxml file.
     * @param value - The value to set.
     * 
     * @remarks
     * The default value is OoxmlCompressionType.Level6.
     */
    setCompressionType(value: OoxmlCompressionType) : void;
    /**
     * Indicates whether exporting all column indexes for cells.
     * 
     * @remarks
     * The default value is true.
     */
    getExportAllColumnIndexes() : boolean;
    /**
     * Indicates whether exporting all column indexes for cells.
     * @param value - The value to set.
     * 
     * @remarks
     * The default value is true.
     */
    setExportAllColumnIndexes(value: boolean) : void;
    /**
     * The data provider for saving workbook in light mode.
     */
    getLightCellsDataProvider() : LightCellsDataProvider;
    /**
     * The data provider for saving workbook in light mode.
     * @param value - The value to set.
     */
    setLightCellsDataProvider(value: LightCellsDataProvider) : void;
}

/**
 * Represents the save options for the Excel 97-2003 file format: xls and xlt.
 */
export class XlsSaveOptions extends SaveOptions {
    /**
     * Creates options for saving Excel 97-2003 xls file.
     */
    constructor();
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: SaveOptions);
    /**
     * Creates options for saving Excel 97-2003 xls/xlt file.
     * @param saveFormat - The file format.         /// It should be <see cref="SaveFormat.Excel97To2003"/> or <see cref="SaveFormat.Xlt"/>,         /// otherwise the saved format will be set as <see cref="SaveFormat.Excel97To2003"/> automatically.
     */
    constructor(saveFormat: SaveFormat);
    /**
     * The data provider for saving workbook in light mode.
     */
    getLightCellsDataProvider() : LightCellsDataProvider;
    /**
     * The data provider for saving workbook in light mode.
     * @param value - The value to set.
     */
    setLightCellsDataProvider(value: LightCellsDataProvider) : void;
    /**
     * Indicates whether matching font color because there are 56 colors in the standard color palette.
     */
    getMatchColor() : boolean;
    /**
     * Indicates whether matching font color because there are 56 colors in the standard color palette.
     * @param value - The value to set.
     */
    setMatchColor(value: boolean) : void;
}

/**
 * Represents the options of saving office open xml file.
 */
export class OoxmlSaveOptions extends SaveOptions {
    /**
     * Creates the options for saving office open xml file.
     */
    constructor();
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: SaveOptions);
    /**
     * Creates the options for saving office open xml file.
     * @param saveFormat - The file format.         /// It should be one of following types: <see cref="SaveFormat.Xlsx"/>, <see cref="SaveFormat.Xltx"/>,         /// <see cref="SaveFormat.Xlam"/>, <see cref="SaveFormat.Xlsm"/> or <see cref="SaveFormat.Xltm"/>,         /// otherwise the saved format will be set as <see cref="SaveFormat.Xlsx"/> automatically.
     */
    constructor(saveFormat: SaveFormat);
    /**
     * Indicates if export cell name to Excel2007 .xlsx (.xlsm, .xltx, .xltm) file.
     * If the output file may be accessed by SQL Server DTS, this value must be true.
     * Setting the value to false will highly increase the performance and reduce the file size when creating large file.
     * Default value is true.
     */
    getExportCellName() : boolean;
    /**
     * Indicates if export cell name to Excel2007 .xlsx (.xlsm, .xltx, .xltm) file.
     * If the output file may be accessed by SQL Server DTS, this value must be true.
     * Setting the value to false will highly increase the performance and reduce the file size when creating large file.
     * Default value is true.
     * @param value - The value to set.
     */
    setExportCellName(value: boolean) : void;
    /**
     * The data provider for saving workbook in light mode.
     */
    getLightCellsDataProvider() : LightCellsDataProvider;
    /**
     * The data provider for saving workbook in light mode.
     * @param value - The value to set.
     */
    setLightCellsDataProvider(value: LightCellsDataProvider) : void;
    /**
     * Indicates whether update scaling factor before saving the file
     * if the PageSetup.FitToPagesWide and PageSetup.FitToPagesTall properties control how the worksheet is scaled.
     * 
     * @remarks
     * The default value is false for performance.
     */
    getUpdateZoom() : boolean;
    /**
     * Indicates whether update scaling factor before saving the file
     * if the PageSetup.FitToPagesWide and PageSetup.FitToPagesTall properties control how the worksheet is scaled.
     * @param value - The value to set.
     * 
     * @remarks
     * The default value is false for performance.
     */
    setUpdateZoom(value: boolean) : void;
    /**
     * Always use ZIP64 extensions when writing zip archives, even when unnecessary.
     */
    getEnableZip64() : boolean;
    /**
     * Always use ZIP64 extensions when writing zip archives, even when unnecessary.
     * @param value - The value to set.
     */
    setEnableZip64(value: boolean) : void;
    /**
     * Indicates whether embedding Ooxml files of OleObject as ole object.
     * 
     * @remarks
     * Only for OleObject.
     */
    getEmbedOoxmlAsOleObject() : boolean;
    /**
     * Indicates whether embedding Ooxml files of OleObject as ole object.
     * @param value - The value to set.
     * 
     * @remarks
     * Only for OleObject.
     */
    setEmbedOoxmlAsOleObject(value: boolean) : void;
    /**
     * Gets and sets the compression type for ooxml file.
     * 
     * @remarks
     * The default value is OoxmlCompressionType.Level2.
     */
    getCompressionType() : OoxmlCompressionType;
    /**
     * Gets and sets the compression type for ooxml file.
     * @param value - The value to set.
     * 
     * @remarks
     * The default value is OoxmlCompressionType.Level2.
     */
    setCompressionType(value: OoxmlCompressionType) : void;
}

/**
 * Represents the additional options when saving the file as the Xps.
 */
export class XpsSaveOptions extends PaginatedSaveOptions {
    /**
     * Creates options for saving xps file.
     */
    constructor();
    /**
     * Constructs from a parent object convertible to this.
     * @param obj - The parent object.
     */
    constructor(obj: PaginatedSaveOptions);
}

/**
 * Represents Xml Data Binding information.
 */
export class XmlDataBinding {
    /**
     * Gets source url of this data binding.
     */
    getUrl() : string;
}

/**
 * Represents Xml map information.
 */
export class XmlMap {
    /**
     * Returns or sets the name of the object.
     */
    getName() : string;
    /**
     * Returns or sets the name of the object.
     * @param value - The value to set.
     */
    setName(value: string) : void;
    /**
     * Gets root element name.
     */
    getRootElementName() : string;
    /**
     * Gets an <see cref="XmlDataBinding"/> of this map.
     */
    getDataBinding() : XmlDataBinding;
}

/**
 * A collection of <see cref="XmlMap"/> objects that represent XmlMap information.
 */
export class XmlMapCollection {
    /**
     * Gets the xml map by the specific index.
     * @param index - The index.
     * @returns
     * The xml map
     */
    get(index: number) : XmlMap;
    /**
     * Add a <see cref="XmlMap"/> by the url/path of a xml/xsd file.
     * @param url - url/path of a xml/xsd file.
     * @returns
     * <see cref="XmlMap"/> object index.
     */
    add(url: string) : number;
    /**
     * Removes all XmlMaps.
     */
    clear() : void;
    /**
     * Gets the number of elements contained in.
     */
     getCount() : number;
}

/**
 * Represents supported encoding types.
 */
export enum EncodingType {
    /**
     * Default encoding type.
     */
    Default = 0,
    /**
     * ASCII encoding type.
     */
    ASCII = 1,
    /**
     * UTF8 encoding type.
     */
    UTF8 = 2,
    /**
     * Little-endian Unicode encoding type.
     */
    Unicode = 3,
    /**
     * Big-endian Unicode encoding type.
     */
    UnicodeBE = 4,
}

/**
 * Represent an area of cells.
 */
export class CellArea {
    /**
     * Gets or sets the start row of this area.
     */
    startRow: number;
    /**
     * Gets or sets the end row of this area.
     */
    endRow: number;
    /**
     * Gets or sets the start column of this area.
     */
    startColumn: number;
    /**
     * Gets or sets the end column of this area.
     */
    endColumn: number;
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Returns a string represents the current cell area object.
     */
    toString() : string;
    /**
     * Creates a cell area.
     * @param startRow - The start row.
     * @param startColumn - The start column.
     * @param endRow - The end row.
     * @param endColumn - The end column.
     * @returns
     * Return a <see cref="CellArea"/>.
     */
    static createCellArea(startRow: number, startColumn: number, endRow: number, endColumn: number) : CellArea;
    /**
     * Creates a cell area.
     * @param startCellName - The top-left cell of the range.
     * @param endCellName - The bottom-right cell of the range.
     * @returns
     * Return a <see cref="CellArea"/>.
     */
    static createCellArea(startCellName: string, endCellName: string) : CellArea;
}

/**
 * Represents an ARGB (alpha, red, green, blue) color.
 */
export class Color {
    /**
     * Gets or sets the alpha component value of this Color class.
     */
    a: number;
    /**
     * Gets or sets the red component value of this Color class.
     */
    r: number;
    /**
     * Gets or sets the green component value of this Color class.
     */
    g: number;
    /**
     * Gets or sets the blue component value of this Color class.
     */
    b: number;
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Constructs a Color object from the specified 8-bit color values (red, green, and blue).
     * @param r - The red component value(0~255).
     * @param g - The green component value(0~255).
     * @param b - The blue component value(0~255).
     */
    constructor(r: number, g: number, b: number);
    /**
     * Constructs a Color object from the four ARGB component (alpha, red, green, and blue) values.
     * @param a - The alpha component value(0~255).
     * @param r - The red component value(0~255).
     * @param g - The green component value(0~255).
     * @param b - The blue component value(0~255).
     */
    constructor(a: number, r: number, g: number, b: number);
    /**
     * Determines whether the specified color is equal to the current color.
     * @param color - An color to compare with this color.
     * @returns
     * true if the current color is equal to other; otherwise, false.
     */
    equals(color: Color): boolean;
}

/**
 * Base class.
 */
export class IObject {
}

/**
 * Provides methods to license the component.
 */
export class License {
    /**
     * Initializes a new instance of this class.
     */
    constructor();
    /**
     * Licenses the component.
     * @param licenseName - The license file path.
     */
    setLicense(licenseName: string): void;
    /**
     * Licenses the component.
     * @param stream - A stream that contains the license.
     */
    setLicense(stream: Uint8Array): void;
}

/**
 * Iterator of TextParagraph objects. Please use for...of statement to iterate over them.
 */
export class TextParagraphEnumerator implements Iterable<TextParagraph> {
    [Symbol.iterator](): Iterator<TextParagraph>;
}

/**
 * Iterator of ReferredArea objects. Please use for...of statement to iterate over them.
 */
export class ReferredAreaEnumerator implements Iterable<ReferredArea> {
    [Symbol.iterator](): Iterator<ReferredArea>;
}

/**
 * Iterator of Cell objects. Please use for...of statement to iterate over them.
 */
export class CellEnumerator implements Iterable<Cell> {
    [Symbol.iterator](): Iterator<Cell>;
}

/**
 * Iterator of Row objects. Please use for...of statement to iterate over them.
 */
export class RowEnumerator implements Iterable<Row> {
    [Symbol.iterator](): Iterator<Row>;
}

/**
 * Iterator of DigitalSignature objects. Please use for...of statement to iterate over them.
 */
export class DigitalSignatureEnumerator implements Iterable<DigitalSignature> {
    [Symbol.iterator](): Iterator<DigitalSignature>;
}

/**
 * Iterator of PivotField objects. Please use for...of statement to iterate over them.
 */
export class PivotFieldEnumerator implements Iterable<PivotField> {
    [Symbol.iterator](): Iterator<PivotField>;
}

/**
 * Iterator of PivotItem objects. Please use for...of statement to iterate over them.
 */
export class PivotItemEnumerator implements Iterable<PivotItem> {
    [Symbol.iterator](): Iterator<PivotItem>;
}

/**
 * Iterator of ChartPoint objects. Please use for...of statement to iterate over them.
 */
export class ChartPointEnumerator implements Iterable<ChartPoint> {
    [Symbol.iterator](): Iterator<ChartPoint>;
}

/**
 * Iterator of ExternalLink objects. Please use for...of statement to iterate over them.
 */
export class ExternalLinkEnumerator implements Iterable<ExternalLink> {
    [Symbol.iterator](): Iterator<ExternalLink>;
}

